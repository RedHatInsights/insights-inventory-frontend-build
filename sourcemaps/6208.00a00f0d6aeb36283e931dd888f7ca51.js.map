{"version":3,"file":"js/6208.1666101163132.b243019e300bd54a6edd.js","mappings":"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","sources":["webpack:///./src/Utilities/OperatingSystemFilterHelpers.js","webpack:///./src/modules/OsFilterHelpers.js"],"sourcesContent":["import set  from 'lodash/set';\nimport omit  from 'lodash/omit';\nimport mapValues  from 'lodash/mapValues';\nimport { coerce, compare, rcompare } from 'semver';\nimport { OS_CHIP } from './constants';\n\nexport const updateGroupSelectionIdentifier = (selection, major) =>\n    // if every minor version is selected, then mark the group as selected\n    set(selection, [major, major], Object.values({ ...selection[major] }).filter(v => v !== major).every(Boolean));\n\n/** Takes an array of string versions `value` and returns an object in the format\n * required by ConditionalFilter component (group filter); */\nexport const toGroupSelection = (value = [], availableVersions) =>\n    (availableVersions === undefined ? value : availableVersions).reduce(\n        (acc, version) => {\n            const [major] = version.split('.');\n            set(acc, [major, version], value.includes(version));\n            updateGroupSelectionIdentifier(acc, major);\n            return acc;\n        },\n        {}\n    );\n\nexport const compareVersions = (a, b, asc = true) =>\n    asc ? compare(coerce(a), coerce(b)) : rcompare(coerce(a), coerce(b));\n\n/** Extracts enabled OS filter values from ConditionalFilter-like object */\nexport const getSelectedOsFilterVersions = (selected = {}) =>\n    Object.values(selected).reduce((acc, versions) => {\n        Object.entries(versions).forEach(\n            ([version, enabled]) =>\n                enabled && version.match(/[0-9]+.[0-9]+/) && acc.push(version)\n        );\n        return acc;\n    }, []);\n\nexport const groupOSFilterVersions = (versions = []) => {\n    const groups = Object.entries(\n        versions.reduce((prev, { label, value }) => {\n            const major = value.split('.')[0];\n\n            if (prev[major] === undefined) {\n                prev[major] = {\n                    groupSelectable: true, // without this flag, the group won't be rendered - behavior of ConditionalFilter\n                    label: 'RHEL ' + major,\n                    value: major,\n                    type: 'checkbox',\n                    items: []\n                };\n            }\n\n            prev[major].items.push({\n                label,\n                value,\n                type: 'checkbox'\n            });\n\n            return prev;\n        }, {})\n    );\n\n    // sort by major versions in descending order\n    groups.sort((a, b) => compareVersions(a[0], b[0], false));\n\n    const sorted = groups.map((group) => {\n        // sort minor versions under each group\n        group[1].items.sort((a, b) => compareVersions(a.value, b.value, false));\n        return group[1];\n    });\n\n    return sorted;\n};\n\nexport const buildOSFilterChip = (operatingSystemValue = {}, operatingSystems = []) => {\n    const minors = getSelectedOsFilterVersions(operatingSystemValue);\n    const chips = operatingSystems\n    .filter(({ value }) => minors.includes(value))\n    .map(({ label, ...props }) => ({ name: label, ...props }));\n\n    return minors?.length > 0\n        ? [\n            {\n                category: 'Operating System',\n                type: OS_CHIP,\n                chips\n            }\n        ]\n        : [];\n};\n\nexport const onOSFilterChange = (event, selection, clickedGroup, clickedItem) => {\n    const newSelection = Object.assign({}, selection);\n    const value = newSelection[clickedGroup.value][clickedItem.value];\n    const major = clickedGroup.value;\n\n    if (clickedItem.value === major) {\n        // group checkbox clicked => update all minor version selections\n        newSelection[major] = mapValues(newSelection[major], () => value);\n    } else {\n        newSelection[major][major] = Object.values(omit(newSelection[major], major)).every(Boolean);\n    }\n\n    return newSelection;\n};\n","import { compareVersions } from '../Utilities/OperatingSystemFilterHelpers';\n\nexport * from '../Utilities/OperatingSystemFilterHelpers';\n\n/**\n * TODO: Deprecated, remove once no longer exposed through fed modules\n */\nexport const toGroupSelectionValue = (osVersions = []) => osVersions.reduce((acc, version) => {\n    const [majorVersion, minorVersion] = version.split('.');\n    acc[`${majorVersion}.0`] = {\n        ...(acc[`${majorVersion}.0`] || {}),\n        [`${majorVersion}.${minorVersion}`]: true\n    };\n    return acc;\n}, {});\n\n/**\n * TODO: Deprecated, remove once no longer exposed through fed modules\n */\nconst groupOSVersions = (versions) => {\n    const groups = Object.entries(\n        versions.reduce((prev, { label, value }) => {\n            const major = value.split('.')[0];\n\n            if (prev[major] === undefined) {\n                prev[major] = {\n                    groupSelectable: true, // without this flag, the group won't be rendered - behavior of ConditionalFilter\n                    noFilter: true,\n                    label: 'RHEL ' + major,\n                    value: major + '.0',\n                    items: []\n                };\n            }\n\n            prev[major].items.push({\n                label,\n                value,\n                type: 'checkbox'\n            });\n\n            return prev;\n        }, {})\n    );\n\n    // sort by major versions in descending order\n    groups.sort((a, b) => compareVersions(a[0], b[0], false));\n\n    const sorted = groups.map((group) => {\n        // sort minor versions under each group\n        group[1].items.sort((a, b) => compareVersions(a.value, b.value, false));\n        return group[1];\n    });\n\n    return sorted;\n};\n\n/**\n * TODO: Deprecated, remove once no longer exposed through fed modules\n */\nexport const buildOSFilterConfig = (config = {}, operatingSystems = []) => ({\n    ...config,\n    label: 'Operating System',\n    value: 'os-filter',\n    type: 'group',\n    filterValues: {\n        selected: config.value,\n        onChange: (event, value) =>\n            config.onChange(event, Object.entries(value).reduce((prev, cur) => {\n                const [major, minors] = cur;\n                // eliminate versions that are set to false\n                return { ...prev, [major]: Object.fromEntries(Object.entries(minors).filter((version) => version[1] === true)) };\n            }, {})),\n        groups: groupOSVersions(operatingSystems)\n    }\n});\n"],"names":["updateGroupSelectionIdentifier","selection","major","set","Object","values","filter","v","every","Boolean","toGroupSelection","value","availableVersions","undefined","reduce","acc","version","split","includes","compareVersions","a","b","asc","compare","coerce","rcompare","getSelectedOsFilterVersions","selected","versions","entries","forEach","match","push","groupOSFilterVersions","groups","prev","label","groupSelectable","type","items","sort","sorted","map","group","buildOSFilterChip","operatingSystemValue","operatingSystems","minors","chips","name","length","category","OS_CHIP","onOSFilterChange","event","clickedGroup","clickedItem","newSelection","assign","mapValues","omit","toGroupSelectionValue","osVersions","majorVersion","minorVersion","groupOSVersions","noFilter","buildOSFilterConfig","config","filterValues","onChange","cur","fromEntries"],"sourceRoot":""}