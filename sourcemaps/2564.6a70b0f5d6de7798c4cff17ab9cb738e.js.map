{"version":3,"file":"js/2564.1669817149244.61858ed3318d351ac242.js","mappings":"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","sources":["webpack:///./src/Utilities/OperatingSystemFilterHelpers.js","webpack:///./src/components/InventoryDetail/helpers.js","webpack:///./src/components/InventoryDetail/SystemNotFound.js","webpack:///./src/components/InventoryDetail/TopBar.js","webpack:///./src/components/InventoryDetail/FactsInfo.js","webpack:///./src/components/InventoryDetail/ApplicationDetails.js","webpack:///./src/components/InventoryDetail/InsightsPrompt.js","webpack:///./src/components/InventoryDetail/InventoryDetail.js","webpack:///./src/components/InventoryDetail/AppInfo.js","webpack:///./src/components/InventoryDetail/FullDetail.js","webpack:///./src/components/InventoryDetailDrawer/BasicInfo.js","webpack:///./src/components/InventoryDetailDrawer/SystemIssues.js","webpack:///./src/components/InventoryDetail/DetailWrapper.js","webpack:///./src/components/InventoryTable/helpers.js","webpack:///./src/components/InventoryTable/EntityTableToolbar.js","webpack:///./src/components/InventoryTable/NoSystemsTable.js","webpack:///./src/components/InventoryTable/EntityTable.js","webpack:///./src/components/InventoryTable/hooks/useColumns.js","webpack:///./src/Utilities/AccessDenied.js","webpack:///./src/components/InventoryTable/InventoryList.js","webpack:///./src/components/InventoryTable/Pagination.js","webpack:///./src/components/InventoryTable/InventoryTable.js","webpack:///./src/components/InventoryDetail/DetailRenderer.js","webpack:///./src/Utilities/inventoryConnector.js","webpack:///./src/components/filters/useTextFilter.js","webpack:///./src/components/filters/useStalenessFilter.js","webpack:///./src/components/filters/useRegisteredWithFilter.js","webpack:///./src/components/filters/useTagsFilter.js","webpack:///./src/components/filters/useRhcdFilter.js","webpack:///./src/components/filters/useUpdateMethodFilter.js","webpack:///./src/components/filters/index.js","webpack:///./src/components/filters/useOperatingSystemFilter.js"],"sourcesContent":["import set  from 'lodash/set';\nimport omit  from 'lodash/omit';\nimport mapValues  from 'lodash/mapValues';\nimport { coerce, compare, rcompare } from 'semver';\nimport { OS_CHIP } from './constants';\n\nexport const updateGroupSelectionIdentifier = (selection, major) =>\n    // if every minor version is selected, then mark the group as selected\n    set(selection, [major, major], Object.values({ ...selection[major] }).filter(v => v !== major).every(Boolean));\n\n/** Takes an array of string versions `value` and returns an object in the format\n * required by ConditionalFilter component (group filter); */\nexport const toGroupSelection = (value = [], availableVersions) =>\n    (availableVersions === undefined ? value : availableVersions).reduce(\n        (acc, version) => {\n            const [major] = version.split('.');\n            set(acc, [major, version], value.includes(version));\n            updateGroupSelectionIdentifier(acc, major);\n            return acc;\n        },\n        {}\n    );\n\nexport const compareVersions = (a, b, asc = true) =>\n    asc ? compare(coerce(a), coerce(b)) : rcompare(coerce(a), coerce(b));\n\n/** Extracts enabled OS filter values from ConditionalFilter-like object */\nexport const getSelectedOsFilterVersions = (selected = {}) =>\n    Object.values(selected).reduce((acc, versions) => {\n        Object.entries(versions).forEach(\n            ([version, enabled]) =>\n                enabled && version.match(/[0-9]+.[0-9]+/) && acc.push(version)\n        );\n        return acc;\n    }, []);\n\nexport const groupOSFilterVersions = (versions = []) => {\n    const groups = Object.entries(\n        versions.reduce((prev, { label, value }) => {\n            const major = value.split('.')[0];\n\n            if (prev[major] === undefined) {\n                prev[major] = {\n                    groupSelectable: true, // without this flag, the group won't be rendered - behavior of ConditionalFilter\n                    label: 'RHEL ' + major,\n                    value: major,\n                    type: 'checkbox',\n                    items: []\n                };\n            }\n\n            prev[major].items.push({\n                label,\n                value,\n                type: 'checkbox'\n            });\n\n            return prev;\n        }, {})\n    );\n\n    // sort by major versions in descending order\n    groups.sort((a, b) => compareVersions(a[0], b[0], false));\n\n    const sorted = groups.map((group) => {\n        // sort minor versions under each group\n        group[1].items.sort((a, b) => compareVersions(a.value, b.value, false));\n        return group[1];\n    });\n\n    return sorted;\n};\n\nexport const buildOSFilterChip = (operatingSystemValue = {}, operatingSystems = []) => {\n    const minors = getSelectedOsFilterVersions(operatingSystemValue);\n    const chips = operatingSystems\n    .filter(({ value }) => minors.includes(value))\n    .map(({ label, ...props }) => ({ name: label, ...props }));\n\n    return minors?.length > 0\n        ? [\n            {\n                category: 'Operating System',\n                type: OS_CHIP,\n                chips\n            }\n        ]\n        : [];\n};\n\nexport const onOSFilterChange = (event, selection, clickedGroup, clickedItem) => {\n    const newSelection = Object.assign({}, selection);\n    const value = newSelection[clickedGroup.value][clickedItem.value];\n    const major = clickedGroup.value;\n\n    if (clickedItem.value === major) {\n        // group checkbox clicked => update all minor version selections\n        newSelection[major] = mapValues(newSelection[major], () => value);\n    } else {\n        newSelection[major][major] = Object.values(omit(newSelection[major], major)).every(Boolean);\n    }\n\n    return newSelection;\n};\n","import get from 'lodash/get';\n\nexport const redirectToInventoryList = (id, onBackToListClick) => {\n    if (onBackToListClick) {\n        onBackToListClick();\n    } else {\n        /**\n         * Prevent the case that refferer has the same URL as current browser URL is\n         */\n        if (document.referrer && document.referrer !== `${document.location.origin}${document.location.pathname}`) {\n            history.back();\n        } else {\n            location.href = location.pathname.replace(new RegExp(`${[id]}.*`, 'g'), '');\n        }\n    }\n};\n\nexport const getFact = (path, factDict) => get(factDict, path, undefined);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    EmptyState,\n    EmptyStateVariant,\n    EmptyStateIcon,\n    EmptyStateBody,\n    Title,\n    Button\n} from '@patternfly/react-core';\nimport CubesIcon from '@patternfly/react-icons/dist/js/icons/cubes-icon';\nimport { redirectToInventoryList } from './helpers';\n\n/**\n * Empty state when system was not found in inventory.\n * @param {*} params - inventoryId and onBackToListClick.\n */\nconst SystemNotFound = ({ inventoryId, onBackToListClick }) => {\n    return <EmptyState variant={EmptyStateVariant.full}>\n        <EmptyStateIcon icon={CubesIcon} />\n        <Title headingLevel=\"h5\" size=\"lg\">\n                System not found\n        </Title>\n        <EmptyStateBody>\n                System with ID {inventoryId} does not exist\n        </EmptyStateBody>\n        <Button\n            variant=\"primary\"\n            onClick={() => redirectToInventoryList(inventoryId, onBackToListClick)}\n        >\n                Back to previous page\n        </Button>\n    </EmptyState>;\n};\n\nSystemNotFound.propTypes = {\n    inventoryId: PropTypes.string,\n    onBackToListClick: PropTypes.func\n};\n\nexport default SystemNotFound;\n","import React, { Fragment, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { DeleteModal, TagsModal, TagWithDialog } from '../../Utilities/index';\nimport { Skeleton, SkeletonSize } from '@redhat-cloud-services/frontend-components/Skeleton';\nimport {\n    Dropdown,\n    DropdownItem,\n    DropdownPosition,\n    DropdownToggle,\n    Title,\n    Button,\n    Flex,\n    FlexItem,\n    Split,\n    SplitItem\n} from '@patternfly/react-core';\nimport { redirectToInventoryList } from './helpers';\nimport { useDispatch } from 'react-redux';\nimport { toggleDrawer } from '../../store/actions';\n\n/**\n * Top inventory bar with title, buttons (namely remove from inventory and inventory detail button) and actions.\n * Remove from inventory button requires remove modal, which is included at bottom of this component.\n * @param {*} props namely entity and if entity is loaded.\n */\nconst TopBar = ({\n    entity,\n    loaded,\n    actions,\n    deleteEntity,\n    addNotification,\n    hideInvLink,\n    onBackToListClick,\n    showDelete,\n    showInventoryDrawer,\n    TitleWrapper,\n    TagsWrapper,\n    DeleteWrapper,\n    ActionsWrapper,\n    showTags\n}) => {\n    const dispatch = useDispatch();\n    const [isOpen, setIsOpen] = useState(false);\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const inventoryActions = [\n        ...(!hideInvLink ? [{\n            title: 'View system in Inventory',\n            component: 'a',\n            href: `./insights/inventory/${entity?.id}`\n        }] : []),\n        ... actions || []\n    ];\n\n    return (\n        <Split className=\"ins-c-inventory__detail--header\">\n            <SplitItem isFilled>\n                {\n                    loaded ? (\n                        <Flex>\n                            <FlexItem>\n                                <TitleWrapper>\n                                    <Title headingLevel=\"h1\" size='2xl'>{ entity && entity.display_name }</Title>\n                                </TitleWrapper>\n                            </FlexItem>\n                            {\n                                showTags &&\n                                <FlexItem>\n                                    <TagsWrapper>\n                                        <TagWithDialog\n                                            count={ entity && entity.tags && entity.tags.length }\n                                            systemId={ entity && entity.id }\n                                        />\n                                        <TagsModal />\n                                    </TagsWrapper>\n                                </FlexItem>\n                            }\n                        </Flex>\n                    ) :\n                        <Skeleton size={ SkeletonSize.md } />\n                }\n            </SplitItem>\n            {\n                <SplitItem>\n                    {\n                        loaded ?\n                            <Flex>\n                                {showDelete && <FlexItem>\n                                    <DeleteWrapper>\n                                        <Button\n                                            onClick={ () => setIsModalOpen(true) }\n                                            variant=\"secondary\">\n                                        Delete\n                                        </Button>\n                                    </DeleteWrapper>\n                                </FlexItem>}\n                                { inventoryActions?.length > 0 && (\n                                    <FlexItem>\n                                        <ActionsWrapper>\n                                            <Dropdown\n                                                onSelect={ () => setIsOpen(false) }\n                                                toggle={ <DropdownToggle\n                                                    onToggle={(isOpen) => setIsOpen(isOpen)}\n                                                >Actions</DropdownToggle>}\n                                                isOpen={ isOpen }\n                                                position={ DropdownPosition.right }\n                                                dropdownItems={\n                                                    inventoryActions.map(({ title, ...action }, key) => (\n                                                        <DropdownItem\n                                                            key={ key }\n                                                            component=\"button\"\n                                                            onClick={\n                                                                (event) => action.onClick(event, action, action.key || key)\n                                                            }\n                                                            {...action}\n                                                        >\n                                                            { title }\n                                                        </DropdownItem>)\n                                                    ) }\n                                            />\n                                        </ActionsWrapper>\n                                    </FlexItem>)}\n                                <FlexItem>\n                                    {\n                                        showInventoryDrawer &&\n                                        <Button onClick={() => dispatch(toggleDrawer(true))}>\n                                            Show more information\n                                        </Button>\n                                    }\n                                </FlexItem>\n                            </Flex>\n                            :\n                            <Skeleton size={ SkeletonSize.lg } />\n                    }\n                </SplitItem>\n            }\n            { isModalOpen && (\n                <DeleteModal\n                    handleModalToggle={() => setIsModalOpen(!isModalOpen)}\n                    isModalOpen={isModalOpen}\n                    currentSytems={entity}\n                    onConfirm={() => {\n                        addNotification({\n                            id: 'remove-initiated',\n                            variant: 'warning',\n                            title: 'Delete operation initiated',\n                            description: `Removal of ${entity.display_name} started.`,\n                            dismissable: false\n                        });\n                        deleteEntity(\n                            [entity.id],\n                            entity.display_name,\n                            () => redirectToInventoryList(entity.id, onBackToListClick)\n                        );\n                        setIsModalOpen(false);\n                    }}\n                />)}\n        </Split>\n    );\n};\n\nTopBar.propTypes = {\n    entity: PropTypes.object,\n    loaded: PropTypes.bool,\n    showDelete: PropTypes.bool,\n    hideInvLink: PropTypes.bool,\n    showInventoryDrawer: PropTypes.bool,\n    showTags: PropTypes.bool,\n    actions: PropTypes.arrayOf(PropTypes.shape({\n        key: PropTypes.string,\n        title: PropTypes.node,\n        onClick: PropTypes.func\n    })),\n    deleteEntity: PropTypes.func,\n    addNotification: PropTypes.func,\n    onBackToListClick: PropTypes.func,\n    TitleWrapper: PropTypes.elementType,\n    TagsWrapper: PropTypes.elementType,\n    DeleteWrapper: PropTypes.elementType,\n    ActionsWrapper: PropTypes.elementType\n};\n\nTopBar.defaultProps = {\n    actions: [],\n    loaded: false,\n    hideInvLink: false,\n    showDelete: false,\n    showInventoryDrawer: false,\n    deleteEntity: () => undefined,\n    addNotification: () => undefined,\n    onBackToListClick: () => undefined,\n    TitleWrapper: Fragment,\n    TitleWTagsWrapperrapper: Fragment,\n    DeleteWrapper: Fragment,\n    ActionsWrapper: Fragment\n};\n\nexport default TopBar;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { Grid, GridItem, Flex, FlexItem } from '@patternfly/react-core';\nimport { Skeleton, SkeletonSize } from '@redhat-cloud-services/frontend-components/Skeleton';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { CullingInformation } from '@redhat-cloud-services/frontend-components/CullingInfo';\nimport { getFact } from './helpers';\nimport InsightsDisconnected from '../../Utilities/InsightsDisconnected';\nimport { verifyCulledInsightsClient } from '../../Utilities/sharedFunctions';\n/**\n * Basic information about system.\n * UUID and last seen.\n * @param {*} props entity and if entity is loaded.\n */\nconst FactsInfo = ({ entity, loaded, UUIDWrapper, LastSeenWrapper, ...props }) => (\n    <Grid className=\"ins-entity-facts\" { ...props }>\n        <GridItem md={ 6 }>\n            <Flex>\n                <FlexItem>UUID:</FlexItem>\n                <FlexItem grow={{ default: 'grow' }}>\n                    {loaded ? getFact(`id`, entity) || ' ' : <Skeleton size={SkeletonSize.md} fontSize=\"sm\" />}\n                </FlexItem>\n            </Flex>\n            <Flex>\n                <FlexItem>Last seen:</FlexItem>\n                <FlexItem grow={{ default: 'grow' }}>\n                    {\n                        loaded ?\n                            <LastSeenWrapper>{\n                                (\n                                    CullingInformation ? <CullingInformation\n                                        culled={getFact('culled_timestamp', entity)}\n                                        staleWarning={getFact('stale_warning_timestamp', entity)}\n                                        stale={getFact('stale_timestamp', entity)}\n                                        currDate={new Date()}\n                                    >\n                                        <DateFormat date={getFact('updated', entity)} type=\"exact\" />\n                                    </CullingInformation> : <DateFormat date={getFact('updated', entity)} type=\"exact\" />\n                                )}\n                            </LastSeenWrapper> :\n                            <Skeleton size={SkeletonSize.md} fontSize=\"sm\" />\n                    }\n                    {loaded && verifyCulledInsightsClient(getFact('per_reporter_staleness', entity)) && <InsightsDisconnected />}\n                </FlexItem>\n            </Flex>\n        </GridItem>\n    </Grid>\n);\n\nFactsInfo.propTypes = {\n    loaded: PropTypes.bool,\n    entity: PropTypes.object,\n    UUIDWrapper: PropTypes.elementType,\n    LastSeenWrapper: PropTypes.elementType\n};\n\nFactsInfo.defaultProps = {\n    UUIDWrapper: Fragment,\n    LastSeenWrapper: Fragment\n};\n\nexport default FactsInfo;\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useLocation, useHistory } from 'react-router-dom';\nimport { Tabs, Tab } from '@patternfly/react-core';\nimport { detailSelect } from '../../store/actions';\n\n/**\n * Component that renders tabs for each application detail and handles clicking on each item.\n * @param {*} props onTabSelect can be used to notify parent component that detail has been selected.\n */\nconst ApplicationDetails = ({ onTabSelect, appList, ...props }) => {\n    const { search } = useLocation();\n    const history = useHistory();\n    const dispatch = useDispatch();\n    const searchParams = new URLSearchParams(search);\n    const items = useSelector(({ entityDetails }) => entityDetails?.activeApps || [])\n    .filter(({ isVisible }) => isVisible !== false);\n    const activeApp = useSelector(({ entityDetails }) => entityDetails?.activeApp);\n    const disabledApps = useSelector(({ systemProfileStore }) => systemProfileStore?.disabledApps);\n    const defaultApp = activeApp?.appName || appList?.find(({ pageId, name }) => items?.[0]?.name === (\n        pageId || name))?.name || items?.[0]?.name;\n    let applications = appList || items;\n    const [activeTabs, setActiveTabs] = useState(applications);\n\n    useEffect(() => {\n        /**\n         * Initialize first inventory detail type\n         */\n        const appName = searchParams.get('appName');\n        if (appName) {\n            dispatch(detailSelect(appName));\n        }\n    }, []);\n\n    useEffect(() => {\n        const filteredResult = applications.filter(app => !disabledApps?.includes(app.name));\n        if (filteredResult !== 0 && typeof filteredResult !== undefined) {\n            setActiveTabs(filteredResult);\n        }\n        else {\n            setActiveTabs(applications);\n        }\n    }, [disabledApps]);\n\n    return (\n        <React.Fragment>\n            {\n                applications?.length > 1 &&\n                <Tabs\n                    {...props}\n                    activeKey={ defaultApp }\n                    onSelect={ (event, item) => {\n                        const activeItem = activeTabs.find(oneApp => oneApp.name === item);\n                        if (onTabSelect) {\n                            onTabSelect(event, item, activeItem);\n                        } else {\n                            searchParams.set('appName', activeItem.name);\n                            history.push({ search: searchParams.toString() });\n                        }\n\n                        dispatch(detailSelect(activeItem.name));\n                    } }\n                    isFilled\n                    className=\"ins-c-inventory-detail__app-tabs\"\n                >\n                    { activeTabs?.map((item, key) => (\n                        <Tab key={ key } eventKey={ item.name } title={ item.title }></Tab>\n                    )) }\n                </Tabs>\n            }\n        </React.Fragment>\n    );\n};\n\nApplicationDetails.propTypes = {\n    appList: PropTypes.arrayOf(PropTypes.shape({\n        title: PropTypes.node,\n        name: PropTypes.string.isRequired,\n        pageId: PropTypes.string\n    })),\n    onTabSelect: PropTypes.func\n};\n\nexport default ApplicationDetails;\n","import React from 'react';\nimport {\n    Alert, Grid, GridItem, Text, TextContent, TextVariants, TextList, TextListItem,\n    Card, CardTitle, CardFooter, CardBody, ClipboardCopy, Button } from '@patternfly/react-core';\n\nconst InsightsPrompt = () => {\n    return (\n        <Alert variant=\"info\" isInline title=\"Your insights-client is not reporting\">\n            <Grid>\n                <GridItem>\n                    <Grid hasGutter>\n                        <GridItem span={4}>\n                            <TextContent style={{ '--pf-c-content--LineHeight': '1', '--pf-c-content--FontSize': '0.9rem' }}>\n                                <Text component={TextVariants.p}>\n                                    With Insights you can easly:\n                                </Text>\n                                <TextList\n                                    component='ul'\n                                    style={{ '--pf-c-content--ul--PaddingLeft': '0', '--pf-c-content--ul--MarginLeft': '1rem' }}\n                                >\n                                    <TextListItem>Optimize your IT Operations</TextListItem>\n                                    <TextListItem>Manage your security and compliance</TextListItem>\n                                    <TextListItem>Resolve operational issues quickly</TextListItem>\n                                </TextList>\n                            </TextContent>\n                        </GridItem>\n                        <GridItem span={4}>\n                            <Card isCompact>\n                                <CardTitle>Client setup</CardTitle>\n                                <CardBody>Make sure the client is properly installed and registered</CardBody>\n                                <CardFooter>\n                                    <ClipboardCopy isCode isReadOnly variant={'expansion'}>\n                                        {'yum install -y insights-client \\ninsights-client --register'}\n                                    </ClipboardCopy>\n                                </CardFooter>\n                            </Card>\n                        </GridItem>\n                        <GridItem span={4}>\n                            <Card isCompact style={{ height: '100%' }}>\n                                <CardTitle>Configure troubleshooting</CardTitle>\n                                <CardBody>Proceed with verification on the client to ensure insights-client is\n                                    properly running and collecting data</CardBody>\n                                <CardFooter>\n                                    <Button component=\"a\" target=\"_blank\"\n                                        variant=\"link\" href='https://access.redhat.com/solutions/6758841' isInline\n                                    >\n                                        Host not reporting data to Red Hat Insights\n                                    </Button>\n                                </CardFooter>\n                            </Card>\n                        </GridItem>\n                    </Grid>\n                </GridItem>\n                <GridItem>\n                    <Button component=\"a\" target=\"_blank\" variant=\"link\"\n                        href='https://console.redhat.com/security/insights' isInline\n                    >\n                        How does Red Hat keep data secure?\n                    </Button>\n                </GridItem>\n            </Grid>\n        </Alert>\n    );\n};\n\nexport default InsightsPrompt;\n","import React, { useEffect, Fragment } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { loadEntity, deleteEntity } from '../../store/actions';\nimport './InventoryDetail.scss';\nimport SystemNotFound from './SystemNotFound';\nimport TopBar from './TopBar';\nimport FactsInfo from './FactsInfo';\nimport { reloadWrapper } from '../../Utilities/index';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport ApplicationDetails from './ApplicationDetails';\nimport './InventoryDetail.scss';\nimport InsightsPrompt from './InsightsPrompt';\nimport { verifyCulledInsightsClient } from '../../Utilities/sharedFunctions';\n\n/**\n * Composit component which tangles together Topbar, facts, tags, app details and if system is found or not.\n * This component is connected to redux and reads `loaded` and `entity`.\n * @param {*} props additional features from parent component.\n */\nconst InventoryDetail = ({\n    actions,\n    showTags,\n    hideInvLink,\n    onTabSelect,\n    onBackToListClick,\n    showDelete,\n    appList,\n    showInventoryDrawer,\n    UUIDWrapper,\n    LastSeenWrapper,\n    TitleWrapper,\n    TagsWrapper,\n    DeleteWrapper,\n    ActionsWrapper,\n    inventoryId,\n    children\n}) => {\n    const dispatch = useDispatch();\n    const loaded = useSelector(({ entityDetails }) => entityDetails?.loaded || false);\n    const entity = useSelector(({ entityDetails }) => entityDetails?.entity);\n    useEffect(() => {\n        if (!entity || !(entity?.id === inventoryId) || !loaded) {\n            dispatch(loadEntity(inventoryId, { hasItems: true }, { showTags }));\n        }\n    }, []);\n    return <div className=\"ins-entity-detail\">\n        {loaded && !entity ? (\n            <SystemNotFound\n                onBackToListClick={onBackToListClick}\n                inventoryId={inventoryId}\n            />\n        ) : <Fragment>\n            <TopBar\n                entity={ entity }\n                loaded={ loaded }\n                onBackToListClick={ onBackToListClick }\n                actions={ actions }\n                deleteEntity={ (systems, displayName, callback) => {\n                    const action = deleteEntity(systems, displayName);\n                    dispatch(reloadWrapper(action, callback));\n                } }\n                addNotification={ (payload) => dispatch(addNotification(payload))}\n                hideInvLink={ hideInvLink }\n                showInventoryDrawer={ showInventoryDrawer }\n                showDelete={ showDelete }\n                showTags={ showTags }\n                TitleWrapper={TitleWrapper}\n                TagsWrapper={TagsWrapper}\n                DeleteWrapper={DeleteWrapper}\n                ActionsWrapper={ActionsWrapper}\n            />\n            <FactsInfo\n                loaded={ loaded }\n                entity={ entity }\n                UUIDWrapper={UUIDWrapper}\n                LastSeenWrapper={LastSeenWrapper}\n            />\n            {(loaded && verifyCulledInsightsClient(entity?.per_reporter_staleness)) && <InsightsPrompt />}\n            {children}\n        </Fragment>\n        }\n        {loaded && entity && (\n            <ApplicationDetails onTabSelect={ onTabSelect } appList={ appList } />\n        )}\n    </div>;\n};\n\nInventoryDetail.propTypes = {\n    hideInvLink: PropTypes.bool,\n    hideBack: PropTypes.bool,\n    showTags: PropTypes.bool,\n    showDelete: PropTypes.bool,\n    showInventoryDrawer: PropTypes.bool,\n    actions: PropTypes.arrayOf(PropTypes.shape({\n        title: PropTypes.node,\n        onClick: PropTypes.func,\n        key: PropTypes.string\n    })),\n    appList: PropTypes.arrayOf(PropTypes.shape({\n        title: PropTypes.node,\n        name: PropTypes.string,\n        pageId: PropTypes.string\n    })),\n    onTabSelect: PropTypes.func,\n    onBackToListClick: PropTypes.func,\n    children: PropTypes.node,\n    UUIDWrapper: PropTypes.elementType,\n    LastSeenWrapper: PropTypes.elementType,\n    TitleWrapper: PropTypes.elementType,\n    TagsWrapper: PropTypes.elementType,\n    DeleteWrapper: PropTypes.elementType,\n    ActionsWrapper: PropTypes.elementType,\n    inventoryId: PropTypes.string\n};\nInventoryDetail.defaultProps = {\n    actions: [],\n    hideInvLink: false,\n    showTags: false,\n    UUIDWrapper: Fragment,\n    LastSeenWrapper: Fragment,\n    TitleWrapper: Fragment,\n    TagsWrapper: Fragment,\n    DeleteWrapper: Fragment,\n    ActionsWrapper: Fragment\n};\n\nconst InventoryDetailWrapper = ({ inventoryId, ...props }) => {\n    const { inventoryId: entityId } = useParams();\n    /*eslint-disable no-console*/\n    if (!inventoryId) {\n        console.warn('~~~~~~~~~~');\n        console.warn('~~~~~~~~~~');\n        console.warn('Missing inventoryId! Please provide one, we will remove the fallback from URL soon.');\n        console.warn('~~~~~~~~~~');\n        console.warn('~~~~~~~~~~');\n    }\n    /*eslint-enable no-console*/\n\n    return <InventoryDetail\n        inventoryId={inventoryId || entityId || location.pathname.replace(/\\/$/, '').split('/').pop()}\n        {...props}\n    />;\n};\n\nInventoryDetailWrapper.propTypes = InventoryDetail.propTypes;\n\nexport default InventoryDetailWrapper;\n","/* eslint-disable camelcase */\nimport React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { useLocation } from 'react-router-dom';\nimport { useStore, useSelector } from 'react-redux';\nimport { Skeleton, SkeletonSize } from '@redhat-cloud-services/frontend-components/Skeleton';\n\n/**\n * Small component that just renders active detail with some specific class.\n * This component detail is accessed from redux if no component found `missing component` is displayed.\n * @param {*} props `componentsMapper` if you want to pass different components list.\n */\nconst AppInfo = ({ componentMapper, appList }) => {\n    const store = useStore();\n    const { search } = useLocation();\n    const searchParams = new URLSearchParams(search);\n    const loaded = useSelector(({ entityDetails }) => entityDetails?.loaded);\n    const entity = useSelector(({ entityDetails }) => entityDetails?.entity);\n    const activeApp = useSelector(({ entityDetails }) => {\n        if (entityDetails?.loaded) {\n            return (appList || entityDetails?.activeApps)?.find?.(item => item?.name === (\n                searchParams.get('appName') || entityDetails?.activeApp?.appName\n            )) || entityDetails?.activeApps?.[0];\n        }\n    });\n    const Cmp = componentMapper || activeApp?.component;\n\n    if (loaded === true && !entity) {\n        return null;\n    }\n\n    return (\n        <Fragment>\n            {\n                loaded ? activeApp && (\n                    <div className={ `ins-active-app-${activeApp?.name}` }>\n                        { Cmp ?\n                            <Cmp\n                                store={store}\n                                inventoryId={entity?.id}\n                                appName={activeApp?.name}\n                            /> :\n                            'missing component'}\n                    </div>\n                ) : <Skeleton size={ SkeletonSize.md } />\n            }\n        </Fragment>\n    );\n};\n\nAppInfo.propTypes = {\n    componentMapper: PropTypes.element,\n    appList: PropTypes.arrayOf(PropTypes.shape({\n        title: PropTypes.node,\n        name: PropTypes.string,\n        pageId: PropTypes.string\n    }))\n};\n\nexport default AppInfo;\n","import React, { Fragment } from 'react';\nimport InventoryDetail from './InventoryDetail';\nimport AppInfo from './AppInfo';\n\n/**\n * Fallback component that binds together App info and inventory Detail.\n * You should not use this component unless you know what you are doing.\n * @param {*} props any parent props, just passed to InventoryDetail and AppInfo.\n */\nexport const FullDetail = (props) => (\n    <Fragment>\n        <InventoryDetail { ...props } />\n        <AppInfo { ...props } />\n    </Fragment>\n);\n\nexport default FullDetail;\n","/* eslint-disable react/display-name */\n/* eslint-disable camelcase */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Chip, ChipGroup, Title, Split, SplitItem, Stack, StackItem } from '@patternfly/react-core';\nimport { useSelector } from 'react-redux';\n\nconst BasicInfo = ({ hideInvLink, showTags }) => {\n    const displayName = useSelector(({ entityDetails: { entity } }) => entity?.display_name);\n    const systemId = useSelector(({ entityDetails: { entity } }) => entity?.id);\n    const tags = useSelector(({ entityDetails: { entity } }) => entity?.tags);\n    return <Stack hasGutter>\n        <StackItem>\n            <Split>\n                <SplitItem isFilled>\n                    <Title headingLevel=\"h3\" size='xl'>{ displayName }</Title>\n                </SplitItem>\n                {!hideInvLink && <SplitItem>\n                    <a className='ins-c-entity-detail__inv-link' href={`./insights/inventory/${systemId}`}>Open in Inventory</a>\n                </SplitItem>}\n            </Split>\n        </StackItem>\n        {\n            showTags &&\n            <StackItem>\n                <Split hasGutter>\n                    <SplitItem>\n                        Tags:\n                    </SplitItem>\n                    <SplitItem>\n                        <ChipGroup>\n                            {tags?.length !== 0 ? tags?.map((item, key) => (\n                                <Chip key={key} isReadOnly>\n                                    {item?.namespace && `${item?.namespace}/`}\n                                    {item?.key}\n                                    {item?.value && `=${item?.value}`}\n                                </Chip>\n                            )) : 'No tags'}\n                        </ChipGroup>\n                    </SplitItem>\n                </Split>\n            </StackItem>\n        }\n    </Stack>;\n};\n\nBasicInfo.propTypes = {\n    hideInvLink: PropTypes.bool,\n    showTags: PropTypes.bool\n};\n\nBasicInfo.defaultProps = {\n    hideInvLink: false,\n    showTags: false\n};\n\nexport default BasicInfo;\n","/* eslint-disable react/prop-types */\n/* eslint-disable react/display-name */\nimport React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getAdvisorData, getComplianceData, getPatchData, getVulnData } from '../../store/actions';\nimport { Title, Level, LevelItem,  Stack, StackItem } from '@patternfly/react-core';\nimport { Skeleton, SkeletonSize } from '@redhat-cloud-services/frontend-components/Skeleton';\nimport BugIcon from '@patternfly/react-icons/dist/js/icons/bug-icon';\nimport EnhancementIcon from '@patternfly/react-icons/dist/js/icons/enhancement-icon';\nimport SecurityIcon from '@patternfly/react-icons/dist/js/icons/security-icon';\n\nconst SystemIssues = ({ isOpened }) => {\n    const dispatch = useDispatch();\n    const systemId = useSelector(({ entityDetails: { entity } }) => entity?.id);\n    const advisor = useSelector(({ entityDetails: { systemIssues } }) => systemIssues?.advisor);\n    const compliance = useSelector(({ entityDetails: { systemIssues } }) => systemIssues?.compliance);\n    const cve = useSelector(({ entityDetails: { systemIssues } }) => systemIssues?.cve);\n    const patch = useSelector(({ entityDetails: { systemIssues } }) => systemIssues?.patch);\n    useEffect(() => {\n        if (systemId && isOpened) {\n            dispatch(getAdvisorData(systemId));\n            dispatch(getComplianceData(systemId));\n            dispatch(getPatchData(systemId));\n            dispatch(getVulnData(systemId));\n        }\n    }, [systemId, isOpened]);\n\n    return <Stack hasGutter className=\"ins-c-inventory__drawer-system-issues\">\n        <StackItem>\n            <Title headingLevel=\"h4\" size='lg'>Top system issues</Title>\n        </StackItem>\n        <StackItem>\n            <Level>\n                <LevelItem>\n                    <Stack hasGutter>\n                        <StackItem className=\"ins-c-inventory__drawer--title\">\n                            Applicable CVEs\n                        </StackItem>\n                        <StackItem>\n                            {\n                                cve?.isLoaded ?\n                                    <Level hasGutter className=\"ins-c-inventory__drawer-cve\">\n                                        <LevelItem className=\"ins-m-critical\">\n                                            <a href={`/insights/vulnerability/systems/${systemId}?impact=7`}>\n                                                {cve?.critical?.count || 0} critical\n                                            </a>\n                                        </LevelItem>\n                                        <LevelItem className=\"ins-m-important\">\n                                            <a href={`/insights/vulnerability/systems/${systemId}?impact=5`}>\n                                                {cve?.important?.count || 0} important\n                                            </a>\n                                        </LevelItem>\n                                        <LevelItem className=\"ins-m-moderate\">\n                                            <a href={`/insights/vulnerability/systems/${systemId}?impact=4`}>\n                                                {cve?.moderate?.count || 0} moderate\n                                            </a>\n                                        </LevelItem>\n                                        <LevelItem className=\"ins-m-low\">\n                                            <a href={`/insights/vulnerability/systems/${systemId}?impact=2`}>\n                                                {cve?.low?.count || 0} low\n                                            </a>\n                                        </LevelItem>\n                                    </Level> :\n                                    <Skeleton size={ SkeletonSize.md } />\n                            }\n                        </StackItem>\n                    </Stack>\n                </LevelItem>\n                <LevelItem>\n                    <Stack hasGutter>\n                        <StackItem className=\"ins-c-inventory__drawer--title\">\n                            Applicable advisories\n                        </StackItem>\n                        <StackItem>\n                            {\n                                patch?.isLoaded ?\n                                    <Level hasGutter className=\"ins-c-inventory__drawer-patch\">\n                                        <LevelItem>\n                                            <a href={`/insights/patch/systems/${systemId}/?advisory_type=2`}>\n                                                <BugIcon /> {patch?.bug?.count}\n                                            </a>\n                                        </LevelItem>\n                                        <LevelItem className=\"ins-m-moderate\">\n                                            <a href={`/insights/patch/systems/${systemId}/?advisory_type=3`}>\n                                                <SecurityIcon /> {patch?.security?.count}\n                                            </a>\n                                        </LevelItem>\n                                        <LevelItem>\n                                            <a href={`/insights/patch/systems/${systemId}/?advisory_type=1`}>\n                                                <EnhancementIcon /> {patch?.enhancement?.count}\n                                            </a>\n                                        </LevelItem>\n                                    </Level> :\n                                    <Skeleton size={ SkeletonSize.md } />\n                            }\n                        </StackItem>\n                    </Stack>\n                </LevelItem>\n            </Level>\n        </StackItem>\n        <StackItem>\n            {\n                advisor?.isLoaded ?\n                    <span>\n                        <span className=\"ins-m-critical\">\n                            {advisor?.criticalCount?.length || 0} critical\n                        </span> recommendations in <a href={`./insights/advisor/systems/${systemId}`}>Advisor</a>\n                    </span> :\n                    <Skeleton size={ SkeletonSize.md } />\n            }\n        </StackItem>\n        {\n            compliance?.isLoaded ?\n                (compliance?.profiles &&\n                    <span>\n                        System above compliance threshold for <a\n                            href={'./insights/compliance/reports/'}\n                        >\n                            {compliance?.profiles?.length} {compliance?.profiles?.length > 1 ? 'policies' : 'policy'}\n                        </a>\n                    </span>\n                ) :\n                <Skeleton size={ SkeletonSize.md } />\n        }\n    </Stack>;\n};\n\nSystemIssues.propTypes = {\n    isOpened: PropTypes.bool\n};\n\nexport default SystemIssues;\n","import React from 'react';\nimport {\n    Drawer,\n    DrawerPanelContent,\n    DrawerContent,\n    DrawerContentBody,\n    DrawerPanelBody,\n    DrawerActions,\n    DrawerHead,\n    DrawerCloseButton,\n    Stack,\n    StackItem\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch, useStore } from 'react-redux';\nimport { toggleDrawer } from '../../store/actions';\nimport { BasicInfo, SystemIssues } from '../InventoryDetailDrawer';\nimport FactsInfo from './FactsInfo';\n\nconst DetailWrapper = ({ children, hideInvLink, showTags, Wrapper, className, appName, ...props }) => {\n    const dispatch = useDispatch();\n    const store = useStore();\n    const entity = useSelector(({ entityDetails }) => entityDetails?.entity);\n    const isExpanded = useSelector(({ entityDetails }) => entityDetails?.isToggleOpened);\n    const loaded = useSelector(({ entityDetails }) => entityDetails?.loaded);\n\n    return <Drawer\n        className={`ins-c-inventory__drawer ${className || ''}`}\n        isExpanded={isExpanded}\n        onExpand={() => dispatch(toggleDrawer(true))}\n        {...props}\n    >\n        <DrawerContent\n            panelContent={\n                <DrawerPanelContent>\n                    <DrawerHead>\n                        <BasicInfo hideInvLink={ hideInvLink } showTags={ showTags } />\n                        <DrawerActions>\n                            <DrawerCloseButton onClick={() =>  dispatch(toggleDrawer(false))} />\n                        </DrawerActions>\n                    </DrawerHead>\n                    <DrawerPanelBody>\n                        <Stack className=\"ins-c-inventory__drawer--content\">\n                            <StackItem>\n                                <SystemIssues isOpened={isExpanded} />\n                            </StackItem>\n                            <StackItem isFilled className=\"ins-c-inventory__drawer--facts\">\n                                <FactsInfo entity={entity} loaded={loaded} />\n                                {\n                                    isExpanded &&\n                                    loaded &&\n                                    Wrapper &&\n                                    <Wrapper\n                                        store={store}\n                                        appName={appName}\n                                    />\n                                }\n                            </StackItem>\n                        </Stack>\n                    </DrawerPanelBody>\n                </DrawerPanelContent>\n            }\n        >\n            <DrawerContentBody>\n                {children}\n            </DrawerContentBody>\n        </DrawerContent>\n    </Drawer>;\n};\n\nDetailWrapper.propTypes = {\n    children: PropTypes.any,\n    hideInvLink: PropTypes.bool,\n    showTags: PropTypes.bool,\n    appName: PropTypes.oneOf([\n        'general_information',\n        'advisor',\n        'insights',\n        'compliance',\n        'vulnerabilities',\n        'patch'\n    ]),\n    className: PropTypes.string,\n    Wrapper: PropTypes.elementType\n};\n\nDetailWrapper.defaultProps = {\n    appName: 'general_information'\n};\n\nexport default DetailWrapper;\n","import React from 'react';\nimport { cellWidth, sortable, expandable } from '@patternfly/react-table';\nimport get from 'lodash/get';\nimport flatten from 'lodash/flatten';\nimport TitleColumn from './TitleColumn';\nimport { Fragment } from 'react';\n\nexport const buildCells = (item, columns, extra) => {\n    return columns.map(({ key, composed, renderFunc }) => {\n        // eslint-disable-next-line new-cap\n        const data = composed ? <Fragment>{TitleColumn(\n            composed.map(key => get(item, key, ' ')),\n            item.id,\n            item,\n            extra\n        )}</Fragment> : get(item, key, ' ');\n        return renderFunc ? <Fragment>{ renderFunc(data, item.id, item, extra) }</Fragment> : data;\n    });\n};\n\nexport const createRows = (rows = [], columns = [], { actions, expandable, noSystemsTable, ...extra } = {}) => {\n    if (rows.length === 0) {\n        return [{\n            cells: [{\n                title: noSystemsTable,\n                props: {\n                    colSpan: columns.length + Boolean(actions),\n                    dataLabel: null\n                }\n            }]\n        }];\n    }\n\n    return flatten(rows.map((oneItem, key) => ([{\n        ...oneItem,\n        ...oneItem.children && expandable && { isOpen: !!oneItem.isOpen },\n        cells: buildCells(oneItem, columns, extra),\n        actionProps: {\n            'data-ouia-component-id': `${oneItem.id}-actions-kebab`\n        }\n    }, oneItem.children && expandable && {\n        cells: [\n            {\n                title: typeof oneItem.children === 'function' ? oneItem.children() : oneItem.children\n            }\n        ],\n        parent: key * 2,\n        fullWidth: true\n    }]))).filter(Boolean);\n};\n\nexport const onDeleteFilter = (deleted, currFilter = []) => {\n    const { value: deletedItem } = deleted?.chips?.[0] || {};\n    return  currFilter.filter((item) => item !== deletedItem);\n};\n\nexport const onDeleteTag = (deleted, selectedTags, onApplyTags) => {\n    const deletedItem = deleted?.chips?.[0];\n    if (selectedTags?.[deleted?.key]?.[deletedItem?.key] !== undefined) {\n        selectedTags[deleted?.key][deletedItem?.key] = false;\n    }\n\n    onApplyTags && onApplyTags(selectedTags, false);\n    return selectedTags;\n};\n\nconst includesSortable = (transforms) => transforms?.reduce((acc, fn) => acc || fn.toString().includes('onSort:'), false);\n\nexport const createColumns = (columns, hasItems, rows, isExpandable) => (\n    columns?.map(({ props, transforms, cellFormatters, ...oneCell }) => ({\n        ...oneCell,\n        transforms: [\n            ...transforms || [],\n            ...props?.width ? [cellWidth(props.width)] : [],\n            ...hasItems ||\n            rows.length <= 0 ||\n            (props && props.isStatic) ||\n            transforms?.includes(sortable) ||\n            includesSortable(transforms) ? [] : [sortable]\n        ],\n        cellFormatters: [\n            ...cellFormatters || [],\n            ...isExpandable ? [expandable] : []\n        ]\n    }))\n);\n\n","/* eslint-disable camelcase */\nimport React, { Fragment, useEffect, useCallback, useReducer } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport xor from 'lodash/xor';\nimport { Skeleton, SkeletonSize } from '@redhat-cloud-services/frontend-components/Skeleton';\nimport { tagsFilterState, tagsFilterReducer, mapGroups } from '@redhat-cloud-services/frontend-components/FilterHooks';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport { fetchAllTags, clearFilters, toggleTagModal, setFilter } from '../../store/actions';\nimport { defaultFilters } from '../../Utilities/constants';\nimport debounce from 'lodash/debounce';\nimport {\n    TagsModal,\n    TEXT_FILTER,\n    reduceFilters,\n    TEXTUAL_CHIP,\n    STALE_CHIP,\n    REGISTERED_CHIP,\n    OS_CHIP,\n    TAG_CHIP,\n    arrayToSelection,\n    RHCD_FILTER_KEY,\n    UPDATE_METHOD_KEY\n} from '../../Utilities/index';\nimport { onDeleteFilter, onDeleteTag } from './helpers';\nimport {\n    useStalenessFilter,\n    useTextFilter,\n    useRegisteredWithFilter,\n    useTagsFilter,\n    useRhcdFilter,\n    useUpdateMethodFilter,\n    textFilterState,\n    textFilterReducer,\n    filtersReducer,\n    stalenessFilterReducer,\n    stalenessFilterState,\n    operatingSystemFilterReducer,\n    registeredWithFilterReducer,\n    registeredWithFilterState,\n    rhcdFilterReducer,\n    rhcdFilterState,\n    updateMethodFilterReducer,\n    updateMethodFilterState\n} from '../filters';\nimport useOperatingSystemFilter from '../filters/useOperatingSystemFilter';\n\n/**\n * Table toolbar used at top of inventory table.\n * It uses couple of filters and acces redux data along side all passed props.\n * @param {*} props used in this component.\n */\nconst EntityTableToolbar = ({\n    total,\n    page,\n    perPage,\n    filterConfig,\n    hasItems,\n    children,\n    actionsConfig,\n    activeFiltersConfig,\n    showTags,\n    getTags,\n    items,\n    sortBy,\n    customFilters,\n    hasAccess,\n    bulkSelect,\n    hideFilters,\n    paginationProps,\n    onRefreshData,\n    loaded,\n    showTagModal,\n    ...props\n}) => {\n    const dispatch = useDispatch();\n    const reducer = useReducer(filtersReducer([\n        textFilterReducer,\n        stalenessFilterReducer,\n        registeredWithFilterReducer,\n        tagsFilterReducer,\n        operatingSystemFilterReducer,\n        rhcdFilterReducer,\n        updateMethodFilterReducer\n    ]), {\n        ...textFilterState,\n        ...stalenessFilterState,\n        ...registeredWithFilterState,\n        ...tagsFilterState,\n        ...rhcdFilterState,\n        ...updateMethodFilterState\n    });\n    const filters = useSelector(({ entities: { activeFilters } }) => activeFilters);\n    const allTagsLoaded = useSelector(({ entities: { allTagsLoaded } }) => allTagsLoaded);\n    const allTags = useSelector(({ entities: { allTags } }) => allTags);\n    const additionalTagsCount = useSelector(({ entities: { additionalTagsCount } }) => additionalTagsCount);\n    const [nameFilter, nameChip, textFilter, setTextFilter] = useTextFilter(reducer);\n    const [stalenessFilter, stalenessChip, staleFilter, setStaleFilter] = useStalenessFilter(reducer);\n    const [registeredFilter, registeredChip, registeredWithFilter, setRegisteredWithFilter] = useRegisteredWithFilter(reducer);\n    const [rhcdFilterConfig, rhcdFilterChips, rhcdFilterValue, setRhcdFilterValue] = useRhcdFilter(reducer);\n    const [osFilterConfig, osFilterChips, osFilterValue, setOsFilterValue] = useOperatingSystemFilter();\n    const [updateMethodConfig, updateMethodChips, updateMethodValue, setUpdateMethodValue] = useUpdateMethodFilter(reducer);\n\n    const {\n        tagsFilter,\n        tagsChip,\n        selectedTags,\n        setSelectedTags,\n        filterTagsBy,\n        seFilterTagsBy\n    } = useTagsFilter(allTags, allTagsLoaded, additionalTagsCount, () => dispatch(toggleTagModal(true)), reducer);\n\n    /**\n     * Debounced function for fetching all tags.\n     */\n    const debounceGetAllTags = useCallback(debounce((config, options) => {\n        if (showTags && !hasItems && hasAccess) {\n            dispatch(fetchAllTags(config, {\n                ...options?.pagination\n            },  getTags));\n        }\n    }, 800), [customFilters?.tags]);\n\n    const enabledFilters = {\n        name: !(hideFilters.all && hideFilters.name !== false) && !hideFilters.name,\n        stale: !(hideFilters.all && hideFilters.stale !== false) && !hideFilters.stale,\n        registeredWith: !(hideFilters.all && hideFilters.registeredWith !== false) && !hideFilters.registeredWith,\n        operatingSystem: !(hideFilters.all && hideFilters.operatingSystem !== false) && !hideFilters.operatingSystem,\n        tags: !(hideFilters.all && hideFilters.tags !== false) && !hideFilters.tags,\n        rhcdFilter: !(hideFilters.all && hideFilters.rhcdFilter !== false) && !hideFilters.rhcdFilter,\n        updateMethodFilter: !(hideFilters.all && hideFilters.updateMethodFilter !== false) && !hideFilters.updateMethodFilter\n    };\n\n    /**\n     * Function to dispatch load systems and fetch all tags.\n     */\n    const onRefreshDataInner = useCallback((options) => {\n        if (hasAccess) {\n            onRefreshData(options);\n            if (showTags && !hasItems) {\n                dispatch(fetchAllTags(filterTagsBy, {}, getTags));\n            }\n        }\n    }, [customFilters?.tags]);\n\n    /**\n     * Function used to update data, it either calls `onRefresh` from props or dispatches `onRefreshData`.\n     * `onRefresh` function takes two parameters\n     *   * entire config with new changes.\n     *   * callback to update data.\n     * @param {*} config new config to fetch data.\n     */\n    const updateData = (config) => {\n        if (hasAccess) {\n            onRefreshDataInner(config);\n        }\n    };\n\n    /**\n     * Debounced `updateData` function.\n     */\n    const debouncedRefresh = useCallback(debounce((config) => updateData(config), 800), [sortBy?.key, sortBy?.direction]);\n\n    /**\n     * Component did mount effect to calculate actual filters from redux.\n     */\n    useEffect(() => {\n        const {\n            textFilter, tagFilters, staleFilter, registeredWithFilter, osFilter, rhcdFilter, updateMethodFilter\n        } = reduceFilters(filters);\n\n        debouncedRefresh();\n        enabledFilters.name && setTextFilter(textFilter);\n        enabledFilters.stale && setStaleFilter(staleFilter);\n        enabledFilters.registeredWith && setRegisteredWithFilter(registeredWithFilter);\n        enabledFilters.tags && setSelectedTags(tagFilters);\n        enabledFilters.operatingSystem && setOsFilterValue(osFilter);\n        enabledFilters.rhcdFilter && setRhcdFilterValue(rhcdFilter);\n        enabledFilters.updateMethodFilter && setUpdateMethodValue(updateMethodFilter);\n    }, []);\n\n    /**\n     * Function used to change text filter.\n     * @param {*} value new value used for filtering.\n     * @param {*} debounced if debounce function should be used.\n     */\n    const onSetTextFilter = (value, debounced = true) => {\n        const trimmedValue = value.trim();\n\n        const textualFilter = filters?.find(oneFilter => oneFilter.value === TEXT_FILTER);\n        if (textualFilter) {\n            textualFilter.filter = trimmedValue;\n        } else {\n            filters?.push({ value: TEXT_FILTER, filter: trimmedValue });\n        }\n\n        const refresh = debounced ? debouncedRefresh : updateData;\n        refresh({ page: 1, perPage, filters });\n    };\n\n    /**\n     * General function to apply filter (excluding tag and text).\n     * @param {*} value new value to be set of specified filter.\n     * @param {*} filterKey which filter should be changed.\n     * @param {*} refresh refresh callback function.\n     */\n    const onSetFilter = (value, filterKey, refresh) => {\n        const newFilters = [\n            ...filters?.filter(oneFilter => !Object.prototype.hasOwnProperty.call(oneFilter, filterKey)),\n            { [filterKey]: value }\n        ];\n        refresh({ page: 1, perPage, filters: newFilters });\n    };\n\n    const shouldReload = page && perPage && filters && (!hasItems || items);\n\n    useEffect(() => {\n        if (shouldReload && showTags && enabledFilters.tags) {\n            debounceGetAllTags(filterTagsBy);\n        }\n    }, [filterTagsBy, customFilters?.tags]);\n\n    useEffect(() => {\n        if (shouldReload && enabledFilters.name) {\n            onSetTextFilter(textFilter, true);\n        }\n    }, [textFilter]);\n\n    useEffect(() => {\n        if (shouldReload && enabledFilters.stale) {\n            onSetFilter(staleFilter, 'staleFilter', debouncedRefresh);\n        }\n    }, [staleFilter]);\n\n    useEffect(() => {\n        if (shouldReload && enabledFilters.registeredWith) {\n            onSetFilter(registeredWithFilter, 'registeredWithFilter', debouncedRefresh);\n        }\n    }, [registeredWithFilter]);\n\n    useEffect(() => {\n        if (shouldReload && showTags && enabledFilters.tags) {\n            onSetFilter(mapGroups(selectedTags), 'tagFilters', debouncedRefresh);\n        }\n    }, [selectedTags]);\n\n    useEffect(() => {\n        if (shouldReload && enabledFilters.operatingSystem) {\n            onSetFilter(osFilterValue, 'osFilter', debouncedRefresh);\n        }\n    }, [osFilterValue]);\n\n    useEffect(() => {\n        if (shouldReload && enabledFilters.rhcdFilter) {\n            onSetFilter(rhcdFilterValue, 'rhcdFilter', debouncedRefresh);\n        }\n    }, [rhcdFilterValue]);\n\n    useEffect(() => {\n        if (shouldReload && enabledFilters.updateMethodFilter) {\n            onSetFilter(updateMethodValue, 'updateMethodFilter', debouncedRefresh);\n        }\n    }, [updateMethodValue]);\n\n    /**\n     * Mapper to simplify removing of any filter.\n     */\n    const deleteMapper = {\n        [TEXTUAL_CHIP]: () => setTextFilter(''),\n        [TAG_CHIP]: (deleted) => setSelectedTags(\n            onDeleteTag(\n                deleted,\n                selectedTags,\n                (selectedTags) => onSetFilter(mapGroups(selectedTags), 'tagFilters', updateData)\n            )\n        ),\n        [STALE_CHIP]: (deleted) => setStaleFilter(onDeleteFilter(deleted, staleFilter)),\n        [REGISTERED_CHIP]: (deleted) => setRegisteredWithFilter(\n            onDeleteFilter(deleted, registeredWithFilter)\n        ),\n        [OS_CHIP]: (deleted) => setOsFilterValue(xor(osFilterValue, deleted.chips.map(({ value }) => value))),\n        [RHCD_FILTER_KEY]: (deleted) => setRhcdFilterValue(onDeleteFilter(deleted, rhcdFilterValue)),\n        [UPDATE_METHOD_KEY]: (deleted) => setUpdateMethodValue(onDeleteFilter(deleted, updateMethodValue))\n    };\n    /**\n     * Function to reset all filters with 'Reset Filter' is clicked\n     */\n    const resetFilters = () => {\n        enabledFilters.name && setTextFilter('');\n        enabledFilters.stale && setStaleFilter(defaultFilters.staleFilter);\n        enabledFilters.registeredWith && setRegisteredWithFilter([]);\n        enabledFilters.tags && setSelectedTags({});\n        enabledFilters.operatingSystem && setOsFilterValue([]);\n        enabledFilters.rhcdFilter && setRhcdFilterValue([]);\n        enabledFilters.updateMethodFilter && setUpdateMethodValue([]);\n        dispatch(setFilter([defaultFilters]));\n        updateData({ page: 1, filters: [defaultFilters] });\n    };\n\n    /**\n     * Function to create active filters chips.\n     */\n    const constructFilters = () => {\n        return {\n            ...activeFiltersConfig || {},\n            filters: [\n                ...(showTags && !hasItems && enabledFilters.tags) ? tagsChip : [],\n                ...!hasItems && enabledFilters.name ? nameChip : [],\n                ...!hasItems && enabledFilters.stale ? stalenessChip : [],\n                ...!hasItems && enabledFilters.registeredWith ? registeredChip : [],\n                ...!hasItems && enabledFilters.operatingSystem ? osFilterChips : [],\n                ...!hasItems && enabledFilters.rhcdFilter ? rhcdFilterChips : [],\n                ...!hasItems && enabledFilters.updateMethodFilter ? updateMethodChips : [],\n                ...activeFiltersConfig?.filters || []\n            ],\n            onDelete: (e, [deleted, ...restDeleted], isAll) => {\n                if (isAll) {\n                    dispatch(clearFilters());\n                    resetFilters();\n                } else {\n                    deleteMapper[deleted.type]?.(deleted);\n                }\n\n                activeFiltersConfig &&\n                activeFiltersConfig.onDelete &&\n                activeFiltersConfig.onDelete(e, [deleted, ...restDeleted], isAll, defaultFilters);\n            }\n        };\n    };\n\n    const inventoryFilters = [\n        ...!hasItems ? [\n            ...enabledFilters.name ? [nameFilter] : [],\n            ...enabledFilters.stale ? [stalenessFilter] : [],\n            ...enabledFilters.operatingSystem ? [osFilterConfig] : [],\n            ...enabledFilters.registeredWith ? [registeredFilter] : [],\n            ...enabledFilters.rhcdFilter ? [rhcdFilterConfig] : [],\n            ...enabledFilters.updateMethodFilter ? [updateMethodConfig] : [],\n            ...showTags && enabledFilters.tags ? [tagsFilter] : []\n        ] : [],\n        ...filterConfig?.items || []\n    ];\n\n    return <Fragment>\n        <PrimaryToolbar\n            {...props}\n            {...bulkSelect && {\n                bulkSelect: {\n                    ...bulkSelect,\n                    isDisabled: bulkSelect?.isDisabled || !hasAccess\n                }\n            }}\n            className={`ins-c-inventory__table--toolbar ${\n                hasItems || !inventoryFilters.length ? 'ins-c-inventory__table--toolbar-has-items' : ''\n            }`}\n            {...inventoryFilters?.length > 0 && {\n                filterConfig: {\n                    ...filterConfig || {},\n                    isDisabled: !hasAccess,\n                    items: inventoryFilters?.map(filter => ({\n                        ...filter,\n                        filterValues: {\n                            placeholder: filter?.filterValues?.placeholder || `Filter by ${filter?.label?.toLowerCase()}`,\n                            ...filter?.filterValues,\n                            isDisabled: !hasAccess\n                        }\n                    }))\n                }\n            }}\n            { ...hasAccess && { activeFiltersConfig: constructFilters() } }\n            actionsConfig={ loaded ? actionsConfig : null }\n            pagination={loaded ? {\n                page,\n                itemCount: !hasAccess ? 0 : total,\n                isDisabled: !hasAccess,\n                perPage,\n                onSetPage: (_e, newPage) => onRefreshData({ page: newPage }),\n                onPerPageSelect: (_e, newPerPage) => onRefreshData({ page: 1, per_page: newPerPage }),\n                ...paginationProps\n            } : <Skeleton size={SkeletonSize.lg} />}\n        >\n            { children }\n        </PrimaryToolbar>\n        {\n            (showTags || enabledFilters.tags || showTagModal) && <TagsModal\n                filterTagsBy={filterTagsBy}\n                onApply={(selected) => setSelectedTags(arrayToSelection(selected))}\n                onToggleModal={() => seFilterTagsBy('')}\n                getTags={getTags}\n            />\n        }\n    </Fragment>;\n};\n\nEntityTableToolbar.propTypes = {\n    showTags: PropTypes.bool,\n    getTags: PropTypes.func,\n    hasAccess: PropTypes.bool,\n    filterConfig: PropTypes.object,\n    total: PropTypes.number,\n    hasItems: PropTypes.bool,\n    page: PropTypes.number,\n    onClearFilters: PropTypes.func,\n    toggleTagModal: PropTypes.func,\n    perPage: PropTypes.number,\n    children: PropTypes.node,\n    pagination: PropTypes.shape({\n        page: PropTypes.number,\n        perPage: PropTypes.number\n    }),\n    actionsConfig: PropTypes.object,\n    activeFiltersConfig: PropTypes.object,\n    onRefreshData: PropTypes.func,\n    customFilters: PropTypes.shape({\n        tags: PropTypes.oneOfType([\n            PropTypes.object,\n            PropTypes.arrayOf(PropTypes.string)\n        ])\n    }),\n    hideFilters: PropTypes.shape({\n        tags: PropTypes.bool,\n        name: PropTypes.bool,\n        registeredWith: PropTypes.bool,\n        stale: PropTypes.bool,\n        operatingSystem: PropTypes.bool,\n        rhcdFilter: PropTypes.bool,\n        updateMethodFilter: PropTypes.bool,\n        all: PropTypes.bool\n    }),\n    paginationProps: PropTypes.object,\n    loaded: PropTypes.bool,\n    onRefresh: PropTypes.func,\n    hasCheckbox: PropTypes.bool,\n    isLoaded: PropTypes.bool,\n    items: PropTypes.array,\n    sortBy: PropTypes.object,\n    bulkSelect: PropTypes.object,\n    showTagModal: PropTypes.bool,\n    disableDefaultColumns: PropTypes.any\n};\n\nEntityTableToolbar.defaultProps = {\n    showTags: false,\n    hasAccess: true,\n    activeFiltersConfig: {},\n    hideFilters: {}\n};\n\nexport default EntityTableToolbar;\n","import React from 'react';\nimport { EmptyStateBody, EmptyState, EmptyStateVariant, Title } from '@patternfly/react-core';\n\n/**\n * Empty state stable when no systems are found.\n */\nconst NoSystemsTable = () => (\n    <EmptyState variant={ EmptyStateVariant.full }>\n        <Title headingLevel=\"h5\" size=\"lg\">\n            No matching systems found\n        </Title>\n        <EmptyStateBody>\n            To continue, edit your filter settings and search again.\n        </EmptyStateBody>\n    </EmptyState>\n);\n\nexport default NoSystemsTable;\n","import React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { selectEntity, setSort } from '../../store/actions';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport {\n    Table as PfTable,\n    TableBody,\n    TableHeader,\n    TableGridBreakpoint,\n    TableVariant\n} from '@patternfly/react-table';\nimport { SkeletonTable } from '@redhat-cloud-services/frontend-components/SkeletonTable';\nimport NoSystemsTable from './NoSystemsTable';\nimport { createRows, createColumns } from './helpers';\nimport useColumns from './hooks/useColumns';\n\n/**\n * The actual (PF)table component. It calculates each cell and every table property.\n * It uses rows, columns and loaded from redux to show correct data.\n * When row is selected `selectEntity` is dispatched.\n * @param {*} props all props used in this component.\n */\nconst EntityTable = ({\n    hasItems,\n    expandable,\n    onExpandClick,\n    hasCheckbox,\n    actions,\n    variant,\n    sortBy,\n    tableProps,\n    onSort,\n    expandable: isExpandable,\n    onRowClick,\n    noDetail,\n    noSystemsTable = <NoSystemsTable />,\n    showTags,\n    columns: columnsProp,\n    disableDefaultColumns,\n    loaded,\n    columnsCounter\n}) => {\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const location = useLocation();\n    const columns = useColumns(columnsProp, disableDefaultColumns, showTags, columnsCounter);\n    const rows = useSelector(({ entities: { rows } }) => rows);\n\n    const onItemSelect = (_event, checked, rowId) => {\n        const row = isExpandable ? rows[rowId / 2] : rows[rowId];\n        dispatch(selectEntity(rowId === -1 ? 0 : row.id, checked));\n    };\n\n    const onSortChange = (_event, key, direction, index) => {\n        if (key !== 'action' && key !== 'health') {\n            dispatch(setSort({ index, key, direction }));\n        }\n\n        onSort?.({ index, key, direction });\n    };\n\n    const cells = useMemo(() =>\n        loaded && createColumns(columns, hasItems, rows, isExpandable)\n    , [loaded, columns, hasItems, rows, isExpandable]);\n\n    const defaultRowClick = (_event, key) => {\n        history.push(`${location.pathname}${location.pathname.slice(-1) === '/' ? '' : '/'}${key}`);\n    };\n\n    delete tableProps.RowWrapper;\n    if (rows?.length === 0) {\n        delete tableProps.actionResolver;\n    }\n\n    return (\n        <React.Fragment>\n            { loaded && cells ?\n                PfTable && <PfTable\n                    variant={ variant }\n                    aria-label=\"Host inventory\"\n                    cells={ cells }\n                    rows={ createRows(\n                        rows,\n                        columns,\n                        {\n                            actions,\n                            expandable,\n                            loaded,\n                            onRowClick: onRowClick || defaultRowClick,\n                            noDetail,\n                            sortBy,\n                            noSystemsTable\n                        })\n                    }\n                    gridBreakPoint={\n                        columns?.length > 5 ?\n                            TableGridBreakpoint.gridLg :\n                            TableGridBreakpoint.gridMd\n                    }\n                    className=\"ins-c-entity-table\"\n                    onSort={ (event, index, direction) => {\n                        onSortChange(\n                            event,\n                            cells?.[index - Boolean(hasCheckbox) - Boolean(expandable)]?.sortKey ||\n                            cells?.[index - Boolean(hasCheckbox) - Boolean(expandable)]?.key,\n                            direction,\n                            index\n                        );\n                    } }\n                    sortBy={ {\n                        //Inventory API has different sortBy key than system_profile\n                        index:\n                            cells?.findIndex(\n                                item => (sortBy?.key === item.key)\n                                || (sortBy?.key === 'operating_system' && item.key === 'system_profile')\n                            ) + Boolean(hasCheckbox) + Boolean(expandable),\n                        direction: sortBy?.direction\n                    } }\n                    { ...{\n                        ...hasCheckbox && rows?.length !== 0 ? { onSelect: onItemSelect } : {},\n                        ...expandable ? { onCollapse: onExpandClick } : {},\n                        ...actions && rows?.length > 0 && { actions }\n                    } }\n                    isStickyHeader\n                    { ...tableProps }\n                >\n                    <TableHeader />\n                    <TableBody />\n                </PfTable> :\n                <SkeletonTable\n                    colSize={ columns?.length || 3 }\n                    rowSize={ 15 }\n                    variant={variant ?? tableProps.variant}\n                />\n            }\n        </React.Fragment>\n    );\n};\n\nEntityTable.propTypes = {\n    variant: PropTypes.oneOf(['compact']),\n    expandable: PropTypes.bool,\n    onExpandClick: PropTypes.func,\n    onSort: PropTypes.func,\n    hasCheckbox: PropTypes.bool,\n    showActions: PropTypes.bool,\n    hasItems: PropTypes.bool,\n    showHealth: PropTypes.bool,\n    sortBy: PropTypes.shape({\n        key: PropTypes.string,\n        direction: PropTypes.oneOf(['asc', 'desc'])\n    }),\n    tableProps: PropTypes.shape({\n        [PropTypes.string]: PropTypes.any,\n        RowWrapper: PropTypes.elementType,\n        variant: PropTypes.string,\n        actionResolver: PropTypes.func\n    }),\n    onRowClick: PropTypes.func,\n    showTags: PropTypes.bool,\n    noSystemsTable: PropTypes.node,\n    disableDefaultColumns: PropTypes.oneOfType([PropTypes.bool, PropTypes.arrayOf(PropTypes.string)]),\n    loaded: PropTypes.bool,\n    columnsCounter: PropTypes.number,\n    columns: PropTypes.oneOfType([PropTypes.array, PropTypes.func]),\n    isLoaded: PropTypes.bool,\n    actions: PropTypes.array,\n    noDetail: PropTypes.any\n};\n\nEntityTable.defaultProps = {\n    loaded: false,\n    showHealth: false,\n    expandable: false,\n    hasCheckbox: true,\n    showActions: false,\n    rows: [],\n    variant: TableVariant.compact,\n    onExpandClick: () => undefined,\n    tableProps: {}\n};\n\nexport default EntityTable;\n","import { useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport { mergeArraysByKey } from '@redhat-cloud-services/frontend-components-utilities/helpers/helpers';\nimport { defaultColumns } from '../../../store/entities';\n\nconst isColumnEnabled = (key, disableColumns, showTags) =>\n    (key === 'tags' && showTags) ||\n    (key !== 'tags' && (Array.isArray(disableColumns) && !(disableColumns).includes(key)));\n\nconst useColumns = (columnsProp, disableDefaultColumns, showTags, columnsCounter) => {\n    const columnsRedux = useSelector(\n        ({ entities: { columns } }) => columns,\n        (next, prev) => next.every(\n            ({ key }, index) => prev.findIndex(({ key: prevKey }) => prevKey === key) === index\n        )\n    );\n    const disabledColumns = Array.isArray(disableDefaultColumns) ? disableDefaultColumns : [];\n    const defaultColumnsFiltered = useMemo(() => (disableDefaultColumns === true) ?\n        [] : defaultColumns().filter(({ key }) =>\n            isColumnEnabled(key, disabledColumns, showTags)\n        ), [disabledColumns, disableDefaultColumns, showTags]);\n\n    return useMemo(() => {\n        if (typeof columnsProp === 'function') {\n            return columnsProp(defaultColumns());\n        } else if (columnsProp) {\n            return mergeArraysByKey([\n                defaultColumnsFiltered,\n                columnsProp\n            ], 'key');\n        } else if (!columnsProp && columnsRedux) {\n            return columnsRedux;\n        }  else {\n            return defaultColumnsFiltered;\n        }\n    }, [\n        showTags,\n        Array.isArray(disableDefaultColumns) ? disableDefaultColumns.join() : disableDefaultColumns,\n        Array.isArray(columnsProp) ?\n            columnsProp.map(({ key }) => key).join() :\n            typeof columnsProp === 'function' ? 'function' : columnsProp,\n        Array.isArray(columnsRedux) ? columnsRedux.map(({ key }) => key).join() : columnsRedux,\n        columnsCounter\n    ]);\n};\n\nexport default useColumns;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { NotAuthorized } from '@redhat-cloud-services/frontend-components/NotAuthorized';\nimport { Tooltip } from '@patternfly/react-core';\n\nconst AccessDenied = ({ title, description, ...props }) => (\n    <NotAuthorized\n        {...props}\n        className=\"ins-c-inventory__no--access\"\n        title={title}\n        description={<Tooltip content=\"inventory:*:read\">\n            {description}\n        </Tooltip>}\n    />\n);\n\nAccessDenied.propTypes = {\n    title: PropTypes.string,\n    description: PropTypes.node\n};\n\nAccessDenied.defaultProps = {\n    title: 'You do not have access to Inventory',\n    description: <div>\n        To view your systems, you must be granted inventory access from your Organization Administrator.\n    </div>\n};\n\nexport default AccessDenied;\n","/* eslint-disable react/display-name */\nimport React, { useEffect, useRef } from 'react';\nimport { useSelector } from 'react-redux';\nimport InventoryEntityTable from './EntityTable';\nimport { Grid, GridItem } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport './InventoryList.scss';\nimport isEqual from 'lodash/isEqual';\nimport AccessDenied from '../../Utilities/AccessDenied';\n\nconst convertItem = ({ children, isOpen, ...item }) => item;\n\n/**\n * Component that works as a side channel for consumers to notify inventory of new data changes.\n */\nconst ContextInventoryList = ({ showHealth, onRefreshData, ignoreRefresh, ...props }) => {\n    const prevItems = useRef(props.items);\n    const prevSortBy = useRef(props.sortBy);\n\n    useEffect(() => {\n        if (props.hasItems) {\n            onRefreshData({}, ignoreRefresh);\n        }\n    }, []);\n\n    /**\n     * Function to calculate for new changes, this function limits re-renders by checking if previous items are\n     * same as new items.\n     * If items are not passed, it only checks for props sortBy.\n     * @param {*} prevProps previous props - items, hasItems, sortBy.\n     */\n    useEffect(() => {\n        if (props.hasItems && !isEqual(prevItems.current.map(convertItem), props.items.map(convertItem))) {\n            prevItems.current = props.items;\n            onRefreshData({}, ignoreRefresh);\n        }\n\n        if (!props.hasItems && !isEqual(prevSortBy.current, props.sortBy)) {\n            prevSortBy.current = props.sortBy;\n            onRefreshData({}, ignoreRefresh);\n        }\n    });\n\n    return (<Grid gutter=\"sm\" className=\"ins-inventory-list\">\n        <GridItem span={ 12 }>\n            <InventoryEntityTable { ...props } onRefreshData={onRefreshData} />\n        </GridItem>\n    </Grid>);\n};\n\n/**\n * Component that consumes active filters and passes them down to component.\n */\nconst InventoryList = React.forwardRef(({ hasAccess, onRefreshData, ...props }, ref) => {\n    const activeFilters = useSelector(({ entities: { activeFilters } }) => activeFilters);\n\n    if (ref) {\n        ref.current = {\n            onRefreshData: (params, disableRefresh = true) => onRefreshData(params, disableRefresh)\n        };\n    }\n\n    return !hasAccess ?\n        <div className=\"ins-c-inventory__no-access\">\n            <AccessDenied showReturnButton={false} />\n        </div>\n        : (\n            <ContextInventoryList\n                { ...props }\n                activeFilters={ activeFilters }\n                onRefreshData={ onRefreshData }\n            />\n        );\n});\n\nContextInventoryList.propTypes = {\n    ...InventoryList.propTypes,\n    setRefresh: PropTypes.func,\n    onRefreshData: PropTypes.func,\n    ignoreRefresh: PropTypes.bool\n};\nContextInventoryList.defaultProps = {\n    perPage: 50,\n    page: 1,\n    ignoreRefresh: true\n};\nInventoryList.propTypes = {\n    showTags: PropTypes.bool,\n    filterEntities: PropTypes.func,\n    loadEntities: PropTypes.func,\n    showHealth: PropTypes.bool,\n    page: PropTypes.number,\n    perPage: PropTypes.number,\n    sortBy: PropTypes.shape({\n        key: PropTypes.string,\n        direction: PropTypes.string\n    }),\n    items: PropTypes.arrayOf(PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.shape({\n            id: PropTypes.string.isRequired\n        }),\n        PropTypes.shape({\n            account: PropTypes.any,\n            isOpen: PropTypes.bool,\n            title: PropTypes.node\n        })\n    ])),\n    entities: PropTypes.arrayOf(PropTypes.any),\n    customFilters: PropTypes.shape({\n        tags: PropTypes.oneOfType([\n            PropTypes.object,\n            PropTypes.arrayOf(PropTypes.string)\n        ])\n    }),\n    getEntities: PropTypes.func,\n    hideFilters: PropTypes.shape({\n        tags: PropTypes.bool,\n        name: PropTypes.bool,\n        registeredWith: PropTypes.bool,\n        stale: PropTypes.bool,\n        operatingSystem: PropTypes.bool\n    }),\n    onRefreshData: PropTypes.func\n};\n\nInventoryList.defaultProps = {\n    hasAccess: true\n};\n\nexport default InventoryList;\n","/* eslint-disable camelcase */\nimport React from 'react';\nimport { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\n\n/**\n * Bottom pagination used in table. It can remember what page user is on if user entered the page number in input.\n */\nconst FooterPagination = ({\n    total,\n    page,\n    perPage,\n    direction,\n    isFull,\n    hasAccess,\n    paginationProps,\n    onRefreshData,\n    loaded\n}) => {\n    /**\n     * Thi method sets new page and combines previous props to apply sort, filters etc.\n     * @param {*} event html event to figure if target was input.\n     * @param {*} page current page to change to.\n     */\n    const onSetPage = (_event, pageArg) => onRefreshData({ page: pageArg });\n\n    /**\n     * This method changes per page, it automatically sets page to first one.\n     * It also applies previous sort, filters, etc.\n     * @param {*} _event event is now not used.\n     * @param {*} perPage new perPage set by user.\n     */\n    const onPerPageSelect = (_event, perPageArg) => onRefreshData({ page: 1, per_page: perPageArg });\n\n    return (loaded || !hasAccess) ? (\n        <Pagination\n            { ...isFull && {\n                variant: PaginationVariant.bottom\n            } }\n            isDisabled={!hasAccess}\n            itemCount={ total }\n            page={ page }\n            perPage={ perPage }\n            dropDirection={ direction }\n            onSetPage={ onSetPage }\n            onPerPageSelect={ onPerPageSelect }\n            {...paginationProps}\n        />\n    ) : null;\n};\n\nFooterPagination.propTypes = {\n    perPage: PropTypes.number,\n    total: PropTypes.number,\n    page: PropTypes.number,\n    isFull: PropTypes.bool,\n    hasAccess: PropTypes.bool,\n    direction: PropTypes.string,\n    paginationProps: PropTypes.object,\n    loaded: PropTypes.bool,\n    onRefreshData: PropTypes.func.isRequired\n};\n\nFooterPagination.defaultProps = {\n    total: 0,\n    isFull: false,\n    direction: 'up',\n    hasAccess: true\n};\n\nexport default FooterPagination;\n","/* eslint-disable camelcase */\nimport React, { Fragment, forwardRef, useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector, shallowEqual, useStore, useDispatch } from 'react-redux';\nimport EntityTableToolbar from './EntityTableToolbar';\nimport { TableToolbar } from '@redhat-cloud-services/frontend-components/TableToolbar';\nimport { ErrorState } from '@redhat-cloud-services/frontend-components/ErrorState';\nimport InventoryList from './InventoryList';\nimport Pagination from './Pagination';\nimport AccessDenied from '../../Utilities/AccessDenied';\nimport { loadSystems } from '../../Utilities/index';\nimport isEqual from 'lodash/isEqual';\nimport { entitiesLoading } from '../../store/actions';\n\n/**\n * A helper function to store props and to always return the latest state.\n * For example, EntityTableToolbar wraps OnRefreshData in a callback, so we need this\n * to get the latest props and not the props at the time of when the function is\n * being wrapped in callback.\n */\nconst propsCache = () => {\n    let cache = {};\n\n    const updateProps = (props) => { cache = props; };\n\n    const getProps = () => cache;\n\n    return { updateProps, getProps };\n};\n\n/**\n * This component is used to combine all essential components together:\n *   * EntityTableToolbar - to control top toolbar.\n *   * InventoryList - to allow consumers to change data from outside and contains actual inventory table.\n *   * Pagination - bottom pagination.\n * It also calculates pagination and sortBy from props or from store if consumer passed items or not.\n */\n\nconst InventoryTable = forwardRef(({ // eslint-disable-line react/display-name\n    onRefresh,\n    children,\n    inventoryRef,\n    items,\n    total: propsTotal,\n    page: propsPage,\n    perPage: propsPerPage,\n    showTags,\n    sortBy: propsSortBy,\n    customFilters,\n    hasAccess = true,\n    isFullView = false,\n    getEntities,\n    getTags,\n    hideFilters,\n    paginationProps,\n    errorState = <ErrorState />,\n    autoRefresh,\n    isLoaded,\n    initialLoading,\n    ignoreRefresh,\n    showTagModal,\n    ...props\n}, ref) => {\n    const hasItems = Boolean(items);\n    const error = useSelector(({ entities }) => (\n        entities?.error\n    ));\n    const page = useSelector(({ entities: { page: invPage } }) => (\n        hasItems ? propsPage : (invPage || 1)\n    )\n    , shallowEqual);\n    const perPage = useSelector(({ entities: { perPage: invPerPage } }) => (\n        hasItems ? propsPerPage : (invPerPage || 50)\n    )\n    , shallowEqual);\n    const total = useSelector(({ entities: { total: invTotal } }) => {\n        if (hasItems) {\n            return propsTotal !== undefined ? propsTotal : items?.length;\n        }\n\n        return invTotal;\n    }, shallowEqual);\n    const pagination = {\n        page,\n        perPage,\n        total\n    };\n    const sortBy = useSelector(({ entities: { sortBy: invSortBy } }) => (\n        hasItems ? propsSortBy : invSortBy\n    ), shallowEqual);\n\n    const reduxLoaded = useSelector(({ entities }) => (\n        hasItems && isLoaded !== undefined ? (isLoaded && entities?.loaded) : entities?.loaded\n    ));\n\n    /**\n     * If initialLoading is set to true, then the component should be in loading state until\n     * entities.loaded is false (and then we can use the redux loading state and forget this one)\n     */\n    const [initialLoadingActive, disableInitialLoading] = useState(initialLoading);\n    useEffect(() => {\n        if (!reduxLoaded) {\n            disableInitialLoading();\n        }\n    }, [reduxLoaded]);\n    const loaded = reduxLoaded && !initialLoadingActive;\n\n    const dispatch = useDispatch();\n    const store = useStore();\n\n    const cache = useRef(propsCache());\n    cache.current.updateProps({\n        page,\n        perPage,\n        items,\n        sortBy,\n        hideFilters,\n        showTags,\n        getEntities,\n        customFilters,\n        hasItems\n    });\n\n    /**\n     * If consumer wants to change data they can call this function via component ref.\n     * @param {*} options new options to be applied, like pagination, filters, etc.\n     */\n    const onRefreshData = (options = {}, disableOnRefresh) => {\n        const { activeFilters } = store.getState().entities;\n        const cachedProps = cache.current?.getProps() || {};\n        const currPerPage = options?.per_page || options?.perPage || cachedProps.perPage;\n\n        const params = {\n            page: cachedProps.page,\n            per_page: currPerPage,\n            items: cachedProps.items,\n            sortBy: cachedProps.sortBy,\n            hideFilters: cachedProps.hideFilters,\n            filters: activeFilters,\n            hasItems: cachedProps.hasItems,\n            ...cachedProps.customFilters,\n            ...options\n        };\n\n        if (onRefresh && !disableOnRefresh) {\n            dispatch(entitiesLoading());\n            onRefresh(params, (options) => {\n                dispatch(\n                    loadSystems(\n                        { ...params, ...options },\n                        cachedProps.showTags,\n                        cachedProps.getEntities\n                    )\n                );\n            });\n        } else {\n            dispatch(\n                loadSystems(\n                    params,\n                    cachedProps.showTags,\n                    cachedProps.getEntities\n                )\n            );\n        }\n    };\n\n    const prevFilters = useRef(customFilters);\n    useEffect(() => {\n        if (autoRefresh && !isEqual(prevFilters.current, customFilters)) {\n            onRefreshData({ page: 1 });\n            prevFilters.current = customFilters;\n        }\n    });\n\n    return (\n        (hasAccess === false && isFullView) ?\n            <AccessDenied\n                title=\"This application requires Inventory permissions\"\n                description={<div>\n                    To view the content of this page, you must be granted\n                    a minimum of inventory permissions from your Organization Administrator.\n                </div>}\n            /> :\n            !error ? <Fragment>\n                <EntityTableToolbar\n                    { ...props }\n                    customFilters={customFilters}\n                    hasAccess={hasAccess}\n                    items={ items }\n                    hasItems={ hasItems }\n                    total={ pagination.total }\n                    page={ pagination.page }\n                    perPage={ pagination.perPage }\n                    showTags={ showTags }\n                    getTags={ getTags }\n                    onRefreshData={onRefreshData}\n                    sortBy={ sortBy }\n                    hideFilters={hideFilters}\n                    paginationProps={paginationProps}\n                    loaded={loaded}\n                    showTagModal={showTagModal}\n                    activeFiltersConfig={{ deleteTitle: 'Reset filters', ...props.activeFiltersConfig }}\n                >\n                    { children }\n                </EntityTableToolbar>\n                <InventoryList\n                    { ...props }\n                    customFilters={customFilters}\n                    hasAccess={hasAccess}\n                    ref={ref}\n                    hasItems={ hasItems }\n                    items={ items }\n                    page={ pagination.page }\n                    sortBy={ sortBy }\n                    perPage={ pagination.perPage }\n                    showTags={ showTags }\n                    onRefreshData={onRefreshData}\n                    loaded={loaded}\n                    ignoreRefresh={ignoreRefresh}\n                />\n                <TableToolbar isFooter className=\"ins-c-inventory__table--toolbar\">\n                    <Pagination\n                        hasAccess={hasAccess}\n                        isFull\n                        total={ pagination.total }\n                        page={ pagination.page }\n                        perPage={ pagination.perPage }\n                        hasItems={ hasItems }\n                        onRefreshData={onRefreshData}\n                        paginationProps={paginationProps}\n                        loaded={loaded}\n                    />\n                </TableToolbar>\n            </Fragment> : errorState\n    );\n});\n\nInventoryTable.propTypes = {\n    autoRefresh: PropTypes.bool,\n    onRefresh: PropTypes.func,\n    children: PropTypes.node,\n    inventoryRef: PropTypes.object,\n    items: PropTypes.array,\n    total: PropTypes.number,\n    page: PropTypes.number,\n    perPage: PropTypes.number,\n    showTags: PropTypes.bool,\n    getTags: PropTypes.func,\n    sortBy: PropTypes.object,\n    customFilters: PropTypes.any,\n    hasAccess: PropTypes.bool,\n    isFullView: PropTypes.bool,\n    getEntities: PropTypes.func,\n    hideFilters: PropTypes.object,\n    paginationProps: PropTypes.object,\n    errorState: PropTypes.node,\n    isLoaded: PropTypes.bool,\n    initialLoading: PropTypes.bool,\n    ignoreRefresh: PropTypes.bool,\n    showTagModal: PropTypes.bool,\n    activeFiltersConfig: PropTypes.object\n};\n\nexport default InventoryTable;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { usePermissionsWithContext } from '@redhat-cloud-services/frontend-components-utilities/RBACHook';\nimport DetailWrapper from './DetailWrapper';\nimport AccessDenied from '../../Utilities/AccessDenied';\n\nconst DetailRenderer = ({ isRbacEnabled, ...props }) => {\n    const { hasAccess } = usePermissionsWithContext([\n        'inventory:*:*',\n        'inventory:*:read',\n        'inventory:hosts:read'\n    ]);\n\n    if (isRbacEnabled && hasAccess === false) {\n        return <AccessDenied />;\n    } else {\n        return <DetailWrapper {...props} />;\n    }\n};\n\nDetailRenderer.propTypes = {\n    isRbacEnabled: PropTypes.bool\n};\n\nexport default DetailRenderer;\n","/* eslint-disable react/display-name */\nimport React from 'react';\nimport { AppInfo, InventoryDetail, FullDetail } from '../components/InventoryDetail';\nimport RenderWrapper from './Wrapper';\nimport TagWithDialog from './TagWithDialog';\nimport { InventoryTable } from '../components/InventoryTable';\nimport * as inventoryFitlers from '../components/filters';\nimport DetailRenderer from '../components/InventoryDetail/DetailRenderer';\n\nexport function inventoryConnector(store, componentsMapper, Wrapper, isRbacEnabled = true) {\n    const showInventoryDrawer = Boolean(Wrapper);\n    return {\n        InventoryTable: React.forwardRef(\n            (props, ref) => <RenderWrapper\n                { ...props }\n                isRbacEnabled={ isRbacEnabled }\n                inventoryRef={ ref }\n                store={ store }\n                cmp={ InventoryTable }\n            />\n        ),\n        AppInfo: React.forwardRef(\n            (props, ref) => <RenderWrapper\n                hideLoader\n                { ...props }\n                {...componentsMapper}\n                isRbacEnabled={ isRbacEnabled }\n                inventoryRef={ ref }\n                store={ store }\n                cmp={ AppInfo }\n            />\n        ),\n        InventoryDetailHead: React.forwardRef(\n            (props, ref) => <RenderWrapper\n                hideLoader\n                { ...props }\n                {...componentsMapper}\n                isRbacEnabled={ isRbacEnabled }\n                inventoryRef={ ref }\n                store={ store }\n                // eslint-disable-next-line react/prop-types\n                showInventoryDrawer={ showInventoryDrawer && !props.hideInvDrawer }\n                cmp={ InventoryDetail }\n            />\n        ),\n        InventoryDetail: React.forwardRef(\n            (props, ref) => <RenderWrapper\n                hideLoader\n                { ...props }\n                {...componentsMapper}\n                isRbacEnabled={ isRbacEnabled }\n                inventoryRef={ ref }\n                store={ store }\n                showInventoryDrawer={ showInventoryDrawer }\n                cmp={ FullDetail }\n            />\n        ),\n        TagWithDialog: React.forwardRef(\n            (props, ref) => <RenderWrapper\n                { ...props }\n                inventoryRef={ ref }\n                isRbacEnabled={ isRbacEnabled }\n                store={ store }\n                cmp={ TagWithDialog }\n            />\n        ),\n        // eslint-disable-next-line react/display-name\n        DetailWrapper: (props) => <DetailRenderer\n            Wrapper={Wrapper}\n            isRbacEnabled={ isRbacEnabled }\n            showInventoryDrawer={ showInventoryDrawer }\n            {...props}\n        />,\n        ...inventoryFitlers\n    };\n}\n","import { useState } from 'react';\nimport { TEXTUAL_CHIP } from '../../Utilities/index';\n\nexport const textFilterState = { textFilter: '' };\nexport const TEXT_FILTER = 'TEXT_FILTER';\nexport const textFilterReducer = (_state, { type, payload }) => ({\n    ...type === TEXT_FILTER && {\n        textFilter: payload\n    }\n});\n\nexport const useTextFilter = ([state, dispatch] = [textFilterState]) => {\n    const [stateValue, setStateValue] = useState('');\n    const value = dispatch ? state.textFilter : stateValue;\n    const setValue = dispatch ? (newValue) => dispatch({ type: TEXT_FILTER, payload: newValue }) : setStateValue;\n\n    const filter = {\n        label: 'Name',\n        value: 'name-filter',\n        filterValues: {\n            placeholder: 'Filter by name',\n            value,\n            onChange: (_e, value) => setValue(value)\n        }\n    };\n    const chip = value.length > 0 ? [{\n        category: 'Display name',\n        type: TEXTUAL_CHIP,\n        chips: [\n            { name: value }\n        ]\n    }] : [];\n    return [filter, chip, value, setValue];\n};\n","import { useState } from 'react';\nimport { STALE_CHIP, staleness } from '../../Utilities/index';\n\nexport const stalenessFilterState = { stalenessFilter: [] };\nexport const STALENESS_FILTER = 'STALENESS_FILTER';\nexport const stalenessFilterReducer = (_state, { type, payload }) => ({\n    ...type === STALENESS_FILTER && {\n        stalenessFilter: payload\n    }\n});\n\nexport const useStalenessFilter = ([state, dispatch] = [stalenessFilterState]) => {\n    let [stalenessStateValue, setStateValue] = useState([]);\n    const stalenessValue = dispatch ? state.stalenessFilter : stalenessStateValue;\n    const setValue = dispatch ? (newValue) => dispatch({ type: STALENESS_FILTER, payload: newValue }) : setStateValue;\n\n    const filter = {\n        label: 'Status',\n        value: 'stale-status',\n        type: 'checkbox',\n        filterValues: {\n            value: stalenessValue,\n            onChange: (_e, value) => setValue(value),\n            items: staleness\n        }\n    };\n    const chip = stalenessValue?.length > 0 ? [{\n        category: 'Status',\n        type: STALE_CHIP,\n        chips: staleness.filter(({ value }) => stalenessValue.includes(value))\n        .map(({ label, ...props }) => ({ name: label, ...props }))\n    }] : [];\n    return [filter, chip, stalenessValue, setValue];\n};\n","import { useState } from 'react';\nimport { REGISTERED_CHIP, registered } from '../../Utilities/index';\n\nexport const registeredWithFilterState = { registeredWithFilter: [] };\nexport const REGISTERED_WITH_FILTER = 'REGISTERED_WITH_FILTER';\nexport const registeredWithFilterReducer = (_state, { type, payload }) => ({\n    ...type === REGISTERED_WITH_FILTER && {\n        registeredWithFilter: payload\n    }\n});\n\nexport const useRegisteredWithFilter = ([state, dispatch] = [registeredWithFilterState]) => {\n    let [registeredWithStateValue, setStateValue] = useState([]);\n    const registeredWithValue = dispatch ? state.registeredWithFilter : registeredWithStateValue;\n    const setValue = dispatch ? (newValue) => dispatch({ type: REGISTERED_WITH_FILTER, payload: newValue }) : setStateValue;\n\n    const filter = {\n        label: 'Data Collector',\n        value: 'data-collector-registered-with',\n        type: 'checkbox',\n        filterValues: {\n            value: registeredWithValue,\n            onChange: (_e, value) => setValue(value),\n            items: registered\n        }\n    };\n    const chip = registeredWithValue?.length > 0 ? [{\n        category: 'Data Collector',\n        type: REGISTERED_CHIP,\n        chips: registered.filter(({ value }) => registeredWithValue.includes(value))\n        .map(({ label, ...props }) => ({ name: label, ...props }))\n    }] : [];\n    return [filter, chip, registeredWithValue, setValue];\n};\n","import { useTagsFilter as tagsFilter } from '@redhat-cloud-services/frontend-components/FilterHooks';\n\nexport const useTagsFilter = (\n    allTags = [],\n    loaded = false,\n    additionalTagsCount = 0,\n    onShowMoreClick,\n    stateMapper\n) => {\n    const {\n        filter,\n        chips,\n        selectedTags,\n        setValue,\n        filterTagsBy,\n        seFilterTagsBy\n    } = tagsFilter(\n        allTags,\n        loaded,\n        additionalTagsCount,\n        onShowMoreClick,\n        stateMapper,\n        'system'\n    );\n\n    return {\n        tagsFilter: {\n            label: 'Tags',\n            value: 'tags',\n            type: 'group',\n            placeholder: 'Filter system by tag',\n            filterValues: {\n                ...filter\n            }\n        },\n        tagsChip: chips,\n        selectedTags,\n        setSelectedTags: setValue,\n        filterTagsBy,\n        seFilterTagsBy\n    };\n};\n","import { useState } from 'react';\nimport { RHCD_FILTER_KEY, rhcdOptions } from '../../Utilities/index';\n\nexport const rhcdFilterState = { rhcdFilter: null };\nexport const RHCD_FILTER = 'RHCD_FILTER';\nexport const rhcdFilterReducer = (_state, { type, payload }) => ({\n    ...type === RHCD_FILTER && {\n        rhcdFilter: payload\n    }\n});\n\nexport const useRhcdFilter = ([state, dispatch] = [rhcdFilterState]) => {\n    let [rhcdStateValue, setStateValue] = useState([]);\n    const rhcdValue = dispatch ? state.rhcdFilter : rhcdStateValue;\n    const setValue = dispatch ? (newValue) => dispatch({ type: RHCD_FILTER, payload: newValue }) : setStateValue;\n\n    const filter = {\n        label: 'RHC status',\n        value: 'rhc-status',\n        type: 'checkbox',\n        filterValues: {\n            value: rhcdValue,\n            onChange: (_e, value) => setValue(value),\n            items: rhcdOptions\n        }\n    };\n    const chip = rhcdValue?.length > 0 ? [{\n        category: 'RHC status',\n        type: RHCD_FILTER_KEY,\n        chips: rhcdOptions.filter(({ value }) => rhcdValue.includes(value))\n        .map(({ label, ...props }) => ({ name: label, ...props }))\n    }] : [];\n    return [filter, chip, rhcdValue, setValue];\n};\n","import { useState } from 'react';\nimport { UPDATE_METHOD_KEY, updateMethodOptions } from '../../Utilities/index';\n\nexport const updateMethodFilterState = { updateMethodFilter: null };\nexport const UPDATE_METHOD_FILTER = 'UPDATE_METHOD_FILTER';\nexport const updateMethodFilterReducer = (_state, { type, payload }) => ({\n    ...type === UPDATE_METHOD_FILTER && {\n        updateMethodFilter: payload\n    }\n});\n\nexport const useUpdateMethodFilter = ([state, dispatch] = [updateMethodFilterState]) => {\n    let [filterStateValue, setStateValue] = useState([]);\n    const updateMethodValue = dispatch ? state.updateMethodFilter : filterStateValue;\n    const setValue = dispatch ? (newValue) => dispatch({ type: UPDATE_METHOD_FILTER, payload: newValue }) : setStateValue;\n\n    const filter = {\n        label: 'System Update Method',\n        value: 'update-method',\n        type: 'checkbox',\n        filterValues: {\n            value: updateMethodValue,\n            onChange: (_e, value) => setValue(value),\n            items: updateMethodOptions\n        }\n    };\n    const chip = updateMethodValue?.length > 0 ? [{\n        category: 'System Update Method',\n        type: UPDATE_METHOD_KEY,\n        chips: updateMethodOptions.filter(({ value }) => updateMethodValue.includes(value))\n        .map(({ label, ...props }) => ({ name: label, ...props }))\n    }] : [];\n    return [filter, chip, updateMethodValue, setValue];\n};\n","export * from './useTextFilter';\nexport * from './useStalenessFilter';\nexport * from './useRegisteredWithFilter';\nexport * from './useTagsFilter';\nexport * from './useOperatingSystemFilter';\nexport * from './useRhcdFilter';\nexport * from './useUpdateMethodFilter';\nexport const filtersReducer = (reducersList) => (state, action) => reducersList.reduce((acc, curr) => ({\n    ...acc,\n    ...curr?.(state, action)\n}), state);\n","import { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchOperatingSystems } from '../../store/inventory-actions';\nimport {\n    buildOSFilterChip,\n    getSelectedOsFilterVersions,\n    groupOSFilterVersions,\n    onOSFilterChange,\n    toGroupSelection\n} from '../../Utilities/OperatingSystemFilterHelpers';\n\nexport const OPERATING_SYSTEM_FILTER = 'OPERATING_SYSTEM_FILTER';\nexport const operatingSystemFilterReducer = (_state, { type, payload }) => ({\n    ...type === OPERATING_SYSTEM_FILTER && {\n        operatingSystemFilter: payload\n    }\n});\n\n/**\n* OS version filter hook.\n* @param {Array} apiParams - an array containing parameters for GET /system_profile/operating_system call\n* @return {Array} An array containing config object, chips array and value setter function.\n*/\nconst useOperatingSystemFilter = (apiParams = []) => {\n    const dispatch = useDispatch();\n    const operatingSystems = useSelector(({ entities }) => entities?.operatingSystems);\n    const operatingSystemsLoaded = useSelector(({ entities }) => entities?.operatingSystemsLoaded) || false;\n\n    // selected versions has the boolean set to true\n    const [selected, setSelected] = useState({});\n    const [groups, setGroups] = useState([]);\n\n    useEffect(() => {\n        dispatch(fetchOperatingSystems(apiParams));\n    }, []);\n\n    useEffect(() => {\n        const newGroups = groupOSFilterVersions(operatingSystems);\n        setGroups((operatingSystems || []).length === 0\n            ? [{ items: [{ label: 'No versions available' }] }]\n            : newGroups);\n        setSelected(\n            toGroupSelection(\n                getSelectedOsFilterVersions(selected),\n                (operatingSystems || []).map(({ value }) => value)\n            )\n        );\n    }, [operatingSystems]);\n\n    // PrimaryToolbar filter configuration\n    const config = useMemo(() => ({\n        label: 'Operating System',\n        value: 'operating-system-filter',\n        type: 'group',\n        filterValues: {\n            selected,\n            groups,\n            onChange: (event, newSelection, clickedGroup, clickedItem) => {\n                setSelected(onOSFilterChange(event, newSelection, clickedGroup, clickedItem));\n            }\n        }\n    }), [selected, groups]);\n\n    const chips = useMemo(() => buildOSFilterChip(selected, operatingSystems), [selected, operatingSystems]);\n\n    // receives an array of OS version values, e.g., ['7.3', '9.0']\n    const setValue = useCallback((versions = []) => {\n        setSelected(\n            toGroupSelection(\n                versions,\n                operatingSystemsLoaded\n                    ? (operatingSystems || []).map(({ value }) => value)\n                    : undefined\n            )\n        );\n    }, [operatingSystemsLoaded, operatingSystems]);\n\n    const value = useMemo(() => getSelectedOsFilterVersions(selected), [selected]);\n\n    return [config, chips, value, setValue];\n};\n\nexport default useOperatingSystemFilter;\n"],"names":["updateGroupSelectionIdentifier","selection","major","set","Object","values","filter","v","every","Boolean","toGroupSelection","value","availableVersions","undefined","reduce","acc","version","split","includes","compareVersions","a","b","asc","compare","coerce","rcompare","getSelectedOsFilterVersions","selected","versions","entries","forEach","match","push","groupOSFilterVersions","groups","prev","label","groupSelectable","type","items","sort","sorted","map","group","buildOSFilterChip","operatingSystemValue","operatingSystems","minors","chips","name","length","category","OS_CHIP","onOSFilterChange","event","clickedGroup","clickedItem","newSelection","assign","mapValues","omit","redirectToInventoryList","id","onBackToListClick","document","referrer","location","origin","pathname","history","back","href","replace","RegExp","getFact","path","factDict","get","SystemNotFound","inventoryId","EmptyState","variant","EmptyStateVariant","EmptyStateIcon","icon","CubesIcon","Title","headingLevel","size","EmptyStateBody","Button","onClick","propTypes","PropTypes","TopBar","entity","loaded","actions","deleteEntity","addNotification","hideInvLink","showDelete","showInventoryDrawer","TitleWrapper","TagsWrapper","DeleteWrapper","ActionsWrapper","showTags","dispatch","useDispatch","useState","isOpen","setIsOpen","isModalOpen","setIsModalOpen","inventoryActions","title","component","Split","className","SplitItem","isFilled","Flex","FlexItem","display_name","TagWithDialog","count","tags","systemId","TagsModal","Skeleton","SkeletonSize","Dropdown","onSelect","toggle","DropdownToggle","onToggle","position","DropdownPosition","dropdownItems","key","action","DropdownItem","toggleDrawer","DeleteModal","handleModalToggle","currentSytems","onConfirm","description","dismissable","defaultProps","Fragment","TitleWTagsWrapperrapper","FactsInfo","LastSeenWrapper","UUIDWrapper","props","Grid","GridItem","md","grow","default","fontSize","CullingInformation","culled","staleWarning","stale","currDate","Date","DateFormat","date","verifyCulledInsightsClient","InsightsDisconnected","ApplicationDetails","onTabSelect","appList","search","useLocation","useHistory","searchParams","URLSearchParams","useSelector","entityDetails","activeApps","isVisible","activeApp","disabledApps","systemProfileStore","defaultApp","appName","find","pageId","applications","activeTabs","setActiveTabs","useEffect","detailSelect","filteredResult","app","Tabs","activeKey","item","activeItem","oneApp","toString","Tab","eventKey","Alert","isInline","hasGutter","span","TextContent","style","Text","TextVariants","TextList","TextListItem","T","Card","isCompact","CardTitle","CardBody","CardFooter","ClipboardCopy","isCode","isReadOnly","height","target","InventoryDetail","children","loadEntity","hasItems","systems","displayName","callback","reloadWrapper","payload","per_reporter_staleness","hideBack","InventoryDetailWrapper","entityId","useParams","console","warn","pop","AppInfo","componentMapper","store","useStore","Cmp","BasicInfo","Stack","StackItem","ChipGroup","Chip","namespace","SystemIssues","isOpened","advisor","systemIssues","compliance","cve","patch","getAdvisorData","getComplianceData","getPatchData","getVulnData","Level","LevelItem","isLoaded","critical","important","moderate","low","bug","security","enhancement","criticalCount","profiles","DetailWrapper","Wrapper","isExpanded","isToggleOpened","Drawer","onExpand","DrawerContent","panelContent","DrawerPanelContent","DrawerHead","DrawerActions","DrawerCloseButton","DrawerPanelBody","DrawerContentBody","buildCells","columns","extra","composed","renderFunc","data","TitleColumn","createRows","rows","expandable","noSystemsTable","cells","colSpan","dataLabel","flatten","oneItem","actionProps","parent","fullWidth","onDeleteFilter","deleted","currFilter","deletedItem","includesSortable","transforms","fn","EntityTableToolbar","total","page","perPage","filterConfig","actionsConfig","activeFiltersConfig","getTags","sortBy","customFilters","hasAccess","bulkSelect","hideFilters","paginationProps","onRefreshData","showTagModal","reducer","useReducer","filtersReducer","textFilterReducer","stalenessFilterReducer","registeredWithFilterReducer","tagsFilterReducer","operatingSystemFilterReducer","rhcdFilterReducer","updateMethodFilterReducer","textFilterState","stalenessFilterState","registeredWithFilterState","tagsFilterState","rhcdFilterState","updateMethodFilterState","filters","entities","activeFilters","allTagsLoaded","allTags","additionalTagsCount","useTextFilter","nameFilter","nameChip","textFilter","setTextFilter","useStalenessFilter","stalenessFilter","stalenessChip","staleFilter","setStaleFilter","useRegisteredWithFilter","registeredFilter","registeredChip","registeredWithFilter","setRegisteredWithFilter","useRhcdFilter","rhcdFilterConfig","rhcdFilterChips","rhcdFilterValue","setRhcdFilterValue","useOperatingSystemFilter","osFilterConfig","osFilterChips","osFilterValue","setOsFilterValue","useUpdateMethodFilter","updateMethodConfig","updateMethodChips","updateMethodValue","setUpdateMethodValue","useTagsFilter","toggleTagModal","tagsFilter","tagsChip","selectedTags","setSelectedTags","filterTagsBy","seFilterTagsBy","debounceGetAllTags","useCallback","debounce","config","options","fetchAllTags","pagination","enabledFilters","all","registeredWith","operatingSystem","rhcdFilter","updateMethodFilter","onRefreshDataInner","updateData","debouncedRefresh","direction","reduceFilters","tagFilters","osFilter","onSetFilter","filterKey","refresh","newFilters","oneFilter","prototype","hasOwnProperty","call","shouldReload","debounced","trimmedValue","trim","textualFilter","TEXT_FILTER","onSetTextFilter","mapGroups","deleteMapper","TEXTUAL_CHIP","TAG_CHIP","onApplyTags","onDeleteTag","STALE_CHIP","REGISTERED_CHIP","xor","RHCD_FILTER_KEY","UPDATE_METHOD_KEY","inventoryFilters","PrimaryToolbar","isDisabled","filterValues","placeholder","toLowerCase","onDelete","e","isAll","restDeleted","clearFilters","defaultFilters","setFilter","itemCount","onSetPage","_e","newPage","onPerPageSelect","newPerPage","per_page","onApply","arrayToSelection","onToggleModal","onClearFilters","onRefresh","hasCheckbox","disableDefaultColumns","EntityTable","onExpandClick","tableProps","onSort","isExpandable","onRowClick","noDetail","columnsProp","columnsCounter","columnsRedux","next","index","findIndex","disabledColumns","Array","isArray","defaultColumnsFiltered","useMemo","defaultColumns","disableColumns","isColumnEnabled","mergeArraysByKey","join","useColumns","cellFormatters","width","cellWidth","isStatic","sortable","createColumns","RowWrapper","actionResolver","PfTable","_event","slice","gridBreakPoint","TableGridBreakpoint","setSort","onSortChange","sortKey","checked","rowId","row","selectEntity","onCollapse","isStickyHeader","TableHeader","TableBody","SkeletonTable","colSize","rowSize","showActions","showHealth","TableVariant","AccessDenied","NotAuthorized","Tooltip","content","convertItem","ContextInventoryList","ignoreRefresh","prevItems","useRef","prevSortBy","isEqual","current","gutter","InventoryList","React","ref","params","disableRefresh","showReturnButton","setRefresh","filterEntities","loadEntities","account","getEntities","FooterPagination","isFull","Pagination","PaginationVariant","dropDirection","pageArg","perPageArg","InventoryTable","forwardRef","inventoryRef","propsTotal","propsPage","propsPerPage","propsSortBy","isFullView","errorState","ErrorState","autoRefresh","initialLoading","error","invPage","shallowEqual","invPerPage","invTotal","invSortBy","reduxLoaded","initialLoadingActive","disableInitialLoading","cache","updateProps","getProps","propsCache","disableOnRefresh","getState","cachedProps","currPerPage","entitiesLoading","loadSystems","prevFilters","deleteTitle","TableToolbar","isFooter","DetailRenderer","isRbacEnabled","usePermissionsWithContext","inventoryConnector","componentsMapper","cmp","hideLoader","InventoryDetailHead","hideInvDrawer","FullDetail","inventoryFitlers","_state","state","stateValue","setStateValue","setValue","newValue","onChange","chip","STALENESS_FILTER","stalenessStateValue","stalenessValue","staleness","REGISTERED_WITH_FILTER","registeredWithStateValue","registeredWithValue","registered","onShowMoreClick","stateMapper","RHCD_FILTER","rhcdStateValue","rhcdValue","rhcdOptions","UPDATE_METHOD_FILTER","filterStateValue","updateMethodOptions","reducersList","curr","OPERATING_SYSTEM_FILTER","operatingSystemFilter","apiParams","operatingSystemsLoaded","setSelected","setGroups","fetchOperatingSystems","newGroups"],"sourceRoot":""}