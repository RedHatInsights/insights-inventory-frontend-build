{"version":3,"file":"js/259.bb673b671143e58a9de8.js","mappings":"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","sources":["webpack:///./src/components/InventoryGroups/Modals/Modal.js","webpack:///./src/components/InventoryGroups/Modals/ModalSchemas/schemes.js","webpack:///./src/components/InventoryGroups/helpers/validate.js","webpack:///./src/components/InventoryGroups/utils/apiWithToast.js"],"sourcesContent":["import React from 'react';\nimport { Modal } from '@patternfly/react-core';\nimport FormRenderer from '@data-driven-forms/react-form-renderer/form-renderer';\nimport FormTemplate from '@data-driven-forms/pf4-component-mapper/form-template';\nimport componentMapper from '@data-driven-forms/pf4-component-mapper/component-mapper';\nimport PropTypes from 'prop-types';\n\nconst RepoModal = ({\n    isModalOpen,\n    title,\n    titleIconVariant,\n    closeModal,\n    submitLabel,\n    schema,\n    initialValues,\n    variant,\n    reloadData,\n    size,\n    onSubmit,\n    customFormTemplate,\n    additionalMappers\n}) => {\n    return (\n        <Modal\n            ouiaId=\"group-modal\"\n            variant={size ?? 'small'}\n            title={title}\n            titleIconVariant={titleIconVariant ?? null}\n            isOpen={isModalOpen}\n            onClose={closeModal}\n        >\n            <FormRenderer\n                schema={schema}\n                FormTemplate={customFormTemplate ? customFormTemplate : (props) => (\n                    <FormTemplate\n                        {...props}\n                        submitLabel={submitLabel}\n                        disableSubmit={['invalid']}\n                        buttonsProps={{\n                            submit: { variant }\n                        }}\n                    />\n                )}\n                initialValues={initialValues}\n                componentMapper={additionalMappers\n                    ? { ...additionalMappers, ...componentMapper }\n                    : componentMapper}\n                //reload comes from the table and fetches fresh data\n                onSubmit={async (values) => {\n                    await onSubmit(values);\n                    setTimeout(async () => await reloadData(), 500);\n                    closeModal();\n                }}\n                onCancel={() => closeModal()}\n                subscription={{ values: true }}\n            />\n        </Modal>\n    );\n};\n\nRepoModal.propTypes = {\n    isModalOpen: PropTypes.bool,\n    title: PropTypes.string,\n    closeModal: PropTypes.func,\n    reloadData: PropTypes.func,\n    submitLabel: PropTypes.string,\n    schema: PropTypes.object,\n    initialValues: PropTypes.object,\n    variant: PropTypes.string,\n    onSubmit: PropTypes.func,\n    size: PropTypes.string,\n    additionalMappers: PropTypes.object,\n    titleIconVariant: PropTypes.any,\n    customFormTemplate: PropTypes.node\n};\n\nexport default RepoModal;\n","import React from 'react';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport { nameValidator } from '../../helpers/validate';\nimport { Text } from '@patternfly/react-core';\n\nexport const createGroupSchema = (namePresenceValidator) => ({\n    fields: [\n        {\n            component: componentTypes.TEXT_FIELD,\n            name: 'name',\n            label: 'Group name',\n            helperText:\n        'Can only contain letters, numbers, spaces, hyphens ( - ), and underscores( _ ).',\n            isRequired: true,\n            autoFocus: true,\n            validate: [\n                // async validator has to be first in the list\n                namePresenceValidator,\n                { type: validatorTypes.REQUIRED },\n                { type: validatorTypes.MAX_LENGTH, threshold: 50 },\n                nameValidator\n            ]\n        }\n    ]\n});\n\nexport const confirmSystemsAddSchema = (hostsNumber) => ({\n    fields: [\n        {\n            component: componentTypes.PLAIN_TEXT,\n            name: 'warning-message',\n            label: `${hostsNumber} of the systems you selected already belong to a group.\n             Moving them to a different group will impact their configuration.`\n        },\n        {\n            component: componentTypes.CHECKBOX,\n            name: 'confirmation',\n            label: 'I acknowledge that this action cannot be undone.',\n            validate: [{ type: validatorTypes.REQUIRED }]\n        }\n    ]\n});\n\nconst createDescription = (systemName) => {\n    return (\n        <Text>\n        Select a group to add <strong>{systemName}</strong> to, or create a new one.\n        </Text>\n    );\n};\n\n//this is a custom schema that is passed via additional mappers to the Modal component\n//it allows to create custom item types in the modal\n\nexport const addHostSchema = (systemName, groups) => ({\n    fields: [\n        {\n            component: componentTypes.PLAIN_TEXT,\n            name: 'description',\n            label: createDescription(systemName)\n        },\n        {\n            component: 'select',\n            name: 'group',\n            label: 'Select a group',\n            simpleValue: true,\n            isSearchable: true, // enables typeahead\n            isRequired: true,\n            isClearable: true,\n            placeholder: 'Type or click to select a group',\n            options: (groups || []).map(({ id, name }) => ({\n                label: name,\n                value: { name, id }\n            })),\n            validate: [{ type: validatorTypes.REQUIRED }]\n        },\n        { component: 'create-group-btn', name: 'create-group-btn', isRequired: true }\n    ]\n});\n","import validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\n\nexport const nameValidator = {\n    type: validatorTypes.PATTERN,\n    pattern: /^[A-Za-z0-9]+[A-Za-z0-9_\\-\\s]*$/,\n    message:\n      'Name must start with alphanumeric characters and can contain underscore and hyphen characters.'\n};\n","import { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nconst apiWithToast = (dispatch, api, statusMessages) => {\n    const hasSuccess = statusMessages?.onSuccess;\n    const hasInfo = statusMessages?.onInfo;\n\n    if (!statusMessages) {\n        statusMessages = {\n            onSuccess: {\n                title: 'Success',\n                description: 'The request has been made successfully'\n            },\n            onError: {\n                title: 'Error',\n                description: 'An error occurred making the request'\n            }\n        };\n    }\n\n    const fetchData = async () => {\n        try {\n            const response = await api();\n            hasInfo &&\n          dispatch({\n              ...addNotification({\n                  variant: 'info',\n                  ...statusMessages.onInfo\n              })\n          });\n            hasSuccess &&\n          dispatch({\n              ...addNotification({\n                  variant: 'success',\n                  ...statusMessages.onSuccess\n              })\n          });\n            return response;\n        } catch (err) {\n            dispatch({\n                ...addNotification({\n                    variant: 'danger',\n                    ...statusMessages.onError,\n                    // Add error message from API, if present\n                    description: err?.Title\n                        ? `${statusMessages.onError.description}: ${err.Title}`\n                        : statusMessages.onError.description\n                })\n            });\n            return err;\n        }\n    };\n\n    return fetchData();\n};\n\nexport default apiWithToast;\n"],"names":["i","RepoModal","isModalOpen","title","titleIconVariant","closeModal","submitLabel","schema","initialValues","variant","reloadData","size","onSubmit","customFormTemplate","additionalMappers","ouiaId","isOpen","onClose","FormTemplate","props","disableSubmit","buttonsProps","submit","componentMapper","values","setTimeout","onCancel","subscription","propTypes","PropTypes","createGroupSchema","namePresenceValidator","fields","component","componentTypes","name","label","helperText","isRequired","autoFocus","validate","type","validatorTypes","threshold","nameValidator","confirmSystemsAddSchema","hostsNumber","createDescription","systemName","addHostSchema","groups","simpleValue","isSearchable","isClearable","placeholder","options","map","id","value","pattern","message","dispatch","api","statusMessages","hasSuccess","onSuccess","hasInfo","onInfo","description","onError","fetchData","response","addNotification","Title"],"sourceRoot":""}