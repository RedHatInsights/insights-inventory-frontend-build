{"version":3,"file":"js/exposed-./RootApp.53497aa6791812f4dd32.js","mappings":"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","sources":["webpack:///./src/App.js","webpack:///./src/AppEntry.js","webpack:///./src/components/LostPage.js","webpack:///./src/Routes.js","webpack:///./src/components/SpinnerFallback.js","webpack:///./src/store/index.js","webpack:///./src/store/registeryContext.js"],"sourcesContent":["/* eslint-disable rulesdir/disallow-fec-relative-imports */\nimport React, { useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Routes } from './Routes';\nimport './App.scss';\nimport { NotificationsPortal } from '@redhat-cloud-services/frontend-components-notifications/';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\nimport { RBACProvider } from '@redhat-cloud-services/frontend-components/RBACProvider';\n\nconst App = () => {\n  const history = useHistory();\n  const chrome = useChrome();\n  useEffect(() => {\n    return chrome.on('APP_NAVIGATION', (event) => {\n      if (event.navId === 'inventory') {\n        history.push(`/${location.search}${location.hash}`);\n      } else {\n        history.push(`/${event.navId}${location.search}${location.hash}`);\n      }\n    });\n  }, []);\n\n  return (\n    <div className=\"inventory\">\n      <NotificationsPortal />\n      <RBACProvider appName=\"inventory\">\n        <Routes />\n      </RBACProvider>\n    </div>\n  );\n};\n\nexport default App;\n","import React, { useMemo } from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { getStore, updateReducers } from './store';\nimport RegistryContext from './store/registeryContext';\nimport App from './App';\nimport { getBaseName } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport logger from 'redux-logger';\nimport Fallback from './components/SpinnerFallback';\n\nconst InventoryApp = () => {\n  const registry = useMemo(() => {\n    const store = IS_DEV ? getStore(logger) : getStore();\n    return {\n      register: (newReducers) =>\n        store.replaceReducer(updateReducers(newReducers)),\n      getStore: () => store,\n    };\n  }, []);\n\n  return registry ? (\n    <RegistryContext.Provider\n      value={{\n        getRegistry: () => registry,\n      }}\n    >\n      <Provider store={registry.getStore()}>\n        <Router basename={getBaseName(window.location.pathname)}>\n          <App />\n        </Router>\n      </Provider>\n    </RegistryContext.Provider>\n  ) : (\n    <Fallback />\n  );\n};\n\nexport default InventoryApp;\n","import { EmptyState, EmptyStateBody } from '@patternfly/react-core';\nimport InvalidObject from '@redhat-cloud-services/frontend-components/InvalidObject';\nimport React from 'react';\n\nconst LostPage = () => (\n  <EmptyState>\n    <EmptyStateBody>\n      <InvalidObject />\n    </EmptyStateBody>\n  </EmptyState>\n);\n\nexport default LostPage;\n","import { Redirect, Route, Switch } from 'react-router-dom';\nimport React, { Suspense, lazy, useMemo } from 'react';\nimport { getSearchParams } from './constants';\nimport RenderWrapper from './Utilities/Wrapper';\nimport useFeatureFlag from './Utilities/useFeatureFlag';\nimport LostPage from './components/LostPage';\n\nconst InventoryTable = lazy(() => import('./routes/InventoryTable'));\nconst InventoryDetail = lazy(() => import('./routes/InventoryDetail'));\nconst InventoryGroups = lazy(() => import('./routes/InventoryGroups'));\nconst InventoryGroupDetail = lazy(() =>\n  import('./routes/InventoryGroupDetail')\n);\nconst EdgeInventoryUpdate = lazy(() => import('./routes/SystemUpdate'));\n\nexport const routes = {\n  table: '/',\n  detail: '/:inventoryId',\n  detailWithModal: '/:inventoryId/:modalId',\n  groups: '/groups',\n  groupDetail: '/groups/:groupId',\n  update: '/:inventoryId/update',\n};\n\nexport const Routes = () => {\n  const searchParams = useMemo(() => getSearchParams(), []);\n  const groupsEnabled = useFeatureFlag('hbi.ui.inventory-groups');\n\n  return (\n    <Suspense fallback=\"\">\n      <Switch>\n        <Route\n          exact\n          path={routes.update}\n          component={EdgeInventoryUpdate}\n          rootClass=\"inventory\"\n        />\n        <Route\n          exact\n          path={routes.table}\n          render={() => (\n            <RenderWrapper\n              cmp={InventoryTable}\n              isRbacEnabled\n              {...searchParams}\n            />\n          )}\n          rootClass=\"inventory\"\n        />\n        <Route\n          exact\n          path={routes.groups}\n          component={groupsEnabled ? InventoryGroups : LostPage}\n          rootClass=\"inventory\"\n        />\n        <Route\n          exact\n          path={routes.groupDetail}\n          component={groupsEnabled ? InventoryGroupDetail : LostPage}\n          rootClass=\"inventory\"\n        />\n        <Route\n          exact\n          path={routes.detailWithModal}\n          component={InventoryDetail}\n          rootClass=\"inventory\"\n        />\n        <Route\n          exact\n          path={routes.detail}\n          component={InventoryDetail}\n          rootClass=\"inventory\"\n        />\n        <Redirect path=\"*\" to=\"/\" />\n      </Switch>\n    </Suspense>\n  );\n};\n","import React from 'react';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\n\nconst Fallback = () => (\n  <Bullseye>\n    <Spinner size=\"xl\" />\n  </Bullseye>\n);\n\nexport default Fallback;\n","import MiddlewareListener from '@redhat-cloud-services/frontend-components-utilities/MiddlewareListener';\nimport notificationsMiddleware from '@redhat-cloud-services/frontend-components-notifications/notificationsMiddleware';\nimport promise from 'redux-promise-middleware';\nimport reducers, {\n  entitesDetailReducer,\n  mergeWithDetail,\n  mergeWithEntities,\n  tableReducer,\n} from './reducers';\nexport {\n  default as reducers,\n  tableReducer,\n  entitesDetailReducer,\n} from './reducers';\nimport {\n  applyMiddleware,\n  combineReducers,\n  compose,\n  legacy_createStore as createStore,\n} from 'redux';\nimport { INVENTORY_ACTION_TYPES } from './action-types';\n\nlet middlewareListener;\n\nconst appReducers = {\n  ...reducers,\n  ...mergeWithEntities(tableReducer),\n  ...mergeWithDetail(entitesDetailReducer(INVENTORY_ACTION_TYPES)),\n};\n\nconst composeEnhancers = IS_DEV\n  ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n  : compose;\n\nexport const getStore = (...middleware) => {\n  middlewareListener = new MiddlewareListener();\n  return createStore(\n    combineReducers(appReducers),\n    {},\n    composeEnhancers(\n      applyMiddleware(\n        ...[\n          middlewareListener.getMiddleware(),\n          promise,\n          notificationsMiddleware({\n            errorTitleKey: ['message'],\n            errorDescriptionKey: ['response.data.detail'],\n          }),\n          ...middleware,\n        ]\n      )\n    )\n  );\n};\n\nexport const updateReducers = (newReducers = {}) =>\n  combineReducers({\n    ...appReducers,\n    ...newReducers,\n  });\n\nexport function addNewListener({ actionType, callback }) {\n  return middlewareListener.addNew({\n    on: actionType,\n    callback,\n  });\n}\n","import { createContext } from 'react';\n\nconst RegistryContext = createContext({\n  getRegistry: () => {},\n});\n\nexport default RegistryContext;\n"],"names":["history","useHistory","chrome","useChrome","useEffect","on","event","navId","push","location","search","hash","className","NotificationsPortal","appName","registry","useMemo","store","getStore","register","newReducers","replaceReducer","updateReducers","value","getRegistry","Provider","basename","getBaseName","window","pathname","EmptyState","EmptyStateBody","InvalidObject","InventoryTable","lazy","InventoryDetail","InventoryGroups","InventoryGroupDetail","EdgeInventoryUpdate","routes","table","detail","detailWithModal","groups","groupDetail","update","Routes","searchParams","getSearchParams","groupsEnabled","useFeatureFlag","Suspense","fallback","Switch","Route","exact","path","component","rootClass","render","cmp","isRbacEnabled","LostPage","Redirect","to","size","middlewareListener","appReducers","reducers","mergeWithEntities","tableReducer","mergeWithDetail","entitesDetailReducer","INVENTORY_ACTION_TYPES","composeEnhancers","compose","MiddlewareListener","middleware","createStore","combineReducers","applyMiddleware","getMiddleware","promise","notificationsMiddleware","errorTitleKey","errorDescriptionKey","createContext"],"sourceRoot":""}