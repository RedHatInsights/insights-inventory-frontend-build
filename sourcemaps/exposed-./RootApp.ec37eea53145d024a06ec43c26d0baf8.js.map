{"version":3,"file":"js/exposed-./RootApp.a6f7213d4b8cdc5b5f34.js","mappings":"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","sources":["webpack:///./node_modules/@redhat-cloud-services/frontend-components-notifications/esm/redux/actions/notifications.js","webpack:///./src/AppEntry.js","webpack:///./src/store/reducers.js","webpack:///./src/store/systemProfileStore.js"],"sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { ADD_NOTIFICATION, CLEAR_NOTIFICATIONS, REMOVE_NOTIFICATION } from './action-types';\nfunction generateID(type) {\n    return 'cloud-services' + type + '-' + new Date().getTime() + Math.random().toString(36).slice(2);\n}\nexport var addNotification = function (notification) { return ({\n    type: ADD_NOTIFICATION,\n    payload: __assign({ id: generateID('notification') }, notification),\n}); };\nexport var removeNotification = function (index) { return ({\n    type: REMOVE_NOTIFICATION,\n    payload: index,\n}); };\nexport var clearNotifications = function () { return ({\n    type: CLEAR_NOTIFICATIONS,\n}); };\nexport default {\n    addNotification: addNotification,\n    removeNotification: removeNotification,\n    clearNotifications: clearNotifications,\n};\n//# sourceMappingURL=notifications.js.map","import React, { useMemo } from 'react';\nimport { Provider } from 'react-redux';\nimport { getStore, updateReducers } from './store';\nimport RegistryContext from './store/registeryContext';\nimport App from './App';\nimport logger from 'redux-logger';\nimport Fallback from './components/SpinnerFallback';\n\nconst InventoryApp = () => {\n  const registry = useMemo(() => {\n    const store = IS_DEV ? getStore(logger) : getStore();\n    return {\n      register: (newReducers) =>\n        store.replaceReducer(updateReducers(newReducers)),\n      getStore: () => store,\n    };\n  }, []);\n\n  return registry ? (\n    <RegistryContext.Provider\n      value={{\n        getRegistry: () => registry,\n      }}\n    >\n      <Provider store={registry.getStore()}>\n        <App />\n      </Provider>\n    </RegistryContext.Provider>\n  ) : (\n    <Fallback />\n  );\n};\n\nexport default InventoryApp;\n","import {\n  ACTION_TYPES,\n  INVENTORY_ACTION_TYPES,\n  SELECT_ENTITY,\n  SET_INVENTORY_FILTER,\n  SET_PAGINATION,\n} from './action-types';\nimport systemProfileStore from './systemProfileStore';\nimport { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { mergeArraysByKey } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport { notificationsReducer } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport entitiesReducer, { defaultState as entitiesDefault } from './entities';\nimport entityDetailsReducer, {\n  entityDefaultState as entityDefault,\n  updateEntity,\n} from './entityDetails';\nimport groups from './groups';\nimport groupDetail from './groupDetail';\n\nexport { entitiesReducer, entityDetailsReducer };\n\nconst defaultState = { loaded: false, selected: new Map() };\n\nfunction entitiesLoaded(state, { payload }) {\n  return {\n    ...state,\n    rows: mergeArraysByKey([state.rows, payload.results]),\n    entities: mergeArraysByKey([state.entities, payload.results]),\n  };\n}\n\nfunction entityLoaded(state) {\n  return {\n    ...state,\n    loaded: true,\n  };\n}\n\nfunction entitySelected(state, { payload }) {\n  const selected = state.selected || new Map();\n  if (payload.selected) {\n    if (Array.isArray(payload.id)) {\n      payload.id.forEach((item) => {\n        selected.set(item.id, item);\n      });\n    } else if (payload.id === 0) {\n      state.rows.forEach((row) => selected.set(row.id, row));\n    } else {\n      const selectedRow =\n        state.rows && state.rows.find(({ id }) => id === payload.id);\n      selected.set(payload.id, { ...(selectedRow || {}), id: payload.id });\n    }\n  } else {\n    if (payload.id === 0) {\n      state.rows.forEach((row) => selected.delete(row.id));\n    } else if (payload.id === -1) {\n      selected.clear();\n    } else {\n      selected.delete(payload.id);\n    }\n  }\n\n  return {\n    ...state,\n    selected: new Map(selected),\n  };\n}\n\nfunction entityDeleted(state, { meta }) {\n  const selected = state.selected || new Map();\n  meta.systems.forEach((id) => selected.delete(id));\n\n  return {\n    ...state,\n    selected: new Map(selected),\n  };\n}\n\nfunction onEntitiesLoaded(state, { payload, meta }) {\n  if (meta?.lastDateRequest < state?.lastDateRequest) {\n    return state;\n  }\n\n  if (meta?.controller?.signal?.aborted === true) {\n    return defaultState;\n  }\n\n  return {\n    ...state,\n    rows: mergeArraysByKey([\n      state.rows,\n      payload.results.map((result) => {\n        return {\n          ...result,\n          selected: state.selected && state.selected.has(result.id),\n        };\n      }),\n    ]),\n  };\n}\n\nfunction onSetFilter(state, { payload }) {\n  return {\n    ...state,\n    activeFilters: payload.filtersList,\n  };\n}\n\nfunction onSetPagination(state, { payload }) {\n  const perPage = parseInt(payload.perPage, 10);\n  const page = parseInt(payload.page, 10);\n  return {\n    ...state,\n    perPage: isNaN(perPage) ? 50 : perPage,\n    page: isNaN(page) ? 1 : page,\n  };\n}\n\nlet reducers = {\n  notifications: notificationsReducer,\n  systemProfileStore,\n  groups,\n  groupDetail,\n};\n\nexport const tableReducer = applyReducerHash(\n  {\n    [ACTION_TYPES.GET_ENTITIES_FULFILLED]: entitiesLoaded,\n    [INVENTORY_ACTION_TYPES.LOAD_ENTITIES_FULFILLED]: onEntitiesLoaded,\n    [`${ACTION_TYPES.REMOVE_ENTITY}_FULFILLED`]: entityDeleted,\n    [SELECT_ENTITY]: entitySelected,\n    FILTER_SELECT: (state) => ({ ...state, selected: {} }),\n    [SET_INVENTORY_FILTER]: onSetFilter,\n    [SET_PAGINATION]: onSetPagination,\n    [ACTION_TYPES.UPDATE_DISPLAY_NAME_FULFILLED]: updateEntity,\n  },\n  defaultState\n);\n\nexport const entitesDetailReducer = () =>\n  applyReducerHash(\n    {\n      [INVENTORY_ACTION_TYPES.LOAD_ENTITY_FULFILLED]: entityLoaded,\n    },\n    defaultState\n  );\n\nexport function mergeWithEntities(\n  additionalReducers = (state) => state,\n  defaultState = {}\n) {\n  return {\n    entities: (state, payload) => ({\n      ...additionalReducers(\n        {\n          ...applyReducerHash(\n            {\n              ...entitiesReducer,\n            },\n            { ...entitiesDefault, ...defaultState }\n          )(state, payload),\n        },\n        payload\n      ),\n    }),\n  };\n}\n\nexport function mergeWithDetail(\n  additionalReducers = (state) => state,\n  defaultState = {}\n) {\n  return {\n    entityDetails: (state, payload) => ({\n      ...additionalReducers(\n        {\n          ...applyReducerHash(\n            {\n              ...entityDetailsReducer,\n            },\n            { ...entityDefault, ...defaultState }\n          )(state, payload),\n        },\n        payload\n      ),\n    }),\n  };\n}\n\nexport default reducers;\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { ACTION_TYPES } from './action-types';\n\nexport const defaultState = { loaded: false };\n\nexport const sizes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n// Kudos to https://stackoverflow.com/a/18650828/2560321\nexport const formatBytes = (bytes) => {\n  if (bytes === 0 || isNaN(Number(bytes))) {\n    return '0 B';\n  }\n\n  const index = Math.floor(Math.log(bytes) / Math.log(1024));\n  return `${parseFloat((bytes / Math.pow(1024, index)).toFixed(2))} ${\n    sizes[index]\n  }`;\n};\n\nexport function systemProfilePending(state) {\n  return {\n    ...state,\n    systemProfile: {\n      loaded: false,\n    },\n  };\n}\n\nexport function calculateRepos(repos) {\n  return (\n    repos &&\n    repos.reduce(\n      (acc, curr) => ({\n        ...acc,\n        ...(!('enabled' in curr) || curr.enabled\n          ? {\n              enabled: [...acc.enabled, curr],\n            }\n          : {\n              disabled: [...acc.disabled, curr],\n            }),\n      }),\n      { enabled: [], disabled: [] }\n    )\n  );\n}\n\nexport function calculateInterfaces(interfaces) {\n  return (\n    interfaces &&\n    interfaces.reduce(\n      (acc, curr) => ({\n        interfaces: [...acc.interfaces, curr],\n        ipv4: [...acc.ipv4, ...(curr.ipv4_addresses || [])].filter(Boolean),\n        ipv6: [...acc.ipv6, ...(curr.ipv6_addresses || [])].filter(Boolean),\n      }),\n      { interfaces: [], ipv4: [], ipv6: [] }\n    )\n  );\n}\n\nexport function onSystemProfile(state, { payload: { results } }) {\n  const systemProfile =\n    (results && results[0] && results[0].system_profile) || {};\n  const cloudProviderObj =\n    results &&\n    results[0] &&\n    typeof results[0].system_profile.cloud_provider !== 'undefined' &&\n    results[0].system_profile.cloud_provider;\n  return {\n    ...state,\n    disabledApps: [\n      ...(cloudProviderObj === 'aws' || cloudProviderObj === 'azure'\n        ? []\n        : ['ros']),\n    ],\n    systemProfile: {\n      loaded: true,\n      ...systemProfile,\n      ramSize:\n        systemProfile.system_memory_bytes &&\n        formatBytes(systemProfile.system_memory_bytes),\n      repositories: calculateRepos(systemProfile.yum_repos),\n      network: calculateInterfaces(systemProfile.network_interfaces),\n    },\n  };\n}\n\nexport default applyReducerHash(\n  {\n    [ACTION_TYPES.LOAD_SYSTEM_PROFILE_FULFILLED]: onSystemProfile,\n    [ACTION_TYPES.LOAD_SYSTEM_PROFILE_PENDING]: systemProfilePending,\n  },\n  {\n    systemProfile: defaultState,\n  }\n);\n"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","addNotification","notification","type","payload","id","Date","getTime","Math","random","toString","slice","registry","useMemo","store","getStore","register","newReducers","replaceReducer","updateReducers","React","RegistryContext","Provider","value","getRegistry","App","Fallback","defaultState","loaded","selected","Map","entityLoaded","state","_objectSpread","reducers","notifications","notificationsReducer","systemProfileStore","groups","groupDetail","tableReducer","applyReducerHash","_applyReducerHash","_defineProperty","ACTION_TYPES","GET_ENTITIES_FULFILLED","_ref","rows","mergeArraysByKey","results","entities","INVENTORY_ACTION_TYPES","LOAD_ENTITIES_FULFILLED","_ref5","_meta$controller","_meta$controller$sign","meta","lastDateRequest","controller","signal","aborted","map","result","has","concat","REMOVE_ENTITY","_ref4","systems","forEach","delete","SELECT_ENTITY","_ref2","Array","isArray","item","set","row","selectedRow","find","_ref3","clear","SET_INVENTORY_FILTER","_ref6","activeFilters","filtersList","SET_PAGINATION","_ref7","perPage","parseInt","page","isNaN","UPDATE_DISPLAY_NAME_FULFILLED","updateEntity","entitesDetailReducer","LOAD_ENTITY_FULFILLED","mergeWithEntities","additionalReducers","undefined","entitiesReducer","entitiesDefault","mergeWithDetail","entityDetails","entityDetailsReducer","entityDefault","sizes","formatBytes","bytes","Number","index","floor","log","parseFloat","pow","toFixed","systemProfilePending","systemProfile","calculateRepos","repos","reduce","acc","curr","enabled","_toConsumableArray","disabled","calculateInterfaces","interfaces","ipv4","ipv4_addresses","filter","Boolean","ipv6","ipv6_addresses","onSystemProfile","system_profile","cloudProviderObj","cloud_provider","disabledApps","ramSize","system_memory_bytes","repositories","yum_repos","network","network_interfaces","LOAD_SYSTEM_PROFILE_FULFILLED","LOAD_SYSTEM_PROFILE_PENDING"],"sourceRoot":""}