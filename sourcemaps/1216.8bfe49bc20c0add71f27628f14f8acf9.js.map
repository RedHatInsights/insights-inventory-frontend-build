{"version":3,"file":"js/1216.77e8c56cfa4a8f95ec44.js","mappings":"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","sources":["webpack:///./src/Utilities/InsightsDisconnected.js","webpack:///./src/components/InventoryTable/TitleColumn.js","webpack:///./src/store/entities.js"],"sourcesContent":["import React from 'react';\n\nimport { Tooltip } from '@patternfly/react-core';\nimport { DisconnectedIcon } from '@patternfly/react-icons';\n\nimport './InsightsDisconnected.scss';\n\nconst InsightsDisconnected = () => (\n    <Tooltip content=\"Insights disabled\">\n        <span className=\"pf-u-ml-sm ins-c-inventor__disconnected-icon\">\n            <DisconnectedIcon />\n        </span>\n    </Tooltip>\n);\n\nexport default InsightsDisconnected;\n","/* eslint-disable camelcase */\n/* eslint-disable react/prop-types */\nimport React from 'react';\n\n/**\n * Helper function to proprly calculate what to do when user clicks on first cell.\n * Either full redirect if used with ctrl button or `onRowClick` from props is used.\n * @param {*} event html event, to find out if meta key was clicked.\n * @param {*} key inventory UUID.\n * @param {*} props additional props from `EntityTable` - loaded, onRowClick and noDetail.\n */\nconst onRowClick = (event, key, { loaded, onRowClick: rowClick, noDetail }) => {\n    if (loaded && !noDetail) {\n        const isMetaKey = (event.ctrlKey || event.metaKey || event.which === 2);\n        if (isMetaKey) {\n            return;\n        } else if (rowClick) {\n            rowClick(event, key, isMetaKey);\n        }\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n};\n\n/**\n * Helper function to generate first cell in plain inventory either with clickable detail or just data from attribut.\n * This is later on used in redux in `renderFunc`.\n * @param {React.node} data React node with information that will be shown to user as column title.\n * @param {string} id inventory UUID, used to navigate to correct URL.\n * @param {*} item row data, holds every information from redux store for currecnt row.\n * @param {*} props additional props passed from `EntityTable` - holds any props passed to inventory table.\n */\nconst TitleColumn = (data, id, item, props) => (\n    <div className=\"ins-composed-col\">\n        <div key=\"os_release\">{item?.os_release}</div>\n        <div key=\"data\" className={props?.noDetail ? 'ins-m-nodetail' : ''}>\n            { props?.noDetail ?\n                data :\n                <a\n                    widget=\"col\"\n                    href={ `${location.pathname}${location.pathname.substr(-1) === '/' ? '' : '/'}${id}` }\n                    onClick={ event => {\n                        onRowClick(event, id, props);\n                    }}\n                >\n                    { data }\n                </a> }\n        </div>\n    </div>\n);\n\nexport default TitleColumn;\n","import React from 'react';\nimport {\n    ACTION_TYPES,\n    SELECT_ENTITY,\n    CHANGE_SORT,\n    SHOW_ENTITIES,\n    FILTER_SELECT,\n    UPDATE_ENTITIES,\n    ENTITIES_LOADING,\n    CLEAR_FILTERS,\n    TOGGLE_TAG_MODAL,\n    CONFIG_CHANGED\n} from './action-types';\nimport { mergeArraysByKey } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { CullingInformation } from '@redhat-cloud-services/frontend-components/CullingInfo';\nimport { TagWithDialog } from '../Utilities/index';\nimport groupBy from 'lodash/groupBy';\nimport TitleColumn from '../components/InventoryTable/TitleColumn';\nimport InsightsDisconnected from '../Utilities/InsightsDisconnected';\nimport OperatingSystemFormatter from '../Utilities/OperatingSystemFormatter';\nimport { Tooltip } from '@patternfly/react-core';\n\nexport const defaultState = {\n    loaded: false,\n    tagsLoaded: false,\n    allTagsLoaded: false,\n    invConfig: {},\n    sortBy: {\n        key: 'updated',\n        direction: 'desc'\n    }\n};\n\nexport const defaultColumns = [\n    {\n        key: 'display_name',\n        title: 'Name',\n        renderFunc: TitleColumn\n    },\n    {\n        key: 'tags',\n        title: 'Tags',\n        props: { width: 10, isStatic: true },\n        // eslint-disable-next-line react/display-name\n        renderFunc: (value, systemId) => <TagWithDialog count={value.length} systemId={systemId} />\n    },\n    {\n        key: 'system_profile',\n        title: <Tooltip content={<span>Operating system</span>}><span>OS</span></Tooltip>,\n        // eslint-disable-next-line react/display-name\n        renderFunc: (systemProfile) => <OperatingSystemFormatter operatingSystem={systemProfile?.operating_system} />,\n        props: { width: 10, isStatic: true }\n    },\n    {\n        key: 'updated',\n        title: 'Last seen',\n        // eslint-disable-next-line react/display-name\n        renderFunc: (\n            value,\n            _id,\n            {\n                culled_timestamp: culled, stale_warning_timestamp: staleWarn, stale_timestamp: stale, insights_id: insightsId\n            }) => {\n            return CullingInformation ? <CullingInformation\n                culled={culled}\n                staleWarning={staleWarn}\n                stale={stale}\n                render={({ msg }) => <React.Fragment>\n                    <DateFormat date={ value } extraTitle={ (\n                        <React.Fragment>\n                            <div>{ msg }</div>\n                        Last seen:{` `}\n                        </React.Fragment>\n                    ) }/>\n                    {!insightsId && <InsightsDisconnected />}\n                </React.Fragment>\n                }\n            > <DateFormat date={ value } /> </CullingInformation> : new Date(value).toLocaleString();\n        },\n        props: { width: 10 }\n    }\n];\n\nfunction entitiesPending(state, { meta }) {\n    return {\n        ...state,\n        columns: mergeArraysByKey([\n            defaultColumns.filter(({ key }) => key !== 'tags' || meta?.showTags),\n            state.columns\n        ], 'key'),\n        rows: [],\n        loaded: false,\n        lastDateRequest: meta.lastDateRequest\n    };\n}\n\nfunction clearFilters(state) {\n    return {\n        ...state,\n        activeFilters: []\n    };\n}\n\n// eslint-disable-next-line camelcase\nfunction entitiesLoaded(state, { payload: { results, per_page: perPage, page, count, total, loaded, filters }, meta }) {\n    // Older requests should not rewrite the state\n    if (meta.lastDateRequest < state.lastDateRequest) {\n        return state;\n    }\n\n    // Data are loaded and APi returned malicious data\n    if (loaded === undefined && (page === undefined || perPage === undefined)) {\n        return state;\n    }\n\n    return {\n        ...state,\n        activeFilters: filters || [],\n        loaded: loaded === undefined || loaded,\n        // filter data only if we are loaded\n        rows: mergeArraysByKey([state.rows, results]).filter(item => !loaded ? true : item.created),\n        perPage: perPage !== undefined ? perPage : state.perPage,\n        page: page !== undefined ? page : state.page,\n        count: count !== undefined ? count : state.count,\n        total: total !== undefined ? total : state.total\n    };\n}\n\nfunction loadingRejected(state, { payload }) {\n    return {\n        ...state,\n        error: payload\n    };\n}\n\nfunction selectEntity(state, { payload }) {\n    const rows = [...state.rows];\n    const toSelect = [].concat(payload);\n    toSelect.forEach(({ id, selected }) => {\n        const entity = rows.find(entity => entity.id === id);\n        if (entity) {\n            entity.selected = selected;\n        } else {\n            rows.forEach(item => item.selected = selected);\n        }\n    });\n    return {\n        ...state,\n        rows\n    };\n}\n\nfunction changeSort(state, { payload: { key, direction } }) {\n    return {\n        ...state,\n        sortBy: {\n            key,\n            direction\n        }\n    };\n}\n\nfunction selectFilter(state, { payload: { item: { items, ...item }, selected } }) {\n    let { activeFilters = [] } = state;\n    if (selected) {\n        activeFilters = [\n            ...activeFilters,\n            item,\n            ...items ? items : []\n        ];\n        const values = activeFilters.map(active => active.value);\n        activeFilters = activeFilters.filter((filter, key) => values.lastIndexOf(filter.value) === key);\n    } else {\n        activeFilters.splice(activeFilters.map(active => active.value).indexOf(item.value), 1);\n        if (items) {\n            items.forEach(subItem => {\n                activeFilters.splice(activeFilters.map(active => active.value).indexOf(subItem.value), 1);\n            });\n        }\n    }\n\n    return {\n        ...state,\n        activeFilters\n    };\n}\n\nexport function showTags(state, { payload, meta }) {\n    const { tags, ...activeSystemTag } = state.rows ? state.rows.find(({ id }) => meta.systemId === id) : state.entity || {};\n    return {\n        ...state,\n        tagModalLoaded: true,\n        activeSystemTag: {\n            ...activeSystemTag,\n            tags: Object.values(payload.results)[0],\n            tagsCount: meta.tagsCount,\n            page: payload.page,\n            perPage: payload.per_page,\n            tagsLoaded: true\n        }\n    };\n}\n\nexport function showTagsPending(state, { meta }) {\n    const { tags, ...activeSystemTag } = state.rows ? state.rows.find(({ id }) => meta.systemId === id) : state.entity || {};\n    return {\n        ...state,\n        tagModalLoaded: false,\n        activeSystemTag: {\n            ...activeSystemTag,\n            tagsCount: meta.tagsCount,\n            tagsLoaded: false\n        }\n    };\n}\n\nexport function toggleTagModalReducer(state, { payload: { isOpen } }) {\n    return {\n        ...state,\n        showTagDialog: isOpen,\n        activeSystemTag: undefined\n    };\n}\n\nexport function allTags(state, { payload: { results, total, page, per_page: perPage }, meta: { lastDateRequestTags } }) {\n    // only the latest request can change state\n    if (lastDateRequestTags < state.lastDateRequestTags) {\n        return state;\n    }\n\n    return {\n        ...state,\n        allTags: Object.entries(groupBy(results, ({ tag: { namespace } }) => namespace)).map(([key, value]) => ({\n            name: key,\n            tags: value\n        })),\n        allTagsPagination: {\n            perPage,\n            page\n        },\n        additionalTagsCount: total > perPage ? total - perPage : 0,\n        allTagsTotal: total,\n        allTagsLoaded: true,\n        tagModalLoaded: true\n    };\n}\n\nexport default {\n    [ACTION_TYPES.ALL_TAGS_FULFILLED]: allTags,\n    [ACTION_TYPES.ALL_TAGS_PENDING]: (state, { meta }) => (\n        { ...state, allTagsLoaded: false, tagModalLoaded: false, lastDateRequestTags: meta.lastDateRequestTags }\n    ),\n    [ACTION_TYPES.LOAD_ENTITIES_PENDING]: entitiesPending,\n    [ACTION_TYPES.LOAD_ENTITIES_FULFILLED]: entitiesLoaded,\n    [ACTION_TYPES.LOAD_ENTITIES_REJECTED]: loadingRejected,\n    [ACTION_TYPES.LOAD_TAGS_PENDING]: showTagsPending,\n    [ACTION_TYPES.LOAD_TAGS_FULFILLED]: showTags,\n    [ACTION_TYPES.ALL_TAGS_REJECTED]: loadingRejected,\n    [UPDATE_ENTITIES]: entitiesLoaded,\n    [SHOW_ENTITIES]: (state, action) => entitiesLoaded(state, {\n        payload: {\n            ...action.payload,\n            loaded: false\n        }\n    }),\n    [FILTER_SELECT]: selectFilter,\n    [SELECT_ENTITY]: selectEntity,\n    [CHANGE_SORT]: changeSort,\n    [CLEAR_FILTERS]: clearFilters,\n    [ENTITIES_LOADING]: (state, { payload: { isLoading } }) => ({ ...state, loaded: !isLoading }),\n    [TOGGLE_TAG_MODAL]: toggleTagModalReducer,\n    [CONFIG_CHANGED]: (state, { payload }) => ({ ...state, invConfig: payload })\n};\n"],"names":["content","className","data","id","item","props","key","os_release","noDetail","widget","href","location","pathname","substr","onClick","event","loaded","rowClick","onRowClick","isMetaKey","ctrlKey","metaKey","which","preventDefault","stopPropagation","defaultState","tagsLoaded","allTagsLoaded","invConfig","sortBy","direction","defaultColumns","title","renderFunc","TitleColumn","width","isStatic","value","systemId","TagWithDialog","count","length","systemProfile","operatingSystem","operating_system","_id","culled","culled_timestamp","staleWarn","stale_warning_timestamp","stale","stale_timestamp","insightsId","insights_id","CullingInformation","staleWarning","render","msg","date","extraTitle","Date","toLocaleString","entitiesLoaded","state","payload","results","perPage","per_page","page","total","filters","meta","lastDateRequest","undefined","activeFilters","rows","mergeArraysByKey","filter","created","loadingRejected","error","showTags","find","entity","activeSystemTag","tags","tagModalLoaded","Object","values","tagsCount","toggleTagModalReducer","isOpen","showTagDialog","ACTION_TYPES","lastDateRequestTags","allTags","entries","groupBy","tag","namespace","map","name","allTagsPagination","additionalTagsCount","allTagsTotal","columns","UPDATE_ENTITIES","SHOW_ENTITIES","action","FILTER_SELECT","items","selected","active","lastIndexOf","splice","indexOf","forEach","subItem","SELECT_ENTITY","concat","CHANGE_SORT","CLEAR_FILTERS","ENTITIES_LOADING","isLoading","TOGGLE_TAG_MODAL","CONFIG_CHANGED"],"sourceRoot":""}