{"version":3,"file":"js/208.1659611629412.03629d0f357bad0e9f2a.js","mappings":"kzBAEO,IAAMA,EAAwB,SAACC,GAAD,OAAgBA,EAAWC,QAAO,SAACC,EAAKC,GACzE,MAAqCA,EAAQC,MAAM,KAAnD,eAAOC,EAAP,KAAqBC,EAArB,KAKA,OAJAJ,EAAI,GAAD,OAAIG,EAAJ,OAAH,OACQH,EAAI,GAAD,OAAIG,EAAJ,QAAyB,IADpC,wBAEQA,EAFR,YAEwBC,IAAiB,IAElCJ,IACR,KAEUK,EAAkB,SAACP,GAG5B,OAFsBA,EAAWQ,QAAO,kBAAuC,MAAvC,EAAGC,MAAkBL,MAAM,KAAK,MAEnDM,KAAI,SAACL,GAAD,cAClBA,GADkB,IAErBM,iBAAiB,EACjBC,MAAOZ,EAAWQ,QAAO,YAAe,IACpC,EADoC,EAAZC,MACuBL,MAAM,KAArD,eAAOS,EAAP,KAAuBC,EAAvB,KACA,OAAOD,IAAmBR,EAAaI,MAAML,MAAM,KAAK,IAAyB,MAAnBU,KAC/DC,MAAK,qBAAGN,MAAkBL,MAAM,KAAK,YAInCY,EAAsB,eAACC,EAAD,uDAAU,GAAV,cAC5BA,GAD4B,IAE/BC,MAAO,mBACPT,MAAO,YACPU,KAAM,QACNC,aAAc,CACVC,SAAUJ,EAAOR,MACjBa,SAAUL,EAAOK,SACjBC,OAAQhB,EAAgBiB,EAAAA,kBAAkBd,KAAI,SAACe,GAAD,oBACvCA,GADuC,IAE1CN,KAAM,WACNP,MAAK,UAAEa,EAAKb,aAAP,aAAE,EAAYF,KAAI,SAACgB,GAAD,cAChBA,GADgB,IAEnBP,KAAM,yBAMTQ,EAAc,SAACC,GACxB,IAAMnB,EAAQoB,OAAOC,OAAOF,GAAwB,IAAIG,SAAQ,SAAClB,GAAD,OAAoBgB,OAAOG,KAAKnB,MAChG,OAAQJ,MAAAA,OAAA,EAAAA,EAAOwB,QAAS,EAAI,CAAC,CACzBC,SAAU,mBACVf,KAAMgB,EAAAA,QACNC,MAAOZ,EAAAA,iBAAAA,QAAwB,gBAAUa,EAAV,EAAG5B,MAAH,OAAwBA,EAAM6B,MAAK,SAACC,GAAD,OAAmBA,IAAkBF,QACtG3B,KAAI,sBAA4B8B,KAA5B,EAAGtB,QAAH,kBACJ,K","sources":["webpack:///./src/Utilities/OperatingSystemFilterHelpers.js"],"sourcesContent":["import { OS_CHIP, operatingSystems } from './index';\n\nexport const toGroupSelectionValue = (osVersions) => osVersions.reduce((acc, version) => {\n    const [majorVersion, minorVersion] = version.split('.');\n    acc[`${majorVersion}.0`] = {\n        ...(acc[`${majorVersion}.0`] || {}),\n        [`${majorVersion}.${minorVersion}`]: true\n    };\n    return acc;\n}, {});\n\nexport const groupOSVersions = (osVersions) => {\n    const majorVersions = osVersions.filter(({ value }) => value.split('.')[1] === '0');\n\n    return majorVersions.map((majorVersion) => ({\n        ...majorVersion,\n        groupSelectable: true,\n        items: osVersions.filter(({ value }) => {\n            const [majorOsVersion, minorOsVersion] = value.split('.');\n            return majorOsVersion === majorVersion.value.split('.')[0] && minorOsVersion !== '0';\n        }).sort(({ value }) => value.split('.')[1])\n    }));\n};\n\nexport const buildOSFilterConfig = (config = {}) => ({\n    ...config,\n    label: 'Operating System',\n    value: 'os-filter',\n    type: 'group',\n    filterValues: {\n        selected: config.value,\n        onChange: config.onChange,\n        groups: groupOSVersions(operatingSystems).map((item) => ({\n            ...item,\n            type: 'checkbox',\n            items: item.items?.map((subItem) => ({\n                ...subItem,\n                type: 'checkbox'\n            }))\n        }))\n    }\n});\n\nexport const buildOSChip = (operatingSystemValue) => {\n    const value = Object.values(operatingSystemValue || {}).flatMap((majorOsVersion) => Object.keys(majorOsVersion));\n    return (value?.length > 0 ? [{\n        category: 'Operating System',\n        type: OS_CHIP,\n        chips: operatingSystems.filter(({ value: osValue }) => value.some((osFilterValue) => osFilterValue === osValue))\n        .map(({ label, ...props }) => ({ name: label, ...props }))\n    }] : []);};\n"],"names":["toGroupSelectionValue","osVersions","reduce","acc","version","split","majorVersion","minorVersion","groupOSVersions","filter","value","map","groupSelectable","items","majorOsVersion","minorOsVersion","sort","buildOSFilterConfig","config","label","type","filterValues","selected","onChange","groups","operatingSystems","item","subItem","buildOSChip","operatingSystemValue","Object","values","flatMap","keys","length","category","OS_CHIP","chips","osValue","some","osFilterValue","name"],"sourceRoot":""}