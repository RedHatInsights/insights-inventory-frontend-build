{"version":3,"file":"js/3.e87019bc0f5c7d155266.js","mappings":"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","sources":["webpack:///./src/components/GeneralInfo/LoadingCard/LoadingCard.js","webpack:///./src/constants.js"],"sourcesContent":["import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    Stack,\n    StackItem,\n    TextContent,\n    Text,\n    TextList,\n    TextVariants,\n    TextListItemVariants,\n    TextListVariants,\n    TextListItem\n} from '@patternfly/react-core';\nimport { Skeleton, SkeletonSize } from '@redhat-cloud-services/frontend-components/Skeleton';\n\nconst valueToText = (value, singular, plural) => {\n    if ((value || value === 0) && singular) {\n        return value === 1 ? `1 ${singular}` : `${value} ${plural || `${singular}s`}`;\n    }\n\n    if (value === 0) {\n        return 'None';\n    }\n\n    return value || 'Not available';\n};\n\nexport const Clickable = ({ item: { onClick, value, target, plural, singular } }) => (\n    <a\n        onClick={ event => {\n            event.preventDefault();\n            onClick(event, { value, target });\n        } }\n        href={ `${window.location.href}/${target}` }\n    >\n        { valueToText(value, singular, plural) }\n    </a>\n);\n\nClickable.propTypes = {\n    item: PropTypes.shape({\n        value: PropTypes.node,\n        target: PropTypes.string,\n        onClick: PropTypes.func,\n        plural: PropTypes.string,\n        singular: PropTypes.string\n    })\n};\n\nClickable.defaultProps = {\n    item: {}\n};\n\nconst LoadingCard = ({ title, isLoading, items }) => {\n    return (\n        <Stack hasGutter>\n            <StackItem>\n                <TextContent>\n                    <Text component={ TextVariants.h1 }>\n                        { title }\n                    </Text>\n                </TextContent>\n            </StackItem>\n            <StackItem isFilled>\n                <TextContent>\n                    <TextList component={ TextListVariants.dl }>\n                        { items.map((item, key) => (\n                            <Fragment key={ key }>\n                                <TextListItem component={ TextListItemVariants.dt }>\n                                    { item.title }\n                                </TextListItem>\n                                <TextListItem component={ TextListItemVariants.dd }>\n                                    { isLoading && <Skeleton size={ item.size || SkeletonSize.sm } /> }\n                                    { !isLoading && (\n                                        item.onClick && item.value ?\n                                            <Clickable item={ item }/> :\n                                            valueToText(item.value, item.singular, item.plural)\n                                    ) }\n                                </TextListItem>\n                            </Fragment>\n                        )) }\n                    </TextList>\n                </TextContent>\n            </StackItem>\n        </Stack>\n    );\n};\n\nLoadingCard.propTypes = {\n    title: PropTypes.node.isRequired,\n    isLoading: PropTypes.bool,\n    items: PropTypes.arrayOf(PropTypes.shape({\n        title: PropTypes.node,\n        value: PropTypes.node,\n        onClick: PropTypes.func,\n        size: PropTypes.oneOf(Object.values(SkeletonSize)),\n        plural: PropTypes.string,\n        singular: PropTypes.string\n    }))\n};\n\nLoadingCard.defaultProps = {\n    isLoading: true,\n    items: []\n};\n\nexport default LoadingCard;\n","import PropTypes from 'prop-types';\n\nexport const tagsMapper = (acc, curr) => {\n    let [namespace, keyValue] = curr.split('/');\n    if (!keyValue) {\n        keyValue = namespace;\n        namespace = null;\n    }\n\n    const [key, value = null] = keyValue.split('=');\n    const currTagKey = acc.findIndex(({ category }) => category === namespace);\n    const currTag = acc[currTagKey] || {\n        category: namespace,\n        key: namespace,\n        type: 'tags',\n        values: []\n    };\n    currTag.values.push({\n        name: `${key}${value ? `=${value}` : ''}`,\n        key: `${key}${value ? `=${value}` : ''}`,\n        tagKey: key,\n        value,\n        group: {\n            label: namespace,\n            value: namespace,\n            type: 'checkbox'\n        }\n    });\n    if (!acc[currTagKey]) {\n        acc.push(currTag);\n    }\n\n    return acc;\n};\n\nexport const prepareRows = (rows = [], pagination = {}) => (\n    rows\n    .slice((pagination.page - 1) * pagination.perPage, pagination.page * pagination.perPage)\n);\n\nexport const isDate = (date) => {\n    return !(isNaN(date) && isNaN(Date.parse(date)));\n};\n\nexport const filterRows = (rows = [], activeFilters = {}) => (\n    rows\n    .filter(row => (\n        Object.values(activeFilters).length === 0 ||\n        Object.values(activeFilters)\n        .every(\n            filter => {\n                const rowValue = row[filter.key] && (row[filter.key].sortValue || row[filter.key]);\n                return rowValue && (\n                    Array.isArray(filter.value) ?\n                        filter.value.includes(rowValue) :\n                        rowValue.toLocaleLowerCase().indexOf(filter.value.toLocaleLowerCase()) !== -1\n                );\n            }\n        )\n    ))\n);\n\nexport const generateFilters = (cells = [], filters = [], activeFilters = {}, onChange = () => undefined) => (\n    filters.map((filter, key) => {\n        const activeKey = filter.index || key;\n        const activeLabel = cells[activeKey] && (cells[activeKey].title || cells[activeKey]);\n\n        return ({\n            value: String(activeKey),\n            label: activeLabel,\n            type: filter.type || 'text',\n            filterValues: {\n                id: filter.id || `${activeLabel}-${activeKey}`,\n                onChange: (_e, newFilter) => onChange(activeKey, newFilter, activeLabel),\n                value: activeFilters[activeKey] && activeFilters[activeKey].value,\n                ...filter.options && { items: filter.options }\n            }\n        });\n    })\n);\n\nexport const onDeleteFilter = (deleted = {}, deleteAll = false, activeFilters = {}) => {\n    if (deleteAll) {\n        return {};\n    } else {\n        const { [deleted.key]: workingItem, ...filtersRest } = activeFilters;\n        const newValue = workingItem && Array.isArray(workingItem.value) &&\n            workingItem.value.filter(item => !deleted.chips.find(({ name }) => name === item));\n        const newFilter = workingItem && Array.isArray(workingItem.value) && newValue && newValue.length > 0 ? {\n            [deleted.key]: {\n                ...workingItem,\n                value: newValue\n            }\n        } : {};\n        return {\n            ...filtersRest,\n            ...newFilter\n        };\n    }\n};\n\nexport const extraShape = PropTypes.shape({\n    title: PropTypes.node,\n    value: PropTypes.node,\n    singular: PropTypes.node,\n    plural: PropTypes.node,\n    onClick: PropTypes.func\n});\n"],"names":["valueToText","value","singular","plural","Clickable","item","onClick","target","event","preventDefault","href","window","location","propTypes","PropTypes","defaultProps","LoadingCard","title","isLoading","items","hasGutter","component","TextVariants","isFilled","TextListVariants","map","key","Fragment","T","TextListItemVariants","size","SkeletonSize","Object","values","tagsMapper","acc","curr","split","namespace","keyValue","currTagKey","findIndex","category","currTag","type","push","name","tagKey","group","label","prepareRows","rows","pagination","slice","page","perPage","isDate","date","isNaN","Date","parse","filterRows","activeFilters","filter","row","length","every","rowValue","sortValue","Array","isArray","includes","toLocaleLowerCase","indexOf","generateFilters","cells","filters","onChange","activeKey","index","activeLabel","String","filterValues","id","_e","newFilter","options","onDeleteFilter","deleted","deleteAll","workingItem","filtersRest","newValue","chips","find","extraShape"],"sourceRoot":""}