{"version":3,"sources":["webpack:///./src/components/GeneralInfo/BiosCard/BiosCard.js","webpack:///./src/components/GeneralInfo/CollectionCard/CollectionCard.js","webpack:///./src/components/GeneralInfo/ConfigurationCard/ConfigurationCard.js","webpack:///./src/components/GeneralInfo/EditButton/EditButton.js","webpack:///./src/components/GeneralInfo/GeneralInformation/GeneralInformation.js","webpack:///./src/components/GeneralInfo/InfoTable/InfoTable.js","webpack:///./src/components/GeneralInfo/InfrastructureCard/InfrastructureCard.js","webpack:///./src/components/GeneralInfo/LoadingCard/LoadingCard.js","webpack:///./src/components/GeneralInfo/OperatingSystemCard/OperatingSystemCard.js","webpack:///./src/components/GeneralInfo/SystemCard/SystemCard.js","webpack:///./src/components/GeneralInfo/TextInputModal/TextInputModal.js","webpack:///./src/components/GeneralInfo/dataMapper/dataMapper.js","webpack:///./src/components/GeneralInfo/selectors/selectors.js","webpack:///./src/constants.js"],"names":["BiosCard","bios","detailLoaded","hasVendor","hasVersion","handleClick","hasReleaseDate","extra","title","isLoading","items","value","vendor","version","isDate","releaseDate","date","Date","type","map","onClick","e","propTypes","PropTypes","csm","extraShape","defaultProps","connect","systemProfile","systemProfileStore","loaded","biosSelector","VersionTooltip","egg","client","content","CollectionCard","collectionInformation","entity","hasClient","hasLastCheckIn","hasRegistered","hasInsightsId","hasReporter","hasMachineId","DateFormat","updated","toLocaleString","created","insights_id","reporter","rhel_machine_id","hasEgg","entityDetails","collectionInformationSelector","enabledRepos","repositories","enabled","length","disabled","filter","Boolean","join","ConfigurationCard","configuration","hasPackages","hasServices","hasProcesses","hasRepositories","packages","singular","target","generalMapper","services","processes","plural","repositoriesMapper","base_url","name","gpgcheck","configurationSelector","InnerButton","link","className","href","window","location","permissionsCache","undefined","EditButtonUnknownPermissions","props","hasAccess","usePermissions","EditButtonWrapper","writePermissions","insights","chrome","isProd","GeneralInformation","isModalOpen","modalTitle","modalVariant","_event","index","direction","customRows","rows","state","sorted","sort","a","b","firstRow","cells","secondRow","sortValue","toLocaleLowerCase","setState","SortByDirection","reverse","expandable","filters","onSort","this","loadSystemDetail","id","store","SystemCardWrapper","OperatingSystemCardWrapper","BiosCardWrapper","InfrastructureCardWrapper","ConfigurationCardWrapper","CollectionCardWrapper","children","Wrapper","Provider","Fragment","sm","md","hasGutter","handleModalToggle","isOpen","onClose","variant","Component","SystemCard","OperatingSystemCard","InfrastructureCard","dispatch","itemId","InfoTable","sortBy","opened","pagination","page","perPage","activeFilters","event","key","label","restFilter","_e","deleteAll","deleted","onDeleteFilter","collapsibleProps","onCollapse","activeRows","filterRows","mappedRows","flatMap","prepareRows","child","parent","itemCount","onSetPage","onUpdatePagination","onPerPageSelect","filterConfig","generateFilters","setFilter","activeFiltersConfig","Object","values","category","chips","Array","isArray","item","onDelete","Table","TableVariant","TableHeader","TableBody","row","component","TextVariants","isFooter","options","infrastructure","hasType","hasIPv4","hasIPv6","hasInterfaces","ipv4","ipv6","nics","interfaceMapper","infrastructureSelector","valueToText","Clickable","preventDefault","LoadingCard","isFilled","TextListVariants","T","TextListItemVariants","size","SkeletonSize","systemInfo","hasRelease","hasKernelRelease","hasArchitecture","hasLastBoot","hasKernelModules","release","kernelRelease","architecture","bootTime","kernelModules","operatingSystem","TitleWithPopover","headerContent","bodyContent","isDisplayNameModalOpen","isAnsibleHostModalOpen","fn","onCancel","ansible_host","fqdn","properties","setDisplayName","setAnsibleHost","hasHostName","hasDisplayName","hasAnsibleHostname","hasSAP","hasCPUs","hasSockets","hasCores","hasCPUFlags","hasRAM","display_name","onShowDisplayModal","getAnsibleHost","onShowAnsibleModal","sapIds","cpuNumber","sockets","coresPerSocket","cpuFlags","ramSize","ariaLabel","modalOuiaId","cancelOuiaId","confirmOuiaId","inputOuiaId","onSubmit","storage","device","mount_point","propertiesSelector","reloadWrapper","payload","then","data","hasItems","loadEntity","showTags","editDisplayName","editAnsibleHost","TextInputModal","ouiaId","actions","onChange","statusHelper","UP","DOWN","enabledHelper","true","false","transforms","sortable","mac_address","mtu","repository","safeParser","toParse","JSON","parse","number_of_cpus","number_of_sockets","cores_per_socket","disk_devices","sap_sids","cpu_flags","facts","rhsm","CPU_CORES","CPU_SOCKETS","Number","MEMORY","arch","os_release","os_kernel_version","last_boot_time","kernel_modules","ARCHITECTURE","bios_vendor","bios_version","bios_release_date","infrastructure_type","infrastructure_vendor","network","IS_VIRTUAL","interfaces","installed_packages","enabled_services","running_processes","insights_client_version","insights_egg_version","tagsMapper","acc","curr","split","namespace","keyValue","currTagKey","findIndex","currTag","push","tagKey","group","slice","isNaN","every","rowValue","includes","indexOf","activeKey","activeLabel","String","filterValues","newFilter","workingItem","filtersRest","newValue","find"],"mappings":"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","file":"js/70.576abde8a3bfa70b3019.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport LoadingCard from '../LoadingCard';\nimport { biosSelector } from '../selectors';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { extraShape, isDate } from '../../../constants';\n\nconst BiosCard = ({ bios, detailLoaded, hasVendor, hasVersion, handleClick, hasReleaseDate, extra }) => (<LoadingCard\n    title=\"BIOS\"\n    isLoading={ !detailLoaded }\n    items={ [\n        ...hasVendor ? [{ title: 'Vendor', value: bios.vendor }] : [],\n        ...hasVersion ? [{ title: 'Version', value: bios.version }] : [],\n        ...hasReleaseDate ? [{ title: 'Release date', value: (isDate(bios.releaseDate) ?\n            <DateFormat date={ new Date(bios.releaseDate) } type=\"onlyDate\" /> :\n            'Not available'\n        ) }] : [],\n        ...extra.map(({ onClick, ...item }) => ({\n            ...item,\n            ...onClick && { onClick: (e) => onClick(e, handleClick) }\n        }))\n    ] }\n/>);\n\nBiosCard.propTypes = {\n    detailLoaded: PropTypes.bool,\n    handleClick: PropTypes.func,\n    bios: PropTypes.shape({\n        vendor: PropTypes.string,\n        version: PropTypes.string,\n        releaseDate: PropTypes.string,\n        csm: PropTypes.arrayOf(PropTypes.string)\n    }),\n    hasVendor: PropTypes.bool,\n    hasVersion: PropTypes.bool,\n    hasReleaseDate: PropTypes.bool,\n    extra: PropTypes.arrayOf(extraShape)\n};\nBiosCard.defaultProps = {\n    detailLoaded: false,\n    handleClick: () => undefined,\n    extra: [],\n    hasVendor: true,\n    hasVersion: true,\n    hasReleaseDate: true\n};\n\nexport default connect(({\n    systemProfileStore: {\n        systemProfile\n    }\n}) => ({\n    detailLoaded: systemProfile && systemProfile.loaded,\n    bios: biosSelector(systemProfile)\n}))(BiosCard);\n","/* eslint-disable camelcase */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { Tooltip } from '@patternfly/react-core';\n\nimport LoadingCard from '../LoadingCard';\nimport { collectionInformationSelector } from '../selectors';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { extraShape } from '../../../constants';\n\nconst VersionTooltip = ({ egg, client }) => (\n    <Tooltip\n        content={\n            <React.Fragment>\n                <p>RPM version: { client || 'Not available' }</p>\n                <p>Dynamic update version: { egg || 'Not available' }</p>\n            </React.Fragment>\n        }\n    >\n        <span>{ client || egg || 'Not available' }</span>\n    </Tooltip>\n);\n\nVersionTooltip.propTypes = {\n    egg: PropTypes.string,\n    client: PropTypes.string\n};\n\nconst CollectionCard = ({\n    detailLoaded,\n    collectionInformation,\n    entity,\n    handleClick,\n    hasClient,\n    hasLastCheckIn,\n    hasRegistered,\n    hasInsightsId,\n    hasReporter,\n    hasMachineId,\n    extra\n}) => (<LoadingCard\n    title=\"Collection information\"\n    isLoading={ !detailLoaded }\n    items={ [\n        ...hasClient ? [{\n            title: 'Insights client',\n            value: <VersionTooltip egg={collectionInformation.egg} client={collectionInformation.client}/>\n        }] : [],\n        ...hasLastCheckIn ? [{ title: 'Last check-in', value: entity && (\n            DateFormat ?\n                <DateFormat date={ entity.updated } type=\"onlyDate\" /> :\n                new Date(entity.updated).toLocaleString()\n        ) }] : [],\n        ...hasRegistered ? [{ title: 'Registered', value: entity && (\n            DateFormat ?\n                <DateFormat date={entity.created} type=\"onlyDate\" /> :\n                new Date(entity.created).toLocaleString()\n        ) }] : [],\n        ...hasInsightsId ? [{ title: 'Insights id', value: entity && entity.insights_id }] : [],\n        ...hasReporter ? [{ title: 'Reporter', value: entity && entity.reporter }] : [],\n        ...hasMachineId ? [{ title: 'RHEL machine id', value: entity && entity.rhel_machine_id }] : [],\n        ...extra.map(({ onClick, ...item }) => ({\n            ...item,\n            ...onClick && { onClick: (e) => onClick(e, handleClick) }\n        }))\n    ] }\n/>);\n\nCollectionCard.propTypes = {\n    detailLoaded: PropTypes.bool,\n    entity: PropTypes.shape({\n        updated: PropTypes.string,\n        created: PropTypes.string,\n        insights_id: PropTypes.string,\n        reporter: PropTypes.string,\n        rhel_machine_id: PropTypes.string\n    }),\n    handleClick: PropTypes.func,\n    collectionInformation: PropTypes.shape({\n        client: PropTypes.string,\n        egg: PropTypes.string\n    }),\n    hasClient: PropTypes.bool,\n    hasLastCheckIn: PropTypes.bool,\n    hasRegistered: PropTypes.bool,\n    hasInsightsId: PropTypes.bool,\n    hasReporter: PropTypes.bool,\n    hasMachineId: PropTypes.bool,\n    extra: PropTypes.arrayOf(extraShape)\n};\nCollectionCard.defaultProps = {\n    detailLoaded: false,\n    handleClick: () => undefined,\n    hasClient: true,\n    hasEgg: true,\n    hasLastCheckIn: true,\n    hasRegistered: true,\n    hasInsightsId: true,\n    hasReporter: true,\n    hasMachineId: true,\n    extra: []\n};\n\nexport default connect(({\n    entityDetails: {\n        entity\n    },\n    systemProfileStore: {\n        systemProfile\n    }\n}) => ({\n    entity,\n    detailLoaded: systemProfile && systemProfile.loaded,\n    collectionInformation: collectionInformationSelector(systemProfile)\n}))(CollectionCard);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport LoadingCard from '../LoadingCard';\nimport { generalMapper, repositoriesMapper } from '../dataMapper';\nimport { configurationSelector } from '../selectors';\nimport { extraShape } from '../../../constants';\n\nexport function enabledRepos(repositories) {\n    if (repositories) {\n        return [\n            repositories.enabled && repositories.enabled.length > 0 && `${repositories.enabled.length} enabled`,\n            repositories.disabled && repositories.disabled.length > 0 && `${repositories.disabled.length} disabled`\n        ].filter(Boolean).join(' / ');\n    }\n}\n\nconst ConfigurationCard = ({\n    detailLoaded,\n    configuration,\n    handleClick,\n    hasPackages,\n    hasServices,\n    hasProcesses,\n    hasRepositories,\n    extra\n}) => (<LoadingCard\n    title=\"Configuration\"\n    isLoading={ !detailLoaded }\n    items={ [\n        ...hasPackages ? [{\n            title: 'Installed packages',\n            value: configuration.packages?.length,\n            singular: 'package',\n            target: 'installed_packages',\n            onClick: () => {\n                handleClick(\n                    'Installed packages',\n                    generalMapper(configuration.packages, 'Package name')\n                );\n            }\n        }] : [],\n        ...hasServices ? [{\n            title: 'Services',\n            value: configuration.services?.length,\n            singular: 'service',\n            target: 'services',\n            onClick: () => {\n                handleClick(\n                    'Services',\n                    generalMapper(configuration.services, 'Service name')\n                );\n            }\n        }] : [],\n        ...hasProcesses ? [{\n            title: 'Running processes',\n            value: configuration.processes?.length,\n            singular: 'process',\n            plural: 'processes',\n            target: 'running_processes',\n            onClick: () => {\n                handleClick(\n                    'Running processes',\n                    generalMapper(configuration.processes, 'Process name')\n                );\n            }\n        }] : [],\n        ...hasRepositories ? [{\n            title: 'Repositories',\n            value: enabledRepos(configuration.repositories),\n            target: 'repositories',\n            onClick: () => {\n                handleClick(\n                    'Repositories',\n                    repositoriesMapper(configuration.repositories),\n                    'medium'\n                );\n            }\n        }] : [],\n        ...extra.map(({ onClick, ...item }) => ({\n            ...item,\n            ...onClick && { onClick: (e) => onClick(e, handleClick) }\n        }))\n    ] }\n/>);\n\nConfigurationCard.propTypes = {\n    detailLoaded: PropTypes.bool,\n    handleClick: PropTypes.func,\n    configuration: PropTypes.shape({\n        packages: PropTypes.arrayOf(PropTypes.string),\n        services: PropTypes.arrayOf(PropTypes.string),\n        processes: PropTypes.arrayOf(PropTypes.string),\n        repositories: PropTypes.shape({\n            enabled: PropTypes.arrayOf(PropTypes.shape({\n                // eslint-disable-next-line camelcase\n                base_url: PropTypes.string,\n                name: PropTypes.string,\n                enabled: PropTypes.bool,\n                gpgcheck: PropTypes.bool\n            })),\n            disabled: PropTypes.arrayOf(PropTypes.shape({\n                // eslint-disable-next-line camelcase\n                base_url: PropTypes.string,\n                name: PropTypes.string,\n                enabled: PropTypes.bool,\n                gpgcheck: PropTypes.bool\n            }))\n        })\n    }),\n    hasPackages: PropTypes.bool,\n    hasServices: PropTypes.bool,\n    hasProcesses: PropTypes.bool,\n    hasRepositories: PropTypes.bool,\n    extra: PropTypes.arrayOf(extraShape)\n};\nConfigurationCard.defaultProps = {\n    detailLoaded: false,\n    handleClick: () => undefined,\n    hasPackages: true,\n    hasServices: true,\n    hasProcesses: true,\n    hasRepositories: true,\n    extra: []\n};\n\nexport default connect(({\n    systemProfileStore: {\n        systemProfile\n    }\n}) => ({\n    detailLoaded: systemProfile && systemProfile.loaded,\n    configuration: configurationSelector(systemProfile)\n}))(ConfigurationCard);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { usePermissions } from '@redhat-cloud-services/frontend-components-utilities/RBACHook';\n\nimport { PencilAltIcon } from '@patternfly/react-icons';\n\nconst InnerButton = ({ link, onClick }) => (\n    <a\n        className=\"ins-c-inventory__detail--action\"\n        href={ `${window.location.href}/${link}` }\n        onClick={ onClick }\n    >\n        <PencilAltIcon />\n    </a>\n);\n\nInnerButton.propTypes = {\n    link: PropTypes.string.isRequired,\n    onClick: PropTypes.func.isRequired\n};\n\nlet permissionsCache = undefined;\n\nconst EditButtonUnknownPermissions = (props) => {\n    const { hasAccess } = usePermissions('inventory', [\n        'inventory:*:*',\n        'inventory:hosts:write',\n        'inventory:*:write'\n    ]);\n\n    if (hasAccess) {\n        permissionsCache = hasAccess;\n    }\n\n    if (!hasAccess) {\n        return null;\n    }\n\n    return <InnerButton {...props}/>;\n};\n\nEditButtonUnknownPermissions.propTypes = {\n    link: PropTypes.string.isRequired,\n    onClick: PropTypes.func.isRequired\n};\n\nconst EditButtonWrapper = ({ writePermissions, ...props }) => {\n    if (insights.chrome.isProd || writePermissions || permissionsCache) {\n        return <InnerButton {...props} />;\n    }\n\n    if (typeof writePermissions !== 'boolean') {\n        return <EditButtonUnknownPermissions {...props} />;\n    }\n\n    return null;\n};\n\nEditButtonWrapper.propTypes = {\n    writePermissions: PropTypes.bool\n};\n\nexport default EditButtonWrapper;\n","import React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport {\n    Grid,\n    GridItem,\n    Modal\n} from '@patternfly/react-core';\nimport { SortByDirection } from '@patternfly/react-table';\n\nimport { systemProfile } from '../../../store/actions';\nimport InfoTable from '../InfoTable';\nimport OperatingSystemCard from '../OperatingSystemCard';\nimport SystemCard from '../SystemCard';\nimport BiosCard from '../BiosCard';\nimport InfrastructureCard from '../InfrastructureCard';\nimport ConfigurationCard from '../ConfigurationCard';\nimport CollectionCard from '../CollectionCard';\nimport { Provider } from 'react-redux';\nimport './general-information.scss';\n\nclass GeneralInformation extends Component {\n    state = {\n        isModalOpen: false,\n        modalTitle: '',\n        modalVariant: 'small'\n    };\n\n    onSort = (_event, index, direction, customRows) => {\n        const { rows } = this.state;\n        const sorted = (customRows || rows).sort((a, b) => {\n            const firstRow = a.cells || a;\n            const secondRow = b.cells || b;\n            const aSortBy = ('' + (firstRow[index].sortValue || firstRow[index])).toLocaleLowerCase();\n            const bSortBy = ('' + (secondRow[index].sortValue || secondRow[index])).toLocaleLowerCase();\n            return (aSortBy > bSortBy) ? -1 : 1;\n        });\n        this.setState({\n            rows: direction === SortByDirection.asc ? sorted : sorted.reverse()\n        });\n    }\n\n    handleModalToggle = (modalTitle = '', { cells, rows, expandable, filters } = {}, modalVariant = 'small') => {\n        rows && this.onSort(undefined, expandable ? 1 : 0, SortByDirection.asc, rows);\n        this.setState(({ isModalOpen }) => ({\n            isModalOpen: !isModalOpen,\n            modalTitle,\n            cells,\n            expandable,\n            filters,\n            modalVariant\n        }));\n    };\n\n    componentDidMount() {\n        this.props.loadSystemDetail && this.props.loadSystemDetail(this.props.entity.id);\n    };\n\n    render() {\n        const { isModalOpen, modalTitle, cells, rows, expandable, filters, modalVariant } = this.state;\n        const {\n            store,\n            writePermissions,\n            SystemCardWrapper,\n            OperatingSystemCardWrapper,\n            BiosCardWrapper,\n            InfrastructureCardWrapper,\n            ConfigurationCardWrapper,\n            CollectionCardWrapper,\n            children\n        } = this.props;\n        const Wrapper = store ? Provider : Fragment;\n        return (\n            <Wrapper {...(store && { store })}>\n                <div className=\"ins-c-general-information\">\n                    <Grid sm={ 12 } md={ 6 } hasGutter>\n                        {SystemCardWrapper && <GridItem>\n                            <SystemCardWrapper handleClick={ this.handleModalToggle } writePermissions={writePermissions} />\n                        </GridItem>}\n                        {OperatingSystemCardWrapper && <GridItem>\n                            <OperatingSystemCardWrapper handleClick={ this.handleModalToggle } />\n                        </GridItem>}\n                        {BiosCardWrapper && <GridItem>\n                            <BiosCardWrapper handleClick={ this.handleModalToggle } />\n                        </GridItem>}\n                        {InfrastructureCardWrapper && <GridItem>\n                            <InfrastructureCardWrapper handleClick={ this.handleModalToggle } />\n                        </GridItem>}\n                        {ConfigurationCardWrapper && <GridItem>\n                            <ConfigurationCardWrapper handleClick={ this.handleModalToggle } />\n                        </GridItem>}\n                        {CollectionCardWrapper && <GridItem>\n                            <CollectionCardWrapper handleClick={ this.handleModalToggle } />\n                        </GridItem>}\n                        {children}\n                        <Modal\n                            title={ modalTitle || '' }\n                            aria-label={`${modalTitle || ''} modal`}\n                            isOpen={ isModalOpen }\n                            onClose={ () => this.handleModalToggle() }\n                            className=\"ins-c-inventory__detail--dialog\"\n                            variant={ modalVariant }\n                        >\n                            <InfoTable\n                                cells={ cells }\n                                rows={ rows }\n                                expandable={ expandable }\n                                onSort={ this.onSort }\n                                filters={ filters }\n                            />\n                        </Modal>\n                    </Grid>\n                </div>\n            </Wrapper>\n        );\n    }\n}\n\nGeneralInformation.propTypes = {\n    entity: PropTypes.shape({\n        id: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n    }),\n    loadSystemDetail: PropTypes.func,\n    store: PropTypes.any,\n    writePermissions: PropTypes.bool,\n    SystemCardWrapper: PropTypes.oneOfType([PropTypes.node, PropTypes.bool]),\n    OperatingSystemCardWrapper: PropTypes.oneOfType([PropTypes.node, PropTypes.bool]),\n    BiosCardWrapper: PropTypes.oneOfType([PropTypes.node, PropTypes.bool]),\n    InfrastructureCardWrapper: PropTypes.oneOfType([PropTypes.node, PropTypes.bool]),\n    ConfigurationCardWrapper: PropTypes.oneOfType([PropTypes.node, PropTypes.bool]),\n    CollectionCardWrapper: PropTypes.oneOfType([PropTypes.node, PropTypes.bool]),\n    children: PropTypes.node\n};\nGeneralInformation.defaultProps = {\n    entity: {},\n    SystemCardWrapper: SystemCard,\n    OperatingSystemCardWrapper: OperatingSystemCard,\n    BiosCardWrapper: BiosCard,\n    InfrastructureCardWrapper: InfrastructureCard,\n    ConfigurationCardWrapper: ConfigurationCard,\n    CollectionCardWrapper: CollectionCard\n};\n\nconst mapStateToProps = ({\n    entityDetails: {\n        entity\n    }\n}) => ({\n    entity\n});\nconst mapDispatchToProps = (dispatch) => ({\n    loadSystemDetail: (itemId) => dispatch(systemProfile(itemId))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GeneralInformation);\n","import React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { TextContent, Text, TextVariants, Pagination } from '@patternfly/react-core';\nimport PrimaryToolbar from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport TableToolbar from '@redhat-cloud-services/frontend-components/TableToolbar';\nimport { Table, TableHeader, TableBody, TableVariant, SortByDirection } from '@patternfly/react-table';\nimport flatMap from 'lodash/flatMap';\nimport { prepareRows, filterRows, generateFilters, onDeleteFilter } from '../../../constants';\nclass InfoTable extends Component {\n    state = {\n        sortBy: { index: 0, direction: SortByDirection.asc },\n        opened: [],\n        pagination: {\n            page: 1,\n            perPage: 10\n        },\n        activeFilters: {}\n    };\n\n    onSort = (event, index, direction) => {\n        const { expandable } = this.props;\n        this.props.onSort(event, expandable ? index - 1 : index, direction);\n        this.setState({\n            sortBy: {\n                index,\n                direction\n            }\n        });\n    }\n\n    onCollapse = (_event, index, isOpen) => {\n        const { opened } = this.state;\n        opened[index] = isOpen;\n        this.setState({\n            opened\n        });\n    }\n\n    onUpdatePagination = ({ page, perPage }) => {\n        this.setState({ pagination: { ...this.state.pagination, page, perPage } });\n    }\n\n    setFilter = (key, value, label) => {\n        const { activeFilters } = this.state;\n        // eslint-disable-next-line no-unused-vars\n        const { [key]: currFilter, ...restFilter } = activeFilters;\n        this.setState({\n            activeFilters: {\n                ...restFilter,\n                ...value.length !== 0 && {\n                    [key]: { key, value, label }\n                }\n            },\n            pagination: { ...this.state.pagination, page: 1 }\n        });\n    }\n\n    onDeleteFilter = (_e, [deleted], deleteAll) => {\n        this.setState({\n            activeFilters: onDeleteFilter(\n                deleted,\n                deleteAll,\n                this.state.activeFilters\n            ),\n            pagination: { ...this.state.pagination, page: 1 }\n        });\n    }\n\n    render() {\n        const { cells, rows, expandable, filters } = this.props;\n        const { sortBy, opened, pagination, activeFilters } = this.state;\n        const collapsibleProps = expandable ? { onCollapse: this.onCollapse } : {};\n        const activeRows = filterRows(rows, activeFilters);\n        const mappedRows = expandable ? flatMap(\n            prepareRows(activeRows, pagination),\n            ({ child, ...row }, key) => [\n                {\n                    ...row,\n                    isOpen: opened[key * 2] || false\n                },\n                {\n                    cells: [{ title: child }],\n                    parent: key * 2\n                }\n            ]) : prepareRows(activeRows, pagination);\n        return (\n            <Fragment>\n                <PrimaryToolbar pagination={{\n                    ...pagination,\n                    itemCount: activeRows.length,\n                    onSetPage: (_e, page) => this.onUpdatePagination({ ...pagination, page }),\n                    onPerPageSelect: (_e, perPage) => this.onUpdatePagination({ ...pagination, page: 1, perPage })\n                }}\n                {...filters && {\n                    filterConfig: {\n                        items: generateFilters(cells, filters, activeFilters, this.setFilter)\n                    }\n                } }\n                activeFiltersConfig={{\n                    filters: Object.values(activeFilters).map(filter => ({\n                        ...filter,\n                        category: filter.label,\n                        chips: Array.isArray(filter.value) ? filter.value.map(item => ({ name: item })) : [{ name: filter.value }]\n                    })),\n                    onDelete: this.onDeleteFilter\n                }}\n                />\n                {\n                    cells.length !== 1 ? <Table\n                        aria-label=\"General information dialog table\"\n                        variant={ TableVariant.compact }\n                        cells={ cells }\n                        rows={ mappedRows }\n                        sortBy={ {\n                            ...sortBy,\n                            index: expandable && sortBy.index === 0 ? 1 : sortBy.index\n                        } }\n                        onSort={ this.onSort }\n                        { ...collapsibleProps }\n                    >\n                        <TableHeader />\n                        <TableBody />\n                    </Table> :\n                        <TextContent>\n                            {\n                                prepareRows(activeRows, pagination)\n                                .map((row, key) => (\n                                    <Text component={ TextVariants.small } key={ key }>\n                                        { row.title || row }\n                                    </Text>\n                                )) }\n                        </TextContent>\n                }\n                <TableToolbar isFooter className=\"ins-c-inventory__table--toolbar\">\n                    <Pagination\n                        {...pagination}\n                        itemCount={activeRows.length}\n                        variant=\"bottom\"\n                        onSetPage={(_e, page) => this.onUpdatePagination({ ...pagination, page })}\n                        onPerPageSelect={(_e, perPage) => this.onUpdatePagination({ ...pagination, page: 1, perPage })}\n                    />\n                </TableToolbar>\n            </Fragment>\n\n        );\n    }\n}\n\nInfoTable.propTypes = {\n    rows: PropTypes.array,\n    cells: PropTypes.array,\n    onSort: PropTypes.func,\n    expandable: PropTypes.bool,\n    filters: PropTypes.arrayOf(PropTypes.shape({\n        index: PropTypes.number,\n        title: PropTypes.string,\n        type: PropTypes.oneOf(['text', 'checkbox', 'radio', 'group']),\n        options: PropTypes.arrayOf(PropTypes.shape({\n            value: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n            label: PropTypes.node\n        }))\n    }))\n};\nInfoTable.defaultProps = {\n    cells: [],\n    rows: [],\n    onSort: () => undefined,\n    sortBy: {},\n    expandable: false\n};\n\nexport default InfoTable;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport LoadingCard from '../LoadingCard';\nimport { generalMapper, interfaceMapper } from '../dataMapper';\nimport { infrastructureSelector } from '../selectors';\nimport { extraShape } from '../../../constants';\n\nconst InfrastructureCard = ({\n    infrastructure,\n    handleClick,\n    detailLoaded,\n    hasType,\n    hasVendor,\n    hasIPv4,\n    hasIPv6,\n    hasInterfaces,\n    extra\n}) => (<LoadingCard\n    title=\"Infrastructure\"\n    isLoading={ !detailLoaded }\n    items={ [\n        ...hasType ? [{ title: 'Type', value: infrastructure.type }] : [],\n        ...hasVendor ? [{ title: 'Vendor', value: infrastructure.vendor }] : [],\n        ...hasIPv4 ? [{\n            title: 'IPv4 addresses',\n            value: infrastructure.ipv4?.length,\n            plural: 'addresses',\n            singular: 'address',\n            target: 'ipv4',\n            onClick: () => {\n                handleClick(\n                    'IPv4',\n                    generalMapper(infrastructure.ipv4, 'IP address')\n                );\n            }\n        }] : [],\n        ...hasIPv6 ? [{\n            title: 'IPv6 addresses',\n            value: infrastructure.ipv6?.length,\n            plural: 'addresses',\n            singular: 'address',\n            onClick: () => {\n                handleClick(\n                    'IPv6',\n                    generalMapper(infrastructure.ipv6, 'IP address')\n                );\n            }\n        }] : [],\n        ...hasInterfaces ? [{\n            title: 'Interfaces/NICs',\n            value: infrastructure.nics?.length,\n            singular: 'NIC',\n            target: 'interfaces',\n            onClick: () => {\n                handleClick(\n                    'Interfaces/NICs',\n                    interfaceMapper(infrastructure.nics),\n                    'medium'\n                );\n            }\n        }] : [],\n        ...extra.map(({ onClick, ...item }) => ({\n            ...item,\n            ...onClick && { onClick: (e) => onClick(e, handleClick) }\n        }))\n    ] }\n/>);\n\nInfrastructureCard.propTypes = {\n    detailLoaded: PropTypes.bool,\n    handleClick: PropTypes.func,\n    infrastructure: PropTypes.shape({\n        type: PropTypes.string,\n        vendor: PropTypes.string,\n        ipv4: PropTypes.array,\n        ipv6: PropTypes.array,\n        nics: PropTypes.array\n    }),\n    hasType: PropTypes.bool,\n    hasVendor: PropTypes.bool,\n    hasIPv4: PropTypes.bool,\n    hasIPv6: PropTypes.bool,\n    hasInterfaces: PropTypes.bool,\n    extra: PropTypes.arrayOf(extraShape)\n};\nInfrastructureCard.defaultProps = {\n    detailLoaded: false,\n    handleClick: () => undefined,\n    hasType: true,\n    hasVendor: true,\n    hasIPv4: true,\n    hasIPv6: true,\n    hasInterfaces: true,\n    extra: []\n};\n\nexport default connect(({\n    entityDetails: {\n        entity\n    },\n    systemProfileStore: {\n        systemProfile\n    }\n}) => ({\n    detailLoaded: systemProfile && systemProfile.loaded,\n    infrastructure: infrastructureSelector(systemProfile, entity)\n}))(InfrastructureCard);\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    Stack,\n    StackItem,\n    TextContent,\n    Text,\n    TextList,\n    TextVariants,\n    TextListItemVariants,\n    TextListVariants,\n    TextListItem\n} from '@patternfly/react-core';\nimport { Skeleton, SkeletonSize } from '@redhat-cloud-services/frontend-components/Skeleton';\n\nconst valueToText = (value, singular, plural) => {\n    if ((value || value === 0) && singular) {\n        return value === 1 ? `1 ${singular}` : `${value} ${plural || `${singular}s`}`;\n    }\n\n    if (value === 0) {\n        return 'None';\n    }\n\n    return value || 'Not available';\n};\n\nexport const Clickable = ({ item: { onClick, value, target, plural, singular } }) => (\n    <a\n        onClick={ event => {\n            event.preventDefault();\n            onClick(event, { value, target });\n        } }\n        href={ `${window.location.href}/${target}` }\n    >\n        { valueToText(value, singular, plural) }\n    </a>\n);\n\nClickable.propTypes = {\n    item: PropTypes.shape({\n        value: PropTypes.node,\n        target: PropTypes.string,\n        onClick: PropTypes.func,\n        plural: PropTypes.string,\n        singular: PropTypes.string\n    })\n};\n\nClickable.defaultProps = {\n    item: {}\n};\n\nconst LoadingCard = ({ title, isLoading, items }) => {\n    return (\n        <Stack hasGutter>\n            <StackItem>\n                <TextContent>\n                    <Text component={ TextVariants.h1 }>\n                        { title }\n                    </Text>\n                </TextContent>\n            </StackItem>\n            <StackItem isFilled>\n                <TextContent>\n                    <TextList component={ TextListVariants.dl }>\n                        { items.map((item, key) => (\n                            <Fragment key={ key }>\n                                <TextListItem component={ TextListItemVariants.dt }>\n                                    { item.title }\n                                </TextListItem>\n                                <TextListItem component={ TextListItemVariants.dd }>\n                                    { isLoading && <Skeleton size={ item.size || SkeletonSize.sm } /> }\n                                    { !isLoading && (\n                                        item.onClick && item.value ?\n                                            <Clickable item={ item }/> :\n                                            valueToText(item.value, item.singular, item.plural)\n                                    ) }\n                                </TextListItem>\n                            </Fragment>\n                        )) }\n                    </TextList>\n                </TextContent>\n            </StackItem>\n        </Stack>\n    );\n};\n\nLoadingCard.propTypes = {\n    title: PropTypes.node.isRequired,\n    isLoading: PropTypes.bool,\n    items: PropTypes.arrayOf(PropTypes.shape({\n        title: PropTypes.node,\n        value: PropTypes.node,\n        onClick: PropTypes.func,\n        size: PropTypes.oneOf(Object.values(SkeletonSize)),\n        plural: PropTypes.string,\n        singular: PropTypes.string\n    }))\n};\n\nLoadingCard.defaultProps = {\n    isLoading: true,\n    items: []\n};\n\nexport default LoadingCard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport LoadingCard from '../LoadingCard';\nimport { generalMapper } from '../dataMapper';\nimport { operatingSystem } from '../selectors';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { extraShape, isDate } from '../../../constants';\n\nconst OperatingSystemCard = ({\n    systemInfo,\n    detailLoaded,\n    handleClick,\n    hasRelease,\n    hasKernelRelease,\n    hasArchitecture,\n    hasLastBoot,\n    hasKernelModules,\n    extra\n}) => (\n    <LoadingCard\n        title=\"Operating system\"\n        isLoading={ !detailLoaded }\n        items={ [\n            ...hasRelease ? [{ title: 'Release', value: systemInfo.release }] : [],\n            ...hasKernelRelease ? [{ title: 'Kernel release', value: systemInfo.kernelRelease }] : [],\n            ...hasArchitecture ? [{ title: 'Architecture', value: systemInfo.architecture }] : [],\n            ...hasLastBoot ? [{ title: 'Last boot time', value: (isDate(systemInfo.bootTime) ?\n                <DateFormat date={ systemInfo.bootTime } type=\"onlyDate\" /> :\n                'Not available'\n            )\n            }] : [],\n            ...hasKernelModules ? [{\n                title: 'Kernel modules',\n                value: systemInfo.kernelModules?.length,\n                singular: 'module',\n                target: 'kernel_modules',\n                onClick: () => {\n                    handleClick(\n                        'Kernel modules',\n                        generalMapper(systemInfo.kernelModules, 'Module')\n                    );\n                }\n            }] : [],\n            ...extra.map(({ onClick, ...item }) => ({\n                ...item,\n                ...onClick && { onClick: (e) => onClick(e, handleClick) }\n            }))\n        ] }\n    />\n);\n\nOperatingSystemCard.propTypes = {\n    detailLoaded: PropTypes.bool,\n    handleClick: PropTypes.func,\n    systemInfo: PropTypes.shape({\n        release: PropTypes.string,\n        architecture: PropTypes.string,\n        kernelRelease: PropTypes.string,\n        bootTime: PropTypes.string,\n        kernelModules: PropTypes.arrayOf(PropTypes.string)\n    }),\n    hasRelease: PropTypes.bool,\n    hasKernelRelease: PropTypes.bool,\n    hasArchitecture: PropTypes.bool,\n    hasLastBoot: PropTypes.bool,\n    hasKernelModules: PropTypes.bool,\n    extra: PropTypes.arrayOf(extraShape)\n};\nOperatingSystemCard.defaultProps = {\n    detailLoaded: false,\n    handleClick: () => undefined,\n    hasRelease: true,\n    hasKernelRelease: true,\n    hasArchitecture: true,\n    hasLastBoot: true,\n    hasKernelModules: true,\n    extra: []\n};\n\nexport default connect(({\n    entityDetails: {\n        entity\n    },\n    systemProfileStore: {\n        systemProfile\n    }\n}) => ({\n    detailLoaded: systemProfile && systemProfile.loaded,\n    systemInfo: operatingSystem(systemProfile, entity)\n}))(OperatingSystemCard);\n","import React, { Fragment, Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport LoadingCard from '../LoadingCard';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { propertiesSelector } from '../selectors';\nimport { editDisplayName, editAnsibleHost, systemProfile } from '../../../store/actions';\nimport TextInputModal from '../TextInputModal';\nimport { loadEntity } from '../../../store/actions';\nimport { Popover, Button } from '@patternfly/react-core';\nimport EditButton from '../EditButton';\nimport { generalMapper } from '../dataMapper';\nimport { extraShape } from '../../../constants';\n\nconst TitleWithPopover = ({ title, content }) => (\n    <React.Fragment>\n        <span>{ title }</span>\n        <Popover\n            headerContent={<div>{ title }</div>}\n            bodyContent={<div>{ content }</div>}>\n            <Button\n                variant=\"plain\"\n                aria-label={`Action for ${title}`}\n                className='ins-active-general_information__popover-icon'>\n                <OutlinedQuestionCircleIcon />\n            </Button>\n        </Popover>\n    </React.Fragment>\n);\n\nclass SystemCard extends Component {\n    state = {\n        isDisplayNameModalOpen: false,\n        isAnsibleHostModalOpen: false\n    };\n\n    onCancel = () => {\n        this.setState({\n            isDisplayNameModalOpen: false,\n            isAnsibleHostModalOpen: false\n        });\n    };\n\n    onSubmit = (fn) => (value) => {\n        const { entity } = this.props;\n        fn(entity.id, value);\n        this.onCancel();\n    }\n\n    onShowDisplayModal = (event) => {\n        event.preventDefault();\n        this.setState({\n            isDisplayNameModalOpen: true\n        });\n    };\n\n    onShowAnsibleModal = (event) => {\n        event.preventDefault();\n        this.setState({\n            isAnsibleHostModalOpen: true\n        });\n    };\n\n    getAnsibleHost = () => {\n        const { entity } = this.props;\n        return entity.ansible_host || entity.fqdn || entity.id;\n    };\n\n    render() {\n        const {\n            detailLoaded,\n            entity,\n            properties,\n            setDisplayName,\n            setAnsibleHost,\n            writePermissions,\n            handleClick,\n            hasHostName,\n            hasDisplayName,\n            hasAnsibleHostname,\n            hasSAP,\n            hasCPUs,\n            hasSockets,\n            hasCores,\n            hasCPUFlags,\n            hasRAM,\n            extra\n        } = this.props;\n        const { isDisplayNameModalOpen, isAnsibleHostModalOpen } = this.state;\n        return (\n            <Fragment>\n                <LoadingCard\n                    title=\"System properties\"\n                    isLoading={ !detailLoaded }\n                    items={ [\n                        ...hasHostName ? [{\n                            title: <TitleWithPopover\n                                title='Host name'\n                                content='Name imported from the system.'/>,\n                            value: entity.fqdn, size: 'md'\n                        }] : [],\n                        ...hasDisplayName ? [{\n                            title: <TitleWithPopover\n                                title='Display name'\n                                content='System name displayed in an inventory list.'/>,\n                            value: (\n                                <Fragment>\n                                    { entity.display_name }\n                                    <EditButton\n                                        writePermissions={writePermissions}\n                                        link=\"display_name\"\n                                        onClick={this.onShowDisplayModal}\n                                    />\n                                </Fragment>\n                            ), size: 'md'\n                        }] : [],\n                        ...hasAnsibleHostname ? [{\n                            title: <TitleWithPopover\n                                title='Ansible hostname'\n                                content='Hostname that is used in playbooks by Remediations.'/>,\n                            value: (\n                                <Fragment>\n                                    { this.getAnsibleHost() }\n                                    <EditButton\n                                        writePermissions={writePermissions}\n                                        link=\"ansible_name\"\n                                        onClick={this.onShowAnsibleModal}\n                                    />\n                                </Fragment>\n                            ), size: 'md'\n                        }] : [],\n                        ...hasSAP ? [{\n                            title: 'SAP',\n                            value: properties.sapIds?.length,\n                            singular: 'identifier',\n                            target: 'sap_sids',\n                            onClick: () => {\n                                handleClick(\n                                    'SAP IDs (SID)',\n                                    generalMapper(properties.sapIds, 'SID')\n                                );\n                            }\n                        }] : [],\n                        ...hasCPUs ? [{ title: 'Number of CPUs', value: properties.cpuNumber }] : [],\n                        ...hasSockets ? [{ title: 'Sockets', value: properties.sockets }] : [],\n                        ...hasCores ? [{ title: 'Cores per socket', value: properties.coresPerSocket }] : [],\n                        ...hasCPUFlags ? [{\n                            title: 'CPU flags',\n                            value: properties?.cpuFlags?.length,\n                            singular: 'flag',\n                            target: 'flag',\n                            onClick: () => handleClick('CPU flags', generalMapper(properties.cpuFlags, 'flag name'))\n                        }] : [],\n                        ...hasRAM ? [{ title: 'RAM', value: properties.ramSize }] : [],\n                        ...extra.map(({ onClick, ...item }) => ({\n                            ...item,\n                            ...onClick && { onClick: (e) => onClick(e, handleClick) }\n                        }))\n                    ] }\n                />\n                <TextInputModal\n                    isOpen={ isDisplayNameModalOpen }\n                    title='Edit display name'\n                    value={ entity && entity.display_name }\n                    ariaLabel='Host inventory display name'\n                    modalOuiaId=\"edit-display-name-modal\"\n                    cancelOuiaId=\"cancel-edit-display-name\"\n                    confirmOuiaId=\"confirm-edit-display-name\"\n                    inputOuiaId=\"input-edit-display-name\"\n                    onCancel={ this.onCancel }\n                    onSubmit={ this.onSubmit(setDisplayName) }\n                />\n                <TextInputModal\n                    isOpen={ isAnsibleHostModalOpen }\n                    title='Edit Ansible host'\n                    value={ entity && this.getAnsibleHost() }\n                    ariaLabel='Ansible host'\n                    modalOuiaId=\"edit-ansible-name-modal\"\n                    cancelOuiaId=\"cancel-edit-ansible-name\"\n                    confirmOuiaId=\"confirm-edit-ansible-name\"\n                    inputOuiaId=\"input-edit-ansible-name\"\n                    onCancel={ this.onCancel }\n                    onSubmit={ this.onSubmit(setAnsibleHost) }\n                />\n            </Fragment>\n        );\n    }\n}\n\nSystemCard.propTypes = {\n    detailLoaded: PropTypes.bool,\n    entity: PropTypes.shape({\n        // eslint-disable-next-line camelcase\n        display_name: PropTypes.string,\n        // eslint-disable-next-line camelcase\n        ansible_host: PropTypes.string,\n        fqdn: PropTypes.string,\n        id: PropTypes.string\n    }),\n    properties: PropTypes.shape({\n        cpuNumber: PropTypes.number,\n        sockets: PropTypes.number,\n        coresPerSocket: PropTypes.number,\n        ramSize: PropTypes.string,\n        storage: PropTypes.arrayOf(PropTypes.shape({\n            device: PropTypes.string,\n            // eslint-disable-next-line camelcase\n            mount_point: PropTypes.string,\n            options: PropTypes.shape({}),\n            type: PropTypes.string\n        })),\n        sapIds: PropTypes.arrayOf(PropTypes.string),\n        cpuFlags: PropTypes.array\n    }),\n    setDisplayName: PropTypes.func,\n    setAnsibleHost: PropTypes.func,\n    writePermissions: PropTypes.bool,\n    handleClick: PropTypes.func,\n    hasHostName: PropTypes.bool,\n    hasDisplayName: PropTypes.bool,\n    hasAnsibleHostname: PropTypes.bool,\n    hasSAP: PropTypes.bool,\n    hasCPUs: PropTypes.bool,\n    hasSockets: PropTypes.bool,\n    hasCores: PropTypes.bool,\n    hasCPUFlags: PropTypes.bool,\n    hasRAM: PropTypes.bool,\n    extra: PropTypes.arrayOf(extraShape)\n};\nSystemCard.defaultProps = {\n    detailLoaded: false,\n    entity: {},\n    properties: {},\n    hasHostName: true,\n    hasDisplayName: true,\n    hasAnsibleHostname: true,\n    hasSAP: true,\n    hasCPUs: true,\n    hasSockets: true,\n    hasCores: true,\n    hasCPUFlags: true,\n    hasRAM: true,\n    extra: []\n};\n\nTitleWithPopover.propTypes = {\n    title: PropTypes.string.isRequired,\n    content: PropTypes.string.isRequired\n};\n\nfunction mapDispatchToProps(dispatch) {\n    const reloadWrapper = (id, event) => {\n        event.payload.then(data => {\n            dispatch(systemProfile(id, { hasItems: true }));\n            dispatch(loadEntity(id, { hasItems: true }, { showTags: true }));\n            return data;\n        });\n\n        return event;\n    };\n\n    return {\n        setDisplayName: (id, value) => {\n            dispatch(reloadWrapper(id, editDisplayName(id, value)));\n        },\n\n        setAnsibleHost: (id, value) => {\n            dispatch(reloadWrapper(id, editAnsibleHost(id, value)));\n        }\n    };\n}\n\nexport default connect(({\n    entityDetails: {\n        entity\n    },\n    systemProfileStore: {\n        systemProfile\n    }\n}) => ({\n    entity,\n    detailLoaded: systemProfile && systemProfile.loaded,\n    properties: propertiesSelector(systemProfile, entity)\n}), mapDispatchToProps)(SystemCard);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n    Button,\n    Modal,\n    TextInput\n} from '@patternfly/react-core';\n\nexport default class TextInputModal extends Component {\n    constructor (props) {\n        super(props);\n        this.state = {};\n    }\n\n    static getDerivedStateFromProps (props, state) {\n        if (!props.isOpen) {\n            return { value: undefined };\n        }\n\n        if (state.value !== undefined) {\n            return null;\n        }\n\n        return {\n            value: props.value || ''\n        };\n    };\n\n    render () {\n        const {\n            title, isOpen, onCancel, onSubmit, ariaLabel, modalOuiaId, cancelOuiaId, confirmOuiaId, inputOuiaId\n        } = this.props;\n        const { value } = this.state;\n\n        return (\n            <Modal\n                variant=\"small\"\n                title={ title }\n                className=\"ins-c-inventory__detail--edit\"\n                aria-label={ ariaLabel ? `${ariaLabel} - modal` : 'input modal' }\n                ouiaId={ modalOuiaId }\n                isOpen={ isOpen }\n                onClose={ event => onCancel(event) }\n                actions={ [\n                    <Button key=\"cancel\" data-action=\"cancel\" variant=\"secondary\" onClick={ onCancel } ouiaId={ cancelOuiaId }>\n                        Cancel\n                    </Button>,\n                    <Button\n                        key=\"confirm\"\n                        data-action=\"confirm\"\n                        variant=\"primary\"\n                        onClick={ () => onSubmit(this.state.value) }\n                        ouiaId={ confirmOuiaId }\n                    >\n                        Save\n                    </Button>\n                ] }\n            >\n                <TextInput\n                    value={ value }\n                    type=\"text\"\n                    ouiaId={ inputOuiaId }\n                    onChange={ value => this.setState({ value }) }\n                    aria-label={ ariaLabel  }\n                />\n            </Modal>\n        );\n    }\n}\n\nTextInputModal.propTypes = {\n    title: PropTypes.string,\n    isOpen: PropTypes.bool,\n    onCancel: PropTypes.func,\n    onSubmit: PropTypes.func,\n    ariaLabel: PropTypes.string,\n    modalOuiaId: PropTypes.string,\n    cancelOuiaId: PropTypes.string,\n    confirmOuiaId: PropTypes.string,\n    inputOuiaId: PropTypes.string,\n    value: PropTypes.string\n};\n\nTextInputModal.defaultProps = {\n    onCancel: () => undefined,\n    onSubmit: () => undefined,\n    isOpen: false,\n    title: '',\n    ariaLabel: 'input text'\n};\n","/* eslint-disable camelcase */\n\nimport React from 'react';\nimport {\n    CheckCircleIcon,\n    TimesIcon,\n    OutlinedQuestionCircleIcon,\n    OutlinedArrowAltCircleUpIcon,\n    OutlinedArrowAltCircleDownIcon\n} from '@patternfly/react-icons';\nimport { sortable } from '@patternfly/react-table';\nimport { Tooltip } from '@patternfly/react-core';\n\nexport const statusHelper = {\n    UP: <Tooltip content=\"Service is running\">\n        <OutlinedArrowAltCircleUpIcon className=\"ins-c-inventory__detail--up\" />\n    </Tooltip>,\n    DOWN: <Tooltip content=\"Service has stopped\">\n        <OutlinedArrowAltCircleDownIcon className=\"ins-c-inventory__detail--down\" />\n    </Tooltip>\n};\n\nexport const enabledHelper = {\n    true: <Tooltip content=\"Source enabled\">\n        <CheckCircleIcon className=\"ins-c-inventory__detail--enabled\" />\n    </Tooltip>,\n    false: <Tooltip content=\"Source disabled\">\n        <TimesIcon className=\"ins-c-inventory__detail--disabled\" />\n    </Tooltip>\n};\n\nexport const diskMapper = (devices = []) => ({\n    cells: [\n        {\n            title: 'Device',\n            transforms: [sortable]\n        },\n        {\n            title: 'Label',\n            transforms: [sortable]\n        },\n        {\n            title: 'Mount point',\n            transforms: [sortable]\n        },\n        {\n            title: 'Type',\n            transforms: [sortable]\n        }\n    ],\n    rows: devices.map(({\n        device,\n        label,\n        mountpoint,\n        options,\n        mounttype\n    }) => {\n        const calculatedOptions = (options && options.options) || options;\n        return ({\n            isOpen: false,\n            child: <div>\n                {\n                    calculatedOptions &&\n                    Object.entries(calculatedOptions.value || calculatedOptions)\n                    .map(([oneKey, option]) => `${oneKey}=${option.value || option}`).join(',  ')\n                }\n            </div>,\n            cells: [\n                (device && device.value) || device,\n                label,\n                (mountpoint && mountpoint.value) || mountpoint,\n                (mounttype && mounttype.value) || mounttype\n            ]\n        });\n    }),\n    expandable: true\n});\n\nexport const productsMapper = (products = []) => ({\n    cells: [\n        {\n            title: 'Name',\n            transforms: [sortable]\n        },\n        'Status'\n    ],\n    rows: products.map(product => ([\n        product.name,\n        {\n            title: statusHelper[product.status] ||\n            <Tooltip content=\"Unknown service status\">\n                <OutlinedQuestionCircleIcon className=\"ins-c-inventory__detail--unknown\" />\n            </Tooltip>\n        }\n    ]))\n});\n\nexport const interfaceMapper = (data = []) => ({\n    cells: [\n        {\n            title: 'MAC address',\n            transforms: [sortable]\n        },\n        {\n            title: 'MTU',\n            transforms: [sortable]\n        },\n        {\n            title: 'Name',\n            transforms: [sortable]\n        },\n        'State',\n        {\n            title: 'Type',\n            transforms: [sortable]\n        }\n    ],\n    rows: data.map(item => ([\n        item.mac_address,\n        item.mtu,\n        item.name,\n        {\n            title: statusHelper[item.state] ||\n            <Tooltip content=\"Unknown service status\">\n                <OutlinedQuestionCircleIcon className=\"ins-c-inventory__detail--unknown\" />\n            </Tooltip>\n        },\n        item.type\n    ]))\n});\n\nexport const repositoriesMapper = ({ enabled, disabled } = { enabled: [], disabled: [] }) => ({\n    cells: [\n        {\n            title: 'Name',\n            transforms: [sortable]\n        },\n        {\n            title: 'Enabled',\n            transforms: [sortable]\n        },\n        {\n            title: 'GPG check',\n            transforms: [sortable]\n        }\n    ],\n    rows: [...enabled, ...disabled].map(repository => ([\n        {\n            title: repository.name,\n            sortValue: repository.name\n        },\n        {\n            title: enabledHelper[Boolean(repository.enabled)],\n            sortValue: `${repository.enabled}`\n        },\n        {\n            title: enabledHelper[Boolean(repository.gpgcheck)],\n            sortValue: `${repository.gpgcheck}`\n        }\n    ])),\n    filters: [\n        { type: 'textual' },\n        {\n            type: 'checkbox',\n            options: [\n                { label: 'Is enabled', value: 'true' },\n                { label: 'Not enabled', value: 'false' }\n            ]\n        },\n        {\n            type: 'checkbox',\n            options: [\n                { label: 'Is enabled', value: 'true' },\n                { label: 'Not enabled', value: 'false' }\n            ]\n        }\n    ]\n});\n\nexport const generalMapper = (data = [], title = '') => ({\n    cells: [{\n        title,\n        transforms: [sortable]\n    }],\n    rows: data.map(item => ([item])),\n    filters: [{ type: 'textual' }]\n});\n","/* eslint-disable camelcase */\n\nfunction safeParser(toParse, key) {\n    try {\n        return JSON.parse(toParse);\n    } catch {\n        return { [key]: toParse };\n    }\n}\n\nexport const propertiesSelector = ({\n    number_of_cpus,\n    number_of_sockets,\n    cores_per_socket,\n    ramSize,\n    disk_devices,\n    sap_sids,\n    cpu_flags\n} = {}, { facts } = { }) => ({\n    cpuNumber: number_of_cpus || facts?.rhsm?.CPU_CORES,\n    sockets: number_of_sockets || facts?.rhsm?.CPU_SOCKETS,\n    coresPerSocket: cores_per_socket || (\n        facts?.rhsm?.CPU_CORES\n            && facts?.rhsm?.CPU_CORES\n            && Number(facts?.rhsm?.CPU_CORES, 10) / Number(facts?.rhsm?.CPU_SOCKETS, 10)\n    ),\n    ramSize: ramSize || (facts?.rhsm?.MEMORY && `${facts?.rhsm?.MEMORY} GB`),\n    storage: disk_devices && disk_devices.map(({ device, label, mount_point, options, type }) => ({\n        ...device && safeParser(device, 'device'),\n        label,\n        ...mount_point && safeParser(mount_point, 'mountpoint'),\n        ...options && safeParser(options, 'options'),\n        ...type && safeParser(type, 'mounttype')\n    })\n    ),\n    sapIds: sap_sids,\n    cpuFlags: cpu_flags\n});\n\nexport const operatingSystem = ({\n    arch,\n    os_release,\n    os_kernel_version,\n    last_boot_time,\n    kernel_modules\n} = {}, { facts } = {}) => ({\n    release: os_release,\n    kernelRelease: os_kernel_version,\n    architecture: arch || facts?.rhsm?.ARCHITECTURE,\n    bootTime: last_boot_time,\n    kernelModules: kernel_modules\n});\n\nexport const biosSelector = ({\n    bios_vendor,\n    bios_version,\n    bios_release_date\n} = {}) => ({\n    vendor: bios_vendor,\n    version: bios_version,\n    releaseDate: bios_release_date\n});\n\nexport const infrastructureSelector = ({\n    infrastructure_type,\n    infrastructure_vendor,\n    network = {}\n} = {}, { facts } = {}) => ({\n    type: infrastructure_type || (\n        facts?.rhsm?.IS_VIRTUAL !== undefined && (facts?.rhsm?.IS_VIRTUAL ? 'virtual' : 'physical')\n    ) || undefined,\n    vendor: infrastructure_vendor,\n    ipv4: network.ipv4,\n    ipv6: network.ipv6,\n    nics: network.interfaces\n});\n\nexport const configurationSelector = ({\n    installed_packages,\n    enabled_services,\n    running_processes,\n    repositories\n} = {}) => ({\n    packages: installed_packages,\n    services: enabled_services,\n    processes: running_processes,\n    repositories\n});\n\nexport const collectionInformationSelector = ({\n    insights_client_version,\n    insights_egg_version\n} = {}) => ({\n    client: insights_client_version,\n    egg: insights_egg_version\n});\n","import PropTypes from 'prop-types';\n\nexport const tagsMapper = (acc, curr) => {\n    let [namespace, keyValue] = curr.split('/');\n    if (!keyValue) {\n        keyValue = namespace;\n        namespace = null;\n    }\n\n    const [key, value = null] = keyValue.split('=');\n    const currTagKey = acc.findIndex(({ category }) => category === namespace);\n    const currTag = acc[currTagKey] || {\n        category: namespace,\n        key: namespace,\n        type: 'tags',\n        values: []\n    };\n    currTag.values.push({\n        name: `${key}${value ? `=${value}` : ''}`,\n        key: `${key}${value ? `=${value}` : ''}`,\n        tagKey: key,\n        value,\n        group: {\n            label: namespace,\n            value: namespace,\n            type: 'checkbox'\n        }\n    });\n    if (!acc[currTagKey]) {\n        acc.push(currTag);\n    }\n\n    return acc;\n};\n\nexport const prepareRows = (rows = [], pagination = {}) => (\n    rows\n    .slice((pagination.page - 1) * pagination.perPage, pagination.page * pagination.perPage)\n);\n\nexport const isDate = (date) => {\n    return !(isNaN(date) && isNaN(Date.parse(date)));\n};\n\nexport const filterRows = (rows = [], activeFilters = {}) => (\n    rows\n    .filter(row => (\n        Object.values(activeFilters).length === 0 ||\n        Object.values(activeFilters)\n        .every(\n            filter => {\n                const rowValue = row[filter.key] && (row[filter.key].sortValue || row[filter.key]);\n                return rowValue && (\n                    Array.isArray(filter.value) ?\n                        filter.value.includes(rowValue) :\n                        rowValue.toLocaleLowerCase().indexOf(filter.value.toLocaleLowerCase()) !== -1\n                );\n            }\n        )\n    ))\n);\n\nexport const generateFilters = (cells = [], filters = [], activeFilters = {}, onChange = () => undefined) => (\n    filters.map((filter, key) => {\n        const activeKey = filter.index || key;\n        const activeLabel = cells[activeKey] && (cells[activeKey].title || cells[activeKey]);\n\n        return ({\n            value: String(activeKey),\n            label: activeLabel,\n            type: filter.type || 'text',\n            filterValues: {\n                id: filter.id || `${activeLabel}-${activeKey}`,\n                onChange: (_e, newFilter) => onChange(activeKey, newFilter, activeLabel),\n                value: activeFilters[activeKey] && activeFilters[activeKey].value,\n                ...filter.options && { items: filter.options }\n            }\n        });\n    })\n);\n\nexport const onDeleteFilter = (deleted = {}, deleteAll = false, activeFilters = {}) => {\n    if (deleteAll) {\n        return {};\n    } else {\n        const { [deleted.key]: workingItem, ...filtersRest } = activeFilters;\n        const newValue = workingItem && Array.isArray(workingItem.value) &&\n            workingItem.value.filter(item => !deleted.chips.find(({ name }) => name === item));\n        const newFilter = workingItem && Array.isArray(workingItem.value) && newValue && newValue.length > 0 ? {\n            [deleted.key]: {\n                ...workingItem,\n                value: newValue\n            }\n        } : {};\n        return {\n            ...filtersRest,\n            ...newFilter\n        };\n    }\n};\n\nexport const extraShape = PropTypes.shape({\n    title: PropTypes.node,\n    value: PropTypes.node,\n    singular: PropTypes.node,\n    plural: PropTypes.node,\n    onClick: PropTypes.func\n});\n"],"sourceRoot":""}