{"version":3,"file":"js/5223.97b83207b391248505f2.js","mappings":"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","sources":["webpack:///./src/components/GeneralInfo/BiosCard/BiosCard.js","webpack:///./src/components/GeneralInfo/ConfigurationCard/ConfigurationCard.js","webpack:///./src/components/GeneralInfo/DataCollectorsCard/DataCollectorsCard.js","webpack:///./src/components/GeneralInfo/InfoTable/InfoTable.js","webpack:///./src/components/GeneralInfo/SystemStatusCard/SystemStatusCard.js","webpack:///./src/components/GeneralInfo/GeneralInformation/GeneralInformation.js","webpack:///./src/components/GeneralInfo/InfrastructureCard/InfrastructureCard.js","webpack:///./src/components/GeneralInfo/OperatingSystemCard/OperatingSystemCard.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport LoadingCard from '../LoadingCard';\nimport { biosSelector } from '../selectors';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { extraShape, isDate } from '../../../constants';\n\nconst BiosCardCore = ({ bios, detailLoaded, hasVendor, hasVersion, handleClick, hasReleaseDate, extra }) => (<LoadingCard\n    title=\"BIOS\"\n    isLoading={ !detailLoaded }\n    items={ [\n        ...hasVendor ? [{ title: 'Vendor', value: bios.vendor }] : [],\n        ...hasVersion ? [{ title: 'Version', value: bios.version }] : [],\n        ...hasReleaseDate ? [{ title: 'Release date', value: (isDate(bios.releaseDate) ?\n            <DateFormat date={ new Date(bios.releaseDate) } type=\"onlyDate\" /> :\n            'Not available'\n        ) }] : [],\n        ...extra.map(({ onClick, ...item }) => ({\n            ...item,\n            ...onClick && { onClick: (e) => onClick(e, handleClick) }\n        }))\n    ] }\n/>);\n\nBiosCardCore.propTypes = {\n    detailLoaded: PropTypes.bool,\n    handleClick: PropTypes.func,\n    bios: PropTypes.shape({\n        vendor: PropTypes.string,\n        version: PropTypes.string,\n        releaseDate: PropTypes.string,\n        csm: PropTypes.arrayOf(PropTypes.string)\n    }),\n    hasVendor: PropTypes.bool,\n    hasVersion: PropTypes.bool,\n    hasReleaseDate: PropTypes.bool,\n    extra: PropTypes.arrayOf(extraShape)\n};\nBiosCardCore.defaultProps = {\n    detailLoaded: false,\n    handleClick: () => undefined,\n    extra: [],\n    hasVendor: true,\n    hasVersion: true,\n    hasReleaseDate: true\n};\n\nexport const BiosCard = connect(({\n    systemProfileStore: {\n        systemProfile\n    }\n}) => ({\n    detailLoaded: systemProfile && systemProfile.loaded,\n    bios: biosSelector(systemProfile)\n}))(BiosCardCore);\n\nBiosCard.propTypes = BiosCardCore.propTypes;\nBiosCard.defaultProps = BiosCardCore.defaultProps;\n\nexport default BiosCard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport LoadingCard from '../LoadingCard';\nimport { generalMapper, repositoriesMapper } from '../dataMapper';\nimport { configurationSelector } from '../selectors';\nimport { extraShape } from '../../../constants';\n\nexport function enabledRepos(repositories) {\n    if (repositories) {\n        return [\n            repositories.enabled && repositories.enabled.length > 0 && `${repositories.enabled.length} enabled`,\n            repositories.disabled && repositories.disabled.length > 0 && `${repositories.disabled.length} disabled`\n        ].filter(Boolean).join(' / ');\n    }\n}\n\nconst ConfigurationCardCore = ({\n    detailLoaded,\n    configuration,\n    handleClick,\n    hasPackages,\n    hasServices,\n    hasProcesses,\n    hasRepositories,\n    extra\n}) => (<LoadingCard\n    title=\"Configuration\"\n    isLoading={ !detailLoaded }\n    items={ [\n        ...hasPackages ? [{\n            title: 'Installed packages',\n            value: configuration.packages?.length,\n            singular: 'package',\n            target: 'installed_packages',\n            onClick: () => {\n                handleClick(\n                    'Installed packages',\n                    generalMapper(configuration.packages, 'Package name')\n                );\n            }\n        }] : [],\n        ...hasServices ? [{\n            title: 'Services',\n            value: configuration.services?.length,\n            singular: 'service',\n            target: 'services',\n            onClick: () => {\n                handleClick(\n                    'Services',\n                    generalMapper(configuration.services, 'Service name')\n                );\n            }\n        }] : [],\n        ...hasProcesses ? [{\n            title: 'Running processes',\n            value: configuration.processes?.length,\n            singular: 'process',\n            plural: 'processes',\n            target: 'running_processes',\n            onClick: () => {\n                handleClick(\n                    'Running processes',\n                    generalMapper(configuration.processes, 'Process name')\n                );\n            }\n        }] : [],\n        ...hasRepositories ? [{\n            title: 'Repositories',\n            value: enabledRepos(configuration.repositories),\n            target: 'repositories',\n            onClick: () => {\n                handleClick(\n                    'Repositories',\n                    repositoriesMapper(configuration.repositories),\n                    'medium'\n                );\n            }\n        }] : [],\n        ...extra.map(({ onClick, ...item }) => ({\n            ...item,\n            ...onClick && { onClick: (e) => onClick(e, handleClick) }\n        }))\n    ] }\n/>);\n\nConfigurationCardCore.propTypes = {\n    detailLoaded: PropTypes.bool,\n    handleClick: PropTypes.func,\n    configuration: PropTypes.shape({\n        packages: PropTypes.arrayOf(PropTypes.string),\n        services: PropTypes.arrayOf(PropTypes.string),\n        processes: PropTypes.arrayOf(PropTypes.string),\n        repositories: PropTypes.shape({\n            enabled: PropTypes.arrayOf(PropTypes.shape({\n                // eslint-disable-next-line camelcase\n                base_url: PropTypes.string,\n                name: PropTypes.string,\n                enabled: PropTypes.bool,\n                gpgcheck: PropTypes.bool\n            })),\n            disabled: PropTypes.arrayOf(PropTypes.shape({\n                // eslint-disable-next-line camelcase\n                base_url: PropTypes.string,\n                name: PropTypes.string,\n                enabled: PropTypes.bool,\n                gpgcheck: PropTypes.bool\n            }))\n        })\n    }),\n    hasPackages: PropTypes.bool,\n    hasServices: PropTypes.bool,\n    hasProcesses: PropTypes.bool,\n    hasRepositories: PropTypes.bool,\n    extra: PropTypes.arrayOf(extraShape)\n};\nConfigurationCardCore.defaultProps = {\n    detailLoaded: false,\n    handleClick: () => undefined,\n    hasPackages: true,\n    hasServices: true,\n    hasProcesses: true,\n    hasRepositories: true,\n    extra: []\n};\n\nexport const ConfigurationCard = connect(({\n    systemProfileStore: {\n        systemProfile\n    }\n}) => ({\n    detailLoaded: systemProfile && systemProfile.loaded,\n    configuration: configurationSelector(systemProfile)\n}))(ConfigurationCardCore);\n\nConfigurationCard.propTypes = ConfigurationCardCore.propTypes;\nConfigurationCard.defaultProps = ConfigurationCardCore.defaultProps;\n\nexport default ConfigurationCard;\n","/* eslint-disable camelcase */\nimport React, { useState, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport LoadingCard from '../LoadingCard';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { TableComposable, Thead, Tr, Th, Tbody, Td, TableVariant, ExpandableRowContent } from '@patternfly/react-table';\nimport { Flex, FlexItem } from '@patternfly/react-core';\nimport { getDefaultCollectors } from '../selectors/selectors';\n\nconst DataCollectorsCardCore = ({\n    detailLoaded,\n    collectors,\n    entity,\n    dataMapper\n}) => {\n    const [expandedNames, setExpandedNames] = useState([]);\n    const setExpanded = useCallback((collector, isExpanding = true) => setExpandedNames(prevExpanded => {\n        const otherExpandedNames = prevExpanded.filter(r => r !== collector.name);\n        return isExpanding ? [...otherExpandedNames, collector.name] : otherExpandedNames;\n    }), []);\n    const isExpanded = (collector) => expandedNames.includes(collector.name);\n    const data = collectors ?? getDefaultCollectors(entity);\n    return (<LoadingCard\n        title=\"Data collectors\"\n        isLoading={ !detailLoaded }\n    >\n        <TableComposable\n            aria-label=\"Data collectors\"\n            variant={TableVariant.compact}\n            borders={false}\n        >\n            <Thead>\n                <Tr className=\"ins-c__no-border\">\n                    <Th />\n                    <Th>Name</Th>\n                    <Th>Status</Th>\n                    <Th>Last upload</Th>\n                </Tr>\n            </Thead>\n            {dataMapper ? dataMapper(data, isExpanded, setExpanded) : data.map((collector, rowIndex) => (\n                <Tbody key={collector.name} isExpanded={isExpanded(collector)}>\n                    <Tr>\n                        {collector.details.name ?\n                            <Td\n                                expand={\n                                    collector.details\n                                        ? {\n                                            rowIndex,\n                                            isExpanded: isExpanded(collector),\n                                            onToggle: () => setExpanded(collector, !isExpanded(collector))\n                                        }\n                                        : undefined\n                                }\n                                style={{ paddingLeft: 0 }}\n                            /> : <Td />}\n                        <Td dataLabel=\"Name\">{collector.name}</Td>\n                        <Td dataLabel=\"Status\">{collector.status}</Td>\n                        <Td dataLabel=\"Last upload\">\n                            {collector.updated ?\n                                <DateFormat date={ collector.updated } type=\"exact\" /> :\n                                'N/A'\n                            }</Td>\n                    </Tr>\n                    {collector.details && collector.details.name && (\n                        <Tr isExpanded={isExpanded(collector)}>\n                            <Td />\n                            <Td colSpan={3}>\n                                <ExpandableRowContent>\n                                    <Flex>\n                                        <FlexItem className=\"ins-c__flex-row-margin\">\n                                            {`${collector.details.name}:`}\n                                        </FlexItem>\n                                        <FlexItem grow={{ default: 'grow' }}>\n                                            {collector.details.id ?? 'N/A'}\n                                        </FlexItem>\n                                    </Flex>\n                                </ExpandableRowContent>\n                            </Td>\n                        </Tr>\n                    )}\n                </Tbody>))}\n        </TableComposable>\n    </LoadingCard>);\n};\n\nDataCollectorsCardCore.propTypes = {\n    detailLoaded: PropTypes.bool,\n    collectors: PropTypes.array,\n    dataMapper: PropTypes.func,\n    entity: PropTypes.shape({\n        per_reporter_staleness: PropTypes.object\n    })\n};\nDataCollectorsCardCore.defaultProps = {\n    detailLoaded: false\n};\n\nexport const DataCollectorsCard = connect(({\n    entityDetails: {\n        entity\n    },\n    systemProfileStore: {\n        systemProfile\n    }\n}) => ({\n    entity,\n    systemProfile,\n    detailLoaded: systemProfile?.loaded,\n    defaultCollectors: getDefaultCollectors(entity)\n}))(DataCollectorsCardCore);\n\nDataCollectorsCard.propTypes = DataCollectorsCardCore.propTypes;\nDataCollectorsCard.defaultProps = DataCollectorsCardCore.defaultProps;\n\nexport default DataCollectorsCard;\n","import React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { TextContent, Text, TextVariants, Pagination } from '@patternfly/react-core';\nimport PrimaryToolbar from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport TableToolbar from '@redhat-cloud-services/frontend-components/TableToolbar';\nimport { Table, TableHeader, TableBody, TableVariant, SortByDirection } from '@patternfly/react-table';\nimport flatMap from 'lodash/flatMap';\nimport { prepareRows, filterRows, generateFilters, onDeleteFilter } from '../../../constants';\nclass InfoTable extends Component {\n    state = {\n        sortBy: { index: 0, direction: SortByDirection.asc },\n        opened: [],\n        pagination: {\n            page: 1,\n            perPage: 10\n        },\n        activeFilters: {}\n    };\n\n    onSort = (event, index, direction) => {\n        const { expandable } = this.props;\n        this.props.onSort(event, expandable ? index - 1 : index, direction);\n        this.setState({\n            sortBy: {\n                index,\n                direction\n            }\n        });\n    }\n\n    onCollapse = (_event, index, isOpen) => {\n        const { opened } = this.state;\n        opened[index] = isOpen;\n        this.setState({\n            opened\n        });\n    }\n\n    onUpdatePagination = ({ page, perPage }) => {\n        this.setState({ pagination: { ...this.state.pagination, page, perPage } });\n    }\n\n    setFilter = (key, value, label) => {\n        const { activeFilters } = this.state;\n        // eslint-disable-next-line no-unused-vars\n        const { [key]: currFilter, ...restFilter } = activeFilters;\n        this.setState({\n            activeFilters: {\n                ...restFilter,\n                ...value.length !== 0 && {\n                    [key]: { key, value, label }\n                }\n            },\n            pagination: { ...this.state.pagination, page: 1 }\n        });\n    }\n\n    onDeleteFilter = (_e, [deleted], deleteAll) => {\n        this.setState({\n            activeFilters: onDeleteFilter(\n                deleted,\n                deleteAll,\n                this.state.activeFilters\n            ),\n            pagination: { ...this.state.pagination, page: 1 }\n        });\n    }\n\n    render() {\n        const { cells, rows, expandable, filters } = this.props;\n        const { sortBy, opened, pagination, activeFilters } = this.state;\n        const collapsibleProps = expandable ? { onCollapse: this.onCollapse } : {};\n        const activeRows = filterRows(rows, activeFilters);\n        const mappedRows = expandable ? flatMap(\n            prepareRows(activeRows, pagination),\n            ({ child, ...row }, key) => [\n                {\n                    ...row,\n                    isOpen: opened[key * 2] || false\n                },\n                {\n                    cells: [{ title: child }],\n                    parent: key * 2\n                }\n            ]) : prepareRows(activeRows, pagination);\n        return (\n            <Fragment>\n                <PrimaryToolbar pagination={{\n                    ...pagination,\n                    itemCount: activeRows.length,\n                    onSetPage: (_e, page) => this.onUpdatePagination({ ...pagination, page }),\n                    onPerPageSelect: (_e, perPage) => this.onUpdatePagination({ ...pagination, page: 1, perPage })\n                }}\n                {...filters && {\n                    filterConfig: {\n                        items: generateFilters(cells, filters, activeFilters, this.setFilter)\n                    }\n                } }\n                activeFiltersConfig={{\n                    filters: Object.values(activeFilters).map(filter => ({\n                        ...filter,\n                        category: filter.label,\n                        chips: Array.isArray(filter.value) ? filter.value.map(item => ({ name: item })) : [{ name: filter.value }]\n                    })),\n                    onDelete: this.onDeleteFilter\n                }}\n                />\n                {\n                    cells.length !== 1 ? <Table\n                        aria-label=\"General information dialog table\"\n                        variant={ TableVariant.compact }\n                        cells={ cells }\n                        rows={ mappedRows }\n                        sortBy={ {\n                            ...sortBy,\n                            index: expandable && sortBy.index === 0 ? 1 : sortBy.index\n                        } }\n                        onSort={ this.onSort }\n                        { ...collapsibleProps }\n                    >\n                        <TableHeader />\n                        <TableBody />\n                    </Table> :\n                        <TextContent>\n                            {\n                                prepareRows(activeRows, pagination)\n                                .map((row, key) => (\n                                    <Text component={ TextVariants.small } key={ key }>\n                                        { row.title || row }\n                                    </Text>\n                                )) }\n                        </TextContent>\n                }\n                <TableToolbar isFooter className=\"ins-c-inventory__table--toolbar\">\n                    <Pagination\n                        {...pagination}\n                        itemCount={activeRows.length}\n                        variant=\"bottom\"\n                        onSetPage={(_e, page) => this.onUpdatePagination({ ...pagination, page })}\n                        onPerPageSelect={(_e, perPage) => this.onUpdatePagination({ ...pagination, page: 1, perPage })}\n                    />\n                </TableToolbar>\n            </Fragment>\n\n        );\n    }\n}\n\nInfoTable.propTypes = {\n    rows: PropTypes.array,\n    cells: PropTypes.array,\n    onSort: PropTypes.func,\n    expandable: PropTypes.bool,\n    filters: PropTypes.arrayOf(PropTypes.shape({\n        index: PropTypes.number,\n        title: PropTypes.string,\n        type: PropTypes.oneOf(['text', 'checkbox', 'radio', 'group']),\n        options: PropTypes.arrayOf(PropTypes.shape({\n            value: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n            label: PropTypes.node\n        }))\n    }))\n};\nInfoTable.defaultProps = {\n    cells: [],\n    rows: [],\n    onSort: () => undefined,\n    sortBy: {},\n    expandable: false\n};\n\nexport default InfoTable;\n","/* eslint-disable camelcase */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport LoadingCard from '../LoadingCard';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { systemStatus } from '../selectors';\n\nconst SystemStatusCardCore = ({\n    detailLoaded,\n    hasState,\n    hasRegistered,\n    hasLastCheckIn,\n    hasRHC,\n    entity,\n    systemProfile,\n    systemStatus\n}) => (\n    <LoadingCard\n        title=\"System status\"\n        isLoading={ !detailLoaded }\n        items={\n            [\n                ...hasState ? [{\n                    title: 'Current state',\n                    value: systemStatus.stale ? 'Stale' : 'Active'\n                }] : [],\n                ...hasRegistered ? [{ title: 'Registered', value: entity && (\n                    <DateFormat date={entity.created} type=\"exact\" />\n                ) }] : [],\n                ...hasLastCheckIn ? [{ title: 'Last upload', value: entity && (\n                    <DateFormat date={ entity.updated } type=\"exact\" />\n                ) }] : [],\n                ...hasRHC ? [{\n                    title: 'RHC',\n                    value: systemProfile?.rhc_client_id ? 'Connected' : 'Not available'\n                }] : []\n            ]\n        }\n    />);\n\nSystemStatusCardCore.propTypes = {\n    detailLoaded: PropTypes.bool,\n    entity: PropTypes.shape({\n        updated: PropTypes.string,\n        created: PropTypes.string\n    }),\n    systemProfile: PropTypes.shape({\n        rhc_client_id: PropTypes.string\n    }),\n    systemStatus: PropTypes.object,\n    handleClick: PropTypes.func,\n    hasState: PropTypes.bool,\n    hasLastCheckIn: PropTypes.bool,\n    hasRegistered: PropTypes.bool,\n    hasRHC: PropTypes.bool\n};\nSystemStatusCardCore.defaultProps = {\n    detailLoaded: false,\n    systemStatus: {},\n    handleClick: () => undefined,\n    hasState: true,\n    hasLastCheckIn: true,\n    hasRegistered: true,\n    hasRHC: true\n};\n\nexport const SystemStatusCard = connect(({\n    entityDetails: {\n        entity\n    },\n    systemProfileStore: {\n        systemProfile\n    }\n}) => ({\n    entity,\n    systemProfile,\n    detailLoaded: systemProfile?.loaded,\n    systemStatus: systemStatus(entity)\n}))(SystemStatusCardCore);\n\nSystemStatusCard.propTypes = SystemStatusCardCore.propTypes;\nSystemStatusCard.defaultProps = SystemStatusCardCore.defaultProps;\n\nexport default SystemStatusCard;\n","import React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport {\n    Grid,\n    GridItem,\n    Modal\n} from '@patternfly/react-core';\nimport { SortByDirection } from '@patternfly/react-table';\n\nimport { systemProfile } from '../../../store/actions';\nimport InfoTable from '../InfoTable';\n// Since there's a problem with cards loading asynchronously we have to import the cards here as named\nimport { OperatingSystemCard } from '../OperatingSystemCard';\nimport { SystemCard } from '../SystemCard';\nimport { BiosCard } from '../BiosCard';\nimport { InfrastructureCard } from '../InfrastructureCard';\nimport { ConfigurationCard } from '../ConfigurationCard';\nimport { SystemStatusCard } from '../SystemStatusCard';\nimport { DataCollectorsCard } from '../DataCollectorsCard/DataCollectorsCard';\nimport { Provider } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport './general-information.scss';\n\nclass GeneralInformation extends Component {\n    state = {\n        isModalOpen: false,\n        modalTitle: '',\n        modalVariant: 'small'\n    };\n\n    onSort = (_event, index, direction, customRows) => {\n        const { rows } = this.state;\n        const sorted = (customRows || rows).sort((a, b) => {\n            const firstRow = a.cells || a;\n            const secondRow = b.cells || b;\n            const aSortBy = ('' + (firstRow[index].sortValue || firstRow[index])).toLocaleLowerCase();\n            const bSortBy = ('' + (secondRow[index].sortValue || secondRow[index])).toLocaleLowerCase();\n            return (aSortBy > bSortBy) ? -1 : 1;\n        });\n        this.setState({\n            rows: direction === SortByDirection.asc ? sorted : sorted.reverse()\n        });\n    }\n\n    handleModalToggle = (modalTitle = '', { cells, rows, expandable, filters } = {}, modalVariant = 'small') => {\n        rows && this.onSort(undefined, expandable ? 1 : 0, SortByDirection.asc, rows);\n        if (this.state.isModalOpen) {\n            this.props.history.push(this.props.location.pathname.split('/').slice(0, -1).join('/'));\n        }\n\n        this.setState(({ isModalOpen }) => ({\n            isModalOpen: !isModalOpen,\n            modalTitle,\n            cells,\n            expandable,\n            filters,\n            modalVariant\n        }));\n    };\n\n    componentDidMount() {\n        this.props.loadSystemDetail?.(this.props.inventoryId || this.props.entity.id);\n    };\n\n    render() {\n        const { isModalOpen, modalTitle, cells, rows, expandable, filters, modalVariant } = this.state;\n        const {\n            store,\n            writePermissions,\n            SystemCardWrapper,\n            OperatingSystemCardWrapper,\n            BiosCardWrapper,\n            InfrastructureCardWrapper,\n            ConfigurationCardWrapper,\n            SystemStatusCardWrapper,\n            DataCollectorsCardWrapper,\n            CollectionCardWrapper,\n            children\n        } = this.props;\n        const Wrapper = store ? Provider : Fragment;\n        return (\n            <Wrapper {...(store && { store })}>\n                <div className=\"ins-c-general-information\">\n                    <Grid hasGutter>\n                        <GridItem md={6} sm={12}>\n                            <Grid hasGutter>\n                                {SystemCardWrapper && <GridItem>\n                                    <SystemCardWrapper handleClick={this.handleModalToggle} writePermissions={writePermissions} />\n                                </GridItem>}\n                                {InfrastructureCardWrapper && <GridItem>\n                                    <InfrastructureCardWrapper handleClick={this.handleModalToggle} />\n                                </GridItem>}\n                                {SystemStatusCardWrapper && <GridItem>\n                                    <SystemStatusCardWrapper handleClick={this.handleModalToggle} />\n                                </GridItem>}\n                                {DataCollectorsCardWrapper && <GridItem>\n                                    <DataCollectorsCardWrapper handleClick={this.handleModalToggle} />\n                                </GridItem>}\n                            </Grid>\n                        </GridItem>\n                        <GridItem md={6} sm={12} >\n                            <Grid hasGutter>\n                                {OperatingSystemCardWrapper && <GridItem>\n                                    <OperatingSystemCardWrapper handleClick={this.handleModalToggle} />\n                                </GridItem>}\n\n                                {BiosCardWrapper && <GridItem>\n                                    <BiosCardWrapper handleClick={this.handleModalToggle} />\n                                </GridItem>}\n\n                                {ConfigurationCardWrapper && <GridItem>\n                                    <ConfigurationCardWrapper handleClick={this.handleModalToggle} />\n                                </GridItem>}\n\n                                {CollectionCardWrapper && <GridItem>\n                                    <CollectionCardWrapper handleClick={this.handleModalToggle} />\n                                </GridItem>}\n                            </Grid>\n                        </GridItem>\n                        {children}\n                        <Modal\n                            title={ modalTitle || '' }\n                            aria-label={`${modalTitle || ''} modal`}\n                            isOpen={ isModalOpen }\n                            onClose={ () => this.handleModalToggle() }\n                            className=\"ins-c-inventory__detail--dialog\"\n                            variant={ modalVariant }\n                        >\n                            <InfoTable\n                                cells={ cells }\n                                rows={ rows }\n                                expandable={ expandable }\n                                onSort={ this.onSort }\n                                filters={ filters }\n                            />\n                        </Modal>\n                    </Grid>\n                </div>\n            </Wrapper>\n        );\n    }\n}\n\nGeneralInformation.propTypes = {\n    entity: PropTypes.shape({\n        id: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n    }),\n    openedModal: PropTypes.string,\n    loadSystemDetail: PropTypes.func,\n    store: PropTypes.any,\n    writePermissions: PropTypes.bool,\n    SystemCardWrapper: PropTypes.oneOfType([PropTypes.elementType, PropTypes.bool]),\n    OperatingSystemCardWrapper: PropTypes.oneOfType([PropTypes.elementType, PropTypes.bool]),\n    BiosCardWrapper: PropTypes.oneOfType([PropTypes.elementType, PropTypes.bool]),\n    InfrastructureCardWrapper: PropTypes.oneOfType([PropTypes.elementType, PropTypes.bool]),\n    ConfigurationCardWrapper: PropTypes.oneOfType([PropTypes.elementType, PropTypes.bool]),\n    SystemStatusCardWrapper: PropTypes.oneOfType([PropTypes.elementType, PropTypes.bool]),\n    DataCollectorsCardWrapper: PropTypes.oneOfType([PropTypes.elementType, PropTypes.bool]),\n    CollectionCardWrapper: PropTypes.oneOfType([PropTypes.elementType, PropTypes.bool]),\n    children: PropTypes.node,\n    history: PropTypes.any,\n    location: PropTypes.any,\n    inventoryId: PropTypes.string.isRequired\n};\nGeneralInformation.defaultProps = {\n    entity: {},\n    SystemCardWrapper: SystemCard,\n    OperatingSystemCardWrapper: OperatingSystemCard,\n    BiosCardWrapper: BiosCard,\n    InfrastructureCardWrapper: InfrastructureCard,\n    ConfigurationCardWrapper: ConfigurationCard,\n    SystemStatusCardWrapper: SystemStatusCard,\n    DataCollectorsCardWrapper: DataCollectorsCard,\n    CollectionCardWrapper: false\n};\n\nconst mapStateToProps = ({\n    entityDetails: {\n        entity\n    }\n}) => ({\n    entity\n});\nconst mapDispatchToProps = (dispatch) => ({\n    loadSystemDetail: (itemId) => dispatch(systemProfile(itemId))\n});\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(GeneralInformation));\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport LoadingCard from '../LoadingCard';\nimport { generalMapper, interfaceMapper } from '../dataMapper';\nimport { infrastructureSelector } from '../selectors';\nimport { extraShape } from '../../../constants';\n\nconst InfrastructureCardCore = ({\n    infrastructure,\n    handleClick,\n    detailLoaded,\n    hasType,\n    hasVendor,\n    hasIPv4,\n    hasIPv6,\n    hasInterfaces,\n    extra\n}) => (<LoadingCard\n    title=\"Infrastructure\"\n    isLoading={ !detailLoaded }\n    items={ [\n        ...hasType ? [{ title: 'Type', value: infrastructure.type }] : [],\n        ...hasVendor ? [{ title: 'Vendor', value: infrastructure.vendor }] : [],\n        ...hasIPv4 ? [{\n            title: 'IPv4 addresses',\n            value: infrastructure.ipv4?.length,\n            plural: 'addresses',\n            singular: 'address',\n            target: 'ipv4',\n            onClick: () => {\n                handleClick(\n                    'IPv4',\n                    generalMapper(infrastructure.ipv4, 'IP address')\n                );\n            }\n        }] : [],\n        ...hasIPv6 ? [{\n            title: 'IPv6 addresses',\n            value: infrastructure.ipv6?.length,\n            plural: 'addresses',\n            singular: 'address',\n            target: 'ipv6',\n            onClick: () => {\n                handleClick(\n                    'IPv6',\n                    generalMapper(infrastructure.ipv6, 'IP address')\n                );\n            }\n        }] : [],\n        ...hasInterfaces ? [{\n            title: 'Interfaces/NICs',\n            value: infrastructure.nics?.length,\n            singular: 'NIC',\n            target: 'interfaces',\n            onClick: () => {\n                handleClick(\n                    'Interfaces/NICs',\n                    interfaceMapper(infrastructure.nics),\n                    'medium'\n                );\n            }\n        }] : [],\n        ...extra.map(({ onClick, ...item }) => ({\n            ...item,\n            ...onClick && { onClick: (e) => onClick(e, handleClick) }\n        }))\n    ] }\n/>);\n\nInfrastructureCardCore.propTypes = {\n    detailLoaded: PropTypes.bool,\n    handleClick: PropTypes.func,\n    infrastructure: PropTypes.shape({\n        type: PropTypes.string,\n        vendor: PropTypes.string,\n        ipv4: PropTypes.array,\n        ipv6: PropTypes.array,\n        nics: PropTypes.array\n    }),\n    hasType: PropTypes.bool,\n    hasVendor: PropTypes.bool,\n    hasIPv4: PropTypes.bool,\n    hasIPv6: PropTypes.bool,\n    hasInterfaces: PropTypes.bool,\n    extra: PropTypes.arrayOf(extraShape)\n};\nInfrastructureCardCore.defaultProps = {\n    detailLoaded: false,\n    handleClick: () => undefined,\n    hasType: true,\n    hasVendor: true,\n    hasIPv4: true,\n    hasIPv6: true,\n    hasInterfaces: true,\n    extra: []\n};\n\nexport const InfrastructureCard = connect(({\n    entityDetails: {\n        entity\n    },\n    systemProfileStore: {\n        systemProfile\n    }\n}) => ({\n    detailLoaded: systemProfile && systemProfile.loaded,\n    infrastructure: infrastructureSelector(systemProfile, entity)\n}))(InfrastructureCardCore);\n\nInfrastructureCard.propTypes = InfrastructureCardCore.propTypes;\nInfrastructureCard.defaultProps = InfrastructureCardCore.defaultProps;\n\nexport default InfrastructureCard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport LoadingCard from '../LoadingCard';\nimport { generalMapper } from '../dataMapper';\nimport { operatingSystem } from '../selectors';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { extraShape, isDate } from '../../../constants';\nimport OperatingSystemFormatter from '../../../Utilities/OperatingSystemFormatter';\n\nconst OperatingSystemCardCore = ({\n    systemInfo,\n    detailLoaded,\n    handleClick,\n    hasRelease,\n    hasKernelRelease,\n    hasArchitecture,\n    hasLastBoot,\n    hasKernelModules,\n    extra\n}) => (\n    <LoadingCard\n        title=\"Operating system\"\n        isLoading={ !detailLoaded }\n        items={ [\n            ...hasRelease ? [{ title: 'Release', value: <OperatingSystemFormatter operatingSystem={systemInfo.release} /> }] : [],\n            ...hasKernelRelease ? [{ title: 'Kernel release', value: systemInfo.kernelRelease }] : [],\n            ...hasArchitecture ? [{ title: 'Architecture', value: systemInfo.architecture }] : [],\n            ...hasLastBoot ? [{ title: 'Last boot time', value: (isDate(systemInfo.bootTime) ?\n                <DateFormat date={ systemInfo.bootTime } type=\"onlyDate\" /> :\n                'Not available'\n            )\n            }] : [],\n            ...hasKernelModules ? [{\n                title: 'Kernel modules',\n                value: systemInfo.kernelModules?.length,\n                singular: 'module',\n                target: 'kernel_modules',\n                onClick: () => {\n                    handleClick(\n                        'Kernel modules',\n                        generalMapper(systemInfo.kernelModules, 'Module')\n                    );\n                }\n            }] : [],\n            ...extra.map(({ onClick, ...item }) => ({\n                ...item,\n                ...onClick && { onClick: (e) => onClick(e, handleClick) }\n            }))\n        ] }\n    />\n);\n\nOperatingSystemCardCore.propTypes = {\n    detailLoaded: PropTypes.bool,\n    handleClick: PropTypes.func,\n    systemInfo: PropTypes.shape({\n        release: PropTypes.shape({\n            name: PropTypes.string,\n            major: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n            minor: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n        }),\n        architecture: PropTypes.string,\n        kernelRelease: PropTypes.string,\n        bootTime: PropTypes.string,\n        kernelModules: PropTypes.arrayOf(PropTypes.string)\n    }),\n    hasRelease: PropTypes.bool,\n    hasKernelRelease: PropTypes.bool,\n    hasArchitecture: PropTypes.bool,\n    hasLastBoot: PropTypes.bool,\n    hasKernelModules: PropTypes.bool,\n    extra: PropTypes.arrayOf(extraShape)\n};\nOperatingSystemCardCore.defaultProps = {\n    detailLoaded: false,\n    handleClick: () => undefined,\n    hasRelease: true,\n    hasKernelRelease: true,\n    hasArchitecture: true,\n    hasLastBoot: true,\n    hasKernelModules: true,\n    extra: []\n};\n\nexport const OperatingSystemCard = connect(({\n    entityDetails: {\n        entity\n    },\n    systemProfileStore: {\n        systemProfile\n    }\n}) => ({\n    detailLoaded: systemProfile && systemProfile.loaded,\n    systemInfo: operatingSystem(systemProfile, entity)\n}))(OperatingSystemCardCore);\n\nOperatingSystemCard.propTypes = OperatingSystemCardCore.propTypes;\nOperatingSystemCard.defaultProps = OperatingSystemCardCore.defaultProps;\n\nexport default OperatingSystemCard;\n"],"names":["BiosCardCore","bios","detailLoaded","hasVendor","hasVersion","handleClick","hasReleaseDate","extra","title","isLoading","items","value","vendor","version","isDate","releaseDate","date","Date","type","map","onClick","e","propTypes","PropTypes","csm","extraShape","defaultProps","BiosCard","connect","systemProfile","systemProfileStore","loaded","biosSelector","enabledRepos","repositories","enabled","length","disabled","filter","Boolean","join","ConfigurationCardCore","configuration","hasPackages","hasServices","hasProcesses","hasRepositories","packages","singular","target","generalMapper","services","processes","plural","repositoriesMapper","base_url","name","gpgcheck","ConfigurationCard","configurationSelector","DataCollectorsCardCore","collectors","entity","dataMapper","useState","expandedNames","setExpandedNames","setExpanded","useCallback","collector","isExpanding","prevExpanded","otherExpandedNames","r","isExpanded","includes","data","getDefaultCollectors","TableComposable","variant","TableVariant","borders","Thead","Tr","className","Th","rowIndex","Tbody","key","details","Td","expand","onToggle","undefined","style","paddingLeft","dataLabel","status","updated","colSpan","ExpandableRowContent","grow","default","id","per_reporter_staleness","DataCollectorsCard","entityDetails","defaultCollectors","InfoTable","sortBy","index","direction","SortByDirection","opened","pagination","page","perPage","activeFilters","event","expandable","props","onSort","setState","_event","isOpen","state","label","restFilter","_e","deleteAll","deleted","onDeleteFilter","this","cells","rows","filters","collapsibleProps","onCollapse","activeRows","filterRows","mappedRows","flatMap","prepareRows","child","parent","Fragment","PrimaryToolbar","itemCount","onSetPage","onUpdatePagination","onPerPageSelect","filterConfig","generateFilters","setFilter","activeFiltersConfig","Object","values","category","chips","Array","isArray","item","onDelete","Table","TableHeader","TableBody","TextContent","row","Text","component","TextVariants","TableToolbar","isFooter","Pagination","Component","options","SystemStatusCardCore","hasState","hasRegistered","hasLastCheckIn","hasRHC","systemStatus","LoadingCard","stale","DateFormat","created","rhc_client_id","SystemStatusCard","GeneralInformation","isModalOpen","modalTitle","modalVariant","customRows","sorted","sort","a","b","firstRow","secondRow","sortValue","toLocaleLowerCase","reverse","history","push","location","pathname","split","slice","loadSystemDetail","inventoryId","store","writePermissions","SystemCardWrapper","OperatingSystemCardWrapper","BiosCardWrapper","InfrastructureCardWrapper","ConfigurationCardWrapper","SystemStatusCardWrapper","DataCollectorsCardWrapper","CollectionCardWrapper","children","Wrapper","Provider","Grid","hasGutter","GridItem","md","sm","handleModalToggle","Modal","onClose","openedModal","SystemCard","OperatingSystemCard","InfrastructureCard","withRouter","dispatch","itemId","InfrastructureCardCore","infrastructure","hasType","hasIPv4","hasIPv6","hasInterfaces","ipv4","ipv6","nics","interfaceMapper","infrastructureSelector","OperatingSystemCardCore","systemInfo","hasRelease","hasKernelRelease","hasArchitecture","hasLastBoot","hasKernelModules","operatingSystem","release","kernelRelease","architecture","bootTime","kernelModules","major","minor"],"sourceRoot":""}