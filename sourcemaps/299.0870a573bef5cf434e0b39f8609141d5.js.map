{"version":3,"file":"js/299.7d79708af04eada3fb0f.js","mappings":"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","sources":["webpack:///./src/components/GeneralInfo/SystemCard/SystemCard.js"],"sourcesContent":["import React, { Fragment, Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport LoadingCard from '../LoadingCard';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { propertiesSelector } from '../selectors';\nimport { editDisplayName, editAnsibleHost, systemProfile } from '../../../store/actions';\nimport TextInputModal from '../TextInputModal';\nimport { loadEntity } from '../../../store/actions';\nimport { Popover, Button } from '@patternfly/react-core';\nimport EditButton from '../EditButton';\nimport { generalMapper } from '../dataMapper';\nimport { extraShape } from '../../../constants';\n\nconst TitleWithPopover = ({ title, content }) => (\n    <React.Fragment>\n        <span>{ title }</span>\n        <Popover\n            headerContent={<div>{ title }</div>}\n            bodyContent={<div>{ content }</div>}>\n            <Button\n                variant=\"plain\"\n                aria-label={`Action for ${title}`}\n                className='ins-active-general_information__popover-icon'>\n                <OutlinedQuestionCircleIcon />\n            </Button>\n        </Popover>\n    </React.Fragment>\n);\n\nclass SystemCard extends Component {\n    state = {\n        isDisplayNameModalOpen: false,\n        isAnsibleHostModalOpen: false\n    };\n\n    onCancel = () => {\n        this.setState({\n            isDisplayNameModalOpen: false,\n            isAnsibleHostModalOpen: false\n        });\n    };\n\n    onSubmit = (fn) => (value) => {\n        const { entity } = this.props;\n        fn(entity.id, value);\n        this.onCancel();\n    }\n\n    onShowDisplayModal = (event) => {\n        event.preventDefault();\n        this.setState({\n            isDisplayNameModalOpen: true\n        });\n    };\n\n    onShowAnsibleModal = (event) => {\n        event.preventDefault();\n        this.setState({\n            isAnsibleHostModalOpen: true\n        });\n    };\n\n    getAnsibleHost = () => {\n        const { entity } = this.props;\n        return entity.ansible_host || entity.fqdn || entity.id;\n    };\n\n    render() {\n        const {\n            detailLoaded,\n            entity,\n            properties,\n            setDisplayName,\n            setAnsibleHost,\n            writePermissions,\n            handleClick,\n            hasHostName,\n            hasDisplayName,\n            hasAnsibleHostname,\n            hasSAP,\n            hasCPUs,\n            hasSockets,\n            hasCores,\n            hasCPUFlags,\n            hasRAM,\n            extra\n        } = this.props;\n        const { isDisplayNameModalOpen, isAnsibleHostModalOpen } = this.state;\n        return (\n            <Fragment>\n                <LoadingCard\n                    title=\"System properties\"\n                    isLoading={ !detailLoaded }\n                    items={ [\n                        ...hasHostName ? [{\n                            title: <TitleWithPopover\n                                title='Host name'\n                                content='Name imported from the system.'/>,\n                            value: entity.fqdn, size: 'md'\n                        }] : [],\n                        ...hasDisplayName ? [{\n                            title: <TitleWithPopover\n                                title='Display name'\n                                content='System name displayed in an inventory list.'/>,\n                            value: (\n                                <Fragment>\n                                    { entity.display_name }\n                                    <EditButton\n                                        writePermissions={writePermissions}\n                                        link=\"display_name\"\n                                        onClick={this.onShowDisplayModal}\n                                    />\n                                </Fragment>\n                            ), size: 'md'\n                        }] : [],\n                        ...hasAnsibleHostname ? [{\n                            title: <TitleWithPopover\n                                title='Ansible hostname'\n                                content='Hostname that is used in playbooks by Remediations.'/>,\n                            value: (\n                                <Fragment>\n                                    { this.getAnsibleHost() }\n                                    <EditButton\n                                        writePermissions={writePermissions}\n                                        link=\"ansible_name\"\n                                        onClick={this.onShowAnsibleModal}\n                                    />\n                                </Fragment>\n                            ), size: 'md'\n                        }] : [],\n                        ...hasSAP ? [{\n                            title: 'SAP',\n                            value: properties.sapIds?.length,\n                            singular: 'identifier',\n                            target: 'sap_sids',\n                            onClick: () => {\n                                handleClick(\n                                    'SAP IDs (SID)',\n                                    generalMapper(properties.sapIds, 'SID')\n                                );\n                            }\n                        }] : [],\n                        ...hasCPUs ? [{ title: 'Number of CPUs', value: properties.cpuNumber }] : [],\n                        ...hasSockets ? [{ title: 'Sockets', value: properties.sockets }] : [],\n                        ...hasCores ? [{ title: 'Cores per socket', value: properties.coresPerSocket }] : [],\n                        ...hasCPUFlags ? [{\n                            title: 'CPU flags',\n                            value: properties?.cpuFlags?.length,\n                            singular: 'flag',\n                            target: 'flag',\n                            onClick: () => handleClick('CPU flags', generalMapper(properties.cpuFlags, 'flag name'))\n                        }] : [],\n                        ...hasRAM ? [{ title: 'RAM', value: properties.ramSize }] : [],\n                        ...extra.map(({ onClick, ...item }) => ({\n                            ...item,\n                            ...onClick && { onClick: (e) => onClick(e, handleClick) }\n                        }))\n                    ] }\n                />\n                <TextInputModal\n                    isOpen={ isDisplayNameModalOpen }\n                    title='Edit display name'\n                    value={ entity && entity.display_name }\n                    ariaLabel='Host inventory display name'\n                    modalOuiaId=\"edit-display-name-modal\"\n                    cancelOuiaId=\"cancel-edit-display-name\"\n                    confirmOuiaId=\"confirm-edit-display-name\"\n                    inputOuiaId=\"input-edit-display-name\"\n                    onCancel={ this.onCancel }\n                    onSubmit={ this.onSubmit(setDisplayName) }\n                />\n                <TextInputModal\n                    isOpen={ isAnsibleHostModalOpen }\n                    title='Edit Ansible host'\n                    value={ entity && this.getAnsibleHost() }\n                    ariaLabel='Ansible host'\n                    modalOuiaId=\"edit-ansible-name-modal\"\n                    cancelOuiaId=\"cancel-edit-ansible-name\"\n                    confirmOuiaId=\"confirm-edit-ansible-name\"\n                    inputOuiaId=\"input-edit-ansible-name\"\n                    onCancel={ this.onCancel }\n                    onSubmit={ this.onSubmit(setAnsibleHost) }\n                />\n            </Fragment>\n        );\n    }\n}\n\nSystemCard.propTypes = {\n    detailLoaded: PropTypes.bool,\n    entity: PropTypes.shape({\n        // eslint-disable-next-line camelcase\n        display_name: PropTypes.string,\n        // eslint-disable-next-line camelcase\n        ansible_host: PropTypes.string,\n        fqdn: PropTypes.string,\n        id: PropTypes.string\n    }),\n    properties: PropTypes.shape({\n        cpuNumber: PropTypes.number,\n        sockets: PropTypes.number,\n        coresPerSocket: PropTypes.number,\n        ramSize: PropTypes.string,\n        storage: PropTypes.arrayOf(PropTypes.shape({\n            device: PropTypes.string,\n            // eslint-disable-next-line camelcase\n            mount_point: PropTypes.string,\n            options: PropTypes.shape({}),\n            type: PropTypes.string\n        })),\n        sapIds: PropTypes.arrayOf(PropTypes.string),\n        cpuFlags: PropTypes.array\n    }),\n    setDisplayName: PropTypes.func,\n    setAnsibleHost: PropTypes.func,\n    writePermissions: PropTypes.bool,\n    handleClick: PropTypes.func,\n    hasHostName: PropTypes.bool,\n    hasDisplayName: PropTypes.bool,\n    hasAnsibleHostname: PropTypes.bool,\n    hasSAP: PropTypes.bool,\n    hasCPUs: PropTypes.bool,\n    hasSockets: PropTypes.bool,\n    hasCores: PropTypes.bool,\n    hasCPUFlags: PropTypes.bool,\n    hasRAM: PropTypes.bool,\n    extra: PropTypes.arrayOf(extraShape)\n};\nSystemCard.defaultProps = {\n    detailLoaded: false,\n    entity: {},\n    properties: {},\n    hasHostName: true,\n    hasDisplayName: true,\n    hasAnsibleHostname: true,\n    hasSAP: true,\n    hasCPUs: true,\n    hasSockets: true,\n    hasCores: true,\n    hasCPUFlags: true,\n    hasRAM: true,\n    extra: []\n};\n\nTitleWithPopover.propTypes = {\n    title: PropTypes.string.isRequired,\n    content: PropTypes.string.isRequired\n};\n\nfunction mapDispatchToProps(dispatch) {\n    const reloadWrapper = (id, event) => {\n        event.payload.then(data => {\n            dispatch(systemProfile(id, { hasItems: true }));\n            dispatch(loadEntity(id, { hasItems: true }, { showTags: true }));\n            return data;\n        });\n\n        return event;\n    };\n\n    return {\n        setDisplayName: (id, value) => {\n            dispatch(reloadWrapper(id, editDisplayName(id, value)));\n        },\n\n        setAnsibleHost: (id, value) => {\n            dispatch(reloadWrapper(id, editAnsibleHost(id, value)));\n        }\n    };\n}\n\nexport default connect(({\n    entityDetails: {\n        entity\n    },\n    systemProfileStore: {\n        systemProfile\n    }\n}) => ({\n    entity,\n    detailLoaded: systemProfile && systemProfile.loaded,\n    properties: propertiesSelector(systemProfile, entity)\n}), mapDispatchToProps)(SystemCard);\n"],"names":["TitleWithPopover","title","content","headerContent","bodyContent","variant","className","SystemCard","isDisplayNameModalOpen","isAnsibleHostModalOpen","setState","fn","value","entity","props","id","onCancel","event","preventDefault","ansible_host","fqdn","this","detailLoaded","properties","setDisplayName","setAnsibleHost","writePermissions","handleClick","hasHostName","hasDisplayName","hasAnsibleHostname","hasSAP","hasCPUs","hasSockets","hasCores","hasCPUFlags","hasRAM","extra","state","Fragment","isLoading","items","size","display_name","link","onClick","onShowDisplayModal","getAnsibleHost","onShowAnsibleModal","sapIds","length","singular","target","generalMapper","cpuNumber","sockets","coresPerSocket","cpuFlags","ramSize","map","e","isOpen","ariaLabel","modalOuiaId","cancelOuiaId","confirmOuiaId","inputOuiaId","onSubmit","Component","propTypes","PropTypes","storage","device","mount_point","options","type","extraShape","defaultProps","connect","entityDetails","systemProfile","systemProfileStore","loaded","propertiesSelector","dispatch","reloadWrapper","payload","then","data","hasItems","loadEntity","showTags","editDisplayName","editAnsibleHost"],"sourceRoot":""}