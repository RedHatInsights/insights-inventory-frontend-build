{"version":3,"file":"js/5613.1664477451654.38fbb758172e39d41e9a.js","mappings":"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","sources":["webpack:///./src/components/GeneralInfo/BiosCard/BiosCard.js","webpack:///./src/components/GeneralInfo/ConfigurationCard/ConfigurationCard.js","webpack:///./src/components/GeneralInfo/DataCollectorsCard/DataCollectorsCard.js","webpack:///./src/components/GeneralInfo/GeneralInformation/GeneralInformation.js","webpack:///./src/components/GeneralInfo/InfrastructureCard/InfrastructureCard.js","webpack:///./src/components/GeneralInfo/OperatingSystemCard/OperatingSystemCard.js","webpack:///./src/components/GeneralInfo/SystemCard/SystemCard.js","webpack:///./src/components/GeneralInfo/dataMapper/dataMapper.js","webpack:///./src/components/GeneralInfo/selectors/selectors.js","webpack:///./src/components/SystemDetails/GeneralInfo.js","webpack:///./src/store/actions.js","webpack:///./node_modules/react-redux/es/connect/mapDispatchToProps.js","webpack:///./node_modules/react-redux/es/connect/mapStateToProps.js","webpack:///./node_modules/react-redux/es/connect/mergeProps.js","webpack:///./node_modules/react-redux/es/connect/connect.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport LoadingCard from '../LoadingCard';\nimport { biosSelector } from '../selectors';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { extraShape, isDate } from '../../../constants';\n\nconst BiosCardCore = ({ bios, detailLoaded, hasVendor, hasVersion, handleClick, hasReleaseDate, extra }) => (<LoadingCard\n    title=\"BIOS\"\n    isLoading={ !detailLoaded }\n    items={ [\n        ...hasVendor ? [{ title: 'Vendor', value: bios.vendor }] : [],\n        ...hasVersion ? [{ title: 'Version', value: bios.version }] : [],\n        ...hasReleaseDate ? [{ title: 'Release date', value: (isDate(bios.releaseDate) ?\n            <DateFormat date={ new Date(bios.releaseDate) } type=\"onlyDate\" /> :\n            'Not available'\n        ) }] : [],\n        ...extra.map(({ onClick, ...item }) => ({\n            ...item,\n            ...onClick && { onClick: (e) => onClick(e, handleClick) }\n        }))\n    ] }\n/>);\n\nBiosCardCore.propTypes = {\n    detailLoaded: PropTypes.bool,\n    handleClick: PropTypes.func,\n    bios: PropTypes.shape({\n        vendor: PropTypes.string,\n        version: PropTypes.string,\n        releaseDate: PropTypes.string,\n        csm: PropTypes.arrayOf(PropTypes.string)\n    }),\n    hasVendor: PropTypes.bool,\n    hasVersion: PropTypes.bool,\n    hasReleaseDate: PropTypes.bool,\n    extra: PropTypes.arrayOf(extraShape)\n};\nBiosCardCore.defaultProps = {\n    detailLoaded: false,\n    handleClick: () => undefined,\n    extra: [],\n    hasVendor: true,\n    hasVersion: true,\n    hasReleaseDate: true\n};\n\nexport const BiosCard = connect(({\n    systemProfileStore: {\n        systemProfile\n    }\n}) => ({\n    detailLoaded: systemProfile && systemProfile.loaded,\n    bios: biosSelector(systemProfile)\n}))(BiosCardCore);\n\nBiosCard.propTypes = BiosCardCore.propTypes;\nBiosCard.defaultProps = BiosCardCore.defaultProps;\n\nexport default BiosCard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport LoadingCard from '../LoadingCard';\nimport { generalMapper, repositoriesMapper } from '../dataMapper';\nimport { configurationSelector } from '../selectors';\nimport { extraShape } from '../../../constants';\n\nexport function enabledRepos(repositories) {\n    if (repositories) {\n        return [\n            repositories.enabled && repositories.enabled.length > 0 && `${repositories.enabled.length} enabled`,\n            repositories.disabled && repositories.disabled.length > 0 && `${repositories.disabled.length} disabled`\n        ].filter(Boolean).join(' / ');\n    }\n}\n\nconst ConfigurationCardCore = ({\n    detailLoaded,\n    configuration,\n    handleClick,\n    hasPackages,\n    hasServices,\n    hasProcesses,\n    hasRepositories,\n    extra\n}) => (<LoadingCard\n    title=\"Configuration\"\n    isLoading={ !detailLoaded }\n    items={ [\n        ...hasPackages ? [{\n            title: 'Installed packages',\n            value: configuration.packages?.length,\n            singular: 'package',\n            target: 'installed_packages',\n            onClick: () => {\n                handleClick(\n                    'Installed packages',\n                    generalMapper(configuration.packages, 'Package name')\n                );\n            }\n        }] : [],\n        ...hasServices ? [{\n            title: 'Services',\n            value: configuration.services?.length,\n            singular: 'service',\n            target: 'services',\n            onClick: () => {\n                handleClick(\n                    'Services',\n                    generalMapper(configuration.services, 'Service name')\n                );\n            }\n        }] : [],\n        ...hasProcesses ? [{\n            title: 'Running processes',\n            value: configuration.processes?.length,\n            singular: 'process',\n            plural: 'processes',\n            target: 'running_processes',\n            onClick: () => {\n                handleClick(\n                    'Running processes',\n                    generalMapper(configuration.processes, 'Process name')\n                );\n            }\n        }] : [],\n        ...hasRepositories ? [{\n            title: 'Repositories',\n            value: enabledRepos(configuration.repositories),\n            target: 'repositories',\n            onClick: () => {\n                handleClick(\n                    'Repositories',\n                    repositoriesMapper(configuration.repositories),\n                    'medium'\n                );\n            }\n        }] : [],\n        ...extra.map(({ onClick, ...item }) => ({\n            ...item,\n            ...onClick && { onClick: (e) => onClick(e, handleClick) }\n        }))\n    ] }\n/>);\n\nConfigurationCardCore.propTypes = {\n    detailLoaded: PropTypes.bool,\n    handleClick: PropTypes.func,\n    configuration: PropTypes.shape({\n        packages: PropTypes.arrayOf(PropTypes.string),\n        services: PropTypes.arrayOf(PropTypes.string),\n        processes: PropTypes.arrayOf(PropTypes.string),\n        repositories: PropTypes.shape({\n            enabled: PropTypes.arrayOf(PropTypes.shape({\n                // eslint-disable-next-line camelcase\n                base_url: PropTypes.string,\n                name: PropTypes.string,\n                enabled: PropTypes.bool,\n                gpgcheck: PropTypes.bool\n            })),\n            disabled: PropTypes.arrayOf(PropTypes.shape({\n                // eslint-disable-next-line camelcase\n                base_url: PropTypes.string,\n                name: PropTypes.string,\n                enabled: PropTypes.bool,\n                gpgcheck: PropTypes.bool\n            }))\n        })\n    }),\n    hasPackages: PropTypes.bool,\n    hasServices: PropTypes.bool,\n    hasProcesses: PropTypes.bool,\n    hasRepositories: PropTypes.bool,\n    extra: PropTypes.arrayOf(extraShape)\n};\nConfigurationCardCore.defaultProps = {\n    detailLoaded: false,\n    handleClick: () => undefined,\n    hasPackages: true,\n    hasServices: true,\n    hasProcesses: true,\n    hasRepositories: true,\n    extra: []\n};\n\nexport const ConfigurationCard = connect(({\n    systemProfileStore: {\n        systemProfile\n    }\n}) => ({\n    detailLoaded: systemProfile && systemProfile.loaded,\n    configuration: configurationSelector(systemProfile)\n}))(ConfigurationCardCore);\n\nConfigurationCard.propTypes = ConfigurationCardCore.propTypes;\nConfigurationCard.defaultProps = ConfigurationCardCore.defaultProps;\n\nexport default ConfigurationCard;\n","/* eslint-disable camelcase */\nimport React, { useState, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport LoadingCard from '../LoadingCard';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { TableComposable, Thead, Tr, Th, Tbody, Td, TableVariant, ExpandableRowContent } from '@patternfly/react-table';\nimport { Flex, FlexItem } from '@patternfly/react-core';\nimport { getDefaultCollectors } from '../selectors/selectors';\n\nconst DataCollectorsCardCore = ({\n    detailLoaded,\n    collectors,\n    entity,\n    dataMapper\n}) => {\n    const [expandedNames, setExpandedNames] = useState([]);\n    const setExpanded = useCallback((collector, isExpanding = true) => setExpandedNames(prevExpanded => {\n        const otherExpandedNames = prevExpanded.filter(r => r !== collector.name);\n        return isExpanding ? [...otherExpandedNames, collector.name] : otherExpandedNames;\n    }), []);\n    const isExpanded = (collector) => expandedNames.includes(collector.name);\n    const data = collectors ?? getDefaultCollectors(entity);\n    return (<LoadingCard\n        title=\"Data collectors\"\n        isLoading={ !detailLoaded }\n    >\n        <TableComposable\n            aria-label=\"Data collectors\"\n            variant={TableVariant.compact}\n            borders={false}\n        >\n            <Thead>\n                <Tr className=\"ins-c__no-border\">\n                    <Th />\n                    <Th>Name</Th>\n                    <Th>Status</Th>\n                    <Th>Last upload</Th>\n                </Tr>\n            </Thead>\n            {dataMapper ? dataMapper(data, isExpanded, setExpanded) : data.map((collector, rowIndex) => (\n                <Tbody key={collector.name} isExpanded={isExpanded(collector)}>\n                    <Tr>\n                        {collector.details.name ?\n                            <Td\n                                expand={\n                                    collector.details\n                                        ? {\n                                            rowIndex,\n                                            isExpanded: isExpanded(collector),\n                                            onToggle: () => setExpanded(collector, !isExpanded(collector))\n                                        }\n                                        : undefined\n                                }\n                                style={{ paddingLeft: 0 }}\n                            /> : <Td />}\n                        <Td dataLabel=\"Name\">{collector.name}</Td>\n                        <Td dataLabel=\"Status\">{collector.status}</Td>\n                        <Td dataLabel=\"Last upload\">\n                            {collector.updated ?\n                                <DateFormat date={ collector.updated } type=\"exact\" /> :\n                                'N/A'\n                            }</Td>\n                    </Tr>\n                    {collector.details && collector.details.name && (\n                        <Tr isExpanded={isExpanded(collector)}>\n                            <Td />\n                            <Td colSpan={3}>\n                                <ExpandableRowContent>\n                                    <Flex>\n                                        <FlexItem className=\"ins-c__flex-row-margin\">\n                                            {`${collector.details.name}:`}\n                                        </FlexItem>\n                                        <FlexItem grow={{ default: 'grow' }}>\n                                            {collector.details.id ?? 'N/A'}\n                                        </FlexItem>\n                                    </Flex>\n                                </ExpandableRowContent>\n                            </Td>\n                        </Tr>\n                    )}\n                </Tbody>))}\n        </TableComposable>\n    </LoadingCard>);\n};\n\nDataCollectorsCardCore.propTypes = {\n    detailLoaded: PropTypes.bool,\n    collectors: PropTypes.array,\n    dataMapper: PropTypes.func,\n    entity: PropTypes.shape({\n        per_reporter_staleness: PropTypes.object\n    })\n};\nDataCollectorsCardCore.defaultProps = {\n    detailLoaded: false\n};\n\nexport const DataCollectorsCard = connect(({\n    entityDetails: {\n        entity\n    },\n    systemProfileStore: {\n        systemProfile\n    }\n}) => ({\n    entity,\n    systemProfile,\n    detailLoaded: systemProfile?.loaded,\n    defaultCollectors: getDefaultCollectors(entity)\n}))(DataCollectorsCardCore);\n\nDataCollectorsCard.propTypes = DataCollectorsCardCore.propTypes;\nDataCollectorsCard.defaultProps = DataCollectorsCardCore.defaultProps;\n\nexport default DataCollectorsCard;\n","import React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport {\n    Grid,\n    GridItem,\n    Modal\n} from '@patternfly/react-core';\nimport { SortByDirection } from '@patternfly/react-table';\n\nimport { systemProfile } from '../../../store/actions';\nimport InfoTable from '../InfoTable';\n// Since there's a problem with cards loading asynchronously we have to import the cards here as named\nimport { OperatingSystemCard } from '../OperatingSystemCard';\nimport { SystemCard } from '../SystemCard';\nimport { BiosCard } from '../BiosCard';\nimport { InfrastructureCard } from '../InfrastructureCard';\nimport { ConfigurationCard } from '../ConfigurationCard';\nimport { SystemStatusCard } from '../SystemStatusCard';\nimport { DataCollectorsCard } from '../DataCollectorsCard/DataCollectorsCard';\nimport { Provider } from 'react-redux';\nimport './general-information.scss';\n\nclass GeneralInformation extends Component {\n    state = {\n        isModalOpen: false,\n        modalTitle: '',\n        modalVariant: 'small'\n    };\n\n    onSort = (_event, index, direction, customRows) => {\n        const { rows } = this.state;\n        const sorted = (customRows || rows).sort((a, b) => {\n            const firstRow = a.cells || a;\n            const secondRow = b.cells || b;\n            const aSortBy = ('' + (firstRow[index].sortValue || firstRow[index])).toLocaleLowerCase();\n            const bSortBy = ('' + (secondRow[index].sortValue || secondRow[index])).toLocaleLowerCase();\n            return (aSortBy > bSortBy) ? -1 : 1;\n        });\n        this.setState({\n            rows: direction === SortByDirection.asc ? sorted : sorted.reverse()\n        });\n    }\n\n    handleModalToggle = (modalTitle = '', { cells, rows, expandable, filters } = {}, modalVariant = 'small') => {\n        rows && this.onSort(undefined, expandable ? 1 : 0, SortByDirection.asc, rows);\n        this.setState(({ isModalOpen }) => ({\n            isModalOpen: !isModalOpen,\n            modalTitle,\n            cells,\n            expandable,\n            filters,\n            modalVariant\n        }));\n    };\n\n    componentDidMount() {\n        this.props.loadSystemDetail && this.props.loadSystemDetail(this.props.entity.id);\n    };\n\n    render() {\n        const { isModalOpen, modalTitle, cells, rows, expandable, filters, modalVariant } = this.state;\n        const {\n            store,\n            writePermissions,\n            SystemCardWrapper,\n            OperatingSystemCardWrapper,\n            BiosCardWrapper,\n            InfrastructureCardWrapper,\n            ConfigurationCardWrapper,\n            SystemStatusCardWrapper,\n            DataCollectorsCardWrapper,\n            CollectionCardWrapper,\n            children\n        } = this.props;\n        const Wrapper = store ? Provider : Fragment;\n        return (\n            <Wrapper {...(store && { store })}>\n                <div className=\"ins-c-general-information\">\n                    <Grid sm={12} md={6} hasGutter>\n                        {SystemCardWrapper && <GridItem>\n                            <SystemCardWrapper handleClick={ this.handleModalToggle } writePermissions={writePermissions} />\n                        </GridItem>}\n                        {OperatingSystemCardWrapper && <GridItem>\n                            <OperatingSystemCardWrapper handleClick={ this.handleModalToggle } />\n                        </GridItem>}\n                        {InfrastructureCardWrapper && <GridItem>\n                            <InfrastructureCardWrapper handleClick={ this.handleModalToggle } />\n                        </GridItem>}\n                        {BiosCardWrapper && <GridItem>\n                            <BiosCardWrapper handleClick={ this.handleModalToggle } />\n                        </GridItem>}\n                        {SystemStatusCardWrapper && <GridItem>\n                            <SystemStatusCardWrapper handleClick={ this.handleModalToggle } />\n                        </GridItem>}\n                        {ConfigurationCardWrapper && <GridItem>\n                            <ConfigurationCardWrapper handleClick={ this.handleModalToggle } />\n                        </GridItem>}\n                        {DataCollectorsCardWrapper && <GridItem>\n                            <DataCollectorsCardWrapper handleClick={ this.handleModalToggle } />\n                        </GridItem>}\n                        {CollectionCardWrapper && <GridItem>\n                            <CollectionCardWrapper handleClick={ this.handleModalToggle } />\n                        </GridItem>}\n                        {children}\n                        <Modal\n                            title={ modalTitle || '' }\n                            aria-label={`${modalTitle || ''} modal`}\n                            isOpen={ isModalOpen }\n                            onClose={ () => this.handleModalToggle() }\n                            className=\"ins-c-inventory__detail--dialog\"\n                            variant={ modalVariant }\n                        >\n                            <InfoTable\n                                cells={ cells }\n                                rows={ rows }\n                                expandable={ expandable }\n                                onSort={ this.onSort }\n                                filters={ filters }\n                            />\n                        </Modal>\n                    </Grid>\n                </div>\n            </Wrapper>\n        );\n    }\n}\n\nGeneralInformation.propTypes = {\n    entity: PropTypes.shape({\n        id: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n    }),\n    loadSystemDetail: PropTypes.func,\n    store: PropTypes.any,\n    writePermissions: PropTypes.bool,\n    SystemCardWrapper: PropTypes.oneOfType([PropTypes.node, PropTypes.bool]),\n    OperatingSystemCardWrapper: PropTypes.oneOfType([PropTypes.node, PropTypes.bool]),\n    BiosCardWrapper: PropTypes.oneOfType([PropTypes.node, PropTypes.bool]),\n    InfrastructureCardWrapper: PropTypes.oneOfType([PropTypes.node, PropTypes.bool]),\n    ConfigurationCardWrapper: PropTypes.oneOfType([PropTypes.node, PropTypes.bool]),\n    SystemStatusCardWrapper: PropTypes.oneOfType([PropTypes.node, PropTypes.bool]),\n    DataCollectorsCardWrapper: PropTypes.oneOfType([PropTypes.node, PropTypes.bool]),\n    CollectionCardWrapper: PropTypes.oneOfType([PropTypes.node, PropTypes.bool]),\n    children: PropTypes.node\n};\nGeneralInformation.defaultProps = {\n    entity: {},\n    SystemCardWrapper: SystemCard,\n    OperatingSystemCardWrapper: OperatingSystemCard,\n    BiosCardWrapper: BiosCard,\n    InfrastructureCardWrapper: InfrastructureCard,\n    ConfigurationCardWrapper: ConfigurationCard,\n    SystemStatusCardWrapper: SystemStatusCard,\n    DataCollectorsCardWrapper: DataCollectorsCard,\n    CollectionCardWrapper: false\n};\n\nconst mapStateToProps = ({\n    entityDetails: {\n        entity\n    }\n}) => ({\n    entity\n});\nconst mapDispatchToProps = (dispatch) => ({\n    loadSystemDetail: (itemId) => dispatch(systemProfile(itemId))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GeneralInformation);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport LoadingCard from '../LoadingCard';\nimport { generalMapper, interfaceMapper } from '../dataMapper';\nimport { infrastructureSelector } from '../selectors';\nimport { extraShape } from '../../../constants';\n\nconst InfrastructureCardCore = ({\n    infrastructure,\n    handleClick,\n    detailLoaded,\n    hasType,\n    hasVendor,\n    hasIPv4,\n    hasIPv6,\n    hasInterfaces,\n    extra\n}) => (<LoadingCard\n    title=\"Infrastructure\"\n    isLoading={ !detailLoaded }\n    items={ [\n        ...hasType ? [{ title: 'Type', value: infrastructure.type }] : [],\n        ...hasVendor ? [{ title: 'Vendor', value: infrastructure.vendor }] : [],\n        ...hasIPv4 ? [{\n            title: 'IPv4 addresses',\n            value: infrastructure.ipv4?.length,\n            plural: 'addresses',\n            singular: 'address',\n            target: 'ipv4',\n            onClick: () => {\n                handleClick(\n                    'IPv4',\n                    generalMapper(infrastructure.ipv4, 'IP address')\n                );\n            }\n        }] : [],\n        ...hasIPv6 ? [{\n            title: 'IPv6 addresses',\n            value: infrastructure.ipv6?.length,\n            plural: 'addresses',\n            singular: 'address',\n            onClick: () => {\n                handleClick(\n                    'IPv6',\n                    generalMapper(infrastructure.ipv6, 'IP address')\n                );\n            }\n        }] : [],\n        ...hasInterfaces ? [{\n            title: 'Interfaces/NICs',\n            value: infrastructure.nics?.length,\n            singular: 'NIC',\n            target: 'interfaces',\n            onClick: () => {\n                handleClick(\n                    'Interfaces/NICs',\n                    interfaceMapper(infrastructure.nics),\n                    'medium'\n                );\n            }\n        }] : [],\n        ...extra.map(({ onClick, ...item }) => ({\n            ...item,\n            ...onClick && { onClick: (e) => onClick(e, handleClick) }\n        }))\n    ] }\n/>);\n\nInfrastructureCardCore.propTypes = {\n    detailLoaded: PropTypes.bool,\n    handleClick: PropTypes.func,\n    infrastructure: PropTypes.shape({\n        type: PropTypes.string,\n        vendor: PropTypes.string,\n        ipv4: PropTypes.array,\n        ipv6: PropTypes.array,\n        nics: PropTypes.array\n    }),\n    hasType: PropTypes.bool,\n    hasVendor: PropTypes.bool,\n    hasIPv4: PropTypes.bool,\n    hasIPv6: PropTypes.bool,\n    hasInterfaces: PropTypes.bool,\n    extra: PropTypes.arrayOf(extraShape)\n};\nInfrastructureCardCore.defaultProps = {\n    detailLoaded: false,\n    handleClick: () => undefined,\n    hasType: true,\n    hasVendor: true,\n    hasIPv4: true,\n    hasIPv6: true,\n    hasInterfaces: true,\n    extra: []\n};\n\nexport const InfrastructureCard = connect(({\n    entityDetails: {\n        entity\n    },\n    systemProfileStore: {\n        systemProfile\n    }\n}) => ({\n    detailLoaded: systemProfile && systemProfile.loaded,\n    infrastructure: infrastructureSelector(systemProfile, entity)\n}))(InfrastructureCardCore);\n\nInfrastructureCard.propTypes = InfrastructureCardCore.propTypes;\nInfrastructureCard.defaultProps = InfrastructureCardCore.defaultProps;\n\nexport default InfrastructureCard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport LoadingCard from '../LoadingCard';\nimport { generalMapper } from '../dataMapper';\nimport { operatingSystem } from '../selectors';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { extraShape, isDate } from '../../../constants';\nimport OperatingSystemFormatter from '../../../Utilities/OperatingSystemFormatter';\n\nconst OperatingSystemCardCore = ({\n    systemInfo,\n    detailLoaded,\n    handleClick,\n    hasRelease,\n    hasKernelRelease,\n    hasArchitecture,\n    hasLastBoot,\n    hasKernelModules,\n    extra\n}) => (\n    <LoadingCard\n        title=\"Operating system\"\n        isLoading={ !detailLoaded }\n        items={ [\n            ...hasRelease ? [{ title: 'Release', value: <OperatingSystemFormatter operatingSystem={systemInfo.release} /> }] : [],\n            ...hasKernelRelease ? [{ title: 'Kernel release', value: systemInfo.kernelRelease }] : [],\n            ...hasArchitecture ? [{ title: 'Architecture', value: systemInfo.architecture }] : [],\n            ...hasLastBoot ? [{ title: 'Last boot time', value: (isDate(systemInfo.bootTime) ?\n                <DateFormat date={ systemInfo.bootTime } type=\"onlyDate\" /> :\n                'Not available'\n            )\n            }] : [],\n            ...hasKernelModules ? [{\n                title: 'Kernel modules',\n                value: systemInfo.kernelModules?.length,\n                singular: 'module',\n                target: 'kernel_modules',\n                onClick: () => {\n                    handleClick(\n                        'Kernel modules',\n                        generalMapper(systemInfo.kernelModules, 'Module')\n                    );\n                }\n            }] : [],\n            ...extra.map(({ onClick, ...item }) => ({\n                ...item,\n                ...onClick && { onClick: (e) => onClick(e, handleClick) }\n            }))\n        ] }\n    />\n);\n\nOperatingSystemCardCore.propTypes = {\n    detailLoaded: PropTypes.bool,\n    handleClick: PropTypes.func,\n    systemInfo: PropTypes.shape({\n        release: PropTypes.string,\n        architecture: PropTypes.string,\n        kernelRelease: PropTypes.string,\n        bootTime: PropTypes.string,\n        kernelModules: PropTypes.arrayOf(PropTypes.string)\n    }),\n    hasRelease: PropTypes.bool,\n    hasKernelRelease: PropTypes.bool,\n    hasArchitecture: PropTypes.bool,\n    hasLastBoot: PropTypes.bool,\n    hasKernelModules: PropTypes.bool,\n    extra: PropTypes.arrayOf(extraShape)\n};\nOperatingSystemCardCore.defaultProps = {\n    detailLoaded: false,\n    handleClick: () => undefined,\n    hasRelease: true,\n    hasKernelRelease: true,\n    hasArchitecture: true,\n    hasLastBoot: true,\n    hasKernelModules: true,\n    extra: []\n};\n\nexport const OperatingSystemCard = connect(({\n    entityDetails: {\n        entity\n    },\n    systemProfileStore: {\n        systemProfile\n    }\n}) => ({\n    detailLoaded: systemProfile && systemProfile.loaded,\n    systemInfo: operatingSystem(systemProfile, entity)\n}))(OperatingSystemCardCore);\n\nOperatingSystemCard.propTypes = OperatingSystemCardCore.propTypes;\nOperatingSystemCard.defaultProps = OperatingSystemCardCore.defaultProps;\n\nexport default OperatingSystemCard;\n","import React, { Fragment, Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport LoadingCard from '../LoadingCard';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { propertiesSelector } from '../selectors';\nimport { editDisplayName, editAnsibleHost, systemProfile } from '../../../store/actions';\nimport TextInputModal from '../TextInputModal';\nimport { loadEntity } from '../../../store/actions';\nimport { Popover, Button } from '@patternfly/react-core';\nimport EditButton from '../EditButton';\nimport { generalMapper } from '../dataMapper';\nimport { extraShape } from '../../../constants';\n\nconst TitleWithPopover = ({ title, content }) => (\n    <React.Fragment>\n        <span>{ title }</span>\n        <Popover\n            headerContent={<div>{ title }</div>}\n            bodyContent={<div>{ content }</div>}>\n            <Button\n                variant=\"plain\"\n                aria-label={`Action for ${title}`}\n                className='ins-active-general_information__popover-icon'>\n                <OutlinedQuestionCircleIcon />\n            </Button>\n        </Popover>\n    </React.Fragment>\n);\n\nclass SystemCardCore extends Component {\n    state = {\n        isDisplayNameModalOpen: false,\n        isAnsibleHostModalOpen: false\n    };\n\n    onCancel = () => {\n        this.setState({\n            isDisplayNameModalOpen: false,\n            isAnsibleHostModalOpen: false\n        });\n    };\n\n    onSubmit = (fn) => (value) => {\n        const { entity } = this.props;\n        fn(entity.id, value);\n        this.onCancel();\n    }\n\n    onShowDisplayModal = (event) => {\n        event.preventDefault();\n        this.setState({\n            isDisplayNameModalOpen: true\n        });\n    };\n\n    onShowAnsibleModal = (event) => {\n        event.preventDefault();\n        this.setState({\n            isAnsibleHostModalOpen: true\n        });\n    };\n\n    getAnsibleHost = () => {\n        const { entity } = this.props;\n        return entity.ansible_host || entity.fqdn || entity.id;\n    };\n\n    render() {\n        const {\n            detailLoaded,\n            entity,\n            properties,\n            setDisplayName,\n            setAnsibleHost,\n            writePermissions,\n            handleClick,\n            hasHostName,\n            hasDisplayName,\n            hasAnsibleHostname,\n            hasSAP,\n            hasSystemPurpose,\n            hasCPUs,\n            hasSockets,\n            hasCores,\n            hasCPUFlags,\n            hasRAM,\n            extra\n        } = this.props;\n        const { isDisplayNameModalOpen, isAnsibleHostModalOpen } = this.state;\n        return (\n            <Fragment>\n                <LoadingCard\n                    title=\"System properties\"\n                    isLoading={ !detailLoaded }\n                    items={ [\n                        ...hasHostName ? [{\n                            title: <TitleWithPopover\n                                title='Host name'\n                                content='Name imported from the system.'/>,\n                            value: entity.fqdn, size: 'md'\n                        }] : [],\n                        ...hasDisplayName ? [{\n                            title: <TitleWithPopover\n                                title='Display name'\n                                content='System name displayed in an inventory list.'/>,\n                            value: (\n                                <Fragment>\n                                    { entity.display_name }\n                                    <EditButton\n                                        writePermissions={writePermissions}\n                                        link=\"display_name\"\n                                        onClick={this.onShowDisplayModal}\n                                    />\n                                </Fragment>\n                            ), size: 'md'\n                        }] : [],\n                        ...hasAnsibleHostname ? [{\n                            title: <TitleWithPopover\n                                title='Ansible hostname'\n                                content='Hostname that is used in playbooks by Remediations.'/>,\n                            value: (\n                                <Fragment>\n                                    { this.getAnsibleHost() }\n                                    <EditButton\n                                        writePermissions={writePermissions}\n                                        link=\"ansible_name\"\n                                        onClick={this.onShowAnsibleModal}\n                                    />\n                                </Fragment>\n                            ), size: 'md'\n                        }] : [],\n                        ...hasSAP ? [{\n                            title: 'SAP',\n                            value: properties.sapIds?.length,\n                            singular: 'identifier',\n                            target: 'sap_sids',\n                            onClick: () => {\n                                handleClick(\n                                    'SAP IDs (SID)',\n                                    generalMapper(properties.sapIds, 'SID')\n                                );\n                            }\n                        }] : [],\n                        ...hasSystemPurpose ? [{ title: 'System purpose', value: properties.systemPurpose }] : [],\n                        ...hasCPUs ? [{ title: 'Number of CPUs', value: properties.cpuNumber }] : [],\n                        ...hasSockets ? [{ title: 'Sockets', value: properties.sockets }] : [],\n                        ...hasCores ? [{ title: 'Cores per socket', value: properties.coresPerSocket }] : [],\n                        ...hasCPUFlags ? [{\n                            title: 'CPU flags',\n                            value: properties?.cpuFlags?.length,\n                            singular: 'flag',\n                            target: 'flag',\n                            onClick: () => handleClick('CPU flags', generalMapper(properties.cpuFlags, 'flag name'))\n                        }] : [],\n                        ...hasRAM ? [{ title: 'RAM', value: properties.ramSize }] : [],\n                        ...extra.map(({ onClick, ...item }) => ({\n                            ...item,\n                            ...onClick && { onClick: (e) => onClick(e, handleClick) }\n                        }))\n                    ] }\n                />\n                <TextInputModal\n                    isOpen={ isDisplayNameModalOpen }\n                    title='Edit display name'\n                    value={ entity && entity.display_name }\n                    ariaLabel='Host inventory display name'\n                    modalOuiaId=\"edit-display-name-modal\"\n                    cancelOuiaId=\"cancel-edit-display-name\"\n                    confirmOuiaId=\"confirm-edit-display-name\"\n                    inputOuiaId=\"input-edit-display-name\"\n                    onCancel={ this.onCancel }\n                    onSubmit={ this.onSubmit(setDisplayName) }\n                />\n                <TextInputModal\n                    isOpen={ isAnsibleHostModalOpen }\n                    title='Edit Ansible host'\n                    value={ entity && this.getAnsibleHost() }\n                    ariaLabel='Ansible host'\n                    modalOuiaId=\"edit-ansible-name-modal\"\n                    cancelOuiaId=\"cancel-edit-ansible-name\"\n                    confirmOuiaId=\"confirm-edit-ansible-name\"\n                    inputOuiaId=\"input-edit-ansible-name\"\n                    onCancel={ this.onCancel }\n                    onSubmit={ this.onSubmit(setAnsibleHost) }\n                />\n            </Fragment>\n        );\n    }\n}\n\nSystemCardCore.propTypes = {\n    detailLoaded: PropTypes.bool,\n    entity: PropTypes.shape({\n        // eslint-disable-next-line camelcase\n        display_name: PropTypes.string,\n        // eslint-disable-next-line camelcase\n        ansible_host: PropTypes.string,\n        fqdn: PropTypes.string,\n        id: PropTypes.string\n    }),\n    properties: PropTypes.shape({\n        cpuNumber: PropTypes.number,\n        sockets: PropTypes.number,\n        coresPerSocket: PropTypes.number,\n        ramSize: PropTypes.string,\n        storage: PropTypes.arrayOf(PropTypes.shape({\n            device: PropTypes.string,\n            // eslint-disable-next-line camelcase\n            mount_point: PropTypes.string,\n            options: PropTypes.shape({}),\n            type: PropTypes.string\n        })),\n        sapIds: PropTypes.arrayOf(PropTypes.string),\n        systemPurpose: PropTypes.string,\n        cpuFlags: PropTypes.array\n    }),\n    setDisplayName: PropTypes.func,\n    setAnsibleHost: PropTypes.func,\n    writePermissions: PropTypes.bool,\n    handleClick: PropTypes.func,\n    hasHostName: PropTypes.bool,\n    hasDisplayName: PropTypes.bool,\n    hasAnsibleHostname: PropTypes.bool,\n    hasSAP: PropTypes.bool,\n    hasSystemPurpose: PropTypes.bool,\n    hasCPUs: PropTypes.bool,\n    hasSockets: PropTypes.bool,\n    hasCores: PropTypes.bool,\n    hasCPUFlags: PropTypes.bool,\n    hasRAM: PropTypes.bool,\n    extra: PropTypes.arrayOf(extraShape)\n};\nSystemCardCore.defaultProps = {\n    detailLoaded: false,\n    entity: {},\n    properties: {},\n    hasHostName: true,\n    hasDisplayName: true,\n    hasAnsibleHostname: true,\n    hasSAP: true,\n    hasSystemPurpose: true,\n    hasCPUs: true,\n    hasSockets: true,\n    hasCores: true,\n    hasCPUFlags: true,\n    hasRAM: true,\n    extra: []\n};\n\nTitleWithPopover.propTypes = {\n    title: PropTypes.string.isRequired,\n    content: PropTypes.string.isRequired\n};\n\nfunction mapDispatchToProps(dispatch) {\n    const reloadWrapper = (id, event) => {\n        event.payload.then(data => {\n            dispatch(systemProfile(id, { hasItems: true }));\n            dispatch(loadEntity(id, { hasItems: true }, { showTags: true }));\n            return data;\n        });\n\n        return event;\n    };\n\n    return {\n        setDisplayName: (id, value) => {\n            dispatch(reloadWrapper(id, editDisplayName(id, value)));\n        },\n\n        setAnsibleHost: (id, value) => {\n            dispatch(reloadWrapper(id, editAnsibleHost(id, value)));\n        }\n    };\n}\n\nexport const SystemCard = connect(({\n    entityDetails: {\n        entity\n    },\n    systemProfileStore: {\n        systemProfile\n    }\n}) => ({\n    entity,\n    detailLoaded: systemProfile && systemProfile.loaded,\n    properties: propertiesSelector(systemProfile, entity)\n}), mapDispatchToProps)(SystemCardCore);\n\nSystemCard.propTypes = SystemCardCore.propTypes;\nSystemCard.defaultProps = SystemCardCore.defaultProps;\n\nexport default SystemCard;\n","/* eslint-disable camelcase */\n\nimport React from 'react';\nimport {\n    CheckCircleIcon,\n    TimesIcon,\n    OutlinedQuestionCircleIcon,\n    OutlinedArrowAltCircleUpIcon,\n    OutlinedArrowAltCircleDownIcon\n} from '@patternfly/react-icons';\nimport { sortable } from '@patternfly/react-table';\nimport { Tooltip } from '@patternfly/react-core';\n\nexport const statusHelper = {\n    UP: <Tooltip content=\"Service is running\">\n        <OutlinedArrowAltCircleUpIcon className=\"ins-c-inventory__detail--up\" />\n    </Tooltip>,\n    DOWN: <Tooltip content=\"Service has stopped\">\n        <OutlinedArrowAltCircleDownIcon className=\"ins-c-inventory__detail--down\" />\n    </Tooltip>\n};\n\nexport const enabledHelper = {\n    true: <Tooltip content=\"Source enabled\">\n        <CheckCircleIcon className=\"ins-c-inventory__detail--enabled\" />\n    </Tooltip>,\n    false: <Tooltip content=\"Source disabled\">\n        <TimesIcon className=\"ins-c-inventory__detail--disabled\" />\n    </Tooltip>\n};\n\nexport const diskMapper = (devices = []) => ({\n    cells: [\n        {\n            title: 'Device',\n            transforms: [sortable]\n        },\n        {\n            title: 'Label',\n            transforms: [sortable]\n        },\n        {\n            title: 'Mount point',\n            transforms: [sortable]\n        },\n        {\n            title: 'Type',\n            transforms: [sortable]\n        }\n    ],\n    rows: devices.map(({\n        device,\n        label,\n        mountpoint,\n        options,\n        mounttype\n    }) => {\n        const calculatedOptions = (options && options.options) || options;\n        return ({\n            isOpen: false,\n            child: <div>\n                {\n                    calculatedOptions &&\n                    Object.entries(calculatedOptions.value || calculatedOptions)\n                    .map(([oneKey, option]) => `${oneKey}=${option.value || option}`).join(',  ')\n                }\n            </div>,\n            cells: [\n                (device && device.value) || device,\n                label,\n                (mountpoint && mountpoint.value) || mountpoint,\n                (mounttype && mounttype.value) || mounttype\n            ]\n        });\n    }),\n    expandable: true\n});\n\nexport const productsMapper = (products = []) => ({\n    cells: [\n        {\n            title: 'Name',\n            transforms: [sortable]\n        },\n        'Status'\n    ],\n    rows: products.map(product => ([\n        product.name,\n        {\n            title: statusHelper[product.status] ||\n            <Tooltip content=\"Unknown service status\">\n                <OutlinedQuestionCircleIcon className=\"ins-c-inventory__detail--unknown\" />\n            </Tooltip>\n        }\n    ]))\n});\n\nexport const interfaceMapper = (data = []) => ({\n    cells: [\n        {\n            title: 'MAC address',\n            transforms: [sortable]\n        },\n        {\n            title: 'MTU',\n            transforms: [sortable]\n        },\n        {\n            title: 'Name',\n            transforms: [sortable]\n        },\n        'State',\n        {\n            title: 'Type',\n            transforms: [sortable]\n        }\n    ],\n    rows: data.map(item => ([\n        item.mac_address,\n        item.mtu,\n        item.name,\n        {\n            title: statusHelper[item.state] ||\n            <Tooltip content=\"Unknown service status\">\n                <OutlinedQuestionCircleIcon className=\"ins-c-inventory__detail--unknown\" />\n            </Tooltip>\n        },\n        item.type\n    ]))\n});\n\nexport const repositoriesMapper = ({ enabled, disabled } = { enabled: [], disabled: [] }) => ({\n    cells: [\n        {\n            title: 'Name',\n            transforms: [sortable]\n        },\n        {\n            title: 'Enabled',\n            transforms: [sortable]\n        },\n        {\n            title: 'GPG check',\n            transforms: [sortable]\n        }\n    ],\n    rows: [...enabled, ...disabled].map(repository => ([\n        {\n            title: repository.name,\n            sortValue: repository.name\n        },\n        {\n            title: enabledHelper[Boolean(repository.enabled)],\n            sortValue: `${repository.enabled}`\n        },\n        {\n            title: enabledHelper[Boolean(repository.gpgcheck)],\n            sortValue: `${repository.gpgcheck}`\n        }\n    ])),\n    filters: [\n        { type: 'textual' },\n        {\n            type: 'checkbox',\n            options: [\n                { label: 'Is enabled', value: 'true' },\n                { label: 'Not enabled', value: 'false' }\n            ]\n        },\n        {\n            type: 'checkbox',\n            options: [\n                { label: 'Is enabled', value: 'true' },\n                { label: 'Not enabled', value: 'false' }\n            ]\n        }\n    ]\n});\n\nexport const generalMapper = (data = [], title = '') => ({\n    cells: [{\n        title,\n        transforms: [sortable]\n    }],\n    rows: data.map(item => ([item])),\n    filters: [{ type: 'textual' }]\n});\n","/* eslint-disable camelcase */\nimport { registered } from '../../../Utilities/index';\nimport { verifyCollectorStaleness } from '../../../Utilities/sharedFunctions';\nfunction safeParser(toParse, key) {\n    try {\n        return JSON.parse(toParse);\n    } catch {\n        return { [key]: toParse };\n    }\n}\n\nexport const propertiesSelector = ({\n    number_of_cpus,\n    number_of_sockets,\n    cores_per_socket,\n    ramSize,\n    disk_devices,\n    sap_sids,\n    system_purpose,\n    cpu_flags\n} = {}, { facts } = { }) => ({\n    cpuNumber: number_of_cpus || facts?.rhsm?.CPU_CORES,\n    sockets: number_of_sockets || facts?.rhsm?.CPU_SOCKETS,\n    coresPerSocket: cores_per_socket || (\n        facts?.rhsm?.CPU_CORES\n            && facts?.rhsm?.CPU_CORES\n            && Number(facts?.rhsm?.CPU_CORES, 10) / Number(facts?.rhsm?.CPU_SOCKETS, 10)\n    ),\n    ramSize: ramSize || (facts?.rhsm?.MEMORY && `${facts?.rhsm?.MEMORY} GB`),\n    storage: disk_devices && disk_devices.map(({ device, label, mount_point, options, type }) => ({\n        ...device && safeParser(device, 'device'),\n        label,\n        ...mount_point && safeParser(mount_point, 'mountpoint'),\n        ...options && safeParser(options, 'options'),\n        ...type && safeParser(type, 'mounttype')\n    })\n    ),\n    sapIds: sap_sids,\n    systemPurpose: system_purpose?.usage,\n    cpuFlags: cpu_flags\n});\n\nexport const operatingSystem = ({\n    arch,\n    operating_system,\n    os_kernel_version,\n    last_boot_time,\n    kernel_modules\n} = {}, { facts } = {}) => ({\n    release: operating_system,\n    kernelRelease: os_kernel_version,\n    architecture: arch || facts?.rhsm?.ARCHITECTURE,\n    bootTime: last_boot_time,\n    kernelModules: kernel_modules\n});\n\nexport const biosSelector = ({\n    bios_vendor,\n    bios_version,\n    bios_release_date\n} = {}) => ({\n    vendor: bios_vendor,\n    version: bios_version,\n    releaseDate: bios_release_date\n});\n\nexport const infrastructureSelector = ({\n    infrastructure_type,\n    infrastructure_vendor,\n    network = {}\n} = {}, { facts } = {}) => ({\n    type: infrastructure_type || (\n        facts?.rhsm?.IS_VIRTUAL !== undefined && (facts?.rhsm?.IS_VIRTUAL ? 'virtual' : 'physical')\n    ) || undefined,\n    vendor: infrastructure_vendor,\n    ipv4: network.ipv4,\n    ipv6: network.ipv6,\n    nics: network.interfaces\n});\n\nexport const configurationSelector = ({\n    installed_packages,\n    enabled_services,\n    running_processes,\n    repositories\n} = {}) => ({\n    packages: installed_packages,\n    services: enabled_services,\n    processes: running_processes,\n    repositories\n});\n\nexport const collectionInformationSelector = ({\n    insights_client_version,\n    insights_egg_version\n} = {}) => ({\n    client: insights_client_version,\n    egg: insights_egg_version\n});\n\nexport const getCollectorStatus = (collectorStaleness) =>{\n    return collectorStaleness ?\n        (verifyCollectorStaleness(collectorStaleness) !== 'Fresh' ? 'Stale' : 'Active')\n        : 'N/A';\n};\n\nexport const getDefaultCollectors = (entity) =>\n    registered?.filter(reporter => reporter.label !== 'insights-client not connected')\n    .map(reporter => ({\n        name: reporter.label,\n        status: getCollectorStatus(entity?.per_reporter_staleness[reporter.value]),\n        updated: entity?.per_reporter_staleness[reporter.value]?.last_check_in,\n        details: {\n            name: reporter.idName,\n            id: entity?.[reporter.idValue]\n        }\n    }));\n\nexport const systemStatus = ({\n    stale_timestamp\n} = {}) => ({\n    stale: new Date() > new Date(stale_timestamp)\n});\n","import React, { useEffect, useState, Fragment } from 'react';\nimport { Provider } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport GeneralInformation from '../GeneralInfo/GeneralInformation';\nexport { default as TextInputModal } from '../GeneralInfo/TextInputModal';\nimport fallback from '../SpinnerFallback';\nimport systemProfileStore from '../../store/systemProfileStore';\n\nconst GeneralInfoTab = ({ getRegistry, ...props }) => {\n    const [Wrapper, setWrapper] = useState();\n    useEffect(() => {\n        if (getRegistry) {\n            getRegistry()?.register?.({ systemProfileStore });\n        }\n\n        setWrapper(() => getRegistry ? Provider : Fragment);\n    }, []);\n    return Wrapper ? <Wrapper\n        {...getRegistry && {\n            store: getRegistry().getStore()\n        }}\n    >\n        <GeneralInformation {...props} />\n    </Wrapper> : fallback;\n};\n\nGeneralInfoTab.propTypes = {\n    getRegistry: PropTypes.func\n};\n\nexport default GeneralInfoTab;\n","import { ACTION_TYPES, CLEAR_NOTIFICATIONS, SET_INVENTORY_FILTER, SET_PAGINATION } from './action-types';\nimport { hosts, getEntitySystemProfile } from '../api';\nexport * from './system-issues-actions';\nexport * from './inventory-actions';\n\nexport const deleteEntity = (systems, displayName) => ({\n    type: ACTION_TYPES.REMOVE_ENTITY,\n    payload: hosts.apiHostDeleteById(systems),\n    meta: {\n        notifications: {\n            fulfilled: {\n                variant: 'success',\n                title: 'Delete operation finished',\n                description: `${displayName} has been successfully removed.`,\n                dismissable: true\n            }\n        },\n        systems\n    }\n});\n\nexport const setFilter = (filtersList) => ({\n    type: SET_INVENTORY_FILTER,\n    payload: {\n        filtersList\n    }\n});\n\nexport const clearNotifications = () => {\n    return ({\n        type: CLEAR_NOTIFICATIONS\n    });\n};\n\nexport const editDisplayName = (id, value) => ({\n    type: ACTION_TYPES.UPDATE_DISPLAY_NAME,\n    payload: hosts.apiHostPatchById([id], { display_name: value }), // eslint-disable-line camelcase\n    meta: {\n        id,\n        value,\n        notifications: {\n            fulfilled: {\n                variant: 'success',\n                title: `Display name for entity with ID ${id} has been changed to ${value}`,\n                dismissable: true\n            }\n        }\n    }\n});\n\nexport const setPagination = (page, perPage) => ({\n    type: SET_PAGINATION,\n    payload: {\n        page, perPage\n    }\n});\n\nexport const systemProfile = (itemId) => ({\n    type: ACTION_TYPES.LOAD_SYSTEM_PROFILE,\n    payload: getEntitySystemProfile(itemId, {})\n});\n\nexport const editAnsibleHost = (id, value) => ({\n    type: ACTION_TYPES.SET_ANSIBLE_HOST,\n    payload: hosts.apiHostPatchById([id], { ansible_host: value }), // eslint-disable-line camelcase\n    meta: {\n        notifications: {\n            fulfilled: {\n                variant: 'success',\n                title: 'Ansible hostname has been updated',\n                dismissable: true\n            }\n        }\n    }\n});\n","import bindActionCreators from '../utils/bindActionCreators';\nimport { wrapMapToPropsConstant, wrapMapToPropsFunc } from './wrapMapToProps';\nexport function whenMapDispatchToPropsIsFunction(mapDispatchToProps) {\n  return typeof mapDispatchToProps === 'function' ? wrapMapToPropsFunc(mapDispatchToProps, 'mapDispatchToProps') : undefined;\n}\nexport function whenMapDispatchToPropsIsMissing(mapDispatchToProps) {\n  return !mapDispatchToProps ? wrapMapToPropsConstant(function (dispatch) {\n    return {\n      dispatch: dispatch\n    };\n  }) : undefined;\n}\nexport function whenMapDispatchToPropsIsObject(mapDispatchToProps) {\n  return mapDispatchToProps && typeof mapDispatchToProps === 'object' ? wrapMapToPropsConstant(function (dispatch) {\n    return bindActionCreators(mapDispatchToProps, dispatch);\n  }) : undefined;\n}\nexport default [whenMapDispatchToPropsIsFunction, whenMapDispatchToPropsIsMissing, whenMapDispatchToPropsIsObject];","import { wrapMapToPropsConstant, wrapMapToPropsFunc } from './wrapMapToProps';\nexport function whenMapStateToPropsIsFunction(mapStateToProps) {\n  return typeof mapStateToProps === 'function' ? wrapMapToPropsFunc(mapStateToProps, 'mapStateToProps') : undefined;\n}\nexport function whenMapStateToPropsIsMissing(mapStateToProps) {\n  return !mapStateToProps ? wrapMapToPropsConstant(function () {\n    return {};\n  }) : undefined;\n}\nexport default [whenMapStateToPropsIsFunction, whenMapStateToPropsIsMissing];","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport verifyPlainObject from '../utils/verifyPlainObject';\nexport function defaultMergeProps(stateProps, dispatchProps, ownProps) {\n  return _extends({}, ownProps, stateProps, dispatchProps);\n}\nexport function wrapMergePropsFunc(mergeProps) {\n  return function initMergePropsProxy(dispatch, _ref) {\n    var displayName = _ref.displayName,\n        pure = _ref.pure,\n        areMergedPropsEqual = _ref.areMergedPropsEqual;\n    var hasRunOnce = false;\n    var mergedProps;\n    return function mergePropsProxy(stateProps, dispatchProps, ownProps) {\n      var nextMergedProps = mergeProps(stateProps, dispatchProps, ownProps);\n\n      if (hasRunOnce) {\n        if (!pure || !areMergedPropsEqual(nextMergedProps, mergedProps)) mergedProps = nextMergedProps;\n      } else {\n        hasRunOnce = true;\n        mergedProps = nextMergedProps;\n        if (process.env.NODE_ENV !== 'production') verifyPlainObject(mergedProps, displayName, 'mergeProps');\n      }\n\n      return mergedProps;\n    };\n  };\n}\nexport function whenMergePropsIsFunction(mergeProps) {\n  return typeof mergeProps === 'function' ? wrapMergePropsFunc(mergeProps) : undefined;\n}\nexport function whenMergePropsIsOmitted(mergeProps) {\n  return !mergeProps ? function () {\n    return defaultMergeProps;\n  } : undefined;\n}\nexport default [whenMergePropsIsFunction, whenMergePropsIsOmitted];","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"pure\", \"areStatesEqual\", \"areOwnPropsEqual\", \"areStatePropsEqual\", \"areMergedPropsEqual\"];\nimport connectAdvanced from '../components/connectAdvanced';\nimport shallowEqual from '../utils/shallowEqual';\nimport defaultMapDispatchToPropsFactories from './mapDispatchToProps';\nimport defaultMapStateToPropsFactories from './mapStateToProps';\nimport defaultMergePropsFactories from './mergeProps';\nimport defaultSelectorFactory from './selectorFactory';\n/*\n  connect is a facade over connectAdvanced. It turns its args into a compatible\n  selectorFactory, which has the signature:\n\n    (dispatch, options) => (nextState, nextOwnProps) => nextFinalProps\n  \n  connect passes its args to connectAdvanced as options, which will in turn pass them to\n  selectorFactory each time a Connect component instance is instantiated or hot reloaded.\n\n  selectorFactory returns a final props selector from its mapStateToProps,\n  mapStateToPropsFactories, mapDispatchToProps, mapDispatchToPropsFactories, mergeProps,\n  mergePropsFactories, and pure args.\n\n  The resulting final props selector is called by the Connect component instance whenever\n  it receives new props or store state.\n */\n\nfunction match(arg, factories, name) {\n  for (var i = factories.length - 1; i >= 0; i--) {\n    var result = factories[i](arg);\n    if (result) return result;\n  }\n\n  return function (dispatch, options) {\n    throw new Error(\"Invalid value of type \" + typeof arg + \" for \" + name + \" argument when connecting component \" + options.wrappedComponentName + \".\");\n  };\n}\n\nfunction strictEqual(a, b) {\n  return a === b;\n} // createConnect with default args builds the 'official' connect behavior. Calling it with\n// different options opens up some testing and extensibility scenarios\n\n\nexport function createConnect(_temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n      _ref$connectHOC = _ref.connectHOC,\n      connectHOC = _ref$connectHOC === void 0 ? connectAdvanced : _ref$connectHOC,\n      _ref$mapStateToPropsF = _ref.mapStateToPropsFactories,\n      mapStateToPropsFactories = _ref$mapStateToPropsF === void 0 ? defaultMapStateToPropsFactories : _ref$mapStateToPropsF,\n      _ref$mapDispatchToPro = _ref.mapDispatchToPropsFactories,\n      mapDispatchToPropsFactories = _ref$mapDispatchToPro === void 0 ? defaultMapDispatchToPropsFactories : _ref$mapDispatchToPro,\n      _ref$mergePropsFactor = _ref.mergePropsFactories,\n      mergePropsFactories = _ref$mergePropsFactor === void 0 ? defaultMergePropsFactories : _ref$mergePropsFactor,\n      _ref$selectorFactory = _ref.selectorFactory,\n      selectorFactory = _ref$selectorFactory === void 0 ? defaultSelectorFactory : _ref$selectorFactory;\n\n  return function connect(mapStateToProps, mapDispatchToProps, mergeProps, _ref2) {\n    if (_ref2 === void 0) {\n      _ref2 = {};\n    }\n\n    var _ref3 = _ref2,\n        _ref3$pure = _ref3.pure,\n        pure = _ref3$pure === void 0 ? true : _ref3$pure,\n        _ref3$areStatesEqual = _ref3.areStatesEqual,\n        areStatesEqual = _ref3$areStatesEqual === void 0 ? strictEqual : _ref3$areStatesEqual,\n        _ref3$areOwnPropsEqua = _ref3.areOwnPropsEqual,\n        areOwnPropsEqual = _ref3$areOwnPropsEqua === void 0 ? shallowEqual : _ref3$areOwnPropsEqua,\n        _ref3$areStatePropsEq = _ref3.areStatePropsEqual,\n        areStatePropsEqual = _ref3$areStatePropsEq === void 0 ? shallowEqual : _ref3$areStatePropsEq,\n        _ref3$areMergedPropsE = _ref3.areMergedPropsEqual,\n        areMergedPropsEqual = _ref3$areMergedPropsE === void 0 ? shallowEqual : _ref3$areMergedPropsE,\n        extraOptions = _objectWithoutPropertiesLoose(_ref3, _excluded);\n\n    var initMapStateToProps = match(mapStateToProps, mapStateToPropsFactories, 'mapStateToProps');\n    var initMapDispatchToProps = match(mapDispatchToProps, mapDispatchToPropsFactories, 'mapDispatchToProps');\n    var initMergeProps = match(mergeProps, mergePropsFactories, 'mergeProps');\n    return connectHOC(selectorFactory, _extends({\n      // used in error messages\n      methodName: 'connect',\n      // used to compute Connect's displayName from the wrapped component's displayName.\n      getDisplayName: function getDisplayName(name) {\n        return \"Connect(\" + name + \")\";\n      },\n      // if mapStateToProps is falsy, the Connect component doesn't subscribe to store state changes\n      shouldHandleStateChanges: Boolean(mapStateToProps),\n      // passed through to selectorFactory\n      initMapStateToProps: initMapStateToProps,\n      initMapDispatchToProps: initMapDispatchToProps,\n      initMergeProps: initMergeProps,\n      pure: pure,\n      areStatesEqual: areStatesEqual,\n      areOwnPropsEqual: areOwnPropsEqual,\n      areStatePropsEqual: areStatePropsEqual,\n      areMergedPropsEqual: areMergedPropsEqual\n    }, extraOptions));\n  };\n}\nexport default /*#__PURE__*/createConnect();"],"names":["BiosCardCore","bios","detailLoaded","hasVendor","hasVersion","handleClick","hasReleaseDate","extra","title","isLoading","items","value","vendor","version","isDate","releaseDate","date","Date","type","map","onClick","e","propTypes","PropTypes","csm","extraShape","defaultProps","BiosCard","connect","systemProfile","systemProfileStore","loaded","biosSelector","enabledRepos","repositories","enabled","length","disabled","filter","Boolean","join","ConfigurationCardCore","configuration","hasPackages","hasServices","hasProcesses","hasRepositories","packages","singular","target","generalMapper","services","processes","plural","repositoriesMapper","base_url","name","gpgcheck","ConfigurationCard","configurationSelector","DataCollectorsCardCore","collectors","entity","dataMapper","useState","expandedNames","setExpandedNames","setExpanded","useCallback","collector","isExpanding","prevExpanded","otherExpandedNames","r","isExpanded","includes","data","getDefaultCollectors","TableComposable","variant","TableVariant","borders","Thead","Tr","className","Th","rowIndex","Tbody","key","details","Td","expand","onToggle","undefined","style","paddingLeft","dataLabel","status","updated","colSpan","ExpandableRowContent","grow","default","id","per_reporter_staleness","DataCollectorsCard","entityDetails","defaultCollectors","GeneralInformation","isModalOpen","modalTitle","modalVariant","_event","index","direction","customRows","rows","state","sorted","sort","a","b","firstRow","cells","secondRow","sortValue","toLocaleLowerCase","setState","SortByDirection","reverse","expandable","filters","onSort","this","props","loadSystemDetail","store","writePermissions","SystemCardWrapper","OperatingSystemCardWrapper","BiosCardWrapper","InfrastructureCardWrapper","ConfigurationCardWrapper","SystemStatusCardWrapper","DataCollectorsCardWrapper","CollectionCardWrapper","children","Wrapper","Provider","Fragment","sm","md","hasGutter","handleModalToggle","isOpen","onClose","Component","SystemCard","OperatingSystemCard","InfrastructureCard","SystemStatusCard","dispatch","itemId","InfrastructureCardCore","infrastructure","hasType","hasIPv4","hasIPv6","hasInterfaces","ipv4","ipv6","nics","interfaceMapper","infrastructureSelector","OperatingSystemCardCore","systemInfo","hasRelease","hasKernelRelease","hasArchitecture","hasLastBoot","hasKernelModules","operatingSystem","release","kernelRelease","architecture","bootTime","kernelModules","TitleWithPopover","content","headerContent","bodyContent","SystemCardCore","isDisplayNameModalOpen","isAnsibleHostModalOpen","fn","onCancel","event","preventDefault","ansible_host","fqdn","properties","setDisplayName","setAnsibleHost","hasHostName","hasDisplayName","hasAnsibleHostname","hasSAP","hasSystemPurpose","hasCPUs","hasSockets","hasCores","hasCPUFlags","hasRAM","size","display_name","link","onShowDisplayModal","getAnsibleHost","onShowAnsibleModal","sapIds","systemPurpose","cpuNumber","sockets","coresPerSocket","cpuFlags","ramSize","ariaLabel","modalOuiaId","cancelOuiaId","confirmOuiaId","inputOuiaId","onSubmit","storage","device","mount_point","options","propertiesSelector","reloadWrapper","payload","then","hasItems","loadEntity","showTags","editDisplayName","editAnsibleHost","statusHelper","UP","Tooltip","DOWN","enabledHelper","true","false","diskMapper","devices","transforms","sortable","label","mountpoint","mounttype","calculatedOptions","child","Object","entries","oneKey","option","productsMapper","products","product","item","mac_address","mtu","repository","safeParser","toParse","JSON","parse","number_of_cpus","number_of_sockets","cores_per_socket","disk_devices","sap_sids","system_purpose","cpu_flags","facts","rhsm","CPU_CORES","CPU_SOCKETS","Number","MEMORY","usage","arch","operating_system","os_kernel_version","last_boot_time","kernel_modules","ARCHITECTURE","bios_vendor","bios_version","bios_release_date","infrastructure_type","infrastructure_vendor","network","IS_VIRTUAL","interfaces","installed_packages","enabled_services","running_processes","collectionInformationSelector","insights_client_version","insights_egg_version","client","egg","getCollectorStatus","collectorStaleness","verifyCollectorStaleness","registered","reporter","last_check_in","idName","idValue","systemStatus","stale_timestamp","stale","GeneralInfoTab","getRegistry","setWrapper","useEffect","register","getStore","fallback","deleteEntity","systems","displayName","ACTION_TYPES","hosts","meta","notifications","fulfilled","description","dismissable","setFilter","filtersList","SET_INVENTORY_FILTER","clearNotifications","CLEAR_NOTIFICATIONS","setPagination","page","perPage","SET_PAGINATION","getEntitySystemProfile","mapDispatchToProps","wrapMapToProps","bindActionCreators","mapStateToProps","defaultMergeProps","stateProps","dispatchProps","ownProps","mergeProps","_ref","mergedProps","pure","areMergedPropsEqual","hasRunOnce","nextMergedProps","wrapMergePropsFunc","_excluded","match","arg","factories","i","result","Error","wrappedComponentName","strictEqual","createConnect","_temp","_ref$connectHOC","connectHOC","connectAdvanced","_ref$mapStateToPropsF","mapStateToPropsFactories","_ref$mapDispatchToPro","mapDispatchToPropsFactories","_ref$mergePropsFactor","mergePropsFactories","_ref$selectorFactory","selectorFactory","_ref2","_ref3","_ref3$pure","_ref3$areStatesEqual","areStatesEqual","_ref3$areOwnPropsEqua","areOwnPropsEqual","shallowEqual","_ref3$areStatePropsEq","areStatePropsEqual","_ref3$areMergedPropsE","extraOptions","initMapStateToProps","initMapDispatchToProps","initMergeProps","methodName","getDisplayName","shouldHandleStateChanges"],"sourceRoot":""}