{"version":3,"file":"js/7969.1651494256818.e5c2c5d026b43d9052ec.js","mappings":"8zBAMA,IAAMA,GAAiBC,EAAAA,EAAAA,OAAK,kBAAM,+EAC5BC,GAAkBD,EAAAA,EAAAA,OAAK,kBAAM,mCAEtBE,EAAS,CAClBC,MAAO,IACPC,OAAQ,iBAaCC,EAAS,WAClB,IAAQC,GAAgBC,EAAAA,EAAAA,YAAWC,EAAAA,IAA3BF,aACRG,EAAAA,EAAAA,YAAU,WACNH,IAAcI,SAAd,OACOC,EAAAA,KACAC,EAAAA,EAAAA,IAAkBC,EAAAA,OAE1B,CAACP,IACJ,IAlBgBQ,EAAYC,EAkBtBC,GAAUC,EAAAA,EAAAA,cACVC,EAAWC,OAAOC,SAASC,SAASC,MAAM,KAC1CC,EAAe,IAAIC,gBAAgBJ,SAASK,QAWlD,OAVAP,EAASQ,QAEW,SAAhBR,EAAS,IACTA,EAASQ,QAxBGZ,EA2BAI,EAAS,GA3BGH,EA2BCG,EAAS,GA1B/BS,OACNC,OAAO1B,GACP2B,MACG,SAAAC,GACI,OAAOC,EAAAA,EAAAA,WAAUX,SAASY,KAAM,CAAEC,KAAM,GAAF,OAAKC,SAASC,SAAd,OAAwBrB,EAAxB,YAAsCC,GAAtC,OAA4Ce,SAuBtFd,EAAQoB,KAAR,UAAgBlC,EAAOC,OAAvB,OAA+BiB,SAASK,QAAxC,OAAiDL,SAASiB,OAI1D,kBAAC,EAAAC,SAAD,CAAUC,SAAS,IACf,kBAAC,EAAAC,OAAD,KACI,kBAAC,EAAAC,MAAD,CACIC,OAAK,EACLT,KAAM/B,EAAOC,MACbwC,OAAQ,gCAAM,kBAAC5C,EAAD,CACV6C,OAAQrB,EAAasB,OAAO,UAC5BC,OAAQvB,EAAasB,OAAO,UAC5BE,aAAcxB,EAAasB,OAAO,kBAClCG,WAAU,UAAEzB,EAAasB,OAAO,eAAtB,iBAAE,EAA8B,UAAhC,iBAAE,EAAkCvB,aAApC,kBAAE,WAA0C,MAAK2B,cAAjD,aAAE,SAAwDC,EAAAA,GAAY,IAChFC,gBAAiB5B,EAAasB,OAAO,oBACrCO,KAAM7B,EAAasB,OAAO,QAC1BQ,QAAS9B,EAAasB,OAAO,eAEjCS,UAAU,cAEd,kBAAC,EAAAb,MAAD,CAAOR,KAAM/B,EAAOE,OAAQmD,UAAWtD,EAAiBqD,UAAU,kB,+xBCvClF,QAjByB,WACrB,MCLiC,WACjC,OAA+BE,EAAAA,EAAAA,GAAe,YAAa,CACvD,gBACA,wBACA,sBAHIC,EAAR,EAAQA,UAMR,eANA,aAMA,IAAkBA,UAAAA,IDFeC,GAAzBC,EAAR,EAAQA,UAAWF,EAAnB,EAAmBA,UACbG,GAAWC,EAAAA,EAAAA,eAYjB,OAVApD,EAAAA,EAAAA,YAAU,WACNmD,EAAS,CAAEE,KAAM,GAAF,OAAKC,EAAAA,GAAAA,uBAAL,gBAChB,KAEHtD,EAAAA,EAAAA,YAAU,WACDkD,GACDC,EAAS,CAAEE,KAAM,GAAF,OAAKC,EAAAA,GAAAA,uBAAL,cAAsDC,QAAS,CAAEC,iBAAkBR,OAEvG,CAACE,IAEG,MEcX,EA1BY,WACR,IAAM3C,GAAUC,EAAAA,EAAAA,cAgBhB,OAfAR,EAAAA,EAAAA,YAAU,WAGN,OAFAyD,SAASC,OAAOC,OAChBF,SAASC,OAAOE,YCVM,aDWfH,SAASC,OAAOG,GACnB,kBACA,SAAAC,GACwB,cAAhBA,EAAMC,MACNxD,EAAQoB,KAAR,WAAiBhB,SAASK,QAA1B,OAAmCL,SAASiB,OAE5CrB,EAAQoB,KAAR,WAAiBmC,EAAMC,OAAvB,OAA+BpD,SAASK,QAAxC,OAAiDL,SAASiB,YAIvE,IAGC,yBAAKoC,UAAU,aACX,kBAAC,KAAD,MACA,kBAAC,EAAD,MACA,kBAACpE,EAAA,EAAD,Q,eEpBNqE,G,SAAe,WACjB,IAAMC,GAAmCP,EAAAA,EAAAA,MACzC,OAAO,kBAAC,cAAD,CAA0BQ,MAAO,CACpCtE,YAAa,kBAAMqE,KAEnB,kBAAC,EAAAE,SAAD,CAAUC,MAAOH,EAASI,YACtB,kBAAC,gBAAD,CAAQC,UAAUC,EAAAA,EAAAA,IAAY9D,OAAOC,SAASC,WAC1C,kBAAC,EAAD,WAMhBqD,EAAaQ,UAAY,CACrBC,UAAWC,IAAAA,MAGfV,EAAaW,aAAe,CACxBF,WAAW,GAGf,UC1BAG,IAAAA,OACI,kBAAC,EAAD,MACApD,SAASqD,eAAe,U,ywBCE5B,IAAMC,EAAW,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,aAAcC,EAAvB,EAAuBA,UAAWC,EAAlC,EAAkCA,WAAYC,EAA9C,EAA8CA,YAAaC,EAA3D,EAA2DA,eAAgBC,EAA3E,EAA2EA,MAA3E,OAAwF,kBAAC,IAAD,CACrGC,MAAM,OACNrC,WAAa+B,EACbO,MAAK,kBACEN,EAAY,CAAC,CAAEK,MAAO,SAAUpB,MAAOa,EAAKS,SAAY,KAD1D,OAEEN,EAAa,CAAC,CAAEI,MAAO,UAAWpB,MAAOa,EAAKU,UAAa,KAF7D,OAGEL,EAAiB,CAAC,CAAEE,MAAO,eAAgBpB,OAAQwB,EAAAA,EAAAA,IAAOX,EAAKY,aAC9D,kBAAC,IAAD,CAAYC,KAAO,IAAIC,KAAKd,EAAKY,aAAevC,KAAK,aACrD,kBACG,KANN,OAOEiC,EAAMS,KAAI,gBAAGC,EAAH,EAAGA,QAAH,4BAENA,GAAW,CAAEA,QAAS,SAACC,GAAD,OAAOD,EAAQC,EAAGb,cAKvDL,EAASN,UAAY,CACjBQ,aAAcN,IAAAA,KACdS,YAAaT,IAAAA,KACbK,KAAML,IAAAA,MAAgB,CAClBc,OAAQd,IAAAA,OACRe,QAASf,IAAAA,OACTiB,YAAajB,IAAAA,OACbuB,IAAKvB,IAAAA,QAAkBA,IAAAA,UAE3BO,UAAWP,IAAAA,KACXQ,WAAYR,IAAAA,KACZU,eAAgBV,IAAAA,KAChBW,MAAOX,IAAAA,QAAkBwB,EAAAA,KAE7BpB,EAASH,aAAe,CACpBK,cAAc,EACdG,YAAa,aACbE,MAAO,GACPJ,WAAW,EACXC,YAAY,EACZE,gBAAgB,GAGpB,SAAee,EAAAA,EAAAA,UAAQ,gBAEfC,EAFe,EACnBC,mBACID,cAFe,MAIhB,CACHpB,aAAcoB,GAAiBA,EAAcE,OAC7CvB,MAAMwB,EAAAA,EAAAA,IAAaH,MANvB,CAOItB,I,oxBC3CJ,IAAM0B,EAAiB,SAAC,GAAD,IAAGC,EAAH,EAAGA,IAAKC,EAAR,EAAQA,OAAR,OACnB,kBAAC,IAAD,CACIC,QACI,kBAAC,aAAD,KACI,2CAAkBD,GAAU,iBAC5B,sDAA6BD,GAAO,mBAI5C,8BAAQC,GAAUD,GAAO,mBAIjCD,EAAehC,UAAY,CACvBiC,IAAK/B,IAAAA,OACLgC,OAAQhC,IAAAA,QAGZ,IAAMkC,EAAiB,SAAC,GAAD,IACnB5B,EADmB,EACnBA,aACA6B,EAFmB,EAEnBA,sBACAC,EAHmB,EAGnBA,OACA3B,EAJmB,EAInBA,YACA4B,EALmB,EAKnBA,UACAC,EANmB,EAMnBA,eACAC,EAPmB,EAOnBA,cACAC,EARmB,EAQnBA,cACAC,EATmB,EASnBA,YACA9B,EAVmB,EAUnBA,MAVmB,OAWhB,kBAAC,IAAD,CACHC,MAAM,yBACNrC,WAAa+B,EACbO,MAAK,kBACEwB,EAAY,CAAC,CACZzB,MAAO,kBACPpB,MAAO,kBAACsC,EAAD,CAAgBC,IAAKI,EAAsBJ,IAAKC,OAAQG,EAAsBH,WACpF,KAJJ,OAKEM,EAAiB,CAAC,CAAE1B,MAAO,gBAAiBpB,MAAO4C,IAClDM,EAAAA,EACI,kBAAC,IAAD,CAAYxB,KAAOkB,EAAOO,QAAUjE,KAAK,aACzC,IAAIyC,KAAKiB,EAAOO,SAASC,oBAC1B,KATN,OAUEL,EAAgB,CAAC,CAAE3B,MAAO,aAAcpB,MAAO4C,IAC9CM,EAAAA,EACI,kBAAC,IAAD,CAAYxB,KAAMkB,EAAOS,QAASnE,KAAK,aACvC,IAAIyC,KAAKiB,EAAOS,SAASD,oBAC1B,KAdN,OAeEJ,EAAgB,CAAC,CAAE5B,MAAO,cAAepB,MAAO4C,GAAUA,EAAOU,cAAiB,KAfpF,OAgBEL,EAAc,CAAC,CAAE7B,MAAO,WAAYpB,MAAO4C,GAAUA,EAAOW,WAAc,KAhB5E,OAiBEpC,EAAMS,KAAI,gBAAGC,EAAH,EAAGA,QAAH,4BAENA,GAAW,CAAEA,QAAS,SAACC,GAAD,OAAOD,EAAQC,EAAGb,cAKvDyB,EAAepC,UAAY,CACvBQ,aAAcN,IAAAA,KACdoC,OAAQpC,IAAAA,MAAgB,CACpB2C,QAAS3C,IAAAA,OACT6C,QAAS7C,IAAAA,OACT8C,YAAa9C,IAAAA,OACb+C,SAAU/C,IAAAA,SAEdS,YAAaT,IAAAA,KACbmC,sBAAuBnC,IAAAA,MAAgB,CACnCgC,OAAQhC,IAAAA,OACR+B,IAAK/B,IAAAA,SAETqC,UAAWrC,IAAAA,KACXsC,eAAgBtC,IAAAA,KAChBuC,cAAevC,IAAAA,KACfwC,cAAexC,IAAAA,KACfyC,YAAazC,IAAAA,KACbW,MAAOX,IAAAA,QAAkBwB,EAAAA,KAE7BU,EAAejC,aAAe,CAC1BK,cAAc,EACdG,YAAa,aACb4B,WAAW,EACXW,QAAQ,EACRV,gBAAgB,EAChBC,eAAe,EACfC,eAAe,EACfC,aAAa,EACb9B,MAAO,IAGX,SAAec,EAAAA,EAAAA,UAAQ,gBAEfW,EAFe,EACnBa,cACIb,OAGAV,EALe,EAInBC,mBACID,cALe,MAOhB,CACHU,OAAAA,EACA9B,aAAcoB,GAAiBA,EAAcE,OAC7CO,uBAAuBe,EAAAA,EAAAA,IAA8BxB,MAVzD,CAWIQ,I,0wBCvGG,SAASiB,EAAaC,GACzB,GAAIA,EACA,MAAO,CACHA,EAAaC,SAAWD,EAAaC,QAAQC,OAAS,GAAtD,UAA8DF,EAAaC,QAAQC,OAAnF,YACAF,EAAaG,UAAYH,EAAaG,SAASD,OAAS,GAAxD,UAAgEF,EAAaG,SAASD,OAAtF,cACFE,OAAOC,SAASC,KAAK,OAI/B,IAAMC,EAAoB,SAAC,GAAD,UACtBrD,EADsB,EACtBA,aACAsD,EAFsB,EAEtBA,cACAnD,EAHsB,EAGtBA,YACAoD,EAJsB,EAItBA,YACAC,EALsB,EAKtBA,YACAC,EANsB,EAMtBA,aACAC,EAPsB,EAOtBA,gBACArD,EARsB,EAQtBA,MARsB,OASnB,kBAAC,IAAD,CACHC,MAAM,gBACNrC,WAAa+B,EACbO,MAAK,kBACEgD,EAAc,CAAC,CACdjD,MAAO,qBACPpB,MAAK,UAAEoE,EAAcK,gBAAhB,aAAE,EAAwBX,OAC/BY,SAAU,UACVC,OAAQ,qBACR9C,QAAS,WACLZ,EACI,sBACA2D,EAAAA,EAAAA,eAAcR,EAAcK,SAAU,oBAG7C,KAZJ,OAaEH,EAAc,CAAC,CACdlD,MAAO,WACPpB,MAAK,UAAEoE,EAAcS,gBAAhB,aAAE,EAAwBf,OAC/BY,SAAU,UACVC,OAAQ,WACR9C,QAAS,WACLZ,EACI,YACA2D,EAAAA,EAAAA,eAAcR,EAAcS,SAAU,oBAG7C,KAxBJ,OAyBEN,EAAe,CAAC,CACfnD,MAAO,oBACPpB,MAAK,UAAEoE,EAAcU,iBAAhB,aAAE,EAAyBhB,OAChCY,SAAU,UACVK,OAAQ,YACRJ,OAAQ,oBACR9C,QAAS,WACLZ,EACI,qBACA2D,EAAAA,EAAAA,eAAcR,EAAcU,UAAW,oBAG9C,KArCJ,OAsCEN,EAAkB,CAAC,CAClBpD,MAAO,eACPpB,MAAO2D,EAAaS,EAAcR,cAClCe,OAAQ,eACR9C,QAAS,WACLZ,EACI,gBACA+D,EAAAA,EAAAA,oBAAmBZ,EAAcR,cACjC,aAGP,KAjDJ,OAkDEzC,EAAMS,KAAI,gBAAGC,EAAH,EAAGA,QAAH,4BAENA,GAAW,CAAEA,QAAS,SAACC,GAAD,OAAOD,EAAQC,EAAGb,cAKvDkD,EAAkB7D,UAAY,CAC1BQ,aAAcN,IAAAA,KACdS,YAAaT,IAAAA,KACb4D,cAAe5D,IAAAA,MAAgB,CAC3BiE,SAAUjE,IAAAA,QAAkBA,IAAAA,QAC5BqE,SAAUrE,IAAAA,QAAkBA,IAAAA,QAC5BsE,UAAWtE,IAAAA,QAAkBA,IAAAA,QAC7BoD,aAAcpD,IAAAA,MAAgB,CAC1BqD,QAASrD,IAAAA,QAAkBA,IAAAA,MAAgB,CAEvCyE,SAAUzE,IAAAA,OACV0E,KAAM1E,IAAAA,OACNqD,QAASrD,IAAAA,KACT2E,SAAU3E,IAAAA,QAEduD,SAAUvD,IAAAA,QAAkBA,IAAAA,MAAgB,CAExCyE,SAAUzE,IAAAA,OACV0E,KAAM1E,IAAAA,OACNqD,QAASrD,IAAAA,KACT2E,SAAU3E,IAAAA,YAItB6D,YAAa7D,IAAAA,KACb8D,YAAa9D,IAAAA,KACb+D,aAAc/D,IAAAA,KACdgE,gBAAiBhE,IAAAA,KACjBW,MAAOX,IAAAA,QAAkBwB,EAAAA,KAE7BmC,EAAkB1D,aAAe,CAC7BK,cAAc,EACdG,YAAa,aACboD,aAAa,EACbC,aAAa,EACbC,cAAc,EACdC,iBAAiB,EACjBrD,MAAO,IAGX,SAAec,EAAAA,EAAAA,UAAQ,gBAEfC,EAFe,EACnBC,mBACID,cAFe,MAIhB,CACHpB,aAAcoB,GAAiBA,EAAcE,OAC7CgC,eAAegB,EAAAA,EAAAA,IAAsBlD,MANzC,CAOIiC,I,0wBC7HJ,IAAMkB,EAAqB,SAAC,GAAD,UACvBC,EADuB,EACvBA,eACArE,EAFuB,EAEvBA,YACAH,EAHuB,EAGvBA,aACAyE,EAJuB,EAIvBA,QACAxE,EALuB,EAKvBA,UACAyE,EANuB,EAMvBA,QACAC,EAPuB,EAOvBA,QACAC,EARuB,EAQvBA,cACAvE,EATuB,EASvBA,MATuB,OAUpB,kBAAC,IAAD,CACHC,MAAM,iBACNrC,WAAa+B,EACbO,MAAK,kBACEkE,EAAU,CAAC,CAAEnE,MAAO,OAAQpB,MAAOsF,EAAepG,OAAU,KAD9D,OAEE6B,EAAY,CAAC,CAAEK,MAAO,SAAUpB,MAAOsF,EAAehE,SAAY,KAFpE,OAGEkE,EAAU,CAAC,CACVpE,MAAO,iBACPpB,MAAK,UAAEsF,EAAeK,YAAjB,aAAE,EAAqB7B,OAC5BiB,OAAQ,YACRL,SAAU,UACVC,OAAQ,OACR9C,QAAS,WACLZ,EACI,QACA2D,EAAAA,EAAAA,eAAcU,EAAeK,KAAM,kBAG1C,KAfJ,OAgBEF,EAAU,CAAC,CACVrE,MAAO,iBACPpB,MAAK,UAAEsF,EAAeM,YAAjB,aAAE,EAAqB9B,OAC5BiB,OAAQ,YACRL,SAAU,UACV7C,QAAS,WACLZ,EACI,QACA2D,EAAAA,EAAAA,eAAcU,EAAeM,KAAM,kBAG1C,KA3BJ,OA4BEF,EAAgB,CAAC,CAChBtE,MAAO,kBACPpB,MAAK,UAAEsF,EAAeO,YAAjB,aAAE,EAAqB/B,OAC5BY,SAAU,MACVC,OAAQ,aACR9C,QAAS,WACLZ,EACI,mBACA6E,EAAAA,EAAAA,iBAAgBR,EAAeO,MAC/B,aAGP,KAxCJ,OAyCE1E,EAAMS,KAAI,gBAAGC,EAAH,EAAGA,QAAH,4BAENA,GAAW,CAAEA,QAAS,SAACC,GAAD,OAAOD,EAAQC,EAAGb,cAKvDoE,EAAmB/E,UAAY,CAC3BQ,aAAcN,IAAAA,KACdS,YAAaT,IAAAA,KACb8E,eAAgB9E,IAAAA,MAAgB,CAC5BtB,KAAMsB,IAAAA,OACNc,OAAQd,IAAAA,OACRmF,KAAMnF,IAAAA,MACNoF,KAAMpF,IAAAA,MACNqF,KAAMrF,IAAAA,QAEV+E,QAAS/E,IAAAA,KACTO,UAAWP,IAAAA,KACXgF,QAAShF,IAAAA,KACTiF,QAASjF,IAAAA,KACTkF,cAAelF,IAAAA,KACfW,MAAOX,IAAAA,QAAkBwB,EAAAA,KAE7BqD,EAAmB5E,aAAe,CAC9BK,cAAc,EACdG,YAAa,aACbsE,SAAS,EACTxE,WAAW,EACXyE,SAAS,EACTC,SAAS,EACTC,eAAe,EACfvE,MAAO,IAGX,SAAec,EAAAA,EAAAA,UAAQ,gBAEfW,EAFe,EACnBa,cACIb,OAGAV,EALe,EAInBC,mBACID,cALe,MAOhB,CACHpB,aAAcoB,GAAiBA,EAAcE,OAC7CkD,gBAAgBS,EAAAA,EAAAA,IAAuB7D,EAAeU,MAT1D,CAUIyC,I,8xBCjGJ,IAAMW,EAAsB,SAAC,GAAD,MACxBC,EADwB,EACxBA,WACAnF,EAFwB,EAExBA,aACAG,EAHwB,EAGxBA,YACAiF,EAJwB,EAIxBA,WACAC,EALwB,EAKxBA,iBACAC,EANwB,EAMxBA,gBACAC,EAPwB,EAOxBA,YACAC,EARwB,EAQxBA,iBACAnF,EATwB,EASxBA,MATwB,OAWxB,kBAAC,IAAD,CACIC,MAAM,mBACNrC,WAAa+B,EACbO,MAAK,kBACE6E,EAAa,CAAC,CAAE9E,MAAO,UAAWpB,MAAO,kBAAC,IAAD,CAA0BzB,gBAAiB0H,EAAWM,YAAiB,KADlH,OAEEJ,EAAmB,CAAC,CAAE/E,MAAO,iBAAkBpB,MAAOiG,EAAWO,gBAAmB,KAFtF,OAGEJ,EAAkB,CAAC,CAAEhF,MAAO,eAAgBpB,MAAOiG,EAAWQ,eAAkB,KAHlF,OAIEJ,EAAc,CAAC,CAAEjF,MAAO,iBAAkBpB,OAAQwB,EAAAA,EAAAA,IAAOyE,EAAWS,UACnE,kBAAC,IAAD,CAAYhF,KAAOuE,EAAWS,SAAWxH,KAAK,aAC9C,kBAEC,KARJ,OASEoH,EAAmB,CAAC,CACnBlF,MAAO,iBACPpB,MAAK,UAAEiG,EAAWU,qBAAb,aAAE,EAA0B7C,OACjCY,SAAU,SACVC,OAAQ,iBACR9C,QAAS,WACLZ,EACI,kBACA2D,EAAAA,EAAAA,eAAcqB,EAAWU,cAAe,cAG/C,KApBJ,OAqBExF,EAAMS,KAAI,gBAAGC,EAAH,EAAGA,QAAH,4BAENA,GAAW,CAAEA,QAAS,SAACC,GAAD,OAAOD,EAAQC,EAAGb,cAM3D+E,EAAoB1F,UAAY,CAC5BQ,aAAcN,IAAAA,KACdS,YAAaT,IAAAA,KACbyF,WAAYzF,IAAAA,MAAgB,CACxB+F,QAAS/F,IAAAA,OACTiG,aAAcjG,IAAAA,OACdgG,cAAehG,IAAAA,OACfkG,SAAUlG,IAAAA,OACVmG,cAAenG,IAAAA,QAAkBA,IAAAA,UAErC0F,WAAY1F,IAAAA,KACZ2F,iBAAkB3F,IAAAA,KAClB4F,gBAAiB5F,IAAAA,KACjB6F,YAAa7F,IAAAA,KACb8F,iBAAkB9F,IAAAA,KAClBW,MAAOX,IAAAA,QAAkBwB,EAAAA,KAE7BgE,EAAoBvF,aAAe,CAC/BK,cAAc,EACdG,YAAa,aACbiF,YAAY,EACZC,kBAAkB,EAClBC,iBAAiB,EACjBC,aAAa,EACbC,kBAAkB,EAClBnF,MAAO,IAGX,SAAec,EAAAA,EAAAA,UAAQ,gBAEfW,EAFe,EACnBa,cACIb,OAGAV,EALe,EAInBC,mBACID,cALe,MAOhB,CACHpB,aAAcoB,GAAiBA,EAAcE,OAC7C6D,YAAY1H,EAAAA,EAAAA,IAAgB2D,EAAeU,MAT/C,CAUIoD,I,64BC7EJ,IAAMY,EAAmB,SAAC,GAAD,IAAGxF,EAAH,EAAGA,MAAOqB,EAAV,EAAUA,QAAV,OACrB,kBAAC,aAAD,KACI,8BAAQrB,GACR,kBAAC,IAAD,CACIyF,cAAe,6BAAOzF,GACtB0F,YAAa,6BAAOrE,IACpB,kBAAC,KAAD,CACIsE,QAAQ,QACR,kCAA0B3F,GAC1BvB,UAAU,gDACV,kBAAC,KAAD,UAMVmH,EAAAA,SAAAA,I,2mBACM,CACJC,wBAAwB,EACxBC,wBAAwB,K,8BAGjB,WACP,EAAKC,SAAS,CACVF,wBAAwB,EACxBC,wBAAwB,Q,8BAIrB,SAACE,GAAD,OAAQ,SAACpH,GAChB,IAAQ4C,EAAW,EAAKyE,MAAhBzE,OACRwE,EAAGxE,EAAO0E,GAAItH,GACd,EAAKuH,gB,wCAGY,SAAC5H,GAClBA,EAAM6H,iBACN,EAAKL,SAAS,CACVF,wBAAwB,Q,wCAIX,SAACtH,GAClBA,EAAM6H,iBACN,EAAKL,SAAS,CACVD,wBAAwB,Q,oCAIf,WACb,IAAQtE,EAAW,EAAKyE,MAAhBzE,OACR,OAAOA,EAAO6E,cAAgB7E,EAAO8E,MAAQ9E,EAAO0E,M,uCAGxD,WAAS,QACL,EAkBIK,KAAKN,MAjBLvG,EADJ,EACIA,aACA8B,EAFJ,EAEIA,OACAgF,EAHJ,EAGIA,WACAC,EAJJ,EAIIA,eACAC,EALJ,EAKIA,eACAzI,EANJ,EAMIA,iBACA4B,EAPJ,EAOIA,YACA8G,EARJ,EAQIA,YACAC,EATJ,EASIA,eACAC,EAVJ,EAUIA,mBACAC,EAXJ,EAWIA,OACAC,EAZJ,EAYIA,QACAC,EAbJ,EAaIA,WACAC,EAdJ,EAcIA,SACAC,EAfJ,EAeIA,YACAC,EAhBJ,EAgBIA,OACApH,EAjBJ,EAiBIA,MAEJ,EAA2DwG,KAAKa,MAAxDvB,EAAR,EAAQA,uBAAwBC,EAAhC,EAAgCA,uBAChC,OACI,kBAAC,EAAAuB,SAAD,KACI,kBAAC,IAAD,CACIrH,MAAM,oBACNrC,WAAa+B,EACbO,MAAK,kBACE0G,EAAc,CAAC,CACd3G,MAAO,kBAACwF,EAAD,CACHxF,MAAM,YACNqB,QAAQ,mCACZzC,MAAO4C,EAAO8E,KAAMgB,KAAM,OACzB,KANJ,OAOEV,EAAiB,CAAC,CACjB5G,MAAO,kBAACwF,EAAD,CACHxF,MAAM,eACNqB,QAAQ,gDACZzC,MACI,kBAAC,EAAAyI,SAAD,KACM7F,EAAO+F,aACT,kBAAC,IAAD,CACItJ,iBAAkBA,EAClBuJ,KAAK,eACL/G,QAAS8F,KAAKkB,sBAGvBH,KAAM,OACR,KArBJ,OAsBET,EAAqB,CAAC,CACrB7G,MAAO,kBAACwF,EAAD,CACHxF,MAAM,mBACNqB,QAAQ,wDACZzC,MACI,kBAAC,EAAAyI,SAAD,KACMd,KAAKmB,iBACP,kBAAC,IAAD,CACIzJ,iBAAkBA,EAClBuJ,KAAK,eACL/G,QAAS8F,KAAKoB,sBAGvBL,KAAM,OACR,KApCJ,OAqCER,EAAS,CAAC,CACT9G,MAAO,MACPpB,MAAK,UAAE4H,EAAWoB,cAAb,aAAE,EAAmBlF,OAC1BY,SAAU,aACVC,OAAQ,WACR9C,QAAS,WACLZ,EACI,iBACA2D,EAAAA,EAAAA,eAAcgD,EAAWoB,OAAQ,WAGxC,KAhDJ,OAiDEb,EAAU,CAAC,CAAE/G,MAAO,iBAAkBpB,MAAO4H,EAAWqB,YAAe,KAjDzE,OAkDEb,EAAa,CAAC,CAAEhH,MAAO,UAAWpB,MAAO4H,EAAWsB,UAAa,KAlDnE,OAmDEb,EAAW,CAAC,CAAEjH,MAAO,mBAAoBpB,MAAO4H,EAAWuB,iBAAoB,KAnDjF,OAoDEb,EAAc,CAAC,CACdlH,MAAO,YACPpB,MAAO4H,MAAAA,GAAF,UAAEA,EAAYwB,gBAAd,aAAE,EAAsBtF,OAC7BY,SAAU,OACVC,OAAQ,OACR9C,QAAS,kBAAMZ,EAAY,aAAa2D,EAAAA,EAAAA,eAAcgD,EAAWwB,SAAU,iBAC1E,KA1DJ,OA2DEb,EAAS,CAAC,CAAEnH,MAAO,MAAOpB,MAAO4H,EAAWyB,UAAa,KA3D3D,OA4DElI,EAAMS,KAAI,gBAAGC,EAAH,EAAGA,QAAH,4BAENA,GAAW,CAAEA,QAAS,SAACC,GAAD,OAAOD,EAAQC,EAAGb,aAIvD,kBAAC,IAAD,CACIqI,OAASrC,EACT7F,MAAM,oBACNpB,MAAQ4C,GAAUA,EAAO+F,aACzBY,UAAU,8BACVC,YAAY,0BACZC,aAAa,2BACbC,cAAc,4BACdC,YAAY,0BACZpC,SAAWI,KAAKJ,SAChBqC,SAAWjC,KAAKiC,SAAS/B,KAE7B,kBAAC,IAAD,CACIyB,OAASpC,EACT9F,MAAM,oBACNpB,MAAQ4C,GAAU+E,KAAKmB,iBACvBS,UAAU,eACVC,YAAY,0BACZC,aAAa,2BACbC,cAAc,4BACdC,YAAY,0BACZpC,SAAWI,KAAKJ,SAChBqC,SAAWjC,KAAKiC,SAAS9B,U,EAxJvCd,CAAmB6C,EAAAA,WA+JzB7C,EAAW1G,UAAY,CACnBQ,aAAcN,IAAAA,KACdoC,OAAQpC,IAAAA,MAAgB,CAEpBmI,aAAcnI,IAAAA,OAEdiH,aAAcjH,IAAAA,OACdkH,KAAMlH,IAAAA,OACN8G,GAAI9G,IAAAA,SAERoH,WAAYpH,IAAAA,MAAgB,CACxByI,UAAWzI,IAAAA,OACX0I,QAAS1I,IAAAA,OACT2I,eAAgB3I,IAAAA,OAChB6I,QAAS7I,IAAAA,OACTsJ,QAAStJ,IAAAA,QAAkBA,IAAAA,MAAgB,CACvCuJ,OAAQvJ,IAAAA,OAERwJ,YAAaxJ,IAAAA,OACbyJ,QAASzJ,IAAAA,MAAgB,IACzBtB,KAAMsB,IAAAA,UAEVwI,OAAQxI,IAAAA,QAAkBA,IAAAA,QAC1B4I,SAAU5I,IAAAA,QAEdqH,eAAgBrH,IAAAA,KAChBsH,eAAgBtH,IAAAA,KAChBnB,iBAAkBmB,IAAAA,KAClBS,YAAaT,IAAAA,KACbuH,YAAavH,IAAAA,KACbwH,eAAgBxH,IAAAA,KAChByH,mBAAoBzH,IAAAA,KACpB0H,OAAQ1H,IAAAA,KACR2H,QAAS3H,IAAAA,KACT4H,WAAY5H,IAAAA,KACZ6H,SAAU7H,IAAAA,KACV8H,YAAa9H,IAAAA,KACb+H,OAAQ/H,IAAAA,KACRW,MAAOX,IAAAA,QAAkBwB,EAAAA,KAE7BgF,EAAWvG,aAAe,CACtBK,cAAc,EACd8B,OAAQ,GACRgF,WAAY,GACZG,aAAa,EACbC,gBAAgB,EAChBC,oBAAoB,EACpBC,QAAQ,EACRC,SAAS,EACTC,YAAY,EACZC,UAAU,EACVC,aAAa,EACbC,QAAQ,EACRpH,MAAO,IAGXyF,EAAiBtG,UAAY,CACzBc,MAAOZ,IAAAA,OAAAA,WACPiC,QAASjC,IAAAA,OAAAA,YAyBb,SAAeyB,EAAAA,EAAAA,UAAQ,gBAEfW,EAFe,EACnBa,cACIb,OAGAV,EALe,EAInBC,mBACID,cALe,MAOhB,CACHU,OAAAA,EACA9B,aAAcoB,GAAiBA,EAAcE,OAC7CwF,YAAYsC,EAAAA,EAAAA,IAAmBhI,EAAeU,OAhClD,SAA4B5D,GACxB,IAAMmL,EAAgB,SAAC7C,EAAI3H,GAOvB,OANAA,EAAMP,QAAQgL,MAAK,SAAAC,GAGf,OAFArL,GAASkD,EAAAA,EAAAA,IAAcoF,EAAI,CAAEgD,UAAU,KACvCtL,GAASuL,EAAAA,EAAAA,IAAWjD,EAAI,CAAEgD,UAAU,GAAQ,CAAEE,UAAU,KACjDH,KAGJ1K,GAGX,MAAO,CACHkI,eAAgB,SAACP,EAAItH,GACjBhB,EAASmL,EAAc7C,GAAImD,EAAAA,EAAAA,IAAgBnD,EAAItH,MAGnD8H,eAAgB,SAACR,EAAItH,GACjBhB,EAASmL,EAAc7C,GAAIoD,EAAAA,EAAAA,IAAgBpD,EAAItH,SAK3D,CAWwBgH,I,yNC9QX2D,EAAe,CACxBC,GAAI,kBAAC,IAAD,CAASnI,QAAQ,sBACjB,kBAAC,KAAD,CAA8B5C,UAAU,iCAE5CgL,KAAM,kBAAC,IAAD,CAASpI,QAAQ,uBACnB,kBAAC,KAAD,CAAgC5C,UAAU,oCAIrCiL,EAAgB,CACzBC,KAAM,kBAAC,IAAD,CAAStI,QAAQ,kBACnB,kBAAC,KAAD,CAAiB5C,UAAU,sCAE/BmL,MAAO,kBAAC,IAAD,CAASvI,QAAQ,mBACpB,kBAAC,KAAD,CAAW5C,UAAU,wCAsEhBiG,EAAkB,eAACuE,EAAD,uDAAQ,GAAR,MAAgB,CAC3CY,MAAO,CACH,CACI7J,MAAO,cACP8J,WAAY,CAACC,EAAAA,WAEjB,CACI/J,MAAO,MACP8J,WAAY,CAACC,EAAAA,WAEjB,CACI/J,MAAO,OACP8J,WAAY,CAACC,EAAAA,WAEjB,QACA,CACI/J,MAAO,OACP8J,WAAY,CAACC,EAAAA,YAGrBC,KAAMf,EAAKzI,KAAI,SAAAyJ,GAAI,MAAK,CACpBA,EAAKC,YACLD,EAAKE,IACLF,EAAKnG,KACL,CACI9D,MAAOuJ,EAAaU,EAAK7C,QACzB,kBAAC,IAAD,CAAS/F,QAAQ,0BACb,kBAAC,KAAD,CAA4B5C,UAAU,uCAG9CwL,EAAKnM,WAIA8F,EAAqB,wEAAyB,CAAEnB,QAAS,GAAIE,SAAU,IAA/CF,EAAH,EAAGA,QAASE,EAAZ,EAAYA,SAAZ,MAA4D,CAC1FkH,MAAO,CACH,CACI7J,MAAO,OACP8J,WAAY,CAACC,EAAAA,WAEjB,CACI/J,MAAO,UACP8J,WAAY,CAACC,EAAAA,WAEjB,CACI/J,MAAO,YACP8J,WAAY,CAACC,EAAAA,YAGrBC,KAAM,kBAAIvH,IAAJ,OAAgBE,IAAUnC,KAAI,SAAA4J,GAAU,MAAK,CAC/C,CACIpK,MAAOoK,EAAWtG,KAClBuG,UAAWD,EAAWtG,MAE1B,CACI9D,MAAO0J,EAAc7G,QAAQuH,EAAW3H,UACxC4H,UAAW,GAAF,OAAKD,EAAW3H,UAE7B,CACIzC,MAAO0J,EAAc7G,QAAQuH,EAAWrG,WACxCsG,UAAW,GAAF,OAAKD,EAAWrG,eAGjCuG,QAAS,CACL,CAAExM,KAAM,WACR,CACIA,KAAM,WACN+K,QAAS,CACL,CAAE0B,MAAO,aAAc3L,MAAO,QAC9B,CAAE2L,MAAO,cAAe3L,MAAO,WAGvC,CACId,KAAM,WACN+K,QAAS,CACL,CAAE0B,MAAO,aAAc3L,MAAO,QAC9B,CAAE2L,MAAO,cAAe3L,MAAO,cAMlC4E,EAAgB,eAACyF,EAAD,uDAAQ,GAAIjJ,EAAZ,uDAAoB,GAApB,MAA4B,CACrD6J,MAAO,CAAC,CACJ7J,MAAAA,EACA8J,WAAY,CAACC,EAAAA,YAEjBC,KAAMf,EAAKzI,KAAI,SAAAyJ,GAAI,MAAK,CAACA,MACzBK,QAAS,CAAC,CAAExM,KAAM,e,2FChLtB,QALI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAASwJ,KAAK,S,qNCGhBkD,EAAiB,SAAC,GAA8B,IAA5BlQ,EAA4B,EAA5BA,YAAgB2L,GAAY,YAClD,GAA8BwE,EAAAA,EAAAA,YAA9B,eAAOC,EAAP,KAAgBC,EAAhB,KAQA,OAPAlQ,EAAAA,EAAAA,YAAU,WACW,QAAbH,IACW,QAAX,EAAAA,WAAA,mBAAeI,gBAAf,gBAA0B,CAAEqG,mBAAAA,EAAAA,MAGhC4J,GAAW,kBAAMrQ,EAAcuE,EAAAA,SAAWwI,EAAAA,cAC3C,IACIqD,EAAU,kBAACA,EACVpQ,GAAe,CACfwE,MAAOxE,IAAcyE,YAGzB,kBAAC,IAAuBkH,IACf1J,EAAAA,GAGjBiO,EAAetL,UAAY,CACvB5E,YAAa8E,IAAAA,MAGjB,W,wXCzBawL,EAAe,SAACC,EAASC,GAAV,MAA2B,CACnDhN,KAAMC,EAAAA,GAAAA,cACNC,QAAS+M,EAAAA,MAAAA,kBAAwBF,GACjCG,KAAM,CACFC,cAAe,CACXC,UAAW,CACPvF,QAAS,UACT3F,MAAO,4BACPmL,YAAa,GAAF,OAAKL,EAAL,mCACXM,aAAa,IAGrBP,QAAAA,KAIKQ,EAAY,SAACC,GAAD,MAAkB,CACvCxN,KAAMyN,EAAAA,GACNvN,QAAS,CACLsN,YAAAA,KAIKE,EAAqB,WAC9B,MAAQ,CACJ1N,KAAM2N,EAAAA,KAIDpC,EAAkB,SAACnD,EAAItH,GAAL,MAAgB,CAC3Cd,KAAMC,EAAAA,GAAAA,oBACNC,QAAS+M,EAAAA,MAAAA,iBAAuB,CAAC7E,GAAK,CAAEqB,aAAc3I,IACtDoM,KAAM,CACF9E,GAAAA,EACAtH,MAAAA,EACAqM,cAAe,CACXC,UAAW,CACPvF,QAAS,UACT3F,MAAO,mCAAF,OAAqCkG,EAArC,gCAA+DtH,GACpEwM,aAAa,OAMhBM,EAAgB,SAACtO,EAAMC,GAAP,MAAoB,CAC7CS,KAAM6N,EAAAA,GACN3N,QAAS,CACLZ,KAAAA,EAAMC,QAAAA,KAIDyD,EAAgB,SAAC8K,GAAD,MAAa,CACtC9N,KAAMC,EAAAA,GAAAA,oBACNC,SAAS6N,EAAAA,EAAAA,wBAAuBD,EAAQ,MAG/BtC,EAAkB,SAACpD,EAAItH,GAAL,MAAgB,CAC3Cd,KAAMC,EAAAA,GAAAA,iBACNC,QAAS+M,EAAAA,MAAAA,iBAAuB,CAAC7E,GAAK,CAAEG,aAAczH,IACtDoM,KAAM,CACFC,cAAe,CACXC,UAAW,CACPvF,QAAS,UACT3F,MAAO,oCACPoL,aAAa,Q,oHCrD7B,SAfO,SAA0CU,GAC/C,MAAqC,mBAAvBA,GAAoC,EAAAC,EAAA,IAAmBD,EAAoB,2BAAwBE,GAE5G,SAAyCF,GAC9C,OAAQA,OAIHE,GAJwB,EAAAD,EAAA,KAAuB,SAAUnO,GAC5D,MAAO,CACLA,SAAUA,OAIT,SAAwCkO,GAC7C,OAAOA,GAAoD,iBAAvBA,GAAkC,EAAAC,EAAA,KAAuB,SAAUnO,GACrG,OAAO,EAAAqO,EAAA,GAAmBH,EAAoBlO,WAC3CoO,ICNP,GARO,SAAuCE,GAC5C,MAAkC,mBAApBA,GAAiC,EAAAH,EAAA,IAAmBG,EAAiB,wBAAqBF,GAEnG,SAAsCE,GAC3C,OAAQA,OAEHF,GAFqB,EAAAD,EAAA,KAAuB,WAC/C,MAAO,QCJJ,SAASI,EAAkBC,EAAYC,EAAeC,GAC3D,OAAO,OAAS,GAAIA,EAAUF,EAAYC,GAgC5C,SARO,SAAkCE,GACvC,MAA6B,mBAAfA,EAvBT,SAA4BA,GACjC,OAAO,SAA6B3O,EAAU4O,GAC1BA,EAAK1B,YAAvB,IAII2B,EAHAC,EAAOF,EAAKE,KACZC,EAAsBH,EAAKG,oBAC3BC,GAAa,EAEjB,OAAO,SAAyBR,EAAYC,EAAeC,GACzD,IAAIO,EAAkBN,EAAWH,EAAYC,EAAeC,GAU5D,OARIM,EACGF,GAASC,EAAoBE,EAAiBJ,KAAcA,EAAcI,IAE/ED,GAAa,EACbH,EAAcI,GAITJ,IAK+BK,CAAmBP,QAAcP,GAEtE,SAAiCO,GACtC,OAAQA,OAEJP,EAFiB,WACnB,OAAOG,K,eC9BPY,EAAY,CAAC,OAAQ,iBAAkB,mBAAoB,qBAAsB,uBAwBrF,SAASC,EAAMC,EAAKC,EAAWpJ,GAC7B,IAAK,IAAIqJ,EAAID,EAAUxK,OAAS,EAAGyK,GAAK,EAAGA,IAAK,CAC9C,IAAIC,EAASF,EAAUC,GAAGF,GAC1B,GAAIG,EAAQ,OAAOA,EAGrB,OAAO,SAAUxP,EAAUiL,GACzB,MAAM,IAAIwE,MAAM,gCAAkCJ,EAAM,QAAUnJ,EAAO,uCAAyC+E,EAAQyE,qBAAuB,MAIrJ,SAASC,EAAYC,EAAGC,GACtB,OAAOD,IAAMC,EAKR,SAASC,EAAcC,GAC5B,IAAInB,OAAiB,IAAVmB,EAAmB,GAAKA,EAC/BC,EAAkBpB,EAAKqB,WACvBA,OAAiC,IAApBD,EAA6BE,EAAA,EAAkBF,EAC5DG,EAAwBvB,EAAKwB,yBAC7BA,OAAqD,IAA1BD,EAAmC,EAAkCA,EAChGE,EAAwBzB,EAAK0B,4BAC7BA,OAAwD,IAA1BD,EAAmC,EAAqCA,EACtGE,EAAwB3B,EAAK4B,oBAC7BA,OAAgD,IAA1BD,EAAmC,EAA6BA,EACtFE,EAAuB7B,EAAK8B,gBAC5BA,OAA2C,IAAzBD,EAAkC,KAAyBA,EAEjF,OAAO,SAAiBnC,EAAiBJ,EAAoBS,EAAYgC,QACzD,IAAVA,IACFA,EAAQ,IAGV,IAAIC,EAAQD,EACRE,EAAaD,EAAM9B,KACnBA,OAAsB,IAAf+B,GAA+BA,EACtCC,EAAuBF,EAAMG,eAC7BA,OAA0C,IAAzBD,EAAkCnB,EAAcmB,EACjEE,EAAwBJ,EAAMK,iBAC9BA,OAA6C,IAA1BD,EAAmCE,EAAA,EAAeF,EACrEG,EAAwBP,EAAMQ,mBAC9BA,OAA+C,IAA1BD,EAAmCD,EAAA,EAAeC,EACvEE,EAAwBT,EAAM7B,oBAC9BA,OAAgD,IAA1BsC,EAAmCH,EAAA,EAAeG,EACxEC,GAAe,OAA8BV,EAAOzB,GAEpDoC,EAAsBnC,EAAMd,EAAiB8B,EAA0B,mBACvEoB,EAAyBpC,EAAMlB,EAAoBoC,EAA6B,sBAChFmB,EAAiBrC,EAAMT,EAAY6B,EAAqB,cAC5D,OAAOP,EAAWS,GAAiB,OAAS,CAE1CgB,WAAY,UAEZC,eAAgB,SAAwBzL,GACtC,MAAO,WAAaA,EAAO,KAG7B0L,yBAA0B3M,QAAQqJ,GAElCiD,oBAAqBA,EACrBC,uBAAwBA,EACxBC,eAAgBA,EAChB3C,KAAMA,EACNiC,eAAgBA,EAChBE,iBAAkBA,EAClBG,mBAAoBA,EACpBrC,oBAAqBA,GACpBuC,KAGP,QAA4BxB,K","sources":["webpack:///./src/Routes.js","webpack:///./src/components/PermissionsLoader.js","webpack:///./src/hooks/useInventoryWritePermissions.js","webpack:///./src/App.js","webpack:///./src/config.js","webpack:///./src/AppEntry.js","webpack:///./src/bootstrap.js","webpack:///./src/components/GeneralInfo/BiosCard/BiosCard.js","webpack:///./src/components/GeneralInfo/CollectionCard/CollectionCard.js","webpack:///./src/components/GeneralInfo/ConfigurationCard/ConfigurationCard.js","webpack:///./src/components/GeneralInfo/InfrastructureCard/InfrastructureCard.js","webpack:///./src/components/GeneralInfo/OperatingSystemCard/OperatingSystemCard.js","webpack:///./src/components/GeneralInfo/SystemCard/SystemCard.js","webpack:///./src/components/GeneralInfo/dataMapper/dataMapper.js","webpack:///./src/components/SpinnerFallback.js","webpack:///./src/components/SystemDetails/GeneralInfo.js","webpack:///./src/store/actions.js","webpack:///./node_modules/react-redux/es/connect/mapDispatchToProps.js","webpack:///./node_modules/react-redux/es/connect/mapStateToProps.js","webpack:///./node_modules/react-redux/es/connect/mergeProps.js","webpack:///./node_modules/react-redux/es/connect/connect.js"],"sourcesContent":["import { Route, Switch, matchPath, useHistory } from 'react-router-dom';\nimport React, { lazy, Suspense, useContext, useEffect } from 'react';\nimport { tagsMapper } from './constants';\nimport { reducers, RegistryContext, tableReducer } from './store';\nimport { mergeWithEntities } from './store/reducers';\n\nconst InventoryTable = lazy(() => import('./routes/InventoryTable'));\nconst InventoryDetail = lazy(() => import('./routes/InventoryDetail'));\n\nexport const routes = {\n    table: '/',\n    detail: '/:inventoryId'\n};\n\nfunction checkPaths(technology, app) {\n    return Object\n    .values(routes)\n    .some(\n        route => {\n            return matchPath(location.href, { path: `${document.baseURI}${technology}/${app}${route}` });\n        }\n    );\n}\n\nexport const Routes = () => {\n    const { getRegistry } = useContext(RegistryContext);\n    useEffect(() => {\n        getRegistry().register({\n            ...reducers,\n            ...mergeWithEntities(tableReducer)\n        });\n    }, [getRegistry]);\n    const history = useHistory();\n    const pathName = window.location.pathname.split('/');\n    const searchParams = new URLSearchParams(location.search);\n    pathName.shift();\n\n    if (pathName[0] === 'beta') {\n        pathName.shift();\n    }\n\n    if (!checkPaths(pathName[0], pathName[1])) {\n        history.push(`${routes.table}${location.search}${location.hash}`);\n    }\n\n    return (\n        <Suspense fallback=\"\">\n            <Switch>\n                <Route\n                    exact\n                    path={routes.table}\n                    render={() => <InventoryTable\n                        status={searchParams.getAll('status')}\n                        source={searchParams.getAll('source')}\n                        filterbyName={searchParams.getAll('hostname_or_id')}\n                        tagsFilter={searchParams.getAll('tags')?.[0]?.split?.(',').reduce?.(tagsMapper, [])}\n                        operatingSystem={searchParams.getAll('operating_system')}\n                        page={searchParams.getAll('page')}\n                        perPage={searchParams.getAll('per_page')}\n                    />}\n                    rootClass='inventory'\n                />\n                <Route path={routes.detail} component={InventoryDetail} rootClass='inventory' />\n            </Switch>\n        </Suspense>\n    );\n};\n","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport useInventoryWritePermissions from '../hooks/useInventoryWritePermissions';\nimport { ACTION_TYPES } from '../store/action-types';\n\nconst PermissionLoader = () => {\n    const { isLoading, hasAccess } = useInventoryWritePermissions();\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch({ type: `${ACTION_TYPES.LOAD_WRITE_PERMISSIONS}_PENDING` });\n    }, []);\n\n    useEffect(() => {\n        if (!isLoading) {\n            dispatch({ type: `${ACTION_TYPES.LOAD_WRITE_PERMISSIONS}_FULFILLED`, payload: { writePermissions: hasAccess } });\n        }\n    }, [isLoading]);\n\n    return null;\n};\n\nexport default PermissionLoader;\n","import { usePermissions } from '@redhat-cloud-services/frontend-components-utilities/RBACHook';\n\nconst useInventoryWritePermissions = () => {\n    const { hasAccess, ...rest } = usePermissions('inventory', [\n        'inventory:*:*',\n        'inventory:hosts:write',\n        'inventory:*:write'\n    ]);\n\n    return { ...rest, hasAccess };\n};\n\nexport default useInventoryWritePermissions;\n","import React, { useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Routes } from './Routes';\nimport './App.scss';\nimport { INVENTORY_ROOT } from './config';\nimport { NotificationsPortal } from '@redhat-cloud-services/frontend-components-notifications/';\nimport PermissionLoader from './components/PermissionsLoader';\n\nconst App = () => {\n    const history = useHistory();\n    useEffect(() => {\n        insights.chrome.init();\n        insights.chrome.identifyApp(INVENTORY_ROOT);\n        return insights.chrome.on(\n            'APP_NAVIGATION',\n            event => {\n                if (event.navId === 'inventory') {\n                    history.push(`/${location.search}${location.hash}`);\n                } else {\n                    history.push(`/${event.navId}${location.search}${location.hash}`);\n                }\n            }\n        );\n    }, []);\n\n    return (\n        <div className=\"inventory\">\n            <NotificationsPortal />\n            <PermissionLoader />\n            <Routes />\n        </div>\n    );\n};\n\nexport default App;\n","\nexport const INVENTORY_API_BASE = '/api/inventory/v1';\nexport const INVENTORY_ROOT = 'inventory';\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { init, RegistryContext } from './store';\nimport App from './App';\nimport { getBaseName } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport logger from 'redux-logger';\n\nconst InventoryApp = () => {\n    const registry = IS_DEV ? init(logger) : init();\n    return <RegistryContext.Provider value={{\n        getRegistry: () => registry\n    }}>\n        <Provider store={registry.getStore()}>\n            <Router basename={getBaseName(window.location.pathname)}>\n                <App />\n            </Router>\n        </Provider>\n    </RegistryContext.Provider>;\n};\n\nInventoryApp.propTypes = {\n    useLogger: PropTypes.bool\n};\n\nInventoryApp.defaultProps = {\n    useLogger: false\n};\n\nexport default InventoryApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport InventoryApp from './AppEntry';\n\nReactDOM.render(\n    <InventoryApp />,\n    document.getElementById('root')\n);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport LoadingCard from '../LoadingCard';\nimport { biosSelector } from '../selectors';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { extraShape, isDate } from '../../../constants';\n\nconst BiosCard = ({ bios, detailLoaded, hasVendor, hasVersion, handleClick, hasReleaseDate, extra }) => (<LoadingCard\n    title=\"BIOS\"\n    isLoading={ !detailLoaded }\n    items={ [\n        ...hasVendor ? [{ title: 'Vendor', value: bios.vendor }] : [],\n        ...hasVersion ? [{ title: 'Version', value: bios.version }] : [],\n        ...hasReleaseDate ? [{ title: 'Release date', value: (isDate(bios.releaseDate) ?\n            <DateFormat date={ new Date(bios.releaseDate) } type=\"onlyDate\" /> :\n            'Not available'\n        ) }] : [],\n        ...extra.map(({ onClick, ...item }) => ({\n            ...item,\n            ...onClick && { onClick: (e) => onClick(e, handleClick) }\n        }))\n    ] }\n/>);\n\nBiosCard.propTypes = {\n    detailLoaded: PropTypes.bool,\n    handleClick: PropTypes.func,\n    bios: PropTypes.shape({\n        vendor: PropTypes.string,\n        version: PropTypes.string,\n        releaseDate: PropTypes.string,\n        csm: PropTypes.arrayOf(PropTypes.string)\n    }),\n    hasVendor: PropTypes.bool,\n    hasVersion: PropTypes.bool,\n    hasReleaseDate: PropTypes.bool,\n    extra: PropTypes.arrayOf(extraShape)\n};\nBiosCard.defaultProps = {\n    detailLoaded: false,\n    handleClick: () => undefined,\n    extra: [],\n    hasVendor: true,\n    hasVersion: true,\n    hasReleaseDate: true\n};\n\nexport default connect(({\n    systemProfileStore: {\n        systemProfile\n    }\n}) => ({\n    detailLoaded: systemProfile && systemProfile.loaded,\n    bios: biosSelector(systemProfile)\n}))(BiosCard);\n","/* eslint-disable camelcase */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { Tooltip } from '@patternfly/react-core';\n\nimport LoadingCard from '../LoadingCard';\nimport { collectionInformationSelector } from '../selectors';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { extraShape } from '../../../constants';\n\nconst VersionTooltip = ({ egg, client }) => (\n    <Tooltip\n        content={\n            <React.Fragment>\n                <p>RPM version: { client || 'Not available' }</p>\n                <p>Dynamic update version: { egg || 'Not available' }</p>\n            </React.Fragment>\n        }\n    >\n        <span>{ client || egg || 'Not available' }</span>\n    </Tooltip>\n);\n\nVersionTooltip.propTypes = {\n    egg: PropTypes.string,\n    client: PropTypes.string\n};\n\nconst CollectionCard = ({\n    detailLoaded,\n    collectionInformation,\n    entity,\n    handleClick,\n    hasClient,\n    hasLastCheckIn,\n    hasRegistered,\n    hasInsightsId,\n    hasReporter,\n    extra\n}) => (<LoadingCard\n    title=\"Collection information\"\n    isLoading={ !detailLoaded }\n    items={ [\n        ...hasClient ? [{\n            title: 'Insights client',\n            value: <VersionTooltip egg={collectionInformation.egg} client={collectionInformation.client}/>\n        }] : [],\n        ...hasLastCheckIn ? [{ title: 'Last check-in', value: entity && (\n            DateFormat ?\n                <DateFormat date={ entity.updated } type=\"onlyDate\" /> :\n                new Date(entity.updated).toLocaleString()\n        ) }] : [],\n        ...hasRegistered ? [{ title: 'Registered', value: entity && (\n            DateFormat ?\n                <DateFormat date={entity.created} type=\"onlyDate\" /> :\n                new Date(entity.created).toLocaleString()\n        ) }] : [],\n        ...hasInsightsId ? [{ title: 'Insights id', value: entity && entity.insights_id }] : [],\n        ...hasReporter ? [{ title: 'Reporter', value: entity && entity.reporter }] : [],\n        ...extra.map(({ onClick, ...item }) => ({\n            ...item,\n            ...onClick && { onClick: (e) => onClick(e, handleClick) }\n        }))\n    ] }\n/>);\n\nCollectionCard.propTypes = {\n    detailLoaded: PropTypes.bool,\n    entity: PropTypes.shape({\n        updated: PropTypes.string,\n        created: PropTypes.string,\n        insights_id: PropTypes.string,\n        reporter: PropTypes.string\n    }),\n    handleClick: PropTypes.func,\n    collectionInformation: PropTypes.shape({\n        client: PropTypes.string,\n        egg: PropTypes.string\n    }),\n    hasClient: PropTypes.bool,\n    hasLastCheckIn: PropTypes.bool,\n    hasRegistered: PropTypes.bool,\n    hasInsightsId: PropTypes.bool,\n    hasReporter: PropTypes.bool,\n    extra: PropTypes.arrayOf(extraShape)\n};\nCollectionCard.defaultProps = {\n    detailLoaded: false,\n    handleClick: () => undefined,\n    hasClient: true,\n    hasEgg: true,\n    hasLastCheckIn: true,\n    hasRegistered: true,\n    hasInsightsId: true,\n    hasReporter: true,\n    extra: []\n};\n\nexport default connect(({\n    entityDetails: {\n        entity\n    },\n    systemProfileStore: {\n        systemProfile\n    }\n}) => ({\n    entity,\n    detailLoaded: systemProfile && systemProfile.loaded,\n    collectionInformation: collectionInformationSelector(systemProfile)\n}))(CollectionCard);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport LoadingCard from '../LoadingCard';\nimport { generalMapper, repositoriesMapper } from '../dataMapper';\nimport { configurationSelector } from '../selectors';\nimport { extraShape } from '../../../constants';\n\nexport function enabledRepos(repositories) {\n    if (repositories) {\n        return [\n            repositories.enabled && repositories.enabled.length > 0 && `${repositories.enabled.length} enabled`,\n            repositories.disabled && repositories.disabled.length > 0 && `${repositories.disabled.length} disabled`\n        ].filter(Boolean).join(' / ');\n    }\n}\n\nconst ConfigurationCard = ({\n    detailLoaded,\n    configuration,\n    handleClick,\n    hasPackages,\n    hasServices,\n    hasProcesses,\n    hasRepositories,\n    extra\n}) => (<LoadingCard\n    title=\"Configuration\"\n    isLoading={ !detailLoaded }\n    items={ [\n        ...hasPackages ? [{\n            title: 'Installed packages',\n            value: configuration.packages?.length,\n            singular: 'package',\n            target: 'installed_packages',\n            onClick: () => {\n                handleClick(\n                    'Installed packages',\n                    generalMapper(configuration.packages, 'Package name')\n                );\n            }\n        }] : [],\n        ...hasServices ? [{\n            title: 'Services',\n            value: configuration.services?.length,\n            singular: 'service',\n            target: 'services',\n            onClick: () => {\n                handleClick(\n                    'Services',\n                    generalMapper(configuration.services, 'Service name')\n                );\n            }\n        }] : [],\n        ...hasProcesses ? [{\n            title: 'Running processes',\n            value: configuration.processes?.length,\n            singular: 'process',\n            plural: 'processes',\n            target: 'running_processes',\n            onClick: () => {\n                handleClick(\n                    'Running processes',\n                    generalMapper(configuration.processes, 'Process name')\n                );\n            }\n        }] : [],\n        ...hasRepositories ? [{\n            title: 'Repositories',\n            value: enabledRepos(configuration.repositories),\n            target: 'repositories',\n            onClick: () => {\n                handleClick(\n                    'Repositories',\n                    repositoriesMapper(configuration.repositories),\n                    'medium'\n                );\n            }\n        }] : [],\n        ...extra.map(({ onClick, ...item }) => ({\n            ...item,\n            ...onClick && { onClick: (e) => onClick(e, handleClick) }\n        }))\n    ] }\n/>);\n\nConfigurationCard.propTypes = {\n    detailLoaded: PropTypes.bool,\n    handleClick: PropTypes.func,\n    configuration: PropTypes.shape({\n        packages: PropTypes.arrayOf(PropTypes.string),\n        services: PropTypes.arrayOf(PropTypes.string),\n        processes: PropTypes.arrayOf(PropTypes.string),\n        repositories: PropTypes.shape({\n            enabled: PropTypes.arrayOf(PropTypes.shape({\n                // eslint-disable-next-line camelcase\n                base_url: PropTypes.string,\n                name: PropTypes.string,\n                enabled: PropTypes.bool,\n                gpgcheck: PropTypes.bool\n            })),\n            disabled: PropTypes.arrayOf(PropTypes.shape({\n                // eslint-disable-next-line camelcase\n                base_url: PropTypes.string,\n                name: PropTypes.string,\n                enabled: PropTypes.bool,\n                gpgcheck: PropTypes.bool\n            }))\n        })\n    }),\n    hasPackages: PropTypes.bool,\n    hasServices: PropTypes.bool,\n    hasProcesses: PropTypes.bool,\n    hasRepositories: PropTypes.bool,\n    extra: PropTypes.arrayOf(extraShape)\n};\nConfigurationCard.defaultProps = {\n    detailLoaded: false,\n    handleClick: () => undefined,\n    hasPackages: true,\n    hasServices: true,\n    hasProcesses: true,\n    hasRepositories: true,\n    extra: []\n};\n\nexport default connect(({\n    systemProfileStore: {\n        systemProfile\n    }\n}) => ({\n    detailLoaded: systemProfile && systemProfile.loaded,\n    configuration: configurationSelector(systemProfile)\n}))(ConfigurationCard);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport LoadingCard from '../LoadingCard';\nimport { generalMapper, interfaceMapper } from '../dataMapper';\nimport { infrastructureSelector } from '../selectors';\nimport { extraShape } from '../../../constants';\n\nconst InfrastructureCard = ({\n    infrastructure,\n    handleClick,\n    detailLoaded,\n    hasType,\n    hasVendor,\n    hasIPv4,\n    hasIPv6,\n    hasInterfaces,\n    extra\n}) => (<LoadingCard\n    title=\"Infrastructure\"\n    isLoading={ !detailLoaded }\n    items={ [\n        ...hasType ? [{ title: 'Type', value: infrastructure.type }] : [],\n        ...hasVendor ? [{ title: 'Vendor', value: infrastructure.vendor }] : [],\n        ...hasIPv4 ? [{\n            title: 'IPv4 addresses',\n            value: infrastructure.ipv4?.length,\n            plural: 'addresses',\n            singular: 'address',\n            target: 'ipv4',\n            onClick: () => {\n                handleClick(\n                    'IPv4',\n                    generalMapper(infrastructure.ipv4, 'IP address')\n                );\n            }\n        }] : [],\n        ...hasIPv6 ? [{\n            title: 'IPv6 addresses',\n            value: infrastructure.ipv6?.length,\n            plural: 'addresses',\n            singular: 'address',\n            onClick: () => {\n                handleClick(\n                    'IPv6',\n                    generalMapper(infrastructure.ipv6, 'IP address')\n                );\n            }\n        }] : [],\n        ...hasInterfaces ? [{\n            title: 'Interfaces/NICs',\n            value: infrastructure.nics?.length,\n            singular: 'NIC',\n            target: 'interfaces',\n            onClick: () => {\n                handleClick(\n                    'Interfaces/NICs',\n                    interfaceMapper(infrastructure.nics),\n                    'medium'\n                );\n            }\n        }] : [],\n        ...extra.map(({ onClick, ...item }) => ({\n            ...item,\n            ...onClick && { onClick: (e) => onClick(e, handleClick) }\n        }))\n    ] }\n/>);\n\nInfrastructureCard.propTypes = {\n    detailLoaded: PropTypes.bool,\n    handleClick: PropTypes.func,\n    infrastructure: PropTypes.shape({\n        type: PropTypes.string,\n        vendor: PropTypes.string,\n        ipv4: PropTypes.array,\n        ipv6: PropTypes.array,\n        nics: PropTypes.array\n    }),\n    hasType: PropTypes.bool,\n    hasVendor: PropTypes.bool,\n    hasIPv4: PropTypes.bool,\n    hasIPv6: PropTypes.bool,\n    hasInterfaces: PropTypes.bool,\n    extra: PropTypes.arrayOf(extraShape)\n};\nInfrastructureCard.defaultProps = {\n    detailLoaded: false,\n    handleClick: () => undefined,\n    hasType: true,\n    hasVendor: true,\n    hasIPv4: true,\n    hasIPv6: true,\n    hasInterfaces: true,\n    extra: []\n};\n\nexport default connect(({\n    entityDetails: {\n        entity\n    },\n    systemProfileStore: {\n        systemProfile\n    }\n}) => ({\n    detailLoaded: systemProfile && systemProfile.loaded,\n    infrastructure: infrastructureSelector(systemProfile, entity)\n}))(InfrastructureCard);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport LoadingCard from '../LoadingCard';\nimport { generalMapper } from '../dataMapper';\nimport { operatingSystem } from '../selectors';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { extraShape, isDate } from '../../../constants';\nimport OperatingSystemFormatter from '../../../Utilities/OperatingSystemFormatter';\n\nconst OperatingSystemCard = ({\n    systemInfo,\n    detailLoaded,\n    handleClick,\n    hasRelease,\n    hasKernelRelease,\n    hasArchitecture,\n    hasLastBoot,\n    hasKernelModules,\n    extra\n}) => (\n    <LoadingCard\n        title=\"Operating system\"\n        isLoading={ !detailLoaded }\n        items={ [\n            ...hasRelease ? [{ title: 'Release', value: <OperatingSystemFormatter operatingSystem={systemInfo.release} /> }] : [],\n            ...hasKernelRelease ? [{ title: 'Kernel release', value: systemInfo.kernelRelease }] : [],\n            ...hasArchitecture ? [{ title: 'Architecture', value: systemInfo.architecture }] : [],\n            ...hasLastBoot ? [{ title: 'Last boot time', value: (isDate(systemInfo.bootTime) ?\n                <DateFormat date={ systemInfo.bootTime } type=\"onlyDate\" /> :\n                'Not available'\n            )\n            }] : [],\n            ...hasKernelModules ? [{\n                title: 'Kernel modules',\n                value: systemInfo.kernelModules?.length,\n                singular: 'module',\n                target: 'kernel_modules',\n                onClick: () => {\n                    handleClick(\n                        'Kernel modules',\n                        generalMapper(systemInfo.kernelModules, 'Module')\n                    );\n                }\n            }] : [],\n            ...extra.map(({ onClick, ...item }) => ({\n                ...item,\n                ...onClick && { onClick: (e) => onClick(e, handleClick) }\n            }))\n        ] }\n    />\n);\n\nOperatingSystemCard.propTypes = {\n    detailLoaded: PropTypes.bool,\n    handleClick: PropTypes.func,\n    systemInfo: PropTypes.shape({\n        release: PropTypes.string,\n        architecture: PropTypes.string,\n        kernelRelease: PropTypes.string,\n        bootTime: PropTypes.string,\n        kernelModules: PropTypes.arrayOf(PropTypes.string)\n    }),\n    hasRelease: PropTypes.bool,\n    hasKernelRelease: PropTypes.bool,\n    hasArchitecture: PropTypes.bool,\n    hasLastBoot: PropTypes.bool,\n    hasKernelModules: PropTypes.bool,\n    extra: PropTypes.arrayOf(extraShape)\n};\nOperatingSystemCard.defaultProps = {\n    detailLoaded: false,\n    handleClick: () => undefined,\n    hasRelease: true,\n    hasKernelRelease: true,\n    hasArchitecture: true,\n    hasLastBoot: true,\n    hasKernelModules: true,\n    extra: []\n};\n\nexport default connect(({\n    entityDetails: {\n        entity\n    },\n    systemProfileStore: {\n        systemProfile\n    }\n}) => ({\n    detailLoaded: systemProfile && systemProfile.loaded,\n    systemInfo: operatingSystem(systemProfile, entity)\n}))(OperatingSystemCard);\n","import React, { Fragment, Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport LoadingCard from '../LoadingCard';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { propertiesSelector } from '../selectors';\nimport { editDisplayName, editAnsibleHost, systemProfile } from '../../../store/actions';\nimport TextInputModal from '../TextInputModal';\nimport { loadEntity } from '../../../store/actions';\nimport { Popover, Button } from '@patternfly/react-core';\nimport EditButton from '../EditButton';\nimport { generalMapper } from '../dataMapper';\nimport { extraShape } from '../../../constants';\n\nconst TitleWithPopover = ({ title, content }) => (\n    <React.Fragment>\n        <span>{ title }</span>\n        <Popover\n            headerContent={<div>{ title }</div>}\n            bodyContent={<div>{ content }</div>}>\n            <Button\n                variant=\"plain\"\n                aria-label={`Action for ${title}`}\n                className='ins-active-general_information__popover-icon'>\n                <OutlinedQuestionCircleIcon />\n            </Button>\n        </Popover>\n    </React.Fragment>\n);\n\nclass SystemCard extends Component {\n    state = {\n        isDisplayNameModalOpen: false,\n        isAnsibleHostModalOpen: false\n    };\n\n    onCancel = () => {\n        this.setState({\n            isDisplayNameModalOpen: false,\n            isAnsibleHostModalOpen: false\n        });\n    };\n\n    onSubmit = (fn) => (value) => {\n        const { entity } = this.props;\n        fn(entity.id, value);\n        this.onCancel();\n    }\n\n    onShowDisplayModal = (event) => {\n        event.preventDefault();\n        this.setState({\n            isDisplayNameModalOpen: true\n        });\n    };\n\n    onShowAnsibleModal = (event) => {\n        event.preventDefault();\n        this.setState({\n            isAnsibleHostModalOpen: true\n        });\n    };\n\n    getAnsibleHost = () => {\n        const { entity } = this.props;\n        return entity.ansible_host || entity.fqdn || entity.id;\n    };\n\n    render() {\n        const {\n            detailLoaded,\n            entity,\n            properties,\n            setDisplayName,\n            setAnsibleHost,\n            writePermissions,\n            handleClick,\n            hasHostName,\n            hasDisplayName,\n            hasAnsibleHostname,\n            hasSAP,\n            hasCPUs,\n            hasSockets,\n            hasCores,\n            hasCPUFlags,\n            hasRAM,\n            extra\n        } = this.props;\n        const { isDisplayNameModalOpen, isAnsibleHostModalOpen } = this.state;\n        return (\n            <Fragment>\n                <LoadingCard\n                    title=\"System properties\"\n                    isLoading={ !detailLoaded }\n                    items={ [\n                        ...hasHostName ? [{\n                            title: <TitleWithPopover\n                                title='Host name'\n                                content='Name imported from the system.'/>,\n                            value: entity.fqdn, size: 'md'\n                        }] : [],\n                        ...hasDisplayName ? [{\n                            title: <TitleWithPopover\n                                title='Display name'\n                                content='System name displayed in an inventory list.'/>,\n                            value: (\n                                <Fragment>\n                                    { entity.display_name }\n                                    <EditButton\n                                        writePermissions={writePermissions}\n                                        link=\"display_name\"\n                                        onClick={this.onShowDisplayModal}\n                                    />\n                                </Fragment>\n                            ), size: 'md'\n                        }] : [],\n                        ...hasAnsibleHostname ? [{\n                            title: <TitleWithPopover\n                                title='Ansible hostname'\n                                content='Hostname that is used in playbooks by Remediations.'/>,\n                            value: (\n                                <Fragment>\n                                    { this.getAnsibleHost() }\n                                    <EditButton\n                                        writePermissions={writePermissions}\n                                        link=\"ansible_name\"\n                                        onClick={this.onShowAnsibleModal}\n                                    />\n                                </Fragment>\n                            ), size: 'md'\n                        }] : [],\n                        ...hasSAP ? [{\n                            title: 'SAP',\n                            value: properties.sapIds?.length,\n                            singular: 'identifier',\n                            target: 'sap_sids',\n                            onClick: () => {\n                                handleClick(\n                                    'SAP IDs (SID)',\n                                    generalMapper(properties.sapIds, 'SID')\n                                );\n                            }\n                        }] : [],\n                        ...hasCPUs ? [{ title: 'Number of CPUs', value: properties.cpuNumber }] : [],\n                        ...hasSockets ? [{ title: 'Sockets', value: properties.sockets }] : [],\n                        ...hasCores ? [{ title: 'Cores per socket', value: properties.coresPerSocket }] : [],\n                        ...hasCPUFlags ? [{\n                            title: 'CPU flags',\n                            value: properties?.cpuFlags?.length,\n                            singular: 'flag',\n                            target: 'flag',\n                            onClick: () => handleClick('CPU flags', generalMapper(properties.cpuFlags, 'flag name'))\n                        }] : [],\n                        ...hasRAM ? [{ title: 'RAM', value: properties.ramSize }] : [],\n                        ...extra.map(({ onClick, ...item }) => ({\n                            ...item,\n                            ...onClick && { onClick: (e) => onClick(e, handleClick) }\n                        }))\n                    ] }\n                />\n                <TextInputModal\n                    isOpen={ isDisplayNameModalOpen }\n                    title='Edit display name'\n                    value={ entity && entity.display_name }\n                    ariaLabel='Host inventory display name'\n                    modalOuiaId=\"edit-display-name-modal\"\n                    cancelOuiaId=\"cancel-edit-display-name\"\n                    confirmOuiaId=\"confirm-edit-display-name\"\n                    inputOuiaId=\"input-edit-display-name\"\n                    onCancel={ this.onCancel }\n                    onSubmit={ this.onSubmit(setDisplayName) }\n                />\n                <TextInputModal\n                    isOpen={ isAnsibleHostModalOpen }\n                    title='Edit Ansible host'\n                    value={ entity && this.getAnsibleHost() }\n                    ariaLabel='Ansible host'\n                    modalOuiaId=\"edit-ansible-name-modal\"\n                    cancelOuiaId=\"cancel-edit-ansible-name\"\n                    confirmOuiaId=\"confirm-edit-ansible-name\"\n                    inputOuiaId=\"input-edit-ansible-name\"\n                    onCancel={ this.onCancel }\n                    onSubmit={ this.onSubmit(setAnsibleHost) }\n                />\n            </Fragment>\n        );\n    }\n}\n\nSystemCard.propTypes = {\n    detailLoaded: PropTypes.bool,\n    entity: PropTypes.shape({\n        // eslint-disable-next-line camelcase\n        display_name: PropTypes.string,\n        // eslint-disable-next-line camelcase\n        ansible_host: PropTypes.string,\n        fqdn: PropTypes.string,\n        id: PropTypes.string\n    }),\n    properties: PropTypes.shape({\n        cpuNumber: PropTypes.number,\n        sockets: PropTypes.number,\n        coresPerSocket: PropTypes.number,\n        ramSize: PropTypes.string,\n        storage: PropTypes.arrayOf(PropTypes.shape({\n            device: PropTypes.string,\n            // eslint-disable-next-line camelcase\n            mount_point: PropTypes.string,\n            options: PropTypes.shape({}),\n            type: PropTypes.string\n        })),\n        sapIds: PropTypes.arrayOf(PropTypes.string),\n        cpuFlags: PropTypes.array\n    }),\n    setDisplayName: PropTypes.func,\n    setAnsibleHost: PropTypes.func,\n    writePermissions: PropTypes.bool,\n    handleClick: PropTypes.func,\n    hasHostName: PropTypes.bool,\n    hasDisplayName: PropTypes.bool,\n    hasAnsibleHostname: PropTypes.bool,\n    hasSAP: PropTypes.bool,\n    hasCPUs: PropTypes.bool,\n    hasSockets: PropTypes.bool,\n    hasCores: PropTypes.bool,\n    hasCPUFlags: PropTypes.bool,\n    hasRAM: PropTypes.bool,\n    extra: PropTypes.arrayOf(extraShape)\n};\nSystemCard.defaultProps = {\n    detailLoaded: false,\n    entity: {},\n    properties: {},\n    hasHostName: true,\n    hasDisplayName: true,\n    hasAnsibleHostname: true,\n    hasSAP: true,\n    hasCPUs: true,\n    hasSockets: true,\n    hasCores: true,\n    hasCPUFlags: true,\n    hasRAM: true,\n    extra: []\n};\n\nTitleWithPopover.propTypes = {\n    title: PropTypes.string.isRequired,\n    content: PropTypes.string.isRequired\n};\n\nfunction mapDispatchToProps(dispatch) {\n    const reloadWrapper = (id, event) => {\n        event.payload.then(data => {\n            dispatch(systemProfile(id, { hasItems: true }));\n            dispatch(loadEntity(id, { hasItems: true }, { showTags: true }));\n            return data;\n        });\n\n        return event;\n    };\n\n    return {\n        setDisplayName: (id, value) => {\n            dispatch(reloadWrapper(id, editDisplayName(id, value)));\n        },\n\n        setAnsibleHost: (id, value) => {\n            dispatch(reloadWrapper(id, editAnsibleHost(id, value)));\n        }\n    };\n}\n\nexport default connect(({\n    entityDetails: {\n        entity\n    },\n    systemProfileStore: {\n        systemProfile\n    }\n}) => ({\n    entity,\n    detailLoaded: systemProfile && systemProfile.loaded,\n    properties: propertiesSelector(systemProfile, entity)\n}), mapDispatchToProps)(SystemCard);\n","/* eslint-disable camelcase */\n\nimport React from 'react';\nimport {\n    CheckCircleIcon,\n    TimesIcon,\n    OutlinedQuestionCircleIcon,\n    OutlinedArrowAltCircleUpIcon,\n    OutlinedArrowAltCircleDownIcon\n} from '@patternfly/react-icons';\nimport { sortable } from '@patternfly/react-table';\nimport { Tooltip } from '@patternfly/react-core';\n\nexport const statusHelper = {\n    UP: <Tooltip content=\"Service is running\">\n        <OutlinedArrowAltCircleUpIcon className=\"ins-c-inventory__detail--up\" />\n    </Tooltip>,\n    DOWN: <Tooltip content=\"Service has stopped\">\n        <OutlinedArrowAltCircleDownIcon className=\"ins-c-inventory__detail--down\" />\n    </Tooltip>\n};\n\nexport const enabledHelper = {\n    true: <Tooltip content=\"Source enabled\">\n        <CheckCircleIcon className=\"ins-c-inventory__detail--enabled\" />\n    </Tooltip>,\n    false: <Tooltip content=\"Source disabled\">\n        <TimesIcon className=\"ins-c-inventory__detail--disabled\" />\n    </Tooltip>\n};\n\nexport const diskMapper = (devices = []) => ({\n    cells: [\n        {\n            title: 'Device',\n            transforms: [sortable]\n        },\n        {\n            title: 'Label',\n            transforms: [sortable]\n        },\n        {\n            title: 'Mount point',\n            transforms: [sortable]\n        },\n        {\n            title: 'Type',\n            transforms: [sortable]\n        }\n    ],\n    rows: devices.map(({\n        device,\n        label,\n        mountpoint,\n        options,\n        mounttype\n    }) => {\n        const calculatedOptions = (options && options.options) || options;\n        return ({\n            isOpen: false,\n            child: <div>\n                {\n                    calculatedOptions &&\n                    Object.entries(calculatedOptions.value || calculatedOptions)\n                    .map(([oneKey, option]) => `${oneKey}=${option.value || option}`).join(',  ')\n                }\n            </div>,\n            cells: [\n                (device && device.value) || device,\n                label,\n                (mountpoint && mountpoint.value) || mountpoint,\n                (mounttype && mounttype.value) || mounttype\n            ]\n        });\n    }),\n    expandable: true\n});\n\nexport const productsMapper = (products = []) => ({\n    cells: [\n        {\n            title: 'Name',\n            transforms: [sortable]\n        },\n        'Status'\n    ],\n    rows: products.map(product => ([\n        product.name,\n        {\n            title: statusHelper[product.status] ||\n            <Tooltip content=\"Unknown service status\">\n                <OutlinedQuestionCircleIcon className=\"ins-c-inventory__detail--unknown\" />\n            </Tooltip>\n        }\n    ]))\n});\n\nexport const interfaceMapper = (data = []) => ({\n    cells: [\n        {\n            title: 'MAC address',\n            transforms: [sortable]\n        },\n        {\n            title: 'MTU',\n            transforms: [sortable]\n        },\n        {\n            title: 'Name',\n            transforms: [sortable]\n        },\n        'State',\n        {\n            title: 'Type',\n            transforms: [sortable]\n        }\n    ],\n    rows: data.map(item => ([\n        item.mac_address,\n        item.mtu,\n        item.name,\n        {\n            title: statusHelper[item.state] ||\n            <Tooltip content=\"Unknown service status\">\n                <OutlinedQuestionCircleIcon className=\"ins-c-inventory__detail--unknown\" />\n            </Tooltip>\n        },\n        item.type\n    ]))\n});\n\nexport const repositoriesMapper = ({ enabled, disabled } = { enabled: [], disabled: [] }) => ({\n    cells: [\n        {\n            title: 'Name',\n            transforms: [sortable]\n        },\n        {\n            title: 'Enabled',\n            transforms: [sortable]\n        },\n        {\n            title: 'GPG check',\n            transforms: [sortable]\n        }\n    ],\n    rows: [...enabled, ...disabled].map(repository => ([\n        {\n            title: repository.name,\n            sortValue: repository.name\n        },\n        {\n            title: enabledHelper[Boolean(repository.enabled)],\n            sortValue: `${repository.enabled}`\n        },\n        {\n            title: enabledHelper[Boolean(repository.gpgcheck)],\n            sortValue: `${repository.gpgcheck}`\n        }\n    ])),\n    filters: [\n        { type: 'textual' },\n        {\n            type: 'checkbox',\n            options: [\n                { label: 'Is enabled', value: 'true' },\n                { label: 'Not enabled', value: 'false' }\n            ]\n        },\n        {\n            type: 'checkbox',\n            options: [\n                { label: 'Is enabled', value: 'true' },\n                { label: 'Not enabled', value: 'false' }\n            ]\n        }\n    ]\n});\n\nexport const generalMapper = (data = [], title = '') => ({\n    cells: [{\n        title,\n        transforms: [sortable]\n    }],\n    rows: data.map(item => ([item])),\n    filters: [{ type: 'textual' }]\n});\n","import React from 'react';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\n\nconst fallback = (\n    <Bullseye>\n        <Spinner size=\"xl\" />\n    </Bullseye>\n);\n\nexport default fallback;\n","import React, { useEffect, useState, Fragment } from 'react';\nimport { Provider } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport GeneralInformation from '../GeneralInfo/GeneralInformation';\nexport { default as TextInputModal } from '../GeneralInfo/TextInputModal';\nimport fallback from '../SpinnerFallback';\nimport systemProfileStore from '../../store/systemProfileStore';\n\nconst GeneralInfoTab = ({ getRegistry, ...props }) => {\n    const [Wrapper, setWrapper] = useState();\n    useEffect(() => {\n        if (getRegistry) {\n            getRegistry()?.register?.({ systemProfileStore });\n        }\n\n        setWrapper(() => getRegistry ? Provider : Fragment);\n    }, []);\n    return Wrapper ? <Wrapper\n        {...getRegistry && {\n            store: getRegistry().getStore()\n        }}\n    >\n        <GeneralInformation {...props} />\n    </Wrapper> : fallback;\n};\n\nGeneralInfoTab.propTypes = {\n    getRegistry: PropTypes.func\n};\n\nexport default GeneralInfoTab;\n","import { ACTION_TYPES, CLEAR_NOTIFICATIONS, SET_INVENTORY_FILTER, SET_PAGINATION } from './action-types';\nimport { hosts, getEntitySystemProfile } from '../api';\nexport * from './system-issues-actions';\nexport * from './inventory-actions';\n\nexport const deleteEntity = (systems, displayName) => ({\n    type: ACTION_TYPES.REMOVE_ENTITY,\n    payload: hosts.apiHostDeleteById(systems),\n    meta: {\n        notifications: {\n            fulfilled: {\n                variant: 'success',\n                title: 'Delete operation finished',\n                description: `${displayName} has been successfully removed.`,\n                dismissable: true\n            }\n        },\n        systems\n    }\n});\n\nexport const setFilter = (filtersList) => ({\n    type: SET_INVENTORY_FILTER,\n    payload: {\n        filtersList\n    }\n});\n\nexport const clearNotifications = () => {\n    return ({\n        type: CLEAR_NOTIFICATIONS\n    });\n};\n\nexport const editDisplayName = (id, value) => ({\n    type: ACTION_TYPES.UPDATE_DISPLAY_NAME,\n    payload: hosts.apiHostPatchById([id], { display_name: value }), // eslint-disable-line camelcase\n    meta: {\n        id,\n        value,\n        notifications: {\n            fulfilled: {\n                variant: 'success',\n                title: `Display name for entity with ID ${id} has been changed to ${value}`,\n                dismissable: true\n            }\n        }\n    }\n});\n\nexport const setPagination = (page, perPage) => ({\n    type: SET_PAGINATION,\n    payload: {\n        page, perPage\n    }\n});\n\nexport const systemProfile = (itemId) => ({\n    type: ACTION_TYPES.LOAD_SYSTEM_PROFILE,\n    payload: getEntitySystemProfile(itemId, {})\n});\n\nexport const editAnsibleHost = (id, value) => ({\n    type: ACTION_TYPES.SET_ANSIBLE_HOST,\n    payload: hosts.apiHostPatchById([id], { ansible_host: value }), // eslint-disable-line camelcase\n    meta: {\n        notifications: {\n            fulfilled: {\n                variant: 'success',\n                title: 'Ansible hostname has been updated',\n                dismissable: true\n            }\n        }\n    }\n});\n","import bindActionCreators from '../utils/bindActionCreators';\nimport { wrapMapToPropsConstant, wrapMapToPropsFunc } from './wrapMapToProps';\nexport function whenMapDispatchToPropsIsFunction(mapDispatchToProps) {\n  return typeof mapDispatchToProps === 'function' ? wrapMapToPropsFunc(mapDispatchToProps, 'mapDispatchToProps') : undefined;\n}\nexport function whenMapDispatchToPropsIsMissing(mapDispatchToProps) {\n  return !mapDispatchToProps ? wrapMapToPropsConstant(function (dispatch) {\n    return {\n      dispatch: dispatch\n    };\n  }) : undefined;\n}\nexport function whenMapDispatchToPropsIsObject(mapDispatchToProps) {\n  return mapDispatchToProps && typeof mapDispatchToProps === 'object' ? wrapMapToPropsConstant(function (dispatch) {\n    return bindActionCreators(mapDispatchToProps, dispatch);\n  }) : undefined;\n}\nexport default [whenMapDispatchToPropsIsFunction, whenMapDispatchToPropsIsMissing, whenMapDispatchToPropsIsObject];","import { wrapMapToPropsConstant, wrapMapToPropsFunc } from './wrapMapToProps';\nexport function whenMapStateToPropsIsFunction(mapStateToProps) {\n  return typeof mapStateToProps === 'function' ? wrapMapToPropsFunc(mapStateToProps, 'mapStateToProps') : undefined;\n}\nexport function whenMapStateToPropsIsMissing(mapStateToProps) {\n  return !mapStateToProps ? wrapMapToPropsConstant(function () {\n    return {};\n  }) : undefined;\n}\nexport default [whenMapStateToPropsIsFunction, whenMapStateToPropsIsMissing];","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport verifyPlainObject from '../utils/verifyPlainObject';\nexport function defaultMergeProps(stateProps, dispatchProps, ownProps) {\n  return _extends({}, ownProps, stateProps, dispatchProps);\n}\nexport function wrapMergePropsFunc(mergeProps) {\n  return function initMergePropsProxy(dispatch, _ref) {\n    var displayName = _ref.displayName,\n        pure = _ref.pure,\n        areMergedPropsEqual = _ref.areMergedPropsEqual;\n    var hasRunOnce = false;\n    var mergedProps;\n    return function mergePropsProxy(stateProps, dispatchProps, ownProps) {\n      var nextMergedProps = mergeProps(stateProps, dispatchProps, ownProps);\n\n      if (hasRunOnce) {\n        if (!pure || !areMergedPropsEqual(nextMergedProps, mergedProps)) mergedProps = nextMergedProps;\n      } else {\n        hasRunOnce = true;\n        mergedProps = nextMergedProps;\n        if (process.env.NODE_ENV !== 'production') verifyPlainObject(mergedProps, displayName, 'mergeProps');\n      }\n\n      return mergedProps;\n    };\n  };\n}\nexport function whenMergePropsIsFunction(mergeProps) {\n  return typeof mergeProps === 'function' ? wrapMergePropsFunc(mergeProps) : undefined;\n}\nexport function whenMergePropsIsOmitted(mergeProps) {\n  return !mergeProps ? function () {\n    return defaultMergeProps;\n  } : undefined;\n}\nexport default [whenMergePropsIsFunction, whenMergePropsIsOmitted];","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"pure\", \"areStatesEqual\", \"areOwnPropsEqual\", \"areStatePropsEqual\", \"areMergedPropsEqual\"];\nimport connectAdvanced from '../components/connectAdvanced';\nimport shallowEqual from '../utils/shallowEqual';\nimport defaultMapDispatchToPropsFactories from './mapDispatchToProps';\nimport defaultMapStateToPropsFactories from './mapStateToProps';\nimport defaultMergePropsFactories from './mergeProps';\nimport defaultSelectorFactory from './selectorFactory';\n/*\n  connect is a facade over connectAdvanced. It turns its args into a compatible\n  selectorFactory, which has the signature:\n\n    (dispatch, options) => (nextState, nextOwnProps) => nextFinalProps\n  \n  connect passes its args to connectAdvanced as options, which will in turn pass them to\n  selectorFactory each time a Connect component instance is instantiated or hot reloaded.\n\n  selectorFactory returns a final props selector from its mapStateToProps,\n  mapStateToPropsFactories, mapDispatchToProps, mapDispatchToPropsFactories, mergeProps,\n  mergePropsFactories, and pure args.\n\n  The resulting final props selector is called by the Connect component instance whenever\n  it receives new props or store state.\n */\n\nfunction match(arg, factories, name) {\n  for (var i = factories.length - 1; i >= 0; i--) {\n    var result = factories[i](arg);\n    if (result) return result;\n  }\n\n  return function (dispatch, options) {\n    throw new Error(\"Invalid value of type \" + typeof arg + \" for \" + name + \" argument when connecting component \" + options.wrappedComponentName + \".\");\n  };\n}\n\nfunction strictEqual(a, b) {\n  return a === b;\n} // createConnect with default args builds the 'official' connect behavior. Calling it with\n// different options opens up some testing and extensibility scenarios\n\n\nexport function createConnect(_temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n      _ref$connectHOC = _ref.connectHOC,\n      connectHOC = _ref$connectHOC === void 0 ? connectAdvanced : _ref$connectHOC,\n      _ref$mapStateToPropsF = _ref.mapStateToPropsFactories,\n      mapStateToPropsFactories = _ref$mapStateToPropsF === void 0 ? defaultMapStateToPropsFactories : _ref$mapStateToPropsF,\n      _ref$mapDispatchToPro = _ref.mapDispatchToPropsFactories,\n      mapDispatchToPropsFactories = _ref$mapDispatchToPro === void 0 ? defaultMapDispatchToPropsFactories : _ref$mapDispatchToPro,\n      _ref$mergePropsFactor = _ref.mergePropsFactories,\n      mergePropsFactories = _ref$mergePropsFactor === void 0 ? defaultMergePropsFactories : _ref$mergePropsFactor,\n      _ref$selectorFactory = _ref.selectorFactory,\n      selectorFactory = _ref$selectorFactory === void 0 ? defaultSelectorFactory : _ref$selectorFactory;\n\n  return function connect(mapStateToProps, mapDispatchToProps, mergeProps, _ref2) {\n    if (_ref2 === void 0) {\n      _ref2 = {};\n    }\n\n    var _ref3 = _ref2,\n        _ref3$pure = _ref3.pure,\n        pure = _ref3$pure === void 0 ? true : _ref3$pure,\n        _ref3$areStatesEqual = _ref3.areStatesEqual,\n        areStatesEqual = _ref3$areStatesEqual === void 0 ? strictEqual : _ref3$areStatesEqual,\n        _ref3$areOwnPropsEqua = _ref3.areOwnPropsEqual,\n        areOwnPropsEqual = _ref3$areOwnPropsEqua === void 0 ? shallowEqual : _ref3$areOwnPropsEqua,\n        _ref3$areStatePropsEq = _ref3.areStatePropsEqual,\n        areStatePropsEqual = _ref3$areStatePropsEq === void 0 ? shallowEqual : _ref3$areStatePropsEq,\n        _ref3$areMergedPropsE = _ref3.areMergedPropsEqual,\n        areMergedPropsEqual = _ref3$areMergedPropsE === void 0 ? shallowEqual : _ref3$areMergedPropsE,\n        extraOptions = _objectWithoutPropertiesLoose(_ref3, _excluded);\n\n    var initMapStateToProps = match(mapStateToProps, mapStateToPropsFactories, 'mapStateToProps');\n    var initMapDispatchToProps = match(mapDispatchToProps, mapDispatchToPropsFactories, 'mapDispatchToProps');\n    var initMergeProps = match(mergeProps, mergePropsFactories, 'mergeProps');\n    return connectHOC(selectorFactory, _extends({\n      // used in error messages\n      methodName: 'connect',\n      // used to compute Connect's displayName from the wrapped component's displayName.\n      getDisplayName: function getDisplayName(name) {\n        return \"Connect(\" + name + \")\";\n      },\n      // if mapStateToProps is falsy, the Connect component doesn't subscribe to store state changes\n      shouldHandleStateChanges: Boolean(mapStateToProps),\n      // passed through to selectorFactory\n      initMapStateToProps: initMapStateToProps,\n      initMapDispatchToProps: initMapDispatchToProps,\n      initMergeProps: initMergeProps,\n      pure: pure,\n      areStatesEqual: areStatesEqual,\n      areOwnPropsEqual: areOwnPropsEqual,\n      areStatePropsEqual: areStatePropsEqual,\n      areMergedPropsEqual: areMergedPropsEqual\n    }, extraOptions));\n  };\n}\nexport default /*#__PURE__*/createConnect();"],"names":["InventoryTable","lazy","InventoryDetail","routes","table","detail","Routes","getRegistry","useContext","RegistryContext","useEffect","register","reducers","mergeWithEntities","tableReducer","technology","app","history","useHistory","pathName","window","location","pathname","split","searchParams","URLSearchParams","search","shift","Object","values","some","route","matchPath","href","path","document","baseURI","push","hash","Suspense","fallback","Switch","Route","exact","render","status","getAll","source","filterbyName","tagsFilter","reduce","tagsMapper","operatingSystem","page","perPage","rootClass","component","usePermissions","hasAccess","useInventoryWritePermissions","isLoading","dispatch","useDispatch","type","ACTION_TYPES","payload","writePermissions","insights","chrome","init","identifyApp","on","event","navId","className","InventoryApp","registry","value","Provider","store","getStore","basename","getBaseName","propTypes","useLogger","PropTypes","defaultProps","ReactDOM","getElementById","BiosCard","bios","detailLoaded","hasVendor","hasVersion","handleClick","hasReleaseDate","extra","title","items","vendor","version","isDate","releaseDate","date","Date","map","onClick","e","csm","extraShape","connect","systemProfile","systemProfileStore","loaded","biosSelector","VersionTooltip","egg","client","content","CollectionCard","collectionInformation","entity","hasClient","hasLastCheckIn","hasRegistered","hasInsightsId","hasReporter","DateFormat","updated","toLocaleString","created","insights_id","reporter","hasEgg","entityDetails","collectionInformationSelector","enabledRepos","repositories","enabled","length","disabled","filter","Boolean","join","ConfigurationCard","configuration","hasPackages","hasServices","hasProcesses","hasRepositories","packages","singular","target","generalMapper","services","processes","plural","repositoriesMapper","base_url","name","gpgcheck","configurationSelector","InfrastructureCard","infrastructure","hasType","hasIPv4","hasIPv6","hasInterfaces","ipv4","ipv6","nics","interfaceMapper","infrastructureSelector","OperatingSystemCard","systemInfo","hasRelease","hasKernelRelease","hasArchitecture","hasLastBoot","hasKernelModules","release","kernelRelease","architecture","bootTime","kernelModules","TitleWithPopover","headerContent","bodyContent","variant","SystemCard","isDisplayNameModalOpen","isAnsibleHostModalOpen","setState","fn","props","id","onCancel","preventDefault","ansible_host","fqdn","this","properties","setDisplayName","setAnsibleHost","hasHostName","hasDisplayName","hasAnsibleHostname","hasSAP","hasCPUs","hasSockets","hasCores","hasCPUFlags","hasRAM","state","Fragment","size","display_name","link","onShowDisplayModal","getAnsibleHost","onShowAnsibleModal","sapIds","cpuNumber","sockets","coresPerSocket","cpuFlags","ramSize","isOpen","ariaLabel","modalOuiaId","cancelOuiaId","confirmOuiaId","inputOuiaId","onSubmit","Component","storage","device","mount_point","options","propertiesSelector","reloadWrapper","then","data","hasItems","loadEntity","showTags","editDisplayName","editAnsibleHost","statusHelper","UP","DOWN","enabledHelper","true","false","cells","transforms","sortable","rows","item","mac_address","mtu","repository","sortValue","filters","label","GeneralInfoTab","useState","Wrapper","setWrapper","deleteEntity","systems","displayName","hosts","meta","notifications","fulfilled","description","dismissable","setFilter","filtersList","SET_INVENTORY_FILTER","clearNotifications","CLEAR_NOTIFICATIONS","setPagination","SET_PAGINATION","itemId","getEntitySystemProfile","mapDispatchToProps","wrapMapToProps","undefined","bindActionCreators","mapStateToProps","defaultMergeProps","stateProps","dispatchProps","ownProps","mergeProps","_ref","mergedProps","pure","areMergedPropsEqual","hasRunOnce","nextMergedProps","wrapMergePropsFunc","_excluded","match","arg","factories","i","result","Error","wrappedComponentName","strictEqual","a","b","createConnect","_temp","_ref$connectHOC","connectHOC","connectAdvanced","_ref$mapStateToPropsF","mapStateToPropsFactories","_ref$mapDispatchToPro","mapDispatchToPropsFactories","_ref$mergePropsFactor","mergePropsFactories","_ref$selectorFactory","selectorFactory","_ref2","_ref3","_ref3$pure","_ref3$areStatesEqual","areStatesEqual","_ref3$areOwnPropsEqua","areOwnPropsEqual","shallowEqual","_ref3$areStatePropsEq","areStatePropsEqual","_ref3$areMergedPropsE","extraOptions","initMapStateToProps","initMapDispatchToProps","initMergeProps","methodName","getDisplayName","shouldHandleStateChanges"],"sourceRoot":""}