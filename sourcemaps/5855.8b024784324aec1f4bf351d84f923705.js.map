{"version":3,"file":"js/5855.53497aa6791812f4dd32.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-core/dist/esm/components/Card/CardFooter.js","webpack:///./node_modules/@patternfly/react-core/dist/esm/components/Card/CardTitle.js","webpack:///./node_modules/@patternfly/react-core/dist/esm/components/Dropdown/Dropdown.js","webpack:///./src/components/InventoryDetail/TopBar.js","webpack:///./src/components/InventoryDetail/InsightsPrompt.js","webpack:///./src/components/InventoryDetail/DetailHeader.js","webpack:///./src/components/InventoryDetail/FactsInfo.js","webpack:///./src/components/InventoryDetail/helpers.js"],"sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Card/card';\nimport { css } from '@patternfly/react-styles';\nexport const CardFooter = (_a) => {\n    var { children = null, className = '', component = 'div' } = _a, props = __rest(_a, [\"children\", \"className\", \"component\"]);\n    const Component = component;\n    return (React.createElement(Component, Object.assign({ className: css(styles.cardFooter, className) }, props), children));\n};\nCardFooter.displayName = 'CardFooter';\n//# sourceMappingURL=CardFooter.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Card/card';\nimport { CardContext } from './Card';\nexport const CardTitle = (_a) => {\n    var { children = null, className = '', component = 'div' } = _a, props = __rest(_a, [\"children\", \"className\", \"component\"]);\n    const { cardId, registerTitleId } = React.useContext(CardContext);\n    const Component = component;\n    const titleId = cardId ? `${cardId}-title` : '';\n    React.useEffect(() => {\n        registerTitleId(titleId);\n        return () => registerTitleId('');\n    }, [registerTitleId, titleId]);\n    return (React.createElement(Component, Object.assign({ className: css(styles.cardTitle, className), id: titleId || undefined }, props), children));\n};\nCardTitle.displayName = 'CardTitle';\n//# sourceMappingURL=CardTitle.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Dropdown/dropdown';\nimport { DropdownContext } from './dropdownConstants';\nimport { DropdownWithContext } from './DropdownWithContext';\nimport { useOUIAId } from '../../helpers';\nexport const Dropdown = (_a) => {\n    var { onSelect, \n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    ref, // Types of Ref are different for React.FunctionComponent vs React.Component\n    ouiaId, ouiaSafe, alignments, contextProps, menuAppendTo = 'inline', isFlipEnabled = true, removeFindDomNode = false, zIndex = 9999 } = _a, props = __rest(_a, [\"onSelect\", \"ref\", \"ouiaId\", \"ouiaSafe\", \"alignments\", \"contextProps\", \"menuAppendTo\", \"isFlipEnabled\", \"removeFindDomNode\", \"zIndex\"]);\n    return (React.createElement(DropdownContext.Provider, { value: Object.assign({ onSelect: event => onSelect && onSelect(event), toggleTextClass: styles.dropdownToggleText, toggleIconClass: styles.dropdownToggleImage, toggleIndicatorClass: styles.dropdownToggleIcon, menuClass: styles.dropdownMenu, itemClass: styles.dropdownMenuItem, toggleClass: styles.dropdownToggle, baseClass: styles.dropdown, baseComponent: 'div', sectionClass: styles.dropdownGroup, sectionTitleClass: styles.dropdownGroupTitle, sectionComponent: 'section', disabledClass: styles.modifiers.disabled, plainTextClass: styles.modifiers.text, ouiaId: useOUIAId(Dropdown.displayName, ouiaId), ouiaSafe, ouiaComponentType: Dropdown.displayName, alignments }, contextProps) },\n        React.createElement(DropdownWithContext, Object.assign({ menuAppendTo: menuAppendTo, isFlipEnabled: isFlipEnabled, removeFindDomNode: removeFindDomNode, zIndex: zIndex }, props))));\n};\nDropdown.displayName = 'Dropdown';\n//# sourceMappingURL=Dropdown.js.map","import React, { Fragment, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { DeleteModal, TagWithDialog, TagsModal } from '../../Utilities/index';\nimport {\n  Skeleton,\n  SkeletonSize,\n} from '@redhat-cloud-services/frontend-components/Skeleton';\nimport {\n  Button,\n  Dropdown,\n  DropdownItem,\n  DropdownPosition,\n  DropdownToggle,\n  Flex,\n  FlexItem,\n  Split,\n  SplitItem,\n  Title,\n} from '@patternfly/react-core';\nimport { redirectToInventoryList } from './helpers';\nimport { useDispatch } from 'react-redux';\nimport { toggleDrawer } from '../../store/actions';\n\n/**\n * Top inventory bar with title, buttons (namely remove from inventory and inventory detail button) and actions.\n * Remove from inventory button requires remove modal, which is included at bottom of this component.\n * @param {*} props namely entity and if entity is loaded.\n */\nconst TopBar = ({\n  entity,\n  loaded,\n  actions,\n  deleteEntity,\n  addNotification,\n  hideInvLink,\n  onBackToListClick,\n  showDelete,\n  showInventoryDrawer,\n  TitleWrapper,\n  TagsWrapper,\n  DeleteWrapper,\n  ActionsWrapper,\n  showTags,\n}) => {\n  const dispatch = useDispatch();\n  const [isOpen, setIsOpen] = useState(false);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const inventoryActions = [\n    ...(!hideInvLink\n      ? [\n          {\n            title: 'View system in Inventory',\n            component: 'a',\n            href: `./insights/inventory/${entity?.id}`,\n          },\n        ]\n      : []),\n    ...(actions || []),\n  ];\n\n  return (\n    <Split className=\"ins-c-inventory__detail--header\">\n      <SplitItem isFilled>\n        {loaded ? (\n          <Flex>\n            <FlexItem>\n              <TitleWrapper>\n                <Title headingLevel=\"h1\" size=\"2xl\">\n                  {entity && entity.display_name}\n                </Title>\n              </TitleWrapper>\n            </FlexItem>\n            {showTags && (\n              <FlexItem>\n                <TagsWrapper>\n                  <TagWithDialog\n                    count={entity && entity.tags && entity.tags.length}\n                    systemId={entity && entity.id}\n                  />\n                  <TagsModal />\n                </TagsWrapper>\n              </FlexItem>\n            )}\n          </Flex>\n        ) : (\n          <Skeleton size={SkeletonSize.md} />\n        )}\n      </SplitItem>\n      {\n        <SplitItem>\n          {loaded ? (\n            <Flex>\n              {showDelete && (\n                <FlexItem>\n                  <DeleteWrapper>\n                    <Button\n                      onClick={() => setIsModalOpen(true)}\n                      variant=\"secondary\"\n                    >\n                      Delete\n                    </Button>\n                  </DeleteWrapper>\n                </FlexItem>\n              )}\n              {inventoryActions?.length > 0 && (\n                <FlexItem>\n                  <ActionsWrapper>\n                    <Dropdown\n                      onSelect={() => setIsOpen(false)}\n                      toggle={\n                        <DropdownToggle\n                          onToggle={(isOpen) => setIsOpen(isOpen)}\n                        >\n                          Actions\n                        </DropdownToggle>\n                      }\n                      isOpen={isOpen}\n                      position={DropdownPosition.right}\n                      dropdownItems={inventoryActions.map(\n                        ({ title, ...action }, key) => (\n                          <DropdownItem\n                            key={key}\n                            component=\"button\"\n                            onClick={(event) =>\n                              action.onClick(event, action, action.key || key)\n                            }\n                            {...action}\n                          >\n                            {title}\n                          </DropdownItem>\n                        )\n                      )}\n                    />\n                  </ActionsWrapper>\n                </FlexItem>\n              )}\n              <FlexItem>\n                {showInventoryDrawer && (\n                  <Button onClick={() => dispatch(toggleDrawer(true))}>\n                    Show more information\n                  </Button>\n                )}\n              </FlexItem>\n            </Flex>\n          ) : (\n            <Skeleton size={SkeletonSize.lg} />\n          )}\n        </SplitItem>\n      }\n      {isModalOpen && (\n        <DeleteModal\n          className=\"sentry-mask data-hj-suppress\"\n          handleModalToggle={() => setIsModalOpen(!isModalOpen)}\n          isModalOpen={isModalOpen}\n          currentSytems={entity}\n          onConfirm={() => {\n            addNotification({\n              id: 'remove-initiated',\n              variant: 'warning',\n              title: 'Delete operation initiated',\n              description: `Removal of ${entity.display_name} started.`,\n              dismissable: false,\n            });\n            deleteEntity([entity.id], entity.display_name, () =>\n              redirectToInventoryList(entity.id, onBackToListClick)\n            );\n            setIsModalOpen(false);\n          }}\n        />\n      )}\n    </Split>\n  );\n};\n\nTopBar.propTypes = {\n  entity: PropTypes.object,\n  loaded: PropTypes.bool,\n  showDelete: PropTypes.bool,\n  hideInvLink: PropTypes.bool,\n  showInventoryDrawer: PropTypes.bool,\n  showTags: PropTypes.bool,\n  actions: PropTypes.arrayOf(\n    PropTypes.shape({\n      key: PropTypes.string,\n      title: PropTypes.node,\n      onClick: PropTypes.func,\n    })\n  ),\n  deleteEntity: PropTypes.func,\n  addNotification: PropTypes.func,\n  onBackToListClick: PropTypes.func,\n  TitleWrapper: PropTypes.elementType,\n  TagsWrapper: PropTypes.elementType,\n  DeleteWrapper: PropTypes.elementType,\n  ActionsWrapper: PropTypes.elementType,\n};\n\nTopBar.defaultProps = {\n  actions: [],\n  loaded: false,\n  hideInvLink: false,\n  showDelete: false,\n  showInventoryDrawer: false,\n  deleteEntity: () => undefined,\n  addNotification: () => undefined,\n  onBackToListClick: () => undefined,\n  TitleWrapper: Fragment,\n  TitleWTagsWrapperrapper: Fragment,\n  DeleteWrapper: Fragment,\n  ActionsWrapper: Fragment,\n};\n\nexport default TopBar;\n","import React from 'react';\nimport {\n  Alert,\n  Button,\n  Card,\n  CardBody,\n  CardFooter,\n  CardTitle,\n  ClipboardCopy,\n  Grid,\n  GridItem,\n  Text,\n  TextContent,\n  TextList,\n  TextListItem,\n  TextVariants,\n} from '@patternfly/react-core';\n\nconst InsightsPrompt = () => {\n  return (\n    <Alert\n      variant=\"info\"\n      isInline\n      title=\"Your insights-client is not reporting\"\n    >\n      <Grid>\n        <GridItem>\n          <Grid hasGutter>\n            <GridItem span={4}>\n              <TextContent\n                style={{\n                  '--pf-c-content--LineHeight': '1',\n                  '--pf-c-content--FontSize': '0.9rem',\n                }}\n              >\n                <Text component={TextVariants.p}>\n                  With Insights you can easly:\n                </Text>\n                <TextList\n                  component=\"ul\"\n                  style={{\n                    '--pf-c-content--ul--PaddingLeft': '0',\n                    '--pf-c-content--ul--MarginLeft': '1rem',\n                  }}\n                >\n                  <TextListItem>Optimize your IT Operations</TextListItem>\n                  <TextListItem>\n                    Manage your security and compliance\n                  </TextListItem>\n                  <TextListItem>\n                    Resolve operational issues quickly\n                  </TextListItem>\n                </TextList>\n              </TextContent>\n            </GridItem>\n            <GridItem span={4}>\n              <Card isCompact>\n                <CardTitle>Client setup</CardTitle>\n                <CardBody>\n                  Make sure the client is properly installed and registered\n                </CardBody>\n                <CardFooter>\n                  <ClipboardCopy isCode isReadOnly variant={'expansion'}>\n                    {\n                      'yum install -y insights-client \\ninsights-client --register'\n                    }\n                  </ClipboardCopy>\n                </CardFooter>\n              </Card>\n            </GridItem>\n            <GridItem span={4}>\n              <Card isCompact style={{ height: '100%' }}>\n                <CardTitle>Configure troubleshooting</CardTitle>\n                <CardBody>\n                  Proceed with verification on the client to ensure\n                  insights-client is properly running and collecting data\n                </CardBody>\n                <CardFooter>\n                  <Button\n                    component=\"a\"\n                    target=\"_blank\"\n                    variant=\"link\"\n                    href=\"https://access.redhat.com/solutions/6758841\"\n                    isInline\n                  >\n                    Host not reporting data to Red Hat Insights\n                  </Button>\n                </CardFooter>\n              </Card>\n            </GridItem>\n          </Grid>\n        </GridItem>\n        <GridItem>\n          <Button\n            component=\"a\"\n            target=\"_blank\"\n            variant=\"link\"\n            href=\"https://console.redhat.com/security/insights\"\n            isInline\n          >\n            How does Red Hat keep data secure?\n          </Button>\n        </GridItem>\n      </Grid>\n    </Alert>\n  );\n};\n\nexport default InsightsPrompt;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport './InventoryDetail.scss';\nimport TopBar from './TopBar';\nimport FactsInfo from './FactsInfo';\nimport './InventoryDetail.scss';\nimport InsightsPrompt from './InsightsPrompt';\nimport { verifyCulledReporter } from '../../Utilities/sharedFunctions';\nimport PageHeader from '@redhat-cloud-services/frontend-components/PageHeader';\nimport classnames from 'classnames';\nimport { REPORTER_PUPTOO } from '../../Utilities/constants';\n\nconst HeaderInfo = ({\n  entity,\n  loaded,\n  UUIDWrapper,\n  LastSeenWrapper,\n  children,\n  ...props\n}) => (\n  <Fragment>\n    <TopBar entity={entity} loaded={loaded} {...props} />\n    <FactsInfo\n      loaded={loaded}\n      entity={entity}\n      UUIDWrapper={UUIDWrapper}\n      LastSeenWrapper={LastSeenWrapper}\n    />\n    {loaded &&\n      verifyCulledReporter(entity?.per_reporter_staleness, REPORTER_PUPTOO) && (\n        <InsightsPrompt />\n      )}\n    {children}\n  </Fragment>\n);\n\nconst DetailHeader = ({\n  shouldWrapAsPage,\n  BreadcrumbWrapper,\n  additionalClasses,\n  ...props\n}) => {\n  return shouldWrapAsPage ? (\n    <PageHeader\n      className={classnames(\n        'pf-m-light ins-inventory-detail',\n        additionalClasses\n      )}\n    >\n      {BreadcrumbWrapper}\n      <HeaderInfo {...props} />\n    </PageHeader>\n  ) : (\n    <HeaderInfo {...props} />\n  );\n};\n\nHeaderInfo.propTypes = {\n  hideInvLink: PropTypes.bool,\n  showTags: PropTypes.bool,\n  showDelete: PropTypes.bool,\n  showInventoryDrawer: PropTypes.bool,\n  actions: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.node,\n      onClick: PropTypes.func,\n      key: PropTypes.string,\n    })\n  ),\n  onBackToListClick: PropTypes.func,\n  children: PropTypes.node,\n  UUIDWrapper: PropTypes.elementType,\n  LastSeenWrapper: PropTypes.elementType,\n  TitleWrapper: PropTypes.elementType,\n  TagsWrapper: PropTypes.elementType,\n  DeleteWrapper: PropTypes.elementType,\n  ActionsWrapper: PropTypes.elementType,\n  inventoryId: PropTypes.string,\n  deleteEntity: PropTypes.func,\n  entity: PropTypes.object,\n  loaded: PropTypes.bool,\n  addNotification: PropTypes.func,\n};\nDetailHeader.propTypes = {\n  BreadcrumbWrapper: PropTypes.elementType,\n  shouldWrapAsPage: PropTypes.bool,\n  additionalClasses: PropTypes.object,\n};\n\nexport default DetailHeader;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { Flex, FlexItem, Grid, GridItem } from '@patternfly/react-core';\nimport {\n  Skeleton,\n  SkeletonSize,\n} from '@redhat-cloud-services/frontend-components/Skeleton';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { CullingInformation } from '@redhat-cloud-services/frontend-components/CullingInfo';\nimport { getFact } from './helpers';\nimport InsightsDisconnected from '../../Utilities/InsightsDisconnected';\nimport { verifyCulledReporter } from '../../Utilities/sharedFunctions';\nimport { REPORTER_PUPTOO } from '../../Utilities/constants';\n/**\n * Basic information about system.\n * UUID and last seen.\n * @param {*} props entity and if entity is loaded.\n */\nconst FactsInfo = ({\n  entity,\n  loaded,\n  UUIDWrapper,\n  LastSeenWrapper,\n  ...props\n}) => (\n  <Grid className=\"ins-entity-facts\" {...props}>\n    <GridItem md={6}>\n      <Flex>\n        <FlexItem>UUID:</FlexItem>\n        <FlexItem grow={{ default: 'grow' }}>\n          {loaded ? (\n            getFact(`id`, entity) || ' '\n          ) : (\n            <Skeleton size={SkeletonSize.md} fontSize=\"sm\" />\n          )}\n        </FlexItem>\n      </Flex>\n      <Flex>\n        <FlexItem>Last seen:</FlexItem>\n        <FlexItem grow={{ default: 'grow' }}>\n          {loaded ? (\n            <LastSeenWrapper>\n              {CullingInformation ? (\n                <CullingInformation\n                  culled={getFact('culled_timestamp', entity)}\n                  staleWarning={getFact('stale_warning_timestamp', entity)}\n                  stale={getFact('stale_timestamp', entity)}\n                  currDate={new Date()}\n                >\n                  <DateFormat date={getFact('updated', entity)} type=\"exact\" />\n                </CullingInformation>\n              ) : (\n                <DateFormat date={getFact('updated', entity)} type=\"exact\" />\n              )}\n            </LastSeenWrapper>\n          ) : (\n            <Skeleton size={SkeletonSize.md} fontSize=\"sm\" />\n          )}\n          {loaded &&\n            verifyCulledReporter(\n              getFact('per_reporter_staleness', entity),\n              REPORTER_PUPTOO\n            ) && <InsightsDisconnected />}\n        </FlexItem>\n      </Flex>\n    </GridItem>\n  </Grid>\n);\n\nFactsInfo.propTypes = {\n  loaded: PropTypes.bool,\n  entity: PropTypes.object,\n  UUIDWrapper: PropTypes.elementType,\n  LastSeenWrapper: PropTypes.elementType,\n};\n\nFactsInfo.defaultProps = {\n  UUIDWrapper: Fragment,\n  LastSeenWrapper: Fragment,\n};\n\nexport default FactsInfo;\n","import get from 'lodash/get';\n\nexport const redirectToInventoryList = (id, onBackToListClick) => {\n  if (onBackToListClick) {\n    onBackToListClick();\n  } else {\n    /**\n     * Prevent the case that refferer has the same URL as current browser URL is\n     */\n    if (\n      document.referrer &&\n      document.referrer !==\n        `${document.location.origin}${document.location.pathname}`\n    ) {\n      history.back();\n    } else {\n      location.href = location.pathname.replace(\n        new RegExp(`${[id]}.*`, 'g'),\n        ''\n      );\n    }\n  }\n};\n\nexport const getFact = (path, factDict) => get(factDict, path, undefined);\n"],"names":["CardFooter","_a","children","className","component","props","__rest","Component","Object","assign","displayName","CardTitle","cardId","registerTitleId","titleId","id","undefined","Dropdown","onSelect","ref","ouiaId","ouiaSafe","alignments","contextProps","menuAppendTo","isFlipEnabled","removeFindDomNode","zIndex","value","event","toggleTextClass","toggleIconClass","toggleIndicatorClass","menuClass","itemClass","toggleClass","baseClass","baseComponent","sectionClass","sectionTitleClass","sectionComponent","disabledClass","plainTextClass","ouiaComponentType","TopBar","entity","loaded","actions","deleteEntity","addNotification","hideInvLink","onBackToListClick","showDelete","showInventoryDrawer","TitleWrapper","TagsWrapper","DeleteWrapper","ActionsWrapper","showTags","dispatch","useDispatch","useState","isOpen","setIsOpen","isModalOpen","setIsModalOpen","inventoryActions","title","href","Split","SplitItem","isFilled","Flex","FlexItem","Title","headingLevel","size","display_name","TagWithDialog","count","tags","length","systemId","TagsModal","Skeleton","SkeletonSize","Button","onClick","variant","toggle","DropdownToggle","onToggle","position","DropdownPosition","dropdownItems","map","key","action","DropdownItem","toggleDrawer","DeleteModal","handleModalToggle","currentSytems","onConfirm","description","dismissable","redirectToInventoryList","propTypes","PropTypes","defaultProps","Fragment","TitleWTagsWrapperrapper","Alert","isInline","Grid","GridItem","hasGutter","span","TextContent","style","Text","TextVariants","TextList","TextListItem","T","Card","isCompact","CardBody","ClipboardCopy","isCode","isReadOnly","height","target","HeaderInfo","UUIDWrapper","LastSeenWrapper","FactsInfo","verifyCulledReporter","per_reporter_staleness","REPORTER_PUPTOO","DetailHeader","shouldWrapAsPage","BreadcrumbWrapper","additionalClasses","PageHeader","classnames","inventoryId","md","grow","default","getFact","fontSize","CullingInformation","culled","staleWarning","stale","currDate","Date","date","type","document","referrer","location","origin","pathname","history","back","replace","RegExp","path","factDict","get"],"sourceRoot":""}