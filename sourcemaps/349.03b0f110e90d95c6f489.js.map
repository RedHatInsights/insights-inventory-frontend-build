{"version":3,"sources":["webpack:///./src/api/api.js","webpack:///./src/api/systemIssues.js","webpack:///./src/store/inventory-actions.js"],"names":["INVENTORY_API_BASE","hosts","HostsApi","undefined","instance","tags","TagsApi","getEntitySystemProfile","item","apiHostGetHostSystemProfileById","mapData","facts","rawFacts","reduce","acc","curr","namespace","flatMap","oneFact","Object","values","map","os_release","release","display_name","fqdn","id","mapTags","data","results","orderBy","orderDirection","length","apiHostGetHostTags","per_page","then","row","catch","constructTags","tagFilters","category","tagValue","value","tagKey","filtersReducer","filter","hostnameOrId","staleFilter","registeredWithFilter","getEntities","items","showTags","controller","hasItems","filters","perPage","page","fields","system_profile","options","apiHostGetHostById","cancelToken","token","keys","query","generateFilter","result","mergeArraysByKey","console","error","apiHostGetHostList","getTags","systemId","search","pagination","getAllTags","defaultFilters","apiTagGetTags","systemIssuesInstance","cves","Promise","all","impact","low","moderate","important","critical","patch","advisor","compliance","operationName","variables","loadEntities","defaultGetEntities","config","itemIds","Boolean","isFilterDisabled","name","hideFilters","updatedFilters","type","ACTION_TYPES","payload","sortBy","key","direction","find","meta","updateEntities","UPDATE_ENTITIES","filterSelect","selectedItem","FILTER_SELECT","loadEntity","selectEntity","selected","SELECT_ENTITY","setSort","CHANGE_SORT","filterEntities","filterString","FILTER_ENTITIES","detailSelect","appName","APPLICATION_SELECTED","entitiesLoading","isLoading","ENTITIES_LOADING","clearFilters","CLEAR_FILTERS","loadTags","count","tagsCount","toggleTagModal","isOpen","TOGGLE_TAG_MODAL","fetchAllTags","configChanged","CONFIG_CHANGED","toggleDrawer","isOpened","TOGGLE_DRAWER"],"mappings":"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","file":"js/349.84b9b8be6e861ac25d12.js","sourcesContent":["import 'abortcontroller-polyfill/dist/polyfill-patch-fetch';\nexport const INVENTORY_API_BASE = '/api/inventory/v1';\nimport flatMap from 'lodash/flatMap';\n\nimport instance from '@redhat-cloud-services/frontend-components-utilities/interceptors';\nimport { generateFilter, mergeArraysByKey } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport { HostsApi, TagsApi } from '@redhat-cloud-services/host-inventory-client';\nimport { defaultFilters } from '../Utilities/constants';\n\nexport { instance };\nexport const hosts = new HostsApi(undefined, INVENTORY_API_BASE, instance);\nexport const tags = new TagsApi(undefined, INVENTORY_API_BASE, instance);\n\nexport const getEntitySystemProfile = (item) => hosts.apiHostGetHostSystemProfileById([item]);\n\n/* eslint camelcase: off */\nexport const mapData = ({ facts = {}, ...oneResult }) => ({\n    ...oneResult,\n    rawFacts: facts,\n    facts: {\n        ...facts.reduce((acc, curr) => ({ ...acc, [curr.namespace]: curr.facts }), {}),\n        ...flatMap(facts, (oneFact => Object.values(oneFact)))\n        .map(item => typeof item !== 'string' ? ({\n            ...item,\n            // eslint-disable-next-line camelcase\n            os_release: item.os_release || item.release,\n            // eslint-disable-next-line camelcase\n            display_name: item.display_name || item.fqdn || item.id\n        }) : item)\n        .reduce(\n            (acc, curr) => ({ ...acc, ...(typeof curr !== 'string') ? curr : {} }), {}\n        )\n    }\n});\n\nexport const mapTags = (data = { results: [] }, { orderBy, orderDirection } = {}) => {\n    if (data.results.length > 0) {\n        return hosts.apiHostGetHostTags(data.results.map(({ id }) => id), data.per_page, 1, orderBy, orderDirection)\n        .then(({ results: tags }) => ({\n            ...data,\n            results: data.results.map(row => ({ ...row, tags: tags[row.id] || [] }))\n        }))\n        .catch(() => ({\n            ...data,\n            results: data.results.map(row => ({\n                ...row,\n                tags: []\n            }))\n        }));\n    }\n\n    return data;\n};\n\nexport const constructTags = (tagFilters) => {\n    return flatMap(\n        tagFilters,\n        ({ values, category: namespace }) => values.map(({ value: tagValue, tagKey }) => (\n            `${namespace ? `${namespace}/` : ''}${tagKey}${tagValue ? `=${tagValue}` : ''}`\n        ))\n    ) || '';\n};\n\nexport const filtersReducer = (acc, filter = {}) => ({\n    ...acc,\n    ...filter.value === 'hostname_or_id' && { hostnameOrId: filter.filter },\n    ...'tagFilters' in filter && { tagFilters: filter.tagFilters },\n    ...'staleFilter' in filter && { staleFilter: filter.staleFilter },\n    ...'registeredWithFilter' in filter && { registeredWithFilter: filter.registeredWithFilter }\n});\n\nexport async function getEntities(items, {\n    controller,\n    hasItems,\n    filters,\n    per_page: perPage,\n    page,\n    orderBy,\n    orderDirection,\n    fields = { system_profile: ['operating_system'] },\n    ...options\n}, showTags) {\n    if (hasItems && items.length > 0) {\n        let data = await hosts.apiHostGetHostById(\n            items,\n            undefined,\n            undefined,\n            undefined,\n            undefined,\n            undefined,\n            { cancelToken: controller && controller.token }\n        );\n\n        if (fields && Object.keys(fields).length) {\n            try {\n                const result = await hosts.apiHostGetHostSystemProfileById(\n                    items,\n                    undefined,\n                    undefined,\n                    undefined,\n                    undefined,\n                    undefined,\n                    undefined,\n                    {\n                        cancelToken: controller && controller.token,\n                        query: generateFilter(fields, 'fields')\n                    }\n                );\n\n                data = {\n                    ...data,\n                    results: mergeArraysByKey([\n                        data?.results,\n                        result?.results || []\n                    ], 'id')\n                };\n            } catch (e) {\n                console.error(e);\n            }\n        }\n\n        data = showTags ? await mapTags(data) : data;\n\n        data = {\n            ...data,\n            filters,\n            results: data.results.map(result => mapData({\n                ...result,\n                display_name: result.display_name || result.fqdn || result.id\n            }))\n        };\n\n        return data;\n    } else if (!hasItems) {\n        return hosts.apiHostGetHostList(\n            undefined,\n            undefined,\n            filters.hostnameOrId,\n            undefined,\n            undefined,\n            perPage,\n            page,\n            orderBy,\n            orderDirection,\n            filters.staleFilter,\n            [\n                ...constructTags(filters.tagFilters),\n                ...options.tags || []\n            ],\n            filters.registeredWithFilter,\n            undefined,\n            undefined,\n            {\n                cancelToken: controller && controller.token,\n                query: {\n                    ...(options.filter && Object.keys(options.filter).length && generateFilter(options.filter)),\n                    ...(fields && Object.keys(fields).length && generateFilter(fields, 'fields'))\n                }\n            }\n        )\n        .then((data) => showTags ? mapTags(data, { orderBy, orderDirection }) : data)\n        .then(({ results = [], ...data } = {}) => ({\n            ...data,\n            filters,\n            results: results.map(result => mapData({\n                ...result,\n                display_name: result.display_name || result.fqdn || result.id\n            }))\n        }));\n    }\n\n    return {\n        page,\n        per_page: perPage,\n        results: []\n    };\n}\n\nexport function getTags(systemId, search, { pagination } = { pagination: {} }) {\n    return hosts.apiHostGetHostTags(\n        systemId,\n        pagination.perPage || 10,\n        pagination.page || 1,\n        undefined,\n        undefined,\n        search\n    );\n}\n\nexport function getAllTags(search, { filters, pagination, ...options } = { pagination: {} }) {\n    const {\n        tagFilters,\n        staleFilter,\n        registeredWithFilter\n    } = filters ? filters.reduce(filtersReducer, defaultFilters) : defaultFilters;\n    return tags.apiTagGetTags(\n        [\n            ...tagFilters ? constructTags(tagFilters) : [],\n            ...options.tags || []\n        ],\n        'tag',\n        'ASC',\n        (pagination && pagination.perPage) || 10,\n        (pagination && pagination.page) || 1,\n        staleFilter,\n        search,\n        registeredWithFilter\n    );\n}\n","import instance from '@redhat-cloud-services/frontend-components-utilities/interceptors';\nexport const systemIssuesInstance = instance;\n\nexport const cves = async (systemId) => {\n    try {\n        const [low, moderate, important, critical] = await Promise.all([2, 4, 5, 7].map((impact) => (\n            instance.get(\n                `/api/vulnerability//v1/systems/${systemId}/cves?page=1&page_size=1&impact=${impact}`\n            )\n        )));\n        return { low, moderate, important, critical };\n    } catch (_e) {\n        return {};\n    }\n};\n\nexport const patch = async (systemId) => {\n    try {\n        return await instance.get(`/api/patch/v1/systems/${systemId}`);\n    } catch (_e) {\n        return {};\n    }\n};\n\nexport const advisor = async (systemId) => {\n    try {\n        return await instance.get(`/api/insights/v1/system/${systemId}/reports/`);\n    } catch (_e) {\n        return {};\n    }\n};\n\nexport const compliance = async (systemId) => {\n    const query = `query System($systemId: String!) {\n        system(id: $systemId) {\n            id\n            name\n            profiles {\n                id\n                name\n                refId\n                compliant\n                rulesFailed\n                rulesPassed\n                lastScanned\n                score\n                __typename\n            }\n            __typename\n        }\n    }`;\n    try {\n        return await instance.post('/api/compliance/graphql', {\n            operationName: 'System',\n            query,\n            variables: {\n                systemId\n            }\n        });\n    } catch (_e) {\n        return {};\n    }\n};\n","import {\n    ACTION_TYPES,\n    SELECT_ENTITY,\n    CHANGE_SORT,\n    FILTER_ENTITIES,\n    APPLICATION_SELECTED,\n    FILTER_SELECT,\n    UPDATE_ENTITIES,\n    ENTITIES_LOADING,\n    CLEAR_FILTERS,\n    TOGGLE_TAG_MODAL,\n    CONFIG_CHANGED,\n    TOGGLE_DRAWER\n} from './action-types';\nimport {\n    getEntities as defaultGetEntities,\n    getEntitySystemProfile,\n    hosts,\n    getAllTags,\n    getTags,\n    filtersReducer\n} from '../api';\nimport { defaultFilters } from '../Utilities/constants';\n\nexport const loadEntities = (items = [], { filters, ...config }, { showTags } = {}, getEntities = defaultGetEntities) => {\n    const itemIds = items.reduce((acc, curr) => (\n        [\n            ...acc,\n            curr && typeof curr === 'string' ? curr : curr.id\n        ]\n    ), []).filter(Boolean);\n\n    const isFilterDisabled = (name) => config.hideFilters?.[name] ||\n    (config.hideFilters?.all && config.hideFilters?.[name] !== false);\n\n    const updatedFilters = filters ? filters.reduce(filtersReducer, {\n        ...defaultFilters,\n        ...filters.length === 0 && { registeredWithFilter: [] },\n        ...(isFilterDisabled('stale') && { staleFilter: undefined }),\n        ...(isFilterDisabled('registeredWith') && { registeredWithFilter: undefined })\n    }) : { ...defaultFilters,\n        ...(isFilterDisabled('stale') && { staleFilter: undefined }),\n        ...(isFilterDisabled('registeredWith') && { registeredWithFilter: undefined })\n    };\n\n    const orderBy = config.orderBy || 'updated';\n    const orderDirection = config.orderDirection || 'DESC';\n\n    return {\n        type: ACTION_TYPES.LOAD_ENTITIES,\n        payload: getEntities(itemIds, {\n            filters: updatedFilters,\n            ...config,\n            orderBy,\n            orderDirection\n        }, showTags, defaultGetEntities).then(({ results, ...data }) => ({\n            ...data,\n            filters,\n            sortBy: { key: orderBy, direction: orderDirection },\n            results: items.length > 0 ? items.map((item) => ({\n                ...item.id ? item : { id: item },\n                ...results.find(({ id }) => id === item || id === item.id) || {}\n            })) : results,\n            page: config.page || (data?.page),\n            // eslint-disable-next-line camelcase\n            per_page: config.per_page || (data?.per_page),\n            hideFilters: config.hideFilters\n        })),\n        meta: {\n            showTags\n        }\n    };\n};\n\nexport const updateEntities = (items = []) => ({\n    type: UPDATE_ENTITIES,\n    payload: {\n        results: items\n    }\n});\n\nexport const filterSelect = (selectedItem) => ({\n    type: FILTER_SELECT,\n    payload: selectedItem\n});\n\nexport const loadEntity = (id, config, { showTags }) => ({\n    type: ACTION_TYPES.LOAD_ENTITY,\n    payload: defaultGetEntities(id, config, showTags),\n    meta: {\n        showTags\n    }\n});\n\nexport const selectEntity = (id, selected) => ({\n    type: SELECT_ENTITY,\n    payload: { id, selected }\n});\n\nexport const setSort = (data) => ({\n    type: CHANGE_SORT,\n    payload: data\n});\n\nexport const filterEntities = (key, filterString) => ({\n    type: FILTER_ENTITIES,\n    payload: { key, filterString }\n});\n\nexport const detailSelect = (appName) => ({\n    type: APPLICATION_SELECTED,\n    payload: { appName }\n});\n\nexport const entitiesLoading = (isLoading = true) => ({\n    type: ENTITIES_LOADING,\n    payload: { isLoading }\n});\n\nexport const clearFilters = () => ({\n    type: CLEAR_FILTERS\n});\n\nexport const systemProfile = (itemId) => ({\n    type: ACTION_TYPES.LOAD_SYSTEM_PROFILE,\n    payload: getEntitySystemProfile(itemId, {})\n});\n\nexport const editDisplayName = (id, value) => ({\n    type: ACTION_TYPES.SET_DISPLAY_NAME,\n    payload: hosts.apiHostPatchHost(id, { display_name: value }), // eslint-disable-line camelcase\n    meta: {\n        notifications: {\n            fulfilled: {\n                variant: 'success',\n                title: 'Display name has been updated',\n                dismissable: true\n            }\n        }\n    }\n});\n\nexport const editAnsibleHost = (id, value) => ({\n    type: ACTION_TYPES.SET_ANSIBLE_HOST,\n    payload: hosts.apiHostPatchHost(id, { ansible_host: value }), // eslint-disable-line camelcase\n    meta: {\n        notifications: {\n            fulfilled: {\n                variant: 'success',\n                title: 'Ansible hostname has been updated',\n                dismissable: true\n            }\n        }\n    }\n});\n\nexport const loadTags = (systemId, search, options, count) => ({\n    type: ACTION_TYPES.LOAD_TAGS,\n    payload: getTags(systemId, search, options),\n    meta: {\n        tagsCount: count,\n        systemId\n    }\n});\n\nexport const toggleTagModal = (isOpen) => ({\n    type: TOGGLE_TAG_MODAL,\n    payload: { isOpen }\n});\n\nexport const fetchAllTags = (search, options) => ({\n    type: ACTION_TYPES.ALL_TAGS,\n    payload: getAllTags(search, options)\n});\n\nexport const deleteEntity = (systems, displayName) => ({\n    type: ACTION_TYPES.REMOVE_ENTITY,\n    payload: hosts.apiHostDeleteById(systems),\n    meta: {\n        notifications: {\n            fulfilled: {\n                variant: 'success',\n                title: 'Delete operation finished',\n                description: `${displayName} has been successfully removed.`,\n                dismissable: true\n            }\n        },\n        systems\n    }\n});\n\nexport const configChanged = (config) => ({\n    type: CONFIG_CHANGED,\n    payload: config\n});\n\nexport const toggleDrawer = (isOpened) => ({\n    type: TOGGLE_DRAWER,\n    payload: { isOpened }\n});\n"],"sourceRoot":""}