{"version":3,"sources":["webpack:///./src/Utilities/DeleteModal.js","webpack:///./src/Utilities/TagWithDialog.js","webpack:///./src/Utilities/TagsModal.js","webpack:///./src/Utilities/Wrapper.js"],"names":["DeleteModal","systemToRemove","handleModalToggle","isModalOpen","currentSytems","onConfirm","systemLabel","Array","isArray","length","display_name","variant","title","className","isOpen","onClose","appendTo","document","getElementsByClassName","body","hasGutter","size","isFilled","location","host","onClick","ActiveSystemProp","PropTypes","id","displayName","propTypes","defaultProps","TagWithDialog","count","loadTags","systemId","e","stopPropagation","data-ouia-component-id","onTagClick","connect","dispatch","toggleTagModal","undefined","TagsModal","customFilters","filterTagsBy","onToggleModal","onApply","useDispatch","useState","filterBy","setFilterBy","selected","setSelected","perPage","page","statePagination","setStatePagination","showTagDialog","useSelector","entities","entityDetails","pagination","activeSystemTag","entity","allTagsPagination","shallowEqual","loaded","tagModalLoaded","tags","activeTags","filter","tag","Object","values","some","val","includes","slice","allTags","reduce","acc","flatten","map","filters","activeFilters","tagsCount","allTagsTotal","useEffect","fetchTags","fetchAllTags","debouncedFetch","useCallback","debounce","tableProps","canSelectAll","rows","key","value","namespace","find","cells","width","toggleModal","label","placeholder","filterValues","onChange","_e","onUpdateData","columns","transforms","cellWidth","onSelect","RenderWrapper","Component","cmp","hideLoader","isRbacEnabled","inventoryRef","store","props","hasAccess","usePermissions","ref","customRender"],"mappings":"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","file":"js/4918.8ca4941f541500ae306f.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    ClipboardCopy,\n    Modal,\n    Split,\n    SplitItem,\n    Stack,\n    StackItem,\n    Level,\n    LevelItem,\n    Button\n} from '@patternfly/react-core';\n\nimport ExclamationTriangleIcon from  '@patternfly/react-icons/dist/js/icons/exclamation-triangle-icon';\n\nconst DeleteModal = ({ handleModalToggle, isModalOpen, currentSytems, onConfirm }) => {\n    let systemToRemove;\n    let systemLabel = 'system';\n    if (Array.isArray(currentSytems)) {\n        systemToRemove = currentSytems.length === 1 ? currentSytems[0].display_name : `${currentSytems.length} systems`;\n        systemLabel = currentSytems.length === 1 ? systemLabel : 'systems';\n    } else {\n        systemToRemove = currentSytems.display_name;\n    }\n\n    return <Modal\n        variant=\"small\"\n        title=\"Remove from inventory\"\n        className=\"ins-c-inventory__table--remove\"\n        isOpen={isModalOpen}\n        onClose={() => handleModalToggle(false)}\n        appendTo={document.getElementsByClassName('inventory')[0] || document.body}\n    >\n        <Split hasGutter>\n            <SplitItem><ExclamationTriangleIcon size=\"xl\" className=\"ins-m-alert\" /></SplitItem>\n            <SplitItem isFilled>\n                <Stack hasGutter>\n                    <StackItem>\n                        {systemToRemove} will be removed from\n                                    all {location.host} applications and services. You need to re-register\n                        the {systemLabel} to add it back to your inventory.\n                    </StackItem>\n                    <StackItem>\n                        To disable the daily upload for this {systemLabel}, use the following command:\n                    </StackItem>\n                    <StackItem>\n                        <ClipboardCopy>insights-client --unregister</ClipboardCopy>\n                    </StackItem>\n                </Stack>\n            </SplitItem>\n        </Split>\n        <Level hasGutter>\n            <LevelItem>\n                <Button variant=\"danger\" onClick={onConfirm}>\n                    Remove\n                </Button>\n                <Button variant=\"link\" onClick={() => handleModalToggle(false)}>Cancel</Button>\n            </LevelItem>\n        </Level>\n    </Modal>;\n};\n\nconst ActiveSystemProp = PropTypes.shape({\n    id: PropTypes.string,\n    displayName: PropTypes.string\n});\n\nDeleteModal.propTypes = {\n    isModalOpen: PropTypes.bool,\n    currentSytems: PropTypes.oneOfType([ActiveSystemProp, PropTypes.arrayOf(ActiveSystemProp)]),\n    handleModalToggle: PropTypes.func,\n    onConfirm: PropTypes.func\n};\n\nDeleteModal.defaultProps = {\n    isModalOpen: false,\n    currentSytems: {},\n    handleModalToggle: () => undefined,\n    onConfirm: () => undefined\n};\n\nexport default DeleteModal;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { TagCount } from '@redhat-cloud-services/frontend-components/TagCount';\nimport { loadTags, toggleTagModal } from '../store/actions';\n\nconst TagWithDialog = ({ count, loadTags, systemId }) => (\n    <span\n        onClick={(e) => e.stopPropagation()}\n        className=\"ins-c-inventory__list-tags\"\n        data-ouia-component-id={`${systemId}-tag-button`}\n    >\n        <TagCount count={count} onTagClick={ () => loadTags(systemId, count) } />\n    </span>\n);\n\nTagWithDialog.propTypes = {\n    count: PropTypes.number,\n    loadTags: PropTypes.func,\n    systemId: PropTypes.string\n};\n\nconst dispatchToProps = (dispatch) => ({\n    loadTags: (systemId, count) => {\n        if (systemId) {\n            dispatch(toggleTagModal(true));\n            dispatch(loadTags(systemId, undefined, undefined, count));\n        }\n    }\n});\n\nexport default connect(() => ({}), dispatchToProps)(TagWithDialog);\n","import React, { useState, useCallback, useEffect } from 'react';\nimport { useSelector, useDispatch, shallowEqual } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { toggleTagModal, fetchAllTags } from '../store/actions';\nimport { TagModal } from '@redhat-cloud-services/frontend-components/TagModal';\nimport { cellWidth } from '@patternfly/react-table';\nimport debounce from 'lodash/debounce';\nimport flatten from 'lodash/flatten';\n\nconst TagsModal = ({\n    customFilters,\n    filterTagsBy,\n    onToggleModal,\n    onApply\n}) => {\n    const dispatch = useDispatch();\n    const [filterBy, setFilterBy] = useState('');\n    const [selected, setSelected] = useState([]);\n    const [statePagination, setStatePagination] = useState({\n        perPage: 10,\n        page: 1\n    });\n\n    const showTagDialog = useSelector(({ entities, entityDetails }) => (entities || entityDetails)?.showTagDialog);\n\n    const pagination = useSelector(({ entities, entityDetails }) => {\n        if (entities?.activeSystemTag || entityDetails?.entity) {\n            return statePagination;\n        }\n\n        return entities?.allTagsPagination || statePagination;\n    }, shallowEqual);\n\n    const loaded = useSelector(({ entities, entityDetails }) => entities?.tagModalLoaded || entityDetails?.tagModalLoaded);\n\n    const activeSystemTag = useSelector(({ entities, entityDetails }) => entities?.activeSystemTag || entityDetails?.entity);\n    const tags = useSelector(({ entities, entityDetails }) => {\n        const activeTags = entities?.activeSystemTag?.tags || entityDetails?.entity?.tags;\n        if (activeTags) {\n            return activeTags?.filter(\n                (tag) => Object.values(tag).some((val) => val?.includes(filterBy))\n            ).slice(statePagination?.perPage * (statePagination?.page - 1), statePagination?.perPage * statePagination?.page);\n        }\n\n        return entities?.allTags?.reduce((acc, { tags }) => ([\n            ...acc,\n            ...flatten(tags.map(({ tag }) => tag))\n        ]), []);\n    });\n    const filters = useSelector(({ entities, entityDetails }) => (entities || entityDetails)?.activeFilters);\n    const tagsCount = useSelector(({ entities, entityDetails }) => {\n        const activeTags = (entities?.activeSystemTag?.tags || entityDetails?.entity?.tags)?.filter(\n            (tag) => Object.values(tag).some((val) => val?.includes(filterBy))\n        );\n        return activeTags ? activeTags.length : entities?.allTagsTotal;\n    });\n\n    useEffect(() => {\n        setFilterBy(filterTagsBy);\n    }, [filterTagsBy]);\n\n    const fetchTags = (pagination, filterBy) => {\n        if (!activeSystemTag) {\n            dispatch(fetchAllTags(filterBy, { ...customFilters, pagination, filters }));\n        } else {\n            setStatePagination(() => pagination);\n        }\n    };\n\n    const debouncedFetch = useCallback(debounce(fetchTags, 800), [activeSystemTag]);\n\n    return (\n        <TagModal\n            className=\"ins-c-inventory__tags-modal\"\n            tableProps={{\n                canSelectAll: false\n            }}\n            {...loaded && {\n                loaded,\n                pagination: {\n                    ...pagination,\n                    count: tagsCount\n                },\n                rows: tags?.map(({ key, value, namespace }) => ({\n                    id: `${namespace}/${key}=${value}`,\n                    selected: selected.find(({ id }) => id === `${namespace}/${key}=${value}`),\n                    cells: [key, value, namespace]\n                })) || []\n            }}\n            loaded={ loaded }\n            width=\"auto\"\n            isOpen={ showTagDialog }\n            toggleModal={() => {\n                setSelected([]);\n                setFilterBy('');\n                onToggleModal();\n                dispatch(toggleTagModal(false));\n            }}\n            filters={[\n                {\n                    label: 'Tags filter',\n                    placeholder: 'Filter tags',\n                    value: 'tags-filter',\n                    filterValues: {\n                        value: filterBy,\n                        onChange: (_e, value) => {\n                            debouncedFetch(pagination, value);\n                            setFilterBy(value);\n                        }\n                    }\n                }\n            ]}\n            onUpdateData={ fetchTags }\n            columns={ [\n                { title: 'Name' },\n                { title: 'Value', transforms: [cellWidth(30)] },\n                { title: 'Tag source', transforms: [cellWidth(30)] }\n            ] }\n            {...!activeSystemTag && {\n                onSelect: (selected) => setSelected(selected),\n                selected,\n                onApply: () => onApply && onApply(selected)\n            }}\n            title={ activeSystemTag ?\n                `${activeSystemTag.display_name} (${tagsCount})` :\n                `All tags in inventory (${tagsCount})`\n            }\n        />\n    );\n};\n\nTagsModal.propTypes = {\n    onApply: PropTypes.func,\n    onToggleModal: PropTypes.func,\n    filterTagsBy: PropTypes.string,\n    customFilters: PropTypes.shape({\n        tags: PropTypes.oneOfType([\n            PropTypes.object,\n            PropTypes.arrayOf(PropTypes.string)\n        ])\n    })\n};\n\nTagsModal.defaultProps = {\n    filterTagsBy: '',\n    onToggleModal: () => undefined\n};\n\nexport default TagsModal;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { usePermissions } from '@redhat-cloud-services/frontend-components-utilities/RBACHook';\nimport { Spinner } from '@patternfly/react-core';\n\nconst RenderWrapper = ({ cmp: Component, hideLoader, isRbacEnabled, inventoryRef, store, ...props }) => {\n    const { hasAccess } = usePermissions('inventory', [\n        'inventory:*:*',\n        'inventory:*:read',\n        'inventory:hosts:read'\n    ]);\n    return (\n        (hasAccess === undefined && !hideLoader) ?\n            <Spinner /> :\n            <Component\n                {...props}\n                { ...inventoryRef && {\n                    ref: inventoryRef\n                }}\n                hasAccess={isRbacEnabled ? hasAccess : true}\n                store={ store }\n            />\n    );\n};\n\nRenderWrapper.propTypes = {\n    cmp: PropTypes.any,\n    inventoryRef: PropTypes.any,\n    store: PropTypes.object,\n    customRender: PropTypes.bool,\n    isRbacEnabled: PropTypes.bool,\n    hideLoader: PropTypes.bool\n};\n\nexport default RenderWrapper;\n"],"sourceRoot":""}