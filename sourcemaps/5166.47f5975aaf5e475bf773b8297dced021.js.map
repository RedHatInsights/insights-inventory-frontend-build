{"version":3,"file":"js/5166.a96e5cf7f6d4734ea674.js","mappings":"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","sources":["webpack:///./src/components/GeneralInfo/BiosCard/BiosCard.js","webpack:///./src/components/GeneralInfo/OperatingSystemCard/OperatingSystemCard.js","webpack:///./src/components/SystemDetails/GeneralInfo.js","webpack:///./src/store/actions.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport LoadingCard from '../LoadingCard';\nimport { biosSelector } from '../selectors';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { extraShape, isDate } from '../../../constants';\n\nconst BiosCard = ({ bios, detailLoaded, hasVendor, hasVersion, handleClick, hasReleaseDate, extra }) => (<LoadingCard\n    title=\"BIOS\"\n    isLoading={ !detailLoaded }\n    items={ [\n        ...hasVendor ? [{ title: 'Vendor', value: bios.vendor }] : [],\n        ...hasVersion ? [{ title: 'Version', value: bios.version }] : [],\n        ...hasReleaseDate ? [{ title: 'Release date', value: (isDate(bios.releaseDate) ?\n            <DateFormat date={ new Date(bios.releaseDate) } type=\"onlyDate\" /> :\n            'Not available'\n        ) }] : [],\n        ...extra.map(({ onClick, ...item }) => ({\n            ...item,\n            ...onClick && { onClick: (e) => onClick(e, handleClick) }\n        }))\n    ] }\n/>);\n\nBiosCard.propTypes = {\n    detailLoaded: PropTypes.bool,\n    handleClick: PropTypes.func,\n    bios: PropTypes.shape({\n        vendor: PropTypes.string,\n        version: PropTypes.string,\n        releaseDate: PropTypes.string,\n        csm: PropTypes.arrayOf(PropTypes.string)\n    }),\n    hasVendor: PropTypes.bool,\n    hasVersion: PropTypes.bool,\n    hasReleaseDate: PropTypes.bool,\n    extra: PropTypes.arrayOf(extraShape)\n};\nBiosCard.defaultProps = {\n    detailLoaded: false,\n    handleClick: () => undefined,\n    extra: [],\n    hasVendor: true,\n    hasVersion: true,\n    hasReleaseDate: true\n};\n\nexport default connect(({\n    systemProfileStore: {\n        systemProfile\n    }\n}) => ({\n    detailLoaded: systemProfile && systemProfile.loaded,\n    bios: biosSelector(systemProfile)\n}))(BiosCard);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport LoadingCard from '../LoadingCard';\nimport { generalMapper } from '../dataMapper';\nimport { operatingSystem } from '../selectors';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { extraShape, isDate } from '../../../constants';\nimport OperatingSystemFormatter from '../../../Utilities/OperatingSystemFormatter';\n\nconst OperatingSystemCard = ({\n    systemInfo,\n    detailLoaded,\n    handleClick,\n    hasRelease,\n    hasKernelRelease,\n    hasArchitecture,\n    hasLastBoot,\n    hasKernelModules,\n    extra\n}) => (\n    <LoadingCard\n        title=\"Operating system\"\n        isLoading={ !detailLoaded }\n        items={ [\n            ...hasRelease ? [{ title: 'Release', value: <OperatingSystemFormatter operatingSystem={systemInfo.release} /> }] : [],\n            ...hasKernelRelease ? [{ title: 'Kernel release', value: systemInfo.kernelRelease }] : [],\n            ...hasArchitecture ? [{ title: 'Architecture', value: systemInfo.architecture }] : [],\n            ...hasLastBoot ? [{ title: 'Last boot time', value: (isDate(systemInfo.bootTime) ?\n                <DateFormat date={ systemInfo.bootTime } type=\"onlyDate\" /> :\n                'Not available'\n            )\n            }] : [],\n            ...hasKernelModules ? [{\n                title: 'Kernel modules',\n                value: systemInfo.kernelModules?.length,\n                singular: 'module',\n                target: 'kernel_modules',\n                onClick: () => {\n                    handleClick(\n                        'Kernel modules',\n                        generalMapper(systemInfo.kernelModules, 'Module')\n                    );\n                }\n            }] : [],\n            ...extra.map(({ onClick, ...item }) => ({\n                ...item,\n                ...onClick && { onClick: (e) => onClick(e, handleClick) }\n            }))\n        ] }\n    />\n);\n\nOperatingSystemCard.propTypes = {\n    detailLoaded: PropTypes.bool,\n    handleClick: PropTypes.func,\n    systemInfo: PropTypes.shape({\n        release: PropTypes.string,\n        architecture: PropTypes.string,\n        kernelRelease: PropTypes.string,\n        bootTime: PropTypes.string,\n        kernelModules: PropTypes.arrayOf(PropTypes.string)\n    }),\n    hasRelease: PropTypes.bool,\n    hasKernelRelease: PropTypes.bool,\n    hasArchitecture: PropTypes.bool,\n    hasLastBoot: PropTypes.bool,\n    hasKernelModules: PropTypes.bool,\n    extra: PropTypes.arrayOf(extraShape)\n};\nOperatingSystemCard.defaultProps = {\n    detailLoaded: false,\n    handleClick: () => undefined,\n    hasRelease: true,\n    hasKernelRelease: true,\n    hasArchitecture: true,\n    hasLastBoot: true,\n    hasKernelModules: true,\n    extra: []\n};\n\nexport default connect(({\n    entityDetails: {\n        entity\n    },\n    systemProfileStore: {\n        systemProfile\n    }\n}) => ({\n    detailLoaded: systemProfile && systemProfile.loaded,\n    systemInfo: operatingSystem(systemProfile, entity)\n}))(OperatingSystemCard);\n","import React, { useEffect, useState, Fragment } from 'react';\nimport { Provider } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport GeneralInformation from '../GeneralInfo/GeneralInformation';\nexport { default as TextInputModal } from '../GeneralInfo/TextInputModal';\nimport fallback from '../SpinnerFallback';\nimport systemProfileStore from '../../store/systemProfileStore';\n\nconst GeneralInfoTab = ({ getRegistry, ...props }) => {\n    const [Wrapper, setWrapper] = useState();\n    useEffect(() => {\n        if (getRegistry) {\n            getRegistry()?.register?.({ systemProfileStore });\n        }\n\n        setWrapper(() => getRegistry ? Provider : Fragment);\n    }, []);\n    return Wrapper ? <Wrapper\n        {...getRegistry && {\n            store: getRegistry().getStore()\n        }}\n    >\n        <GeneralInformation {...props} />\n    </Wrapper> : fallback;\n};\n\nGeneralInfoTab.propTypes = {\n    getRegistry: PropTypes.func\n};\n\nexport default GeneralInfoTab;\n","import { ACTION_TYPES, CLEAR_NOTIFICATIONS, SET_INVENTORY_FILTER, SET_PAGINATION } from './action-types';\nimport { hosts, getEntitySystemProfile } from '../api';\nexport * from './system-issues-actions';\nexport * from './inventory-actions';\n\nexport const deleteEntity = (systems, displayName) => ({\n    type: ACTION_TYPES.REMOVE_ENTITY,\n    payload: hosts.apiHostDeleteById(systems),\n    meta: {\n        notifications: {\n            fulfilled: {\n                variant: 'success',\n                title: 'Delete operation finished',\n                description: `${displayName} has been successfully removed.`,\n                dismissable: true\n            }\n        },\n        systems\n    }\n});\n\nexport const setFilter = (filtersList) => ({\n    type: SET_INVENTORY_FILTER,\n    payload: {\n        filtersList\n    }\n});\n\nexport const clearNotifications = () => {\n    return ({\n        type: CLEAR_NOTIFICATIONS\n    });\n};\n\nexport const editDisplayName = (id, value) => ({\n    type: ACTION_TYPES.UPDATE_DISPLAY_NAME,\n    payload: hosts.apiHostPatchById([id], { display_name: value }), // eslint-disable-line camelcase\n    meta: {\n        id,\n        value,\n        notifications: {\n            fulfilled: {\n                variant: 'success',\n                title: `Display name for entity with ID ${id} has been changed to ${value}`,\n                dismissable: true\n            }\n        }\n    }\n});\n\nexport const setPagination = (page, perPage) => ({\n    type: SET_PAGINATION,\n    payload: {\n        page, perPage\n    }\n});\n\nexport const systemProfile = (itemId) => ({\n    type: ACTION_TYPES.LOAD_SYSTEM_PROFILE,\n    payload: getEntitySystemProfile(itemId, {})\n});\n\nexport const editAnsibleHost = (id, value) => ({\n    type: ACTION_TYPES.SET_ANSIBLE_HOST,\n    payload: hosts.apiHostPatchById([id], { ansible_host: value }), // eslint-disable-line camelcase\n    meta: {\n        notifications: {\n            fulfilled: {\n                variant: 'success',\n                title: 'Ansible hostname has been updated',\n                dismissable: true\n            }\n        }\n    }\n});\n"],"names":["BiosCard","bios","detailLoaded","hasVendor","hasVersion","handleClick","hasReleaseDate","extra","title","isLoading","items","value","vendor","version","isDate","releaseDate","date","Date","type","map","onClick","e","propTypes","PropTypes","csm","extraShape","defaultProps","connect","systemProfile","systemProfileStore","loaded","biosSelector","OperatingSystemCard","systemInfo","hasRelease","hasKernelRelease","hasArchitecture","hasLastBoot","hasKernelModules","operatingSystem","release","kernelRelease","architecture","bootTime","kernelModules","length","singular","target","generalMapper","entity","entityDetails","GeneralInfoTab","getRegistry","props","useState","Wrapper","setWrapper","useEffect","register","Provider","Fragment","store","getStore","fallback","deleteEntity","systems","displayName","ACTION_TYPES","payload","hosts","meta","notifications","fulfilled","variant","description","dismissable","setFilter","filtersList","SET_INVENTORY_FILTER","clearNotifications","CLEAR_NOTIFICATIONS","editDisplayName","id","display_name","setPagination","page","perPage","SET_PAGINATION","itemId","getEntitySystemProfile","editAnsibleHost","ansible_host"],"sourceRoot":""}