{"version":3,"file":"js/2511.6b1b4a7fcb8aed169f08.js","mappings":"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","sources":["webpack:///./src/Utilities/hooks/usePromiseQueue.js","webpack:///./src/Utilities/hooks/useFetchBatched.js","webpack:///./src/components/InventoryGroups/Modals/CreateGroupModal.js"],"sourcesContent":["import { useCallback, useState } from 'react';\nimport pAll from 'p-all';\n\nconst DEFAULT_CONCURRENT_PROMISES = 2;\n\nconst usePromiseQueue = (limit = DEFAULT_CONCURRENT_PROMISES) => {\n    const [results, setResults] = useState({\n        isResolving: false,\n        promiseResults: undefined\n    });\n\n    const resolve = useCallback(\n        async (fns) => {\n            await setResults((state) => ({\n                ...state,\n                isResolving: true\n            }));\n            const results = await pAll(fns, {\n                concurrency: limit\n            });\n            await setResults({\n                isResolving: false,\n                promiseResults: results\n            });\n\n            return results;\n        },\n        [limit]\n    );\n\n    return {\n        isResolving: results.isResolving,\n        results: results.promiseResults,\n        resolve\n    };\n};\n\nexport default usePromiseQueue;\n","import usePromiseQueue from './usePromiseQueue';\n\nconst useFetchBatched = () => {\n    const { isResolving: isLoading, resolve } = usePromiseQueue();\n\n    return {\n        isLoading,\n        fetchBatched: (fetchFunction, total, filter, batchSize = 50) => {\n            const pages = Math.ceil(total / batchSize) || 1;\n\n            const results = resolve(\n                [...new Array(pages)].map(\n                    // eslint-disable-next-line camelcase\n                    (_, pageIdx) => () => fetchFunction(filter, { page: pageIdx + 1, per_page: batchSize })\n                )\n            );\n\n            return results;\n        }\n    };\n};\n\nexport default useFetchBatched;\n","import React, { useCallback, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { createGroupSchema } from './ModalSchemas/schemes';\nimport Modal from './Modal';\nimport apiWithToast from '../utils/apiWithToast';\nimport {\n    createGroup,\n    validateGroupName\n} from '../utils/api';\nimport { useDispatch } from 'react-redux';\nimport awesomeDebouncePromise from 'awesome-debounce-promise';\n\nconst CreateGroupModal = ({\n    isModalOpen,\n    setIsModalOpen,\n    reloadData,\n    modalBefore = false,\n    setterOfModalBefore\n}) => {\n    const dispatch = useDispatch();\n\n    const handleCreateGroup = useCallback(\n        (values) => {\n            const statusMessages = {\n                onSuccess: {\n                    title: 'Success',\n                    description: `${values.name} has been created successfully`\n                },\n                onError: { title: 'Error', description: 'Failed to create group' }\n            };\n            return apiWithToast(dispatch, () => createGroup(values), statusMessages);\n        },\n        [isModalOpen]\n    );\n\n    const schema = useMemo(() => {\n        const check = async (value) => {\n            const results = await validateGroupName(value);\n            if (results === true) {\n                throw 'Group name already exists';\n            }\n\n            return undefined;\n        };\n\n        // eslint-disable-next-line new-cap\n        const d = awesomeDebouncePromise(check, 500, { onlyResolvesLast: false });\n        return createGroupSchema(d);\n    }, []);\n\n    const onClose = () => {\n        if (modalBefore) {\n            setIsModalOpen(false);\n            setterOfModalBefore(true);\n        } else {\n            setIsModalOpen(false);\n        }\n    };\n\n    return (\n        <Modal\n            isModalOpen={isModalOpen}\n            closeModal={onClose}\n            title=\"Create group\"\n            submitLabel=\"Create\"\n            schema={schema}\n            reloadData={reloadData}\n            onSubmit={handleCreateGroup}\n        />\n    );\n};\n\nexport default CreateGroupModal;\n\nCreateGroupModal.propTypes = {\n    isModalOpen: PropTypes.bool,\n    setIsModalOpen: PropTypes.func,\n    reloadData: PropTypes.func,\n    modalBefore: PropTypes.bool,\n    setterOfModalBefore: PropTypes.func\n};\n"],"names":["i","limit","useState","isResolving","promiseResults","undefined","results","setResults","resolve","useCallback","fns","state","pAll","concurrency","usePromiseQueue","isLoading","fetchBatched","fetchFunction","total","filter","batchSize","pages","Math","ceil","Array","map","_","pageIdx","page","per_page","CreateGroupModal","isModalOpen","setIsModalOpen","reloadData","modalBefore","setterOfModalBefore","dispatch","useDispatch","handleCreateGroup","values","statusMessages","onSuccess","title","description","name","onError","apiWithToast","createGroup","schema","useMemo","check","value","validateGroupName","d","awesomeDebouncePromise","onlyResolvesLast","createGroupSchema","closeModal","submitLabel","onSubmit","propTypes","PropTypes"],"sourceRoot":""}