{"version":3,"file":"js/854.37a1b9457a968aa99c73.js","mappings":"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","sources":["webpack:///./src/AppEntry.js","webpack:///./src/bootstrap.js","webpack:///./src/components/GeneralInfo/BiosCard/BiosCard.js","webpack:///./src/components/GeneralInfo/CollectionCard/CollectionCard.js","webpack:///./src/components/GeneralInfo/ConfigurationCard/ConfigurationCard.js","webpack:///./src/components/GeneralInfo/InfrastructureCard/InfrastructureCard.js","webpack:///./src/components/GeneralInfo/OperatingSystemCard/OperatingSystemCard.js","webpack:///./src/components/GeneralInfo/SystemCard/SystemCard.js","webpack:///./src/components/GeneralInfo/dataMapper/dataMapper.js","webpack:///./src/components/SystemDetails/GeneralInfo.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { init, RegistryContext } from './store';\nimport App from './App';\nimport { getBaseName } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport logger from 'redux-logger';\n\nconst InventoryApp = () => {\n    const registry = IS_DEV ? init(logger) : init();\n    return <RegistryContext.Provider value={{\n        getRegistry: () => registry\n    }}>\n        <Provider store={registry.getStore()}>\n            <Router basename={getBaseName(window.location.pathname)}>\n                <App />\n            </Router>\n        </Provider>\n    </RegistryContext.Provider>;\n};\n\nInventoryApp.propTypes = {\n    useLogger: PropTypes.bool\n};\n\nInventoryApp.defaultProps = {\n    useLogger: false\n};\n\nexport default InventoryApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport InventoryApp from './AppEntry';\n\nReactDOM.render(\n    <InventoryApp />,\n    document.getElementById('root')\n);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport LoadingCard from '../LoadingCard';\nimport { biosSelector } from '../selectors';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { extraShape, isDate } from '../../../constants';\n\nconst BiosCard = ({ bios, detailLoaded, hasVendor, hasVersion, handleClick, hasReleaseDate, extra }) => (<LoadingCard\n    title=\"BIOS\"\n    isLoading={ !detailLoaded }\n    items={ [\n        ...hasVendor ? [{ title: 'Vendor', value: bios.vendor }] : [],\n        ...hasVersion ? [{ title: 'Version', value: bios.version }] : [],\n        ...hasReleaseDate ? [{ title: 'Release date', value: (isDate(bios.releaseDate) ?\n            <DateFormat date={ new Date(bios.releaseDate) } type=\"onlyDate\" /> :\n            'Not available'\n        ) }] : [],\n        ...extra.map(({ onClick, ...item }) => ({\n            ...item,\n            ...onClick && { onClick: (e) => onClick(e, handleClick) }\n        }))\n    ] }\n/>);\n\nBiosCard.propTypes = {\n    detailLoaded: PropTypes.bool,\n    handleClick: PropTypes.func,\n    bios: PropTypes.shape({\n        vendor: PropTypes.string,\n        version: PropTypes.string,\n        releaseDate: PropTypes.string,\n        csm: PropTypes.arrayOf(PropTypes.string)\n    }),\n    hasVendor: PropTypes.bool,\n    hasVersion: PropTypes.bool,\n    hasReleaseDate: PropTypes.bool,\n    extra: PropTypes.arrayOf(extraShape)\n};\nBiosCard.defaultProps = {\n    detailLoaded: false,\n    handleClick: () => undefined,\n    extra: [],\n    hasVendor: true,\n    hasVersion: true,\n    hasReleaseDate: true\n};\n\nexport default connect(({\n    systemProfileStore: {\n        systemProfile\n    }\n}) => ({\n    detailLoaded: systemProfile && systemProfile.loaded,\n    bios: biosSelector(systemProfile)\n}))(BiosCard);\n","/* eslint-disable camelcase */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { Tooltip } from '@patternfly/react-core';\n\nimport LoadingCard from '../LoadingCard';\nimport { collectionInformationSelector } from '../selectors';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { extraShape } from '../../../constants';\n\nconst VersionTooltip = ({ egg, client }) => (\n    <Tooltip\n        content={\n            <React.Fragment>\n                <p>RPM version: { client || 'Not available' }</p>\n                <p>Dynamic update version: { egg || 'Not available' }</p>\n            </React.Fragment>\n        }\n    >\n        <span>{ client || egg || 'Not available' }</span>\n    </Tooltip>\n);\n\nVersionTooltip.propTypes = {\n    egg: PropTypes.string,\n    client: PropTypes.string\n};\n\nconst CollectionCard = ({\n    detailLoaded,\n    collectionInformation,\n    entity,\n    handleClick,\n    hasClient,\n    hasLastCheckIn,\n    hasRegistered,\n    hasInsightsId,\n    hasReporter,\n    extra\n}) => (<LoadingCard\n    title=\"Collection information\"\n    isLoading={ !detailLoaded }\n    items={ [\n        ...hasClient ? [{\n            title: 'Insights client',\n            value: <VersionTooltip egg={collectionInformation.egg} client={collectionInformation.client}/>\n        }] : [],\n        ...hasLastCheckIn ? [{ title: 'Last check-in', value: entity && (\n            DateFormat ?\n                <DateFormat date={ entity.updated } type=\"onlyDate\" /> :\n                new Date(entity.updated).toLocaleString()\n        ) }] : [],\n        ...hasRegistered ? [{ title: 'Registered', value: entity && (\n            DateFormat ?\n                <DateFormat date={entity.created} type=\"onlyDate\" /> :\n                new Date(entity.created).toLocaleString()\n        ) }] : [],\n        ...hasInsightsId ? [{ title: 'Insights id', value: entity && entity.insights_id }] : [],\n        ...hasReporter ? [{ title: 'Reporter', value: entity && entity.reporter }] : [],\n        ...extra.map(({ onClick, ...item }) => ({\n            ...item,\n            ...onClick && { onClick: (e) => onClick(e, handleClick) }\n        }))\n    ] }\n/>);\n\nCollectionCard.propTypes = {\n    detailLoaded: PropTypes.bool,\n    entity: PropTypes.shape({\n        updated: PropTypes.string,\n        created: PropTypes.string,\n        insights_id: PropTypes.string,\n        reporter: PropTypes.string\n    }),\n    handleClick: PropTypes.func,\n    collectionInformation: PropTypes.shape({\n        client: PropTypes.string,\n        egg: PropTypes.string\n    }),\n    hasClient: PropTypes.bool,\n    hasLastCheckIn: PropTypes.bool,\n    hasRegistered: PropTypes.bool,\n    hasInsightsId: PropTypes.bool,\n    hasReporter: PropTypes.bool,\n    extra: PropTypes.arrayOf(extraShape)\n};\nCollectionCard.defaultProps = {\n    detailLoaded: false,\n    handleClick: () => undefined,\n    hasClient: true,\n    hasEgg: true,\n    hasLastCheckIn: true,\n    hasRegistered: true,\n    hasInsightsId: true,\n    hasReporter: true,\n    extra: []\n};\n\nexport default connect(({\n    entityDetails: {\n        entity\n    },\n    systemProfileStore: {\n        systemProfile\n    }\n}) => ({\n    entity,\n    detailLoaded: systemProfile && systemProfile.loaded,\n    collectionInformation: collectionInformationSelector(systemProfile)\n}))(CollectionCard);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport LoadingCard from '../LoadingCard';\nimport { generalMapper, repositoriesMapper } from '../dataMapper';\nimport { configurationSelector } from '../selectors';\nimport { extraShape } from '../../../constants';\n\nexport function enabledRepos(repositories) {\n    if (repositories) {\n        return [\n            repositories.enabled && repositories.enabled.length > 0 && `${repositories.enabled.length} enabled`,\n            repositories.disabled && repositories.disabled.length > 0 && `${repositories.disabled.length} disabled`\n        ].filter(Boolean).join(' / ');\n    }\n}\n\nconst ConfigurationCard = ({\n    detailLoaded,\n    configuration,\n    handleClick,\n    hasPackages,\n    hasServices,\n    hasProcesses,\n    hasRepositories,\n    extra\n}) => (<LoadingCard\n    title=\"Configuration\"\n    isLoading={ !detailLoaded }\n    items={ [\n        ...hasPackages ? [{\n            title: 'Installed packages',\n            value: configuration.packages?.length,\n            singular: 'package',\n            target: 'installed_packages',\n            onClick: () => {\n                handleClick(\n                    'Installed packages',\n                    generalMapper(configuration.packages, 'Package name')\n                );\n            }\n        }] : [],\n        ...hasServices ? [{\n            title: 'Services',\n            value: configuration.services?.length,\n            singular: 'service',\n            target: 'services',\n            onClick: () => {\n                handleClick(\n                    'Services',\n                    generalMapper(configuration.services, 'Service name')\n                );\n            }\n        }] : [],\n        ...hasProcesses ? [{\n            title: 'Running processes',\n            value: configuration.processes?.length,\n            singular: 'process',\n            plural: 'processes',\n            target: 'running_processes',\n            onClick: () => {\n                handleClick(\n                    'Running processes',\n                    generalMapper(configuration.processes, 'Process name')\n                );\n            }\n        }] : [],\n        ...hasRepositories ? [{\n            title: 'Repositories',\n            value: enabledRepos(configuration.repositories),\n            target: 'repositories',\n            onClick: () => {\n                handleClick(\n                    'Repositories',\n                    repositoriesMapper(configuration.repositories),\n                    'medium'\n                );\n            }\n        }] : [],\n        ...extra.map(({ onClick, ...item }) => ({\n            ...item,\n            ...onClick && { onClick: (e) => onClick(e, handleClick) }\n        }))\n    ] }\n/>);\n\nConfigurationCard.propTypes = {\n    detailLoaded: PropTypes.bool,\n    handleClick: PropTypes.func,\n    configuration: PropTypes.shape({\n        packages: PropTypes.arrayOf(PropTypes.string),\n        services: PropTypes.arrayOf(PropTypes.string),\n        processes: PropTypes.arrayOf(PropTypes.string),\n        repositories: PropTypes.shape({\n            enabled: PropTypes.arrayOf(PropTypes.shape({\n                // eslint-disable-next-line camelcase\n                base_url: PropTypes.string,\n                name: PropTypes.string,\n                enabled: PropTypes.bool,\n                gpgcheck: PropTypes.bool\n            })),\n            disabled: PropTypes.arrayOf(PropTypes.shape({\n                // eslint-disable-next-line camelcase\n                base_url: PropTypes.string,\n                name: PropTypes.string,\n                enabled: PropTypes.bool,\n                gpgcheck: PropTypes.bool\n            }))\n        })\n    }),\n    hasPackages: PropTypes.bool,\n    hasServices: PropTypes.bool,\n    hasProcesses: PropTypes.bool,\n    hasRepositories: PropTypes.bool,\n    extra: PropTypes.arrayOf(extraShape)\n};\nConfigurationCard.defaultProps = {\n    detailLoaded: false,\n    handleClick: () => undefined,\n    hasPackages: true,\n    hasServices: true,\n    hasProcesses: true,\n    hasRepositories: true,\n    extra: []\n};\n\nexport default connect(({\n    systemProfileStore: {\n        systemProfile\n    }\n}) => ({\n    detailLoaded: systemProfile && systemProfile.loaded,\n    configuration: configurationSelector(systemProfile)\n}))(ConfigurationCard);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport LoadingCard from '../LoadingCard';\nimport { generalMapper, interfaceMapper } from '../dataMapper';\nimport { infrastructureSelector } from '../selectors';\nimport { extraShape } from '../../../constants';\n\nconst InfrastructureCard = ({\n    infrastructure,\n    handleClick,\n    detailLoaded,\n    hasType,\n    hasVendor,\n    hasIPv4,\n    hasIPv6,\n    hasInterfaces,\n    extra\n}) => (<LoadingCard\n    title=\"Infrastructure\"\n    isLoading={ !detailLoaded }\n    items={ [\n        ...hasType ? [{ title: 'Type', value: infrastructure.type }] : [],\n        ...hasVendor ? [{ title: 'Vendor', value: infrastructure.vendor }] : [],\n        ...hasIPv4 ? [{\n            title: 'IPv4 addresses',\n            value: infrastructure.ipv4?.length,\n            plural: 'addresses',\n            singular: 'address',\n            target: 'ipv4',\n            onClick: () => {\n                handleClick(\n                    'IPv4',\n                    generalMapper(infrastructure.ipv4, 'IP address')\n                );\n            }\n        }] : [],\n        ...hasIPv6 ? [{\n            title: 'IPv6 addresses',\n            value: infrastructure.ipv6?.length,\n            plural: 'addresses',\n            singular: 'address',\n            onClick: () => {\n                handleClick(\n                    'IPv6',\n                    generalMapper(infrastructure.ipv6, 'IP address')\n                );\n            }\n        }] : [],\n        ...hasInterfaces ? [{\n            title: 'Interfaces/NICs',\n            value: infrastructure.nics?.length,\n            singular: 'NIC',\n            target: 'interfaces',\n            onClick: () => {\n                handleClick(\n                    'Interfaces/NICs',\n                    interfaceMapper(infrastructure.nics),\n                    'medium'\n                );\n            }\n        }] : [],\n        ...extra.map(({ onClick, ...item }) => ({\n            ...item,\n            ...onClick && { onClick: (e) => onClick(e, handleClick) }\n        }))\n    ] }\n/>);\n\nInfrastructureCard.propTypes = {\n    detailLoaded: PropTypes.bool,\n    handleClick: PropTypes.func,\n    infrastructure: PropTypes.shape({\n        type: PropTypes.string,\n        vendor: PropTypes.string,\n        ipv4: PropTypes.array,\n        ipv6: PropTypes.array,\n        nics: PropTypes.array\n    }),\n    hasType: PropTypes.bool,\n    hasVendor: PropTypes.bool,\n    hasIPv4: PropTypes.bool,\n    hasIPv6: PropTypes.bool,\n    hasInterfaces: PropTypes.bool,\n    extra: PropTypes.arrayOf(extraShape)\n};\nInfrastructureCard.defaultProps = {\n    detailLoaded: false,\n    handleClick: () => undefined,\n    hasType: true,\n    hasVendor: true,\n    hasIPv4: true,\n    hasIPv6: true,\n    hasInterfaces: true,\n    extra: []\n};\n\nexport default connect(({\n    entityDetails: {\n        entity\n    },\n    systemProfileStore: {\n        systemProfile\n    }\n}) => ({\n    detailLoaded: systemProfile && systemProfile.loaded,\n    infrastructure: infrastructureSelector(systemProfile, entity)\n}))(InfrastructureCard);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport LoadingCard from '../LoadingCard';\nimport { generalMapper } from '../dataMapper';\nimport { operatingSystem } from '../selectors';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { extraShape, isDate } from '../../../constants';\nimport OperatingSystemFormatter from '../../../Utilities/OperatingSystemFormatter';\n\nconst OperatingSystemCard = ({\n    systemInfo,\n    detailLoaded,\n    handleClick,\n    hasRelease,\n    hasKernelRelease,\n    hasArchitecture,\n    hasLastBoot,\n    hasKernelModules,\n    extra\n}) => (\n    <LoadingCard\n        title=\"Operating system\"\n        isLoading={ !detailLoaded }\n        items={ [\n            ...hasRelease ? [{ title: 'Release', value: <OperatingSystemFormatter operatingSystem={systemInfo.release} /> }] : [],\n            ...hasKernelRelease ? [{ title: 'Kernel release', value: systemInfo.kernelRelease }] : [],\n            ...hasArchitecture ? [{ title: 'Architecture', value: systemInfo.architecture }] : [],\n            ...hasLastBoot ? [{ title: 'Last boot time', value: (isDate(systemInfo.bootTime) ?\n                <DateFormat date={ systemInfo.bootTime } type=\"onlyDate\" /> :\n                'Not available'\n            )\n            }] : [],\n            ...hasKernelModules ? [{\n                title: 'Kernel modules',\n                value: systemInfo.kernelModules?.length,\n                singular: 'module',\n                target: 'kernel_modules',\n                onClick: () => {\n                    handleClick(\n                        'Kernel modules',\n                        generalMapper(systemInfo.kernelModules, 'Module')\n                    );\n                }\n            }] : [],\n            ...extra.map(({ onClick, ...item }) => ({\n                ...item,\n                ...onClick && { onClick: (e) => onClick(e, handleClick) }\n            }))\n        ] }\n    />\n);\n\nOperatingSystemCard.propTypes = {\n    detailLoaded: PropTypes.bool,\n    handleClick: PropTypes.func,\n    systemInfo: PropTypes.shape({\n        release: PropTypes.string,\n        architecture: PropTypes.string,\n        kernelRelease: PropTypes.string,\n        bootTime: PropTypes.string,\n        kernelModules: PropTypes.arrayOf(PropTypes.string)\n    }),\n    hasRelease: PropTypes.bool,\n    hasKernelRelease: PropTypes.bool,\n    hasArchitecture: PropTypes.bool,\n    hasLastBoot: PropTypes.bool,\n    hasKernelModules: PropTypes.bool,\n    extra: PropTypes.arrayOf(extraShape)\n};\nOperatingSystemCard.defaultProps = {\n    detailLoaded: false,\n    handleClick: () => undefined,\n    hasRelease: true,\n    hasKernelRelease: true,\n    hasArchitecture: true,\n    hasLastBoot: true,\n    hasKernelModules: true,\n    extra: []\n};\n\nexport default connect(({\n    entityDetails: {\n        entity\n    },\n    systemProfileStore: {\n        systemProfile\n    }\n}) => ({\n    detailLoaded: systemProfile && systemProfile.loaded,\n    systemInfo: operatingSystem(systemProfile, entity)\n}))(OperatingSystemCard);\n","import React, { Fragment, Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport LoadingCard from '../LoadingCard';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { propertiesSelector } from '../selectors';\nimport { editDisplayName, editAnsibleHost, systemProfile } from '../../../store/actions';\nimport TextInputModal from '../TextInputModal';\nimport { loadEntity } from '../../../store/actions';\nimport { Popover, Button } from '@patternfly/react-core';\nimport EditButton from '../EditButton';\nimport { generalMapper } from '../dataMapper';\nimport { extraShape } from '../../../constants';\n\nconst TitleWithPopover = ({ title, content }) => (\n    <React.Fragment>\n        <span>{ title }</span>\n        <Popover\n            headerContent={<div>{ title }</div>}\n            bodyContent={<div>{ content }</div>}>\n            <Button\n                variant=\"plain\"\n                aria-label={`Action for ${title}`}\n                className='ins-active-general_information__popover-icon'>\n                <OutlinedQuestionCircleIcon />\n            </Button>\n        </Popover>\n    </React.Fragment>\n);\n\nclass SystemCard extends Component {\n    state = {\n        isDisplayNameModalOpen: false,\n        isAnsibleHostModalOpen: false\n    };\n\n    onCancel = () => {\n        this.setState({\n            isDisplayNameModalOpen: false,\n            isAnsibleHostModalOpen: false\n        });\n    };\n\n    onSubmit = (fn) => (value) => {\n        const { entity } = this.props;\n        fn(entity.id, value);\n        this.onCancel();\n    }\n\n    onShowDisplayModal = (event) => {\n        event.preventDefault();\n        this.setState({\n            isDisplayNameModalOpen: true\n        });\n    };\n\n    onShowAnsibleModal = (event) => {\n        event.preventDefault();\n        this.setState({\n            isAnsibleHostModalOpen: true\n        });\n    };\n\n    getAnsibleHost = () => {\n        const { entity } = this.props;\n        return entity.ansible_host || entity.fqdn || entity.id;\n    };\n\n    render() {\n        const {\n            detailLoaded,\n            entity,\n            properties,\n            setDisplayName,\n            setAnsibleHost,\n            writePermissions,\n            handleClick,\n            hasHostName,\n            hasDisplayName,\n            hasAnsibleHostname,\n            hasSAP,\n            hasCPUs,\n            hasSockets,\n            hasCores,\n            hasCPUFlags,\n            hasRAM,\n            extra\n        } = this.props;\n        const { isDisplayNameModalOpen, isAnsibleHostModalOpen } = this.state;\n        return (\n            <Fragment>\n                <LoadingCard\n                    title=\"System properties\"\n                    isLoading={ !detailLoaded }\n                    items={ [\n                        ...hasHostName ? [{\n                            title: <TitleWithPopover\n                                title='Host name'\n                                content='Name imported from the system.'/>,\n                            value: entity.fqdn, size: 'md'\n                        }] : [],\n                        ...hasDisplayName ? [{\n                            title: <TitleWithPopover\n                                title='Display name'\n                                content='System name displayed in an inventory list.'/>,\n                            value: (\n                                <Fragment>\n                                    { entity.display_name }\n                                    <EditButton\n                                        writePermissions={writePermissions}\n                                        link=\"display_name\"\n                                        onClick={this.onShowDisplayModal}\n                                    />\n                                </Fragment>\n                            ), size: 'md'\n                        }] : [],\n                        ...hasAnsibleHostname ? [{\n                            title: <TitleWithPopover\n                                title='Ansible hostname'\n                                content='Hostname that is used in playbooks by Remediations.'/>,\n                            value: (\n                                <Fragment>\n                                    { this.getAnsibleHost() }\n                                    <EditButton\n                                        writePermissions={writePermissions}\n                                        link=\"ansible_name\"\n                                        onClick={this.onShowAnsibleModal}\n                                    />\n                                </Fragment>\n                            ), size: 'md'\n                        }] : [],\n                        ...hasSAP ? [{\n                            title: 'SAP',\n                            value: properties.sapIds?.length,\n                            singular: 'identifier',\n                            target: 'sap_sids',\n                            onClick: () => {\n                                handleClick(\n                                    'SAP IDs (SID)',\n                                    generalMapper(properties.sapIds, 'SID')\n                                );\n                            }\n                        }] : [],\n                        ...hasCPUs ? [{ title: 'Number of CPUs', value: properties.cpuNumber }] : [],\n                        ...hasSockets ? [{ title: 'Sockets', value: properties.sockets }] : [],\n                        ...hasCores ? [{ title: 'Cores per socket', value: properties.coresPerSocket }] : [],\n                        ...hasCPUFlags ? [{\n                            title: 'CPU flags',\n                            value: properties?.cpuFlags?.length,\n                            singular: 'flag',\n                            target: 'flag',\n                            onClick: () => handleClick('CPU flags', generalMapper(properties.cpuFlags, 'flag name'))\n                        }] : [],\n                        ...hasRAM ? [{ title: 'RAM', value: properties.ramSize }] : [],\n                        ...extra.map(({ onClick, ...item }) => ({\n                            ...item,\n                            ...onClick && { onClick: (e) => onClick(e, handleClick) }\n                        }))\n                    ] }\n                />\n                <TextInputModal\n                    isOpen={ isDisplayNameModalOpen }\n                    title='Edit display name'\n                    value={ entity && entity.display_name }\n                    ariaLabel='Host inventory display name'\n                    modalOuiaId=\"edit-display-name-modal\"\n                    cancelOuiaId=\"cancel-edit-display-name\"\n                    confirmOuiaId=\"confirm-edit-display-name\"\n                    inputOuiaId=\"input-edit-display-name\"\n                    onCancel={ this.onCancel }\n                    onSubmit={ this.onSubmit(setDisplayName) }\n                />\n                <TextInputModal\n                    isOpen={ isAnsibleHostModalOpen }\n                    title='Edit Ansible host'\n                    value={ entity && this.getAnsibleHost() }\n                    ariaLabel='Ansible host'\n                    modalOuiaId=\"edit-ansible-name-modal\"\n                    cancelOuiaId=\"cancel-edit-ansible-name\"\n                    confirmOuiaId=\"confirm-edit-ansible-name\"\n                    inputOuiaId=\"input-edit-ansible-name\"\n                    onCancel={ this.onCancel }\n                    onSubmit={ this.onSubmit(setAnsibleHost) }\n                />\n            </Fragment>\n        );\n    }\n}\n\nSystemCard.propTypes = {\n    detailLoaded: PropTypes.bool,\n    entity: PropTypes.shape({\n        // eslint-disable-next-line camelcase\n        display_name: PropTypes.string,\n        // eslint-disable-next-line camelcase\n        ansible_host: PropTypes.string,\n        fqdn: PropTypes.string,\n        id: PropTypes.string\n    }),\n    properties: PropTypes.shape({\n        cpuNumber: PropTypes.number,\n        sockets: PropTypes.number,\n        coresPerSocket: PropTypes.number,\n        ramSize: PropTypes.string,\n        storage: PropTypes.arrayOf(PropTypes.shape({\n            device: PropTypes.string,\n            // eslint-disable-next-line camelcase\n            mount_point: PropTypes.string,\n            options: PropTypes.shape({}),\n            type: PropTypes.string\n        })),\n        sapIds: PropTypes.arrayOf(PropTypes.string),\n        cpuFlags: PropTypes.array\n    }),\n    setDisplayName: PropTypes.func,\n    setAnsibleHost: PropTypes.func,\n    writePermissions: PropTypes.bool,\n    handleClick: PropTypes.func,\n    hasHostName: PropTypes.bool,\n    hasDisplayName: PropTypes.bool,\n    hasAnsibleHostname: PropTypes.bool,\n    hasSAP: PropTypes.bool,\n    hasCPUs: PropTypes.bool,\n    hasSockets: PropTypes.bool,\n    hasCores: PropTypes.bool,\n    hasCPUFlags: PropTypes.bool,\n    hasRAM: PropTypes.bool,\n    extra: PropTypes.arrayOf(extraShape)\n};\nSystemCard.defaultProps = {\n    detailLoaded: false,\n    entity: {},\n    properties: {},\n    hasHostName: true,\n    hasDisplayName: true,\n    hasAnsibleHostname: true,\n    hasSAP: true,\n    hasCPUs: true,\n    hasSockets: true,\n    hasCores: true,\n    hasCPUFlags: true,\n    hasRAM: true,\n    extra: []\n};\n\nTitleWithPopover.propTypes = {\n    title: PropTypes.string.isRequired,\n    content: PropTypes.string.isRequired\n};\n\nfunction mapDispatchToProps(dispatch) {\n    const reloadWrapper = (id, event) => {\n        event.payload.then(data => {\n            dispatch(systemProfile(id, { hasItems: true }));\n            dispatch(loadEntity(id, { hasItems: true }, { showTags: true }));\n            return data;\n        });\n\n        return event;\n    };\n\n    return {\n        setDisplayName: (id, value) => {\n            dispatch(reloadWrapper(id, editDisplayName(id, value)));\n        },\n\n        setAnsibleHost: (id, value) => {\n            dispatch(reloadWrapper(id, editAnsibleHost(id, value)));\n        }\n    };\n}\n\nexport default connect(({\n    entityDetails: {\n        entity\n    },\n    systemProfileStore: {\n        systemProfile\n    }\n}) => ({\n    entity,\n    detailLoaded: systemProfile && systemProfile.loaded,\n    properties: propertiesSelector(systemProfile, entity)\n}), mapDispatchToProps)(SystemCard);\n","/* eslint-disable camelcase */\n\nimport React from 'react';\nimport {\n    CheckCircleIcon,\n    TimesIcon,\n    OutlinedQuestionCircleIcon,\n    OutlinedArrowAltCircleUpIcon,\n    OutlinedArrowAltCircleDownIcon\n} from '@patternfly/react-icons';\nimport { sortable } from '@patternfly/react-table';\nimport { Tooltip } from '@patternfly/react-core';\n\nexport const statusHelper = {\n    UP: <Tooltip content=\"Service is running\">\n        <OutlinedArrowAltCircleUpIcon className=\"ins-c-inventory__detail--up\" />\n    </Tooltip>,\n    DOWN: <Tooltip content=\"Service has stopped\">\n        <OutlinedArrowAltCircleDownIcon className=\"ins-c-inventory__detail--down\" />\n    </Tooltip>\n};\n\nexport const enabledHelper = {\n    true: <Tooltip content=\"Source enabled\">\n        <CheckCircleIcon className=\"ins-c-inventory__detail--enabled\" />\n    </Tooltip>,\n    false: <Tooltip content=\"Source disabled\">\n        <TimesIcon className=\"ins-c-inventory__detail--disabled\" />\n    </Tooltip>\n};\n\nexport const diskMapper = (devices = []) => ({\n    cells: [\n        {\n            title: 'Device',\n            transforms: [sortable]\n        },\n        {\n            title: 'Label',\n            transforms: [sortable]\n        },\n        {\n            title: 'Mount point',\n            transforms: [sortable]\n        },\n        {\n            title: 'Type',\n            transforms: [sortable]\n        }\n    ],\n    rows: devices.map(({\n        device,\n        label,\n        mountpoint,\n        options,\n        mounttype\n    }) => {\n        const calculatedOptions = (options && options.options) || options;\n        return ({\n            isOpen: false,\n            child: <div>\n                {\n                    calculatedOptions &&\n                    Object.entries(calculatedOptions.value || calculatedOptions)\n                    .map(([oneKey, option]) => `${oneKey}=${option.value || option}`).join(',  ')\n                }\n            </div>,\n            cells: [\n                (device && device.value) || device,\n                label,\n                (mountpoint && mountpoint.value) || mountpoint,\n                (mounttype && mounttype.value) || mounttype\n            ]\n        });\n    }),\n    expandable: true\n});\n\nexport const productsMapper = (products = []) => ({\n    cells: [\n        {\n            title: 'Name',\n            transforms: [sortable]\n        },\n        'Status'\n    ],\n    rows: products.map(product => ([\n        product.name,\n        {\n            title: statusHelper[product.status] ||\n            <Tooltip content=\"Unknown service status\">\n                <OutlinedQuestionCircleIcon className=\"ins-c-inventory__detail--unknown\" />\n            </Tooltip>\n        }\n    ]))\n});\n\nexport const interfaceMapper = (data = []) => ({\n    cells: [\n        {\n            title: 'MAC address',\n            transforms: [sortable]\n        },\n        {\n            title: 'MTU',\n            transforms: [sortable]\n        },\n        {\n            title: 'Name',\n            transforms: [sortable]\n        },\n        'State',\n        {\n            title: 'Type',\n            transforms: [sortable]\n        }\n    ],\n    rows: data.map(item => ([\n        item.mac_address,\n        item.mtu,\n        item.name,\n        {\n            title: statusHelper[item.state] ||\n            <Tooltip content=\"Unknown service status\">\n                <OutlinedQuestionCircleIcon className=\"ins-c-inventory__detail--unknown\" />\n            </Tooltip>\n        },\n        item.type\n    ]))\n});\n\nexport const repositoriesMapper = ({ enabled, disabled } = { enabled: [], disabled: [] }) => ({\n    cells: [\n        {\n            title: 'Name',\n            transforms: [sortable]\n        },\n        {\n            title: 'Enabled',\n            transforms: [sortable]\n        },\n        {\n            title: 'GPG check',\n            transforms: [sortable]\n        }\n    ],\n    rows: [...enabled, ...disabled].map(repository => ([\n        {\n            title: repository.name,\n            sortValue: repository.name\n        },\n        {\n            title: enabledHelper[Boolean(repository.enabled)],\n            sortValue: `${repository.enabled}`\n        },\n        {\n            title: enabledHelper[Boolean(repository.gpgcheck)],\n            sortValue: `${repository.gpgcheck}`\n        }\n    ])),\n    filters: [\n        { type: 'textual' },\n        {\n            type: 'checkbox',\n            options: [\n                { label: 'Is enabled', value: 'true' },\n                { label: 'Not enabled', value: 'false' }\n            ]\n        },\n        {\n            type: 'checkbox',\n            options: [\n                { label: 'Is enabled', value: 'true' },\n                { label: 'Not enabled', value: 'false' }\n            ]\n        }\n    ]\n});\n\nexport const generalMapper = (data = [], title = '') => ({\n    cells: [{\n        title,\n        transforms: [sortable]\n    }],\n    rows: data.map(item => ([item])),\n    filters: [{ type: 'textual' }]\n});\n","import React, { useEffect, useState, Fragment } from 'react';\nimport { Provider } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport GeneralInformation from '../GeneralInfo/GeneralInformation';\nexport { default as TextInputModal } from '../GeneralInfo/TextInputModal';\nimport fallback from '../SpinnerFallback';\nimport systemProfileStore from '../../store/systemProfileStore';\n\nconst GeneralInfoTab = ({ getRegistry, ...props }) => {\n    const [Wrapper, setWrapper] = useState();\n    useEffect(() => {\n        if (getRegistry) {\n            getRegistry()?.register?.({ systemProfileStore });\n        }\n\n        setWrapper(() => getRegistry ? Provider : Fragment);\n    }, []);\n    return Wrapper ? <Wrapper\n        {...getRegistry && {\n            store: getRegistry().getStore()\n        }}\n    >\n        <GeneralInformation {...props} />\n    </Wrapper> : fallback;\n};\n\nGeneralInfoTab.propTypes = {\n    getRegistry: PropTypes.func\n};\n\nexport default GeneralInfoTab;\n"],"names":["InventoryApp","registry","init","value","getRegistry","Provider","store","getStore","basename","getBaseName","window","location","pathname","propTypes","useLogger","PropTypes","defaultProps","ReactDOM","document","getElementById","BiosCard","bios","detailLoaded","hasVendor","hasVersion","handleClick","hasReleaseDate","extra","title","isLoading","items","vendor","version","isDate","releaseDate","date","Date","type","map","onClick","e","csm","extraShape","connect","systemProfile","systemProfileStore","loaded","biosSelector","VersionTooltip","egg","client","content","CollectionCard","collectionInformation","entity","hasClient","hasLastCheckIn","hasRegistered","hasInsightsId","hasReporter","DateFormat","updated","toLocaleString","created","insights_id","reporter","hasEgg","entityDetails","collectionInformationSelector","enabledRepos","repositories","enabled","length","disabled","filter","Boolean","join","ConfigurationCard","configuration","hasPackages","hasServices","hasProcesses","hasRepositories","packages","singular","target","generalMapper","services","processes","plural","repositoriesMapper","base_url","name","gpgcheck","configurationSelector","InfrastructureCard","infrastructure","hasType","hasIPv4","hasIPv6","hasInterfaces","ipv4","ipv6","nics","interfaceMapper","infrastructureSelector","OperatingSystemCard","systemInfo","hasRelease","hasKernelRelease","hasArchitecture","hasLastBoot","hasKernelModules","operatingSystem","release","kernelRelease","architecture","bootTime","kernelModules","TitleWithPopover","headerContent","bodyContent","variant","className","SystemCard","isDisplayNameModalOpen","isAnsibleHostModalOpen","setState","fn","props","id","onCancel","event","preventDefault","ansible_host","fqdn","this","properties","setDisplayName","setAnsibleHost","writePermissions","hasHostName","hasDisplayName","hasAnsibleHostname","hasSAP","hasCPUs","hasSockets","hasCores","hasCPUFlags","hasRAM","state","Fragment","size","display_name","link","onShowDisplayModal","getAnsibleHost","onShowAnsibleModal","sapIds","cpuNumber","sockets","coresPerSocket","cpuFlags","ramSize","isOpen","ariaLabel","modalOuiaId","cancelOuiaId","confirmOuiaId","inputOuiaId","onSubmit","Component","storage","device","mount_point","options","propertiesSelector","dispatch","reloadWrapper","payload","then","data","hasItems","loadEntity","showTags","editDisplayName","editAnsibleHost","statusHelper","UP","DOWN","enabledHelper","true","false","cells","transforms","sortable","rows","item","mac_address","mtu","repository","sortValue","filters","label","GeneralInfoTab","useState","Wrapper","setWrapper","useEffect","register","fallback"],"sourceRoot":""}