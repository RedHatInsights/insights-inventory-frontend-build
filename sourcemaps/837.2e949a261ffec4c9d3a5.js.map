{"version":3,"sources":["webpack:///./src/AppEntry.js","webpack:///./src/Utilities/constants.js","webpack:///./src/components/SystemDetails/GeneralInfo.js","webpack:///./src/store/action-types.js","webpack:///./src/store/actions.js","webpack:///./src/store/system-issues-actions.js"],"names":["InventoryApp","registry","init","value","getRegistry","Provider","store","getStore","basename","getBaseName","window","location","pathname","propTypes","useLogger","PropTypes","defaultProps","TEXT_FILTER","TEXTUAL_CHIP","TAG_CHIP","STALE_CHIP","REGISTERED_CHIP","staleness","label","registered","InventoryContext","createContext","defaultFilters","staleFilter","registeredWithFilter","filterToGroup","filter","valuesKey","reduce","accGroup","group","key","acc","curr","isSelected","item","meta","tag","tagKey","arrayToSelection","selected","cells","namespace","title","reduceFilters","filters","oneFilter","textFilter","tagFilters","loadSystems","options","showTags","getEntities","limitedItems","items","length","per_page","slice","page","config","hasItems","sortBy","orderDirection","direction","toUpperCase","activeFilters","orderBy","itemsPage","loadEntities","reloadWrapper","event","callback","payload","then","data","isEmpty","check","generateFilter","status","source","tagsFilter","filterbyName","Array","isArray","Boolean","GeneralInfoTab","getRegisty","props","useState","Wrapper","setWrapper","useEffect","Fragment","fallback","makeActions","actions","asyncActions","asyncInventory","systemIssues","ACTION_TYPES","keyBy","k","INVENTORY_ACTION_TYPES","SYSTEM_ISSUE_TYPES","CLEAR_NOTIFICATIONS","SELECT_ENTITY","SET_INVENTORY_FILTER","SET_PAGINATION","SET_DISPLAY_NAME","SET_ANSIBLE_HOST","UPDATE_ENTITIES","CHANGE_SORT","FILTER_ENTITIES","APPLICATION_SELECTED","SHOW_ENTITIES","FILTER_SELECT","ENTITIES_LOADING","CLEAR_FILTERS","TOGGLE_TAG_MODAL","CONFIG_CHANGED","TOGGLE_DRAWER","deleteEntity","systems","displayName","type","hosts","notifications","fulfilled","variant","description","dismissable","setFilter","filtersList","clearNotifications","editDisplayName","id","display_name","setPagination","perPage","systemProfile","itemId","getEntitySystemProfile","editAnsibleHost","ansible_host","getAdvisorData","systemId","advisor","getVulnData","cves","getPatchData","patch","getComplianceData","compliance"],"mappings":"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","file":"js/837.56862be06c86e964fe71.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { init, RegistryContext } from './store';\nimport App from './App';\nimport { getBaseName } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport logger from 'redux-logger';\n\nconst InventoryApp = () => {\n    const registry = IS_DEV ? init(logger) : init();\n    return <RegistryContext.Provider value={{\n        getRegistry: () => registry\n    }}>\n        <Provider store={registry.getStore()}>\n            <Router basename={getBaseName(window.location.pathname)}>\n                <App />\n            </Router>\n        </Provider>\n    </RegistryContext.Provider>;\n};\n\nInventoryApp.propTypes = {\n    useLogger: PropTypes.bool\n};\n\nInventoryApp.defaultProps = {\n    useLogger: false\n};\n\nexport default InventoryApp;\n","import { createContext } from 'react';\nimport { loadEntities } from '../store/actions';\nexport const TEXT_FILTER = 'hostname_or_id';\nexport const TEXTUAL_CHIP = 'textual';\nexport const TAG_CHIP = 'tags';\nexport const STALE_CHIP = 'staleness';\nexport const REGISTERED_CHIP = 'registered_with';\nexport const staleness = [\n    { label: 'Fresh', value: 'fresh' },\n    { label: 'Stale', value: 'stale' },\n    { label: 'Stale warning', value: 'stale_warning' }\n];\nexport const registered = [{ label: 'Insights', value: 'insights' }];\nexport const InventoryContext = createContext({});\nexport const defaultFilters = {\n    staleFilter: ['fresh', 'stale'],\n    registeredWithFilter: ['insights']\n};\n\nexport function filterToGroup(filter = [], valuesKey = 'values') {\n    return filter.reduce((accGroup, group) => ({\n        ...accGroup,\n        [group.key]: group[valuesKey].reduce((acc, curr) => ({ ...acc, [curr.key]: {\n            isSelected: true,\n            group: curr.group,\n            item: {\n                meta: {\n                    tag: {\n                        key: curr.tagKey,\n                        value: curr.value\n                    }\n                }\n            }\n        } }), {})\n    }), {});\n}\n\nexport const arrayToSelection = (selected) => selected.reduce((acc, { cells: [key, value, namespace] }) => ({\n    ...acc,\n    [namespace]: {\n        ...acc[namespace?.title || namespace],\n        [key?.title || key]: {\n            isSelected: true,\n            group: { value: namespace?.title || namespace, label: namespace?.title || namespace },\n            item: {\n                value: key?.title || key,\n                meta: { tag: { key: key?.title || key, value: value?.title || value } }\n            }\n        }\n    }\n}), {});\n\nexport function reduceFilters(filters = []) {\n    return filters.reduce((acc, oneFilter) => {\n        if (oneFilter.value === TEXT_FILTER) {\n            return { ...acc, textFilter: oneFilter.filter };\n        } else if ('tagFilters' in oneFilter) {\n            return {\n                ...acc,\n                tagFilters: filterToGroup(oneFilter.tagFilters)\n            };\n        } else if ('staleFilter' in oneFilter) {\n            return {\n                ...acc,\n                staleFilter: oneFilter.staleFilter\n            };\n        } else if ('registeredWithFilter' in oneFilter) {\n            return {\n                ...acc,\n                registeredWithFilter: oneFilter.registeredWithFilter\n            };\n        }\n\n        return acc;\n    }, {\n        textFilter: '',\n        tagFilters: {},\n        ...defaultFilters\n    });\n}\n\nexport const loadSystems = (options, showTags, getEntities) => {\n    const limitedItems = options?.items?.length > options.per_page ? options?.items?.slice(\n        (options?.page - 1) * options.per_page, options?.page * options.per_page\n    ) : options?.items;\n\n    const config = {\n        ...options.hasItems && {\n            sortBy: options?.sortBy?.key,\n            orderDirection: options?.sortBy?.direction?.toUpperCase()\n        },\n        ...options,\n        filters: options?.filters || options?.activeFilters,\n        orderBy: options?.orderBy || options?.sortBy?.key,\n        orderDirection: options?.orderDirection?.toUpperCase() || options?.sortBy?.direction?.toUpperCase(),\n        ...limitedItems?.length > 0 && {\n            itemsPage: options?.page,\n            page: 1\n        }\n    };\n\n    return loadEntities(limitedItems, config, { showTags }, getEntities);\n};\n\nexport const reloadWrapper = (event, callback) => {\n    event.payload.then(data => {\n        callback();\n        return data;\n    });\n\n    return event;\n};\n\nexport const isEmpty = (check) => !check || check?.length === 0;\n\nexport const generateFilter = (status, source, tagsFilter, filterbyName) => ([\n    !isEmpty(status) && {\n        staleFilter: Array.isArray(status) ? status : [status]\n    },\n    !isEmpty(tagsFilter) && {\n        tagFilters: Array.isArray(tagsFilter) ? tagsFilter : [tagsFilter]\n    },\n    !isEmpty(source) && {\n        registeredWithFilter: Array.isArray(source) ? source : [source]\n    },\n    !isEmpty(filterbyName) && {\n        value: 'hostname_or_id',\n        filter: Array.isArray(filterbyName) ? filterbyName[0] : filterbyName\n    },\n    (!isEmpty(status) || !isEmpty(tagsFilter) || !isEmpty(filterbyName)) && isEmpty(source) && {\n        registeredWithFilter: []\n    },\n    (!isEmpty(source) || !isEmpty(tagsFilter) || !isEmpty(filterbyName)) && isEmpty(status) && {\n        staleFilter: []\n    }\n].filter(Boolean));\n","import React, { useEffect, useState, Fragment } from 'react';\nimport { Provider } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport GeneralInformation from '../GeneralInfo/GeneralInformation';\nexport { default as TextInputModal } from '../GeneralInfo/TextInputModal';\nimport fallback from '../SpinnerFallback';\n\nconst GeneralInfoTab = ({ getRegisty, ...props }) => {\n    const [Wrapper, setWrapper] = useState();\n    useEffect(() => {\n        setWrapper(() => getRegisty ? Provider : Fragment);\n    }, []);\n    return Wrapper ? <Wrapper\n        {...getRegisty && {\n            store: getRegisty().getStore()\n        }}\n    >\n        <GeneralInformation {...props} />\n    </Wrapper> : fallback;\n};\n\nGeneralInfoTab.propTypes = {\n    getRegisty: PropTypes.func\n};\n\nexport default GeneralInfoTab;\n","import keyBy from 'lodash/keyBy';\n\nconst makeActions = (actions) => {\n    return actions?.reduce?.((acc, curr) => ({\n        ...acc,\n        [curr]: curr,\n        [`${curr}_PENDING`]: `${curr}_PENDING`,\n        [`${curr}_FULFILLED`]: `${curr}_FULFILLED`,\n        [`${curr}_REJECTED`]: `${curr}_REJECTED`\n    }), {});\n};\n\nconst actions = [\n    'ALERT_ADD',\n    'ALERT_DISMISS',\n    'REMOVE_ENTITY'\n];\n\nexport const asyncActions = [\n    'GET_ENTITIES',\n    'GET_ENTITY',\n    'UPDATE_DISPLAY_NAME',\n    'LOAD_WRITE_PERMISSIONS',\n    'LOAD_SYSTEM_PROFILE',\n    'SET_ANSIBLE_HOST'\n];\n\nexport const asyncInventory = [\n    'LOAD_ENTITIES',\n    'LOAD_ENTITY',\n    'REMOVE_ENTITY',\n    'LOAD_SYSTEM_PROFILE',\n    'SET_DISPLAY_NAME',\n    'SET_ANSIBLE_HOST',\n    'LOAD_TAGS',\n    'ALL_TAGS'\n];\n\nexport const systemIssues = [\n    'LOAD_ADVISOR_RECOMMENDATIONS',\n    'LOAD_APPLICABLE_CVES',\n    'LOAD_APPLICABLE_ADVISORIES',\n    'LOAD_COMPLIANCE_POLICIES'\n];\n\nexport const ACTION_TYPES = { ...keyBy(actions, k => k), ...makeActions(asyncActions), ...makeActions(asyncInventory) };\nexport const INVENTORY_ACTION_TYPES = makeActions(asyncInventory);\nexport const SYSTEM_ISSUE_TYPES = makeActions(systemIssues);\n\nexport const CLEAR_NOTIFICATIONS = '@@INSIGHTS-CORE/NOTIFICATIONS/CLEAR_NOTIFICATIONS';\nexport const SELECT_ENTITY = 'SELECT_ENTITY';\nexport const SET_INVENTORY_FILTER = 'SET_INVENTORY_FILTER';\nexport const SET_PAGINATION = 'SET_PAGINATION';\nexport const SET_DISPLAY_NAME = 'SET_DISPLAY_NAME';\nexport const SET_ANSIBLE_HOST = 'SET_ANSIBLE_HOST';\n\nexport const UPDATE_ENTITIES = 'UPDATE_ENTITIES';\nexport const CHANGE_SORT = 'CHANGE_SORT';\nexport const FILTER_ENTITIES = 'FILTER_ENTITIES';\nexport const APPLICATION_SELECTED = 'APPLICATION_SELECTED';\nexport const SHOW_ENTITIES = 'SHOW_ENTITIES';\nexport const FILTER_SELECT = 'FILTER_SELECT';\nexport const ENTITIES_LOADING = 'ENTITIES_LOADING';\nexport const CLEAR_FILTERS = 'CLEAR_FILTERS';\nexport const TOGGLE_TAG_MODAL = 'TOGGLE_TAG_MODAL';\nexport const CONFIG_CHANGED = 'CONFIG_CHANGED';\nexport const TOGGLE_DRAWER = 'TOGGLE_INVENTORY_DRAWER';\n","import { ACTION_TYPES, CLEAR_NOTIFICATIONS, SET_INVENTORY_FILTER, SET_PAGINATION } from './action-types';\nimport { hosts, getEntitySystemProfile } from '../api';\nexport * from './system-issues-actions';\nexport * from './inventory-actions';\n\nexport const deleteEntity = (systems, displayName) => ({\n    type: ACTION_TYPES.REMOVE_ENTITY,\n    payload: hosts.apiHostDeleteById(systems),\n    meta: {\n        notifications: {\n            fulfilled: {\n                variant: 'success',\n                title: 'Delete operation finished',\n                description: `${displayName} has been successfully removed.`,\n                dismissable: true\n            }\n        },\n        systems\n    }\n});\n\nexport const setFilter = (filtersList) => ({\n    type: SET_INVENTORY_FILTER,\n    payload: {\n        filtersList\n    }\n});\n\nexport const clearNotifications = () => {\n    return ({\n        type: CLEAR_NOTIFICATIONS\n    });\n};\n\nexport const editDisplayName = (id, value) => ({\n    type: ACTION_TYPES.UPDATE_DISPLAY_NAME,\n    payload: hosts.apiHostPatchById([id], { display_name: value }), // eslint-disable-line camelcase\n    meta: {\n        notifications: {\n            fulfilled: {\n                variant: 'success',\n                title: `Display name for entity with ID ${id} has been changed to ${value}`,\n                dismissable: true\n            }\n        }\n    }\n});\n\nexport const setPagination = (page, perPage) => ({\n    type: SET_PAGINATION,\n    payload: {\n        page, perPage\n    }\n});\n\nexport const systemProfile = (itemId) => ({\n    type: ACTION_TYPES.LOAD_SYSTEM_PROFILE,\n    payload: getEntitySystemProfile(itemId, {})\n});\n\nexport const editAnsibleHost = (id, value) => ({\n    type: ACTION_TYPES.SET_ANSIBLE_HOST,\n    payload: hosts.apiHostPatchById([id], { ansible_host: value }), // eslint-disable-line camelcase\n    meta: {\n        notifications: {\n            fulfilled: {\n                variant: 'success',\n                title: 'Ansible hostname has been updated',\n                dismissable: true\n            }\n        }\n    }\n});\n","import { SYSTEM_ISSUE_TYPES } from './action-types';\nimport {\n    cves,\n    compliance,\n    advisor,\n    patch\n} from '../api';\n\nexport const getAdvisorData = (systemId) => ({\n    type: SYSTEM_ISSUE_TYPES.LOAD_ADVISOR_RECOMMENDATIONS,\n    payload: advisor(systemId)\n});\n\nexport const getVulnData = (systemId) => ({\n    type: SYSTEM_ISSUE_TYPES.LOAD_APPLICABLE_CVES,\n    payload: cves(systemId)\n});\n\nexport const getPatchData = (systemId) => ({\n    type: SYSTEM_ISSUE_TYPES.LOAD_APPLICABLE_ADVISORIES,\n    payload: patch(systemId)\n});\n\nexport const getComplianceData = (systemId) => ({\n    type: SYSTEM_ISSUE_TYPES.LOAD_COMPLIANCE_POLICIES,\n    payload: compliance(systemId)\n});\n"],"sourceRoot":""}