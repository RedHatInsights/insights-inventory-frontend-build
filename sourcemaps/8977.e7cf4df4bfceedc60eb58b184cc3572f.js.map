{"version":3,"file":"js/8977.04ed03038e47a4bc12b9.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-core/dist/esm/components/HelperText/HelperText.js","webpack:///./node_modules/@patternfly/react-core/dist/esm/components/HelperText/HelperTextItem.js","webpack:///./node_modules/@patternfly/react-icons/dist/esm/icons/minus-icon.js","webpack:///./node_modules/@patternfly/react-styles/css/components/HelperText/helper-text.mjs","webpack:///./src/components/InventoryGroups/Modals/CreateGroupModal.js","webpack:///./src/components/SystemDetails/GeneralInfo.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/Main/Main.js","webpack:///./src/components/InventoryGroups/SmallComponents/CreateGroupButton.js","webpack:///./src/components/InventoryGroups/Modals/SearchInput.js","webpack:///./src/components/InventoryGroups/Modals/AddHostToGroupModal.js","webpack:///./src/routes/InventoryTable.js"],"sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/HelperText/helper-text';\nimport { css } from '@patternfly/react-styles';\nexport const HelperText = (_a) => {\n    var { children, className, component = 'div', id, isLiveRegion = false } = _a, props = __rest(_a, [\"children\", \"className\", \"component\", \"id\", \"isLiveRegion\"]);\n    const Component = component;\n    return (React.createElement(Component, Object.assign({ id: id, className: css(styles.helperText, className) }, (isLiveRegion && { 'aria-live': 'polite' }), props), children));\n};\nHelperText.displayName = 'HelperText';\n//# sourceMappingURL=HelperText.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/HelperText/helper-text';\nimport { css } from '@patternfly/react-styles';\nimport MinusIcon from '@patternfly/react-icons/dist/esm/icons/minus-icon';\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-triangle-icon';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/esm/icons/check-circle-icon';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon';\nconst variantStyle = {\n    default: '',\n    indeterminate: styles.modifiers.indeterminate,\n    warning: styles.modifiers.warning,\n    success: styles.modifiers.success,\n    error: styles.modifiers.error\n};\nexport const HelperTextItem = (_a) => {\n    var { children, className, component = 'div', variant = 'default', icon, isDynamic = false, hasIcon = isDynamic, id, screenReaderText = `${variant} status` } = _a, props = __rest(_a, [\"children\", \"className\", \"component\", \"variant\", \"icon\", \"isDynamic\", \"hasIcon\", \"id\", \"screenReaderText\"]);\n    const Component = component;\n    return (React.createElement(Component, Object.assign({ className: css(styles.helperTextItem, variantStyle[variant], isDynamic && styles.modifiers.dynamic, className), id: id }, props),\n        icon && (React.createElement(\"span\", { className: css(styles.helperTextItemIcon), \"aria-hidden\": true }, icon)),\n        hasIcon && !icon && (React.createElement(\"span\", { className: css(styles.helperTextItemIcon), \"aria-hidden\": true },\n            (variant === 'default' || variant === 'indeterminate') && React.createElement(MinusIcon, null),\n            variant === 'warning' && React.createElement(ExclamationTriangleIcon, null),\n            variant === 'success' && React.createElement(CheckCircleIcon, null),\n            variant === 'error' && React.createElement(ExclamationCircleIcon, null))),\n        React.createElement(\"span\", { className: css(styles.helperTextItemText) },\n            children,\n            isDynamic && React.createElement(\"span\", { className: \"pf-u-screen-reader\" },\n                \": \",\n                screenReaderText,\n                \";\"))));\n};\nHelperTextItem.displayName = 'HelperTextItem';\n//# sourceMappingURL=HelperTextItem.js.map","import { createIcon } from '../createIcon';\n\nexport const MinusIconConfig = {\n  name: 'MinusIcon',\n  height: 512,\n  width: 448,\n  svgPath: 'M416 208H32c-17.67 0-32 14.33-32 32v32c0 17.67 14.33 32 32 32h384c17.67 0 32-14.33 32-32v-32c0-17.67-14.33-32-32-32z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const MinusIcon = createIcon(MinusIconConfig);\n\nexport default MinusIcon;","import './helper-text.css';\nexport default {\n  \"helperText\": \"pf-c-helper-text\",\n  \"helperTextItem\": \"pf-c-helper-text__item\",\n  \"helperTextItemIcon\": \"pf-c-helper-text__item-icon\",\n  \"helperTextItemText\": \"pf-c-helper-text__item-text\",\n  \"modifiers\": {\n    \"indeterminate\": \"pf-m-indeterminate\",\n    \"warning\": \"pf-m-warning\",\n    \"success\": \"pf-m-success\",\n    \"error\": \"pf-m-error\",\n    \"dynamic\": \"pf-m-dynamic\"\n  },\n  \"themeDark\": \"pf-theme-dark\"\n};","import React, { useCallback, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { createGroupSchema } from './ModalSchemas/schemes';\nimport Modal from './Modal';\nimport apiWithToast from '../utils/apiWithToast';\nimport {\n    createGroup,\n    validateGroupName\n} from '../utils/api';\nimport { useDispatch } from 'react-redux';\nimport awesomeDebouncePromise from 'awesome-debounce-promise';\n\nconst CreateGroupModal = ({\n    isModalOpen,\n    setIsModalOpen,\n    reloadData\n}) => {\n    const dispatch = useDispatch();\n\n    const handleCreateGroup = useCallback(\n        (values) => {\n            const statusMessages = {\n                onSuccess: {\n                    title: 'Success',\n                    description: `${values.name} has been created successfully`\n                },\n                onError: { title: 'Error', description: 'Failed to create group' }\n            };\n            return apiWithToast(dispatch, () => createGroup(values), statusMessages);\n        },\n        [isModalOpen]\n    );\n\n    const schema = useMemo(() => {\n        const check = async (value) => {\n            const results = await validateGroupName(value);\n            if (results === true) {\n                throw 'Group name already exists';\n            }\n\n            return undefined;\n        };\n\n        // eslint-disable-next-line new-cap\n        const d = awesomeDebouncePromise(check, 500, { onlyResolvesLast: false });\n        return createGroupSchema(d);\n    }, []);\n\n    return (\n        <Modal\n            isModalOpen={isModalOpen}\n            closeModal={() => setIsModalOpen(false)}\n            title=\"Create group\"\n            submitLabel=\"Create\"\n            schema={schema}\n            reloadData={reloadData}\n            onSubmit={handleCreateGroup}\n        />\n    );\n};\n\nexport default CreateGroupModal;\n\nCreateGroupModal.propTypes = {\n    isModalOpen: PropTypes.bool,\n    setIsModalOpen: PropTypes.func,\n    reloadData: PropTypes.func\n};\n","import React from 'react';\n\nimport GeneralInformation from '../GeneralInfo/GeneralInformation';\nexport { default as TextInputModal } from '../GeneralInfo/TextInputModal';\n\nconst GeneralInfoTab = (props) => {\n    return <GeneralInformation  {...props} />;\n};\n\nexport default GeneralInfoTab;\n","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useEffect } from 'react';\nimport classNames from 'classnames';\nimport '../Main/main.css';\nexport var Main = function (_a) {\n    var children = _a.children, className = _a.className, props = __rest(_a, [\"children\", \"className\"]);\n    useEffect(function () {\n        console.error(\"Using deprecated \\\"Main\\\" component. Do not use it. Either remove it from your JSX or replace it by \\\"section\\\" HTML element.\");\n    }, []);\n    return (_jsx(\"section\", __assign({}, props, { className: \"\".concat(classNames(className, 'pf-l-page__main-section pf-c-page__main-section')) }, { children: children })));\n};\nexport var InternalMain = Main;\nexport default Main;\n//# sourceMappingURL=Main.js.map","import React from 'react';\nimport { Button, Text } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\n\nexport const CreateGroupButton = ({ closeModal }) => (\n    <>\n        <Text>Or</Text>\n        <Button variant=\"secondary\" className=\"pf-u-w-50\" onClick={closeModal}>\n        Create a new group\n        </Button>\n    </>\n);\n\nCreateGroupButton.propTypes = {\n    closeModal: PropTypes.func\n};\n","import React, { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport {\n    HelperText,\n    HelperTextItem,\n    Select,\n    SelectOption\n} from '@patternfly/react-core';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\n\nconst SearchInput = () => {\n    const { change } = useFormApi();\n    const [isLoading, setIsLoading] = useState(true);\n    //fetch data from the store\n    const storeGroups = useSelector(({ groups }) => groups?.data?.results);\n\n    //select options is a constructed array of objects with values for dropdown\n    const [selectOptions, setSelectOptions] = useState([]);\n    //when storeGroups is changed - we create selectOptions\n    useEffect(() => {\n        setSelectOptions(\n            (storeGroups || []).reduce((acc, group) => {\n                acc.push({\n                    DeviceGroup: {\n                        ID: group.id,\n                        Name: group.name,\n                        UpdatedAt: group.updated_at,\n                        CreatedAt: group.created_at\n                    }\n                });\n                return acc;\n            }, [])\n        );\n        setIsLoading(false);\n    }, [storeGroups]);\n\n    const [isOpen, setIsOpen] = useState(false);\n    const [selected, setSelected] = useState(null);\n    const [searchTerm, setSearchTerm] = useState('');\n\n    const onToggle = (isOpen) => {\n        setIsOpen(isOpen);\n    };\n\n    const updateSelection = (value) => {\n        // Update state when an option has been selected.\n        setSelected(value);\n        setIsOpen(false);\n        //this is requried to make select component pass the saved data up to the modal\n        change('group', value);\n    };\n\n    const clearSelection = () => {\n        setSearchTerm('');\n        updateSelection(null);\n        setIsOpen(false);\n    };\n\n    const onSelect = (_event, selection, isPlaceholder) => {\n        if (isPlaceholder) {\n            clearSelection();\n        }\n        else {\n            updateSelection(selection);\n        }\n    };\n\n    return (\n        <>\n            <HelperText>\n                {!isLoading && !selected && isOpen && selectOptions.length ? (\n                    <HelperTextItem variant=\"warning\" className=\"pf-u-font-weight-bold\">\n            Over {selectOptions.length} results found. Refine your search.\n                    </HelperTextItem>\n                ) : (\n                    <HelperTextItem className=\"pf-u-font-weight-bold\">\n            Select a group\n                    </HelperTextItem>\n                )}\n            </HelperText>\n            <Select\n                variant=\"typeahead\"\n                typeAheadAriaLabel=\"Select a group\"\n                onToggle={onToggle}\n                onSelect={onSelect}\n                onClear={clearSelection}\n                selections={selected ? selected : searchTerm}\n                isOpen={isOpen}\n                aria-labelledby=\"typeahead-select-id-1\"\n                placeholderText=\"Type or click to select a group\"\n                isInputValuePersisted={true}\n                maxHeight={'180px'}\n            >\n                {selectOptions.length === 0\n                    ? []\n                    : selectOptions.map(({ DeviceGroup }) => (\n                        <SelectOption\n                            key={DeviceGroup.ID}\n                            value={{\n                                toString: () => DeviceGroup.Name,\n                                groupId: DeviceGroup.ID\n                            }}\n                            {...(DeviceGroup.description && {\n                                description: DeviceGroup.description\n                            })}\n                        />\n                    ))}\n            </Select>\n        </>\n    );\n};\n\nexport default SearchInput;\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Modal from './Modal';\nimport { addHostToGroup } from '../utils/api';\nimport apiWithToast from '../utils/apiWithToast';\nimport { useDispatch } from 'react-redux';\nimport { CreateGroupButton } from '../SmallComponents/CreateGroupButton';\nimport SearchInput from './SearchInput';\nimport { fetchGroups } from '../../../store/inventory-actions';\nimport { addHostSchema } from './ModalSchemas/schemes';\nimport CreateGroupModal from './CreateGroupModal';\n\nconst AddHostToGroupModal = ({\n    isModalOpen,\n    setIsModalOpen,\n    modalState,\n    reloadData\n}) => {\n    const dispatch = useDispatch();\n    //we have to fetch groups to make them available in state\n    useEffect(() => {\n        dispatch(fetchGroups());\n\n    }, []);\n    const [isCreateGroupModalOpen, setIsCreateGroupModalOpen] = useState(false);\n\n    const handleAddDevices = (values) => {\n        const { group } = values;\n        const statusMessages = {\n            onSuccess: {\n                title: 'Success',\n                description: `System(s) have been added to ${group.toString()} successfully`\n            },\n            onError: { title: 'Error', description: `Failed to add ${modalState.name} to ${modalState.groupName}` }\n        };\n\n        apiWithToast(\n            dispatch,\n            () => addHostToGroup(group.groupId, modalState.id),\n            statusMessages\n        );\n    };\n\n    return (\n        <>\n            <Modal\n                isModalOpen={isModalOpen}\n                closeModal={() => setIsModalOpen(false)}\n                title=\"Add to group\"\n                submitLabel=\"Add\"\n                schema={addHostSchema(modalState.name)}\n                additionalMappers={{\n                    'search-input': {\n                        component: SearchInput\n                    },\n                    'create-group-btn': {\n                        component: CreateGroupButton,\n                        closeModal: () => {\n                            setIsCreateGroupModalOpen(true);\n                            setIsModalOpen(false);\n                        }\n                    }\n                }}\n                initialValues={modalState}\n                onSubmit={handleAddDevices}\n                reloadData={reloadData}\n            />\n            {isCreateGroupModalOpen && (\n                <CreateGroupModal\n                    isModalOpen={isCreateGroupModalOpen}\n                    setIsModalOpen={setIsCreateGroupModalOpen}\n                    reloadData={() => console.log('data reloaded')}\n                />\n            )}\n        </>\n    );\n};\n\nAddHostToGroupModal.propTypes = {\n    modalState: PropTypes.shape({\n        id: PropTypes.string,\n        name: PropTypes.string,\n        groupName: PropTypes.string\n    }),\n    isModalOpen: PropTypes.bool,\n    setIsModalOpen: PropTypes.func,\n    reloadData: PropTypes.func,\n    setIsCreateGroupModalOpen: PropTypes.func,\n    deviceIds: PropTypes.array\n};\n\nexport default AddHostToGroupModal;\n","/* eslint-disable camelcase */\nimport React, { useEffect, useState, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport './inventory.scss';\nimport { PageHeader, PageHeaderTitle, Main } from '@redhat-cloud-services/frontend-components';\nimport * as actions from '../store/actions';\nimport { Grid, GridItem } from '@patternfly/react-core';\nimport { addNotification as addNotificationAction } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport DeleteModal from '../Utilities/DeleteModal';\nimport { TextInputModal } from '../components/SystemDetails/GeneralInfo';\nimport flatMap from 'lodash/flatMap';\nimport { useWritePermissions, RHCD_FILTER_KEY, UPDATE_METHOD_KEY, generateFilter } from '../Utilities/constants';\nimport { InventoryTable as InventoryTableCmp } from '../components/InventoryTable';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\nimport AddHostToGroupModal from '../components/InventoryGroups/Modals/AddHostToGroupModal';\nimport useFeatureFlag from '../Utilities/useFeatureFlag';\n\nconst reloadWrapper = (event, callback) => {\n    event.payload.then(callback);\n    return event;\n};\n\nconst calculateChecked = (rows = [], selected) => (\n    rows.every(({ id }) => selected && selected.has(id))\n        ? rows.length > 0\n        : rows.some(({ id }) => selected && selected.has(id)) && null\n);\n\nconst mapTags = ({ category, values }) => values.map(({ tagKey, value }) => `${\n    category ? `${category}/` : ''\n}${\n    tagKey\n}${\n    value ? `=${value}` : ''\n}`);\n\nconst filterMapper = {\n    staleFilter: ({ staleFilter }, searchParams) => staleFilter.forEach(item => searchParams.append('status', item)),\n    osFilter: ({ osFilter }, searchParams) => osFilter\n    ?.forEach(item => searchParams.append('operating_system', item)),\n    registeredWithFilter: ({ registeredWithFilter }, searchParams) => registeredWithFilter\n    ?.forEach(item => searchParams.append('source', item)),\n    value: ({ value, filter }, searchParams) => value === 'hostname_or_id' &&\n    Boolean(filter) &&\n    searchParams.append('hostname_or_id', filter),\n    tagFilters: ({ tagFilters }, searchParams) => tagFilters?.length > 0 && searchParams.append(\n        'tags',\n        flatMap(tagFilters, mapTags)\n    ),\n    rhcdFilter: ({ rhcdFilter }, searchParams) => rhcdFilter?.forEach(item => searchParams.append(RHCD_FILTER_KEY, item)),\n    lastSeenFilter: ({ lastSeenFilter }, searchParams) =>\n        Object.keys(lastSeenFilter || {})?.forEach(item => item === 'mark' &&\n        searchParams.append('last_seen', lastSeenFilter[item])),\n    updateMethodFilter: ({ updateMethodFilter }, searchParams) =>\n        updateMethodFilter?.forEach(item => searchParams.append(UPDATE_METHOD_KEY, item)),\n    groupHostFilter: ({ groupHostFilter }, searchParams) => groupHostFilter\n    ?.forEach(item => searchParams.append('host_group', item))\n};\n\nconst calculateFilters = (searchParams, filters = []) => {\n    filters.forEach((filter) => {\n        Object.keys(filter).forEach(key => {\n            filterMapper?.[key]?.(filter, searchParams);\n        });\n    });\n    return searchParams;\n};\n\nexport const calculatePagination = (searchParams, page, perPage) => {\n    const currSearch = new URLSearchParams(location.search);\n    const newPage = page !== undefined ? page : currSearch.get('page');\n    const newPerPage = perPage !== undefined ? perPage : currSearch.get('per_page');\n    !isNaN(parseInt(newPage)) && searchParams.append('page', newPage);\n    !isNaN(parseInt(newPerPage)) && searchParams.append('per_page', newPerPage);\n};\n\nconst Inventory = ({\n    status,\n    source,\n    filterbyName,\n    tagsFilter,\n    operatingSystem,\n    rhcdFilter,\n    updateMethodFilter,\n    lastSeenFilter,\n    page,\n    perPage,\n    initialLoading,\n    hasAccess,\n    groupHostsFilter\n}) => {\n    const history = useHistory();\n    const chrome = useChrome();\n    const inventory = useRef(null);\n    const [isModalOpen, handleModalToggle] = useState(false);\n    const [currentSytem, activateSystem] = useState({});\n    const [filters, onSetfilters] = useState(\n        generateFilter(\n            status,\n            source,\n            tagsFilter,\n            filterbyName,\n            operatingSystem,\n            rhcdFilter,\n            updateMethodFilter,\n            groupHostsFilter,\n            lastSeenFilter)\n    );\n    const [ediOpen, onEditOpen] = useState(false);\n    const [addHostGroupModalOpen, setAddHostGroupModalOpen] = useState(false);\n    const [globalFilter, setGlobalFilter] = useState();\n    const writePermissions = useWritePermissions();\n    const rows = useSelector(({ entities }) => entities?.rows, shallowEqual);\n    const loaded = useSelector(({ entities }) => entities?.loaded);\n    const selected = useSelector(({ entities }) => entities?.selected);\n    const dispatch = useDispatch();\n    const groupsEnabled = useFeatureFlag('hbi.ui.inventory-groups');\n\n    const onSelectRows = (id, isSelected) => dispatch(actions.selectEntity(id, isSelected));\n    const onRefresh = (options, callback) => {\n        onSetfilters(options?.filters);\n        const searchParams = new URLSearchParams();\n        calculateFilters(searchParams, options?.filters);\n        // eslint-disable-next-line camelcase\n        calculatePagination(searchParams, options?.page, options?.per_page);\n        const search = searchParams.toString();\n        history.push({\n            search,\n            hash: location.hash\n        });\n\n        if (callback) {\n            callback(options);\n        }\n    };\n\n    useEffect(() => {\n        chrome.updateDocumentTitle('Inventory | Red Hat Insights');\n        chrome?.hideGlobalFilter?.(false);\n        chrome.appAction('system-list');\n        chrome.appObjectId();\n        chrome.on('GLOBAL_FILTER_UPDATE', ({ data }) => {\n            const [workloads, SID, tags] = chrome?.mapGlobalFilter?.(data, false, true);\n            setGlobalFilter({\n                tags,\n                filter: {\n                    ...globalFilter?.filter,\n                    system_profile: {\n                        ...globalFilter?.filter?.system_profile,\n                        ...workloads?.SAP?.isSelected && { sap_system: true },\n                        ...workloads && workloads['Ansible Automation Platform']?.isSelected\n                            && { ansible: 'not_nil' },\n                        ...workloads?.['Microsoft SQL']?.isSelected\n                            && { mssql: 'not_nil' },\n                        ...SID?.length > 0 && { sap_sids: SID }\n                    }\n                }\n            });\n        });\n        dispatch(actions.clearNotifications());\n\n        if (perPage || page) {\n            dispatch(actions.setPagination(\n                Array.isArray(page) ? page[0] : page,\n                Array.isArray(perPage) ? perPage[0] : perPage\n            ));\n        }\n    }, []);\n\n    const calculateSelected = () => selected ? selected.size : 0;\n\n    //This wrapping of table actions allows to pass feature flag status and receive a prepared array of actions\n    const tableActions = (groupsUiStatus, row) => {\n        const isGroupPresentForThisRow = (row) => {\n            return row && row?.groups?.title !== '';\n        };\n\n        const standardActions = [\n            {\n                title: 'Edit',\n                onClick: (_event, _index, data) => {\n                    activateSystem(() => data);\n                    onEditOpen(() => true);\n                }\n            },\n            {\n                title: 'Delete',\n                onClick: (_event, _index, { id: systemId, display_name: displayName }) => {\n                    activateSystem(() => ({\n                        id: systemId,\n                        displayName\n                    }));\n                    handleModalToggle(() => true);\n                }\n            }\n        ];\n\n        const actionsBehindFeatureFlag = [\n            {\n                title: 'Add to group',\n                onClick: (_event, _index, { id: systemId, display_name: displayName, group_name: groupName }) => {\n                    activateSystem(() => ({\n                        id: systemId,\n                        name: displayName,\n                        groupName\n                    }));\n                    setAddHostGroupModalOpen(true);\n                }\n            },\n            {\n                title: 'Remove from group',\n                isDisabled: isGroupPresentForThisRow(row)\n            }\n        ];\n\n        return [...(groupsUiStatus ? actionsBehindFeatureFlag : []), ...standardActions];\n    };\n\n    return (\n        <React.Fragment>\n            <PageHeader className=\"pf-m-light\">\n                <PageHeaderTitle title='Inventory'/>\n            </PageHeader>\n            <Main>\n                <Grid gutter=\"md\">\n                    <GridItem span={12}>\n                        <InventoryTableCmp\n                            hasAccess={hasAccess}\n                            isRbacEnabled\n                            customFilters={{ filters, globalFilter }}\n                            isFullView\n                            inventoryRef={inventory}\n                            showTags\n                            onRefresh={onRefresh}\n                            hasCheckbox={writePermissions}\n                            autoRefresh\n                            initialLoading={initialLoading}\n                            tableProps={\n                                (writePermissions && {\n                                    actionResolver: (row) => tableActions(groupsEnabled, row), canSelectAll: false })}\n                            {...(writePermissions && {\n                                actionsConfig: {\n                                    actions: [{\n                                        label: 'Delete',\n                                        props: {\n                                            isDisabled: calculateSelected() === 0,\n                                            variant: 'secondary',\n                                            onClick: () => {\n                                                activateSystem(Array.from(selected.values()));\n                                                handleModalToggle(true);\n                                            }\n                                        }\n                                    }]\n                                },\n                                bulkSelect: {\n                                    count: calculateSelected(),\n                                    id: 'bulk-select-systems',\n                                    items: [{\n                                        title: 'Select none (0)',\n                                        onClick: () => {\n                                            onSelectRows(-1, false);\n                                        }\n                                    },\n                                    {\n                                        ...loaded && rows && rows.length > 0 ? {\n                                            title: `Select page (${ rows.length })`,\n                                            onClick: () => {\n                                                onSelectRows(0, true);\n                                            }\n                                        } : {}\n                                    }],\n                                    checked: calculateChecked(rows, selected),\n                                    onSelect: (value) => {\n                                        onSelectRows(0, value);\n                                    }\n                                }\n                            })}\n                            onRowClick={(_e, id, app) => history.push(`/${id}${app ? `/${app}` : ''}`)}\n                        />\n                    </GridItem>\n                </Grid>\n            </Main>\n            <DeleteModal\n                className ='sentry-mask data-hj-suppress'\n                handleModalToggle={handleModalToggle}\n                isModalOpen={isModalOpen}\n                currentSytems={currentSytem}\n                onConfirm={() => {\n                    let displayName;\n                    let removeSystems;\n                    if (Array.isArray(currentSytem)) {\n                        removeSystems = currentSytem.map(({ id }) => id);\n                        displayName = currentSytem.length > 1 ?\n                            `${currentSytem.length} systems` :\n                            currentSytem[0].display_name;\n                    } else {\n                        displayName = currentSytem.displayName;\n                        removeSystems = [currentSytem.id];\n                    }\n\n                    dispatch(addNotificationAction({\n                        id: 'remove-initiated',\n                        variant: 'warning',\n                        title: 'Delete operation initiated',\n                        description: `Removal of ${displayName} started.`,\n                        dismissable: false\n                    }));\n                    dispatch(reloadWrapper(actions.deleteEntity(removeSystems, displayName), () => onRefresh({ filters })));\n                    handleModalToggle(false);\n                }}\n            />\n            <TextInputModal\n                title=\"Edit display name\"\n                isOpen={ediOpen}\n                value={currentSytem.display_name}\n                onCancel={() => onEditOpen(false)}\n                onSubmit={(value) => {\n                    dispatch(actions.editDisplayName(currentSytem.id, value));\n                    onEditOpen(false);\n                }}\n            />\n            <AddHostToGroupModal\n                isModalOpen={addHostGroupModalOpen}\n                setIsModalOpen={setAddHostGroupModalOpen}\n                modalState={currentSytem}\n                //should be replaced with a fetch to update the values in the table\n                reloadData={() => console.log('data reloaded')}\n            />\n        </React.Fragment>\n    );\n};\n\nInventory.propTypes = {\n    status: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string), PropTypes.string]),\n    source: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string), PropTypes.string]),\n    operatingSystem: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string), PropTypes.string]),\n    filterbyName: PropTypes.arrayOf(PropTypes.string),\n    tagsFilter: PropTypes.any,\n    page: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.number])),\n    perPage: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.number])),\n    initialLoading: PropTypes.bool,\n    rhcdFilter: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string), PropTypes.string]),\n    updateMethodFilter: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string), PropTypes.string]),\n    hasAccess: PropTypes.bool,\n    groupHostsFilter: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string), PropTypes.string]),\n    lastSeenFilter: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string), PropTypes.string])\n};\n\nInventory.defaultProps = {\n    initialLoading: true\n};\n\nexport default Inventory;\n"],"names":["HelperText","_a","children","className","component","id","isLiveRegion","props","__rest","Component","Object","assign","displayName","variantStyle","default","indeterminate","warning","success","error","HelperTextItem","variant","icon","isDynamic","hasIcon","screenReaderText","MinusIconConfig","name","height","width","svgPath","yOffset","xOffset","MinusIcon","i","CreateGroupModal","isModalOpen","setIsModalOpen","reloadData","dispatch","useDispatch","handleCreateGroup","useCallback","values","statusMessages","onSuccess","title","description","onError","apiWithToast","createGroup","schema","useMemo","check","value","validateGroupName","undefined","d","awesomeDebouncePromise","onlyResolvesLast","createGroupSchema","closeModal","submitLabel","onSubmit","propTypes","PropTypes","GeneralInformation","__assign","t","s","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","useEffect","console","concat","CreateGroupButton","Text","Button","onClick","change","useFormApi","useState","isLoading","setIsLoading","storeGroups","useSelector","groups","data","results","selectOptions","setSelectOptions","reduce","acc","group","push","DeviceGroup","ID","Name","UpdatedAt","updated_at","CreatedAt","created_at","isOpen","setIsOpen","selected","setSelected","searchTerm","setSearchTerm","updateSelection","clearSelection","Select","typeAheadAriaLabel","onToggle","onSelect","_event","selection","isPlaceholder","onClear","selections","placeholderText","isInputValuePersisted","maxHeight","map","SelectOption","key","toString","groupId","AddHostToGroupModal","modalState","fetchGroups","isCreateGroupModalOpen","setIsCreateGroupModalOpen","Modal","addHostSchema","additionalMappers","SearchInput","initialValues","groupName","addHostToGroup","log","deviceIds","calculateChecked","rows","every","has","some","mapTags","category","tagKey","filterMapper","staleFilter","searchParams","forEach","item","append","osFilter","registeredWithFilter","filter","Boolean","tagFilters","flatMap","rhcdFilter","RHCD_FILTER_KEY","lastSeenFilter","keys","updateMethodFilter","UPDATE_METHOD_KEY","groupHostFilter","calculatePagination","page","perPage","currSearch","URLSearchParams","location","search","newPage","get","newPerPage","isNaN","parseInt","Inventory","status","source","filterbyName","tagsFilter","operatingSystem","initialLoading","hasAccess","groupHostsFilter","history","useHistory","chrome","useChrome","inventory","useRef","handleModalToggle","currentSytem","activateSystem","generateFilter","filters","onSetfilters","ediOpen","onEditOpen","addHostGroupModalOpen","setAddHostGroupModalOpen","globalFilter","setGlobalFilter","writePermissions","useWritePermissions","entities","shallowEqual","loaded","groupsEnabled","useFeatureFlag","onSelectRows","isSelected","actions","onRefresh","options","callback","calculateFilters","per_page","hash","updateDocumentTitle","hideGlobalFilter","appAction","appObjectId","on","mapGlobalFilter","workloads","SID","tags","system_profile","SAP","sap_system","ansible","mssql","sap_sids","Array","isArray","calculateSelected","size","PageHeader","PageHeaderTitle","Grid","gutter","GridItem","span","InventoryTable","isRbacEnabled","customFilters","isFullView","inventoryRef","showTags","hasCheckbox","autoRefresh","tableProps","actionResolver","row","groupsUiStatus","standardActions","_index","systemId","display_name","actionsBehindFeatureFlag","group_name","isDisabled","isGroupPresentForThisRow","tableActions","canSelectAll","actionsConfig","label","from","bulkSelect","count","items","checked","onRowClick","_e","app","DeleteModal","currentSytems","onConfirm","removeSystems","event","addNotificationAction","dismissable","payload","then","TextInputModal","onCancel","defaultProps"],"sourceRoot":""}