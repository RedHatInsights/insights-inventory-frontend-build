{"version":3,"file":"js/854.d2d01ad70c4978eaa483.js","mappings":"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","sources":["webpack:///./src/AppEntry.js","webpack:///./src/bootstrap.js","webpack:///./src/components/GeneralInfo/BiosCard/BiosCard.js","webpack:///./src/components/GeneralInfo/CollectionCard/CollectionCard.js","webpack:///./src/components/GeneralInfo/ConfigurationCard/ConfigurationCard.js","webpack:///./src/components/GeneralInfo/InfrastructureCard/InfrastructureCard.js","webpack:///./src/components/GeneralInfo/OperatingSystemCard/OperatingSystemCard.js","webpack:///./src/components/GeneralInfo/SystemCard/SystemCard.js","webpack:///./src/components/GeneralInfo/dataMapper/dataMapper.js","webpack:///./src/components/GeneralInfo/selectors/selectors.js","webpack:///./src/components/SystemDetails/GeneralInfo.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { init, RegistryContext } from './store';\nimport App from './App';\nimport { getBaseName } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport logger from 'redux-logger';\n\nconst InventoryApp = () => {\n    const registry = IS_DEV ? init(logger) : init();\n    return <RegistryContext.Provider value={{\n        getRegistry: () => registry\n    }}>\n        <Provider store={registry.getStore()}>\n            <Router basename={getBaseName(window.location.pathname)}>\n                <App />\n            </Router>\n        </Provider>\n    </RegistryContext.Provider>;\n};\n\nInventoryApp.propTypes = {\n    useLogger: PropTypes.bool\n};\n\nInventoryApp.defaultProps = {\n    useLogger: false\n};\n\nexport default InventoryApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport InventoryApp from './AppEntry';\n\nReactDOM.render(\n    <InventoryApp />,\n    document.getElementById('root')\n);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport LoadingCard from '../LoadingCard';\nimport { biosSelector } from '../selectors';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { extraShape, isDate } from '../../../constants';\n\nconst BiosCard = ({ bios, detailLoaded, hasVendor, hasVersion, handleClick, hasReleaseDate, extra }) => (<LoadingCard\n    title=\"BIOS\"\n    isLoading={ !detailLoaded }\n    items={ [\n        ...hasVendor ? [{ title: 'Vendor', value: bios.vendor }] : [],\n        ...hasVersion ? [{ title: 'Version', value: bios.version }] : [],\n        ...hasReleaseDate ? [{ title: 'Release date', value: (isDate(bios.releaseDate) ?\n            <DateFormat date={ new Date(bios.releaseDate) } type=\"onlyDate\" /> :\n            'Not available'\n        ) }] : [],\n        ...extra.map(({ onClick, ...item }) => ({\n            ...item,\n            ...onClick && { onClick: (e) => onClick(e, handleClick) }\n        }))\n    ] }\n/>);\n\nBiosCard.propTypes = {\n    detailLoaded: PropTypes.bool,\n    handleClick: PropTypes.func,\n    bios: PropTypes.shape({\n        vendor: PropTypes.string,\n        version: PropTypes.string,\n        releaseDate: PropTypes.string,\n        csm: PropTypes.arrayOf(PropTypes.string)\n    }),\n    hasVendor: PropTypes.bool,\n    hasVersion: PropTypes.bool,\n    hasReleaseDate: PropTypes.bool,\n    extra: PropTypes.arrayOf(extraShape)\n};\nBiosCard.defaultProps = {\n    detailLoaded: false,\n    handleClick: () => undefined,\n    extra: [],\n    hasVendor: true,\n    hasVersion: true,\n    hasReleaseDate: true\n};\n\nexport default connect(({\n    systemProfileStore: {\n        systemProfile\n    }\n}) => ({\n    detailLoaded: systemProfile && systemProfile.loaded,\n    bios: biosSelector(systemProfile)\n}))(BiosCard);\n","/* eslint-disable camelcase */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { Tooltip } from '@patternfly/react-core';\n\nimport LoadingCard from '../LoadingCard';\nimport { collectionInformationSelector } from '../selectors';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { extraShape } from '../../../constants';\n\nconst VersionTooltip = ({ egg, client }) => (\n    <Tooltip\n        content={\n            <React.Fragment>\n                <p>RPM version: { client || 'Not available' }</p>\n                <p>Dynamic update version: { egg || 'Not available' }</p>\n            </React.Fragment>\n        }\n    >\n        <span>{ client || egg || 'Not available' }</span>\n    </Tooltip>\n);\n\nVersionTooltip.propTypes = {\n    egg: PropTypes.string,\n    client: PropTypes.string\n};\n\nconst CollectionCard = ({\n    detailLoaded,\n    collectionInformation,\n    entity,\n    handleClick,\n    hasClient,\n    hasLastCheckIn,\n    hasRegistered,\n    hasInsightsId,\n    hasReporter,\n    hasMachineId,\n    extra\n}) => (<LoadingCard\n    title=\"Collection information\"\n    isLoading={ !detailLoaded }\n    items={ [\n        ...hasClient ? [{\n            title: 'Insights client',\n            value: <VersionTooltip egg={collectionInformation.egg} client={collectionInformation.client}/>\n        }] : [],\n        ...hasLastCheckIn ? [{ title: 'Last check-in', value: entity && (\n            DateFormat ?\n                <DateFormat date={ entity.updated } type=\"onlyDate\" /> :\n                new Date(entity.updated).toLocaleString()\n        ) }] : [],\n        ...hasRegistered ? [{ title: 'Registered', value: entity && (\n            DateFormat ?\n                <DateFormat date={entity.created} type=\"onlyDate\" /> :\n                new Date(entity.created).toLocaleString()\n        ) }] : [],\n        ...hasInsightsId ? [{ title: 'Insights id', value: entity && entity.insights_id }] : [],\n        ...hasReporter ? [{ title: 'Reporter', value: entity && entity.reporter }] : [],\n        ...hasMachineId ? [{ title: 'RHEL machine id', value: entity && entity.rhel_machine_id }] : [],\n        ...extra.map(({ onClick, ...item }) => ({\n            ...item,\n            ...onClick && { onClick: (e) => onClick(e, handleClick) }\n        }))\n    ] }\n/>);\n\nCollectionCard.propTypes = {\n    detailLoaded: PropTypes.bool,\n    entity: PropTypes.shape({\n        updated: PropTypes.string,\n        created: PropTypes.string,\n        insights_id: PropTypes.string,\n        reporter: PropTypes.string,\n        rhel_machine_id: PropTypes.string\n    }),\n    handleClick: PropTypes.func,\n    collectionInformation: PropTypes.shape({\n        client: PropTypes.string,\n        egg: PropTypes.string\n    }),\n    hasClient: PropTypes.bool,\n    hasLastCheckIn: PropTypes.bool,\n    hasRegistered: PropTypes.bool,\n    hasInsightsId: PropTypes.bool,\n    hasReporter: PropTypes.bool,\n    hasMachineId: PropTypes.bool,\n    extra: PropTypes.arrayOf(extraShape)\n};\nCollectionCard.defaultProps = {\n    detailLoaded: false,\n    handleClick: () => undefined,\n    hasClient: true,\n    hasEgg: true,\n    hasLastCheckIn: true,\n    hasRegistered: true,\n    hasInsightsId: true,\n    hasReporter: true,\n    hasMachineId: true,\n    extra: []\n};\n\nexport default connect(({\n    entityDetails: {\n        entity\n    },\n    systemProfileStore: {\n        systemProfile\n    }\n}) => ({\n    entity,\n    detailLoaded: systemProfile && systemProfile.loaded,\n    collectionInformation: collectionInformationSelector(systemProfile)\n}))(CollectionCard);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport LoadingCard from '../LoadingCard';\nimport { generalMapper, repositoriesMapper } from '../dataMapper';\nimport { configurationSelector } from '../selectors';\nimport { extraShape } from '../../../constants';\n\nexport function enabledRepos(repositories) {\n    if (repositories) {\n        return [\n            repositories.enabled && repositories.enabled.length > 0 && `${repositories.enabled.length} enabled`,\n            repositories.disabled && repositories.disabled.length > 0 && `${repositories.disabled.length} disabled`\n        ].filter(Boolean).join(' / ');\n    }\n}\n\nconst ConfigurationCard = ({\n    detailLoaded,\n    configuration,\n    handleClick,\n    hasPackages,\n    hasServices,\n    hasProcesses,\n    hasRepositories,\n    extra\n}) => (<LoadingCard\n    title=\"Configuration\"\n    isLoading={ !detailLoaded }\n    items={ [\n        ...hasPackages ? [{\n            title: 'Installed packages',\n            value: configuration.packages?.length,\n            singular: 'package',\n            target: 'installed_packages',\n            onClick: () => {\n                handleClick(\n                    'Installed packages',\n                    generalMapper(configuration.packages, 'Package name')\n                );\n            }\n        }] : [],\n        ...hasServices ? [{\n            title: 'Services',\n            value: configuration.services?.length,\n            singular: 'service',\n            target: 'services',\n            onClick: () => {\n                handleClick(\n                    'Services',\n                    generalMapper(configuration.services, 'Service name')\n                );\n            }\n        }] : [],\n        ...hasProcesses ? [{\n            title: 'Running processes',\n            value: configuration.processes?.length,\n            singular: 'process',\n            plural: 'processes',\n            target: 'running_processes',\n            onClick: () => {\n                handleClick(\n                    'Running processes',\n                    generalMapper(configuration.processes, 'Process name')\n                );\n            }\n        }] : [],\n        ...hasRepositories ? [{\n            title: 'Repositories',\n            value: enabledRepos(configuration.repositories),\n            target: 'repositories',\n            onClick: () => {\n                handleClick(\n                    'Repositories',\n                    repositoriesMapper(configuration.repositories),\n                    'medium'\n                );\n            }\n        }] : [],\n        ...extra.map(({ onClick, ...item }) => ({\n            ...item,\n            ...onClick && { onClick: (e) => onClick(e, handleClick) }\n        }))\n    ] }\n/>);\n\nConfigurationCard.propTypes = {\n    detailLoaded: PropTypes.bool,\n    handleClick: PropTypes.func,\n    configuration: PropTypes.shape({\n        packages: PropTypes.arrayOf(PropTypes.string),\n        services: PropTypes.arrayOf(PropTypes.string),\n        processes: PropTypes.arrayOf(PropTypes.string),\n        repositories: PropTypes.shape({\n            enabled: PropTypes.arrayOf(PropTypes.shape({\n                // eslint-disable-next-line camelcase\n                base_url: PropTypes.string,\n                name: PropTypes.string,\n                enabled: PropTypes.bool,\n                gpgcheck: PropTypes.bool\n            })),\n            disabled: PropTypes.arrayOf(PropTypes.shape({\n                // eslint-disable-next-line camelcase\n                base_url: PropTypes.string,\n                name: PropTypes.string,\n                enabled: PropTypes.bool,\n                gpgcheck: PropTypes.bool\n            }))\n        })\n    }),\n    hasPackages: PropTypes.bool,\n    hasServices: PropTypes.bool,\n    hasProcesses: PropTypes.bool,\n    hasRepositories: PropTypes.bool,\n    extra: PropTypes.arrayOf(extraShape)\n};\nConfigurationCard.defaultProps = {\n    detailLoaded: false,\n    handleClick: () => undefined,\n    hasPackages: true,\n    hasServices: true,\n    hasProcesses: true,\n    hasRepositories: true,\n    extra: []\n};\n\nexport default connect(({\n    systemProfileStore: {\n        systemProfile\n    }\n}) => ({\n    detailLoaded: systemProfile && systemProfile.loaded,\n    configuration: configurationSelector(systemProfile)\n}))(ConfigurationCard);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport LoadingCard from '../LoadingCard';\nimport { generalMapper, interfaceMapper } from '../dataMapper';\nimport { infrastructureSelector } from '../selectors';\nimport { extraShape } from '../../../constants';\n\nconst InfrastructureCard = ({\n    infrastructure,\n    handleClick,\n    detailLoaded,\n    hasType,\n    hasVendor,\n    hasIPv4,\n    hasIPv6,\n    hasInterfaces,\n    extra\n}) => (<LoadingCard\n    title=\"Infrastructure\"\n    isLoading={ !detailLoaded }\n    items={ [\n        ...hasType ? [{ title: 'Type', value: infrastructure.type }] : [],\n        ...hasVendor ? [{ title: 'Vendor', value: infrastructure.vendor }] : [],\n        ...hasIPv4 ? [{\n            title: 'IPv4 addresses',\n            value: infrastructure.ipv4?.length,\n            plural: 'addresses',\n            singular: 'address',\n            target: 'ipv4',\n            onClick: () => {\n                handleClick(\n                    'IPv4',\n                    generalMapper(infrastructure.ipv4, 'IP address')\n                );\n            }\n        }] : [],\n        ...hasIPv6 ? [{\n            title: 'IPv6 addresses',\n            value: infrastructure.ipv6?.length,\n            plural: 'addresses',\n            singular: 'address',\n            onClick: () => {\n                handleClick(\n                    'IPv6',\n                    generalMapper(infrastructure.ipv6, 'IP address')\n                );\n            }\n        }] : [],\n        ...hasInterfaces ? [{\n            title: 'Interfaces/NICs',\n            value: infrastructure.nics?.length,\n            singular: 'NIC',\n            target: 'interfaces',\n            onClick: () => {\n                handleClick(\n                    'Interfaces/NICs',\n                    interfaceMapper(infrastructure.nics),\n                    'medium'\n                );\n            }\n        }] : [],\n        ...extra.map(({ onClick, ...item }) => ({\n            ...item,\n            ...onClick && { onClick: (e) => onClick(e, handleClick) }\n        }))\n    ] }\n/>);\n\nInfrastructureCard.propTypes = {\n    detailLoaded: PropTypes.bool,\n    handleClick: PropTypes.func,\n    infrastructure: PropTypes.shape({\n        type: PropTypes.string,\n        vendor: PropTypes.string,\n        ipv4: PropTypes.array,\n        ipv6: PropTypes.array,\n        nics: PropTypes.array\n    }),\n    hasType: PropTypes.bool,\n    hasVendor: PropTypes.bool,\n    hasIPv4: PropTypes.bool,\n    hasIPv6: PropTypes.bool,\n    hasInterfaces: PropTypes.bool,\n    extra: PropTypes.arrayOf(extraShape)\n};\nInfrastructureCard.defaultProps = {\n    detailLoaded: false,\n    handleClick: () => undefined,\n    hasType: true,\n    hasVendor: true,\n    hasIPv4: true,\n    hasIPv6: true,\n    hasInterfaces: true,\n    extra: []\n};\n\nexport default connect(({\n    entityDetails: {\n        entity\n    },\n    systemProfileStore: {\n        systemProfile\n    }\n}) => ({\n    detailLoaded: systemProfile && systemProfile.loaded,\n    infrastructure: infrastructureSelector(systemProfile, entity)\n}))(InfrastructureCard);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport LoadingCard from '../LoadingCard';\nimport { generalMapper } from '../dataMapper';\nimport { operatingSystem } from '../selectors';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { extraShape, isDate } from '../../../constants';\n\nconst OperatingSystemCard = ({\n    systemInfo,\n    detailLoaded,\n    handleClick,\n    hasRelease,\n    hasKernelRelease,\n    hasArchitecture,\n    hasLastBoot,\n    hasKernelModules,\n    extra\n}) => (\n    <LoadingCard\n        title=\"Operating system\"\n        isLoading={ !detailLoaded }\n        items={ [\n            ...hasRelease ? [{ title: 'Release', value: systemInfo.release }] : [],\n            ...hasKernelRelease ? [{ title: 'Kernel release', value: systemInfo.kernelRelease }] : [],\n            ...hasArchitecture ? [{ title: 'Architecture', value: systemInfo.architecture }] : [],\n            ...hasLastBoot ? [{ title: 'Last boot time', value: (isDate(systemInfo.bootTime) ?\n                <DateFormat date={ systemInfo.bootTime } type=\"onlyDate\" /> :\n                'Not available'\n            )\n            }] : [],\n            ...hasKernelModules ? [{\n                title: 'Kernel modules',\n                value: systemInfo.kernelModules?.length,\n                singular: 'module',\n                target: 'kernel_modules',\n                onClick: () => {\n                    handleClick(\n                        'Kernel modules',\n                        generalMapper(systemInfo.kernelModules, 'Module')\n                    );\n                }\n            }] : [],\n            ...extra.map(({ onClick, ...item }) => ({\n                ...item,\n                ...onClick && { onClick: (e) => onClick(e, handleClick) }\n            }))\n        ] }\n    />\n);\n\nOperatingSystemCard.propTypes = {\n    detailLoaded: PropTypes.bool,\n    handleClick: PropTypes.func,\n    systemInfo: PropTypes.shape({\n        release: PropTypes.string,\n        architecture: PropTypes.string,\n        kernelRelease: PropTypes.string,\n        bootTime: PropTypes.string,\n        kernelModules: PropTypes.arrayOf(PropTypes.string)\n    }),\n    hasRelease: PropTypes.bool,\n    hasKernelRelease: PropTypes.bool,\n    hasArchitecture: PropTypes.bool,\n    hasLastBoot: PropTypes.bool,\n    hasKernelModules: PropTypes.bool,\n    extra: PropTypes.arrayOf(extraShape)\n};\nOperatingSystemCard.defaultProps = {\n    detailLoaded: false,\n    handleClick: () => undefined,\n    hasRelease: true,\n    hasKernelRelease: true,\n    hasArchitecture: true,\n    hasLastBoot: true,\n    hasKernelModules: true,\n    extra: []\n};\n\nexport default connect(({\n    entityDetails: {\n        entity\n    },\n    systemProfileStore: {\n        systemProfile\n    }\n}) => ({\n    detailLoaded: systemProfile && systemProfile.loaded,\n    systemInfo: operatingSystem(systemProfile, entity)\n}))(OperatingSystemCard);\n","import React, { Fragment, Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport LoadingCard from '../LoadingCard';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { propertiesSelector } from '../selectors';\nimport { editDisplayName, editAnsibleHost, systemProfile } from '../../../store/actions';\nimport TextInputModal from '../TextInputModal';\nimport { loadEntity } from '../../../store/actions';\nimport { Popover, Button } from '@patternfly/react-core';\nimport EditButton from '../EditButton';\nimport { generalMapper } from '../dataMapper';\nimport { extraShape } from '../../../constants';\n\nconst TitleWithPopover = ({ title, content }) => (\n    <React.Fragment>\n        <span>{ title }</span>\n        <Popover\n            headerContent={<div>{ title }</div>}\n            bodyContent={<div>{ content }</div>}>\n            <Button\n                variant=\"plain\"\n                aria-label={`Action for ${title}`}\n                className='ins-active-general_information__popover-icon'>\n                <OutlinedQuestionCircleIcon />\n            </Button>\n        </Popover>\n    </React.Fragment>\n);\n\nclass SystemCard extends Component {\n    state = {\n        isDisplayNameModalOpen: false,\n        isAnsibleHostModalOpen: false\n    };\n\n    onCancel = () => {\n        this.setState({\n            isDisplayNameModalOpen: false,\n            isAnsibleHostModalOpen: false\n        });\n    };\n\n    onSubmit = (fn) => (value) => {\n        const { entity } = this.props;\n        fn(entity.id, value);\n        this.onCancel();\n    }\n\n    onShowDisplayModal = (event) => {\n        event.preventDefault();\n        this.setState({\n            isDisplayNameModalOpen: true\n        });\n    };\n\n    onShowAnsibleModal = (event) => {\n        event.preventDefault();\n        this.setState({\n            isAnsibleHostModalOpen: true\n        });\n    };\n\n    getAnsibleHost = () => {\n        const { entity } = this.props;\n        return entity.ansible_host || entity.fqdn || entity.id;\n    };\n\n    render() {\n        const {\n            detailLoaded,\n            entity,\n            properties,\n            setDisplayName,\n            setAnsibleHost,\n            writePermissions,\n            handleClick,\n            hasHostName,\n            hasDisplayName,\n            hasAnsibleHostname,\n            hasSAP,\n            hasCPUs,\n            hasSockets,\n            hasCores,\n            hasCPUFlags,\n            hasRAM,\n            extra\n        } = this.props;\n        const { isDisplayNameModalOpen, isAnsibleHostModalOpen } = this.state;\n        return (\n            <Fragment>\n                <LoadingCard\n                    title=\"System properties\"\n                    isLoading={ !detailLoaded }\n                    items={ [\n                        ...hasHostName ? [{\n                            title: <TitleWithPopover\n                                title='Host name'\n                                content='Name imported from the system.'/>,\n                            value: entity.fqdn, size: 'md'\n                        }] : [],\n                        ...hasDisplayName ? [{\n                            title: <TitleWithPopover\n                                title='Display name'\n                                content='System name displayed in an inventory list.'/>,\n                            value: (\n                                <Fragment>\n                                    { entity.display_name }\n                                    <EditButton\n                                        writePermissions={writePermissions}\n                                        link=\"display_name\"\n                                        onClick={this.onShowDisplayModal}\n                                    />\n                                </Fragment>\n                            ), size: 'md'\n                        }] : [],\n                        ...hasAnsibleHostname ? [{\n                            title: <TitleWithPopover\n                                title='Ansible hostname'\n                                content='Hostname that is used in playbooks by Remediations.'/>,\n                            value: (\n                                <Fragment>\n                                    { this.getAnsibleHost() }\n                                    <EditButton\n                                        writePermissions={writePermissions}\n                                        link=\"ansible_name\"\n                                        onClick={this.onShowAnsibleModal}\n                                    />\n                                </Fragment>\n                            ), size: 'md'\n                        }] : [],\n                        ...hasSAP ? [{\n                            title: 'SAP',\n                            value: properties.sapIds?.length,\n                            singular: 'identifier',\n                            target: 'sap_sids',\n                            onClick: () => {\n                                handleClick(\n                                    'SAP IDs (SID)',\n                                    generalMapper(properties.sapIds, 'SID')\n                                );\n                            }\n                        }] : [],\n                        ...hasCPUs ? [{ title: 'Number of CPUs', value: properties.cpuNumber }] : [],\n                        ...hasSockets ? [{ title: 'Sockets', value: properties.sockets }] : [],\n                        ...hasCores ? [{ title: 'Cores per socket', value: properties.coresPerSocket }] : [],\n                        ...hasCPUFlags ? [{\n                            title: 'CPU flags',\n                            value: properties?.cpuFlags?.length,\n                            singular: 'flag',\n                            target: 'flag',\n                            onClick: () => handleClick('CPU flags', generalMapper(properties.cpuFlags, 'flag name'))\n                        }] : [],\n                        ...hasRAM ? [{ title: 'RAM', value: properties.ramSize }] : [],\n                        ...extra.map(({ onClick, ...item }) => ({\n                            ...item,\n                            ...onClick && { onClick: (e) => onClick(e, handleClick) }\n                        }))\n                    ] }\n                />\n                <TextInputModal\n                    isOpen={ isDisplayNameModalOpen }\n                    title='Edit display name'\n                    value={ entity && entity.display_name }\n                    ariaLabel='Host inventory display name'\n                    modalOuiaId=\"edit-display-name-modal\"\n                    cancelOuiaId=\"cancel-edit-display-name\"\n                    confirmOuiaId=\"confirm-edit-display-name\"\n                    inputOuiaId=\"input-edit-display-name\"\n                    onCancel={ this.onCancel }\n                    onSubmit={ this.onSubmit(setDisplayName) }\n                />\n                <TextInputModal\n                    isOpen={ isAnsibleHostModalOpen }\n                    title='Edit Ansible host'\n                    value={ entity && this.getAnsibleHost() }\n                    ariaLabel='Ansible host'\n                    modalOuiaId=\"edit-ansible-name-modal\"\n                    cancelOuiaId=\"cancel-edit-ansible-name\"\n                    confirmOuiaId=\"confirm-edit-ansible-name\"\n                    inputOuiaId=\"input-edit-ansible-name\"\n                    onCancel={ this.onCancel }\n                    onSubmit={ this.onSubmit(setAnsibleHost) }\n                />\n            </Fragment>\n        );\n    }\n}\n\nSystemCard.propTypes = {\n    detailLoaded: PropTypes.bool,\n    entity: PropTypes.shape({\n        // eslint-disable-next-line camelcase\n        display_name: PropTypes.string,\n        // eslint-disable-next-line camelcase\n        ansible_host: PropTypes.string,\n        fqdn: PropTypes.string,\n        id: PropTypes.string\n    }),\n    properties: PropTypes.shape({\n        cpuNumber: PropTypes.number,\n        sockets: PropTypes.number,\n        coresPerSocket: PropTypes.number,\n        ramSize: PropTypes.string,\n        storage: PropTypes.arrayOf(PropTypes.shape({\n            device: PropTypes.string,\n            // eslint-disable-next-line camelcase\n            mount_point: PropTypes.string,\n            options: PropTypes.shape({}),\n            type: PropTypes.string\n        })),\n        sapIds: PropTypes.arrayOf(PropTypes.string),\n        cpuFlags: PropTypes.array\n    }),\n    setDisplayName: PropTypes.func,\n    setAnsibleHost: PropTypes.func,\n    writePermissions: PropTypes.bool,\n    handleClick: PropTypes.func,\n    hasHostName: PropTypes.bool,\n    hasDisplayName: PropTypes.bool,\n    hasAnsibleHostname: PropTypes.bool,\n    hasSAP: PropTypes.bool,\n    hasCPUs: PropTypes.bool,\n    hasSockets: PropTypes.bool,\n    hasCores: PropTypes.bool,\n    hasCPUFlags: PropTypes.bool,\n    hasRAM: PropTypes.bool,\n    extra: PropTypes.arrayOf(extraShape)\n};\nSystemCard.defaultProps = {\n    detailLoaded: false,\n    entity: {},\n    properties: {},\n    hasHostName: true,\n    hasDisplayName: true,\n    hasAnsibleHostname: true,\n    hasSAP: true,\n    hasCPUs: true,\n    hasSockets: true,\n    hasCores: true,\n    hasCPUFlags: true,\n    hasRAM: true,\n    extra: []\n};\n\nTitleWithPopover.propTypes = {\n    title: PropTypes.string.isRequired,\n    content: PropTypes.string.isRequired\n};\n\nfunction mapDispatchToProps(dispatch) {\n    const reloadWrapper = (id, event) => {\n        event.payload.then(data => {\n            dispatch(systemProfile(id, { hasItems: true }));\n            dispatch(loadEntity(id, { hasItems: true }, { showTags: true }));\n            return data;\n        });\n\n        return event;\n    };\n\n    return {\n        setDisplayName: (id, value) => {\n            dispatch(reloadWrapper(id, editDisplayName(id, value)));\n        },\n\n        setAnsibleHost: (id, value) => {\n            dispatch(reloadWrapper(id, editAnsibleHost(id, value)));\n        }\n    };\n}\n\nexport default connect(({\n    entityDetails: {\n        entity\n    },\n    systemProfileStore: {\n        systemProfile\n    }\n}) => ({\n    entity,\n    detailLoaded: systemProfile && systemProfile.loaded,\n    properties: propertiesSelector(systemProfile, entity)\n}), mapDispatchToProps)(SystemCard);\n","/* eslint-disable camelcase */\n\nimport React from 'react';\nimport {\n    CheckCircleIcon,\n    TimesIcon,\n    OutlinedQuestionCircleIcon,\n    OutlinedArrowAltCircleUpIcon,\n    OutlinedArrowAltCircleDownIcon\n} from '@patternfly/react-icons';\nimport { sortable } from '@patternfly/react-table';\nimport { Tooltip } from '@patternfly/react-core';\n\nexport const statusHelper = {\n    UP: <Tooltip content=\"Service is running\">\n        <OutlinedArrowAltCircleUpIcon className=\"ins-c-inventory__detail--up\" />\n    </Tooltip>,\n    DOWN: <Tooltip content=\"Service has stopped\">\n        <OutlinedArrowAltCircleDownIcon className=\"ins-c-inventory__detail--down\" />\n    </Tooltip>\n};\n\nexport const enabledHelper = {\n    true: <Tooltip content=\"Source enabled\">\n        <CheckCircleIcon className=\"ins-c-inventory__detail--enabled\" />\n    </Tooltip>,\n    false: <Tooltip content=\"Source disabled\">\n        <TimesIcon className=\"ins-c-inventory__detail--disabled\" />\n    </Tooltip>\n};\n\nexport const diskMapper = (devices = []) => ({\n    cells: [\n        {\n            title: 'Device',\n            transforms: [sortable]\n        },\n        {\n            title: 'Label',\n            transforms: [sortable]\n        },\n        {\n            title: 'Mount point',\n            transforms: [sortable]\n        },\n        {\n            title: 'Type',\n            transforms: [sortable]\n        }\n    ],\n    rows: devices.map(({\n        device,\n        label,\n        mountpoint,\n        options,\n        mounttype\n    }) => {\n        const calculatedOptions = (options && options.options) || options;\n        return ({\n            isOpen: false,\n            child: <div>\n                {\n                    calculatedOptions &&\n                    Object.entries(calculatedOptions.value || calculatedOptions)\n                    .map(([oneKey, option]) => `${oneKey}=${option.value || option}`).join(',  ')\n                }\n            </div>,\n            cells: [\n                (device && device.value) || device,\n                label,\n                (mountpoint && mountpoint.value) || mountpoint,\n                (mounttype && mounttype.value) || mounttype\n            ]\n        });\n    }),\n    expandable: true\n});\n\nexport const productsMapper = (products = []) => ({\n    cells: [\n        {\n            title: 'Name',\n            transforms: [sortable]\n        },\n        'Status'\n    ],\n    rows: products.map(product => ([\n        product.name,\n        {\n            title: statusHelper[product.status] ||\n            <Tooltip content=\"Unknown service status\">\n                <OutlinedQuestionCircleIcon className=\"ins-c-inventory__detail--unknown\" />\n            </Tooltip>\n        }\n    ]))\n});\n\nexport const interfaceMapper = (data = []) => ({\n    cells: [\n        {\n            title: 'MAC address',\n            transforms: [sortable]\n        },\n        {\n            title: 'MTU',\n            transforms: [sortable]\n        },\n        {\n            title: 'Name',\n            transforms: [sortable]\n        },\n        'State',\n        {\n            title: 'Type',\n            transforms: [sortable]\n        }\n    ],\n    rows: data.map(item => ([\n        item.mac_address,\n        item.mtu,\n        item.name,\n        {\n            title: statusHelper[item.state] ||\n            <Tooltip content=\"Unknown service status\">\n                <OutlinedQuestionCircleIcon className=\"ins-c-inventory__detail--unknown\" />\n            </Tooltip>\n        },\n        item.type\n    ]))\n});\n\nexport const repositoriesMapper = ({ enabled, disabled } = { enabled: [], disabled: [] }) => ({\n    cells: [\n        {\n            title: 'Name',\n            transforms: [sortable]\n        },\n        {\n            title: 'Enabled',\n            transforms: [sortable]\n        },\n        {\n            title: 'GPG check',\n            transforms: [sortable]\n        }\n    ],\n    rows: [...enabled, ...disabled].map(repository => ([\n        {\n            title: repository.name,\n            sortValue: repository.name\n        },\n        {\n            title: enabledHelper[Boolean(repository.enabled)],\n            sortValue: `${repository.enabled}`\n        },\n        {\n            title: enabledHelper[Boolean(repository.gpgcheck)],\n            sortValue: `${repository.gpgcheck}`\n        }\n    ])),\n    filters: [\n        { type: 'textual' },\n        {\n            type: 'checkbox',\n            options: [\n                { label: 'Is enabled', value: 'true' },\n                { label: 'Not enabled', value: 'false' }\n            ]\n        },\n        {\n            type: 'checkbox',\n            options: [\n                { label: 'Is enabled', value: 'true' },\n                { label: 'Not enabled', value: 'false' }\n            ]\n        }\n    ]\n});\n\nexport const generalMapper = (data = [], title = '') => ({\n    cells: [{\n        title,\n        transforms: [sortable]\n    }],\n    rows: data.map(item => ([item])),\n    filters: [{ type: 'textual' }]\n});\n","/* eslint-disable camelcase */\n\nfunction safeParser(toParse, key) {\n    try {\n        return JSON.parse(toParse);\n    } catch {\n        return { [key]: toParse };\n    }\n}\n\nexport const propertiesSelector = ({\n    number_of_cpus,\n    number_of_sockets,\n    cores_per_socket,\n    ramSize,\n    disk_devices,\n    sap_sids,\n    cpu_flags\n} = {}, { facts } = { }) => ({\n    cpuNumber: number_of_cpus || facts?.rhsm?.CPU_CORES,\n    sockets: number_of_sockets || facts?.rhsm?.CPU_SOCKETS,\n    coresPerSocket: cores_per_socket || (\n        facts?.rhsm?.CPU_CORES\n            && facts?.rhsm?.CPU_CORES\n            && Number(facts?.rhsm?.CPU_CORES, 10) / Number(facts?.rhsm?.CPU_SOCKETS, 10)\n    ),\n    ramSize: ramSize || (facts?.rhsm?.MEMORY && `${facts?.rhsm?.MEMORY} GB`),\n    storage: disk_devices && disk_devices.map(({ device, label, mount_point, options, type }) => ({\n        ...device && safeParser(device, 'device'),\n        label,\n        ...mount_point && safeParser(mount_point, 'mountpoint'),\n        ...options && safeParser(options, 'options'),\n        ...type && safeParser(type, 'mounttype')\n    })\n    ),\n    sapIds: sap_sids,\n    cpuFlags: cpu_flags\n});\n\nexport const operatingSystem = ({\n    arch,\n    os_release,\n    os_kernel_version,\n    last_boot_time,\n    kernel_modules\n} = {}, { facts } = {}) => ({\n    release: os_release,\n    kernelRelease: os_kernel_version,\n    architecture: arch || facts?.rhsm?.ARCHITECTURE,\n    bootTime: last_boot_time,\n    kernelModules: kernel_modules\n});\n\nexport const biosSelector = ({\n    bios_vendor,\n    bios_version,\n    bios_release_date\n} = {}) => ({\n    vendor: bios_vendor,\n    version: bios_version,\n    releaseDate: bios_release_date\n});\n\nexport const infrastructureSelector = ({\n    infrastructure_type,\n    infrastructure_vendor,\n    network = {}\n} = {}, { facts } = {}) => ({\n    type: infrastructure_type || (\n        facts?.rhsm?.IS_VIRTUAL !== undefined && (facts?.rhsm?.IS_VIRTUAL ? 'virtual' : 'physical')\n    ) || undefined,\n    vendor: infrastructure_vendor,\n    ipv4: network.ipv4,\n    ipv6: network.ipv6,\n    nics: network.interfaces\n});\n\nexport const configurationSelector = ({\n    installed_packages,\n    enabled_services,\n    running_processes,\n    repositories\n} = {}) => ({\n    packages: installed_packages,\n    services: enabled_services,\n    processes: running_processes,\n    repositories\n});\n\nexport const collectionInformationSelector = ({\n    insights_client_version,\n    insights_egg_version\n} = {}) => ({\n    client: insights_client_version,\n    egg: insights_egg_version\n});\n","import React, { useEffect, useState, Fragment } from 'react';\nimport { Provider } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport GeneralInformation from '../GeneralInfo/GeneralInformation';\nexport { default as TextInputModal } from '../GeneralInfo/TextInputModal';\nimport fallback from '../SpinnerFallback';\nimport systemProfileStore from '../../store/systemProfileStore';\n\nconst GeneralInfoTab = ({ getRegistry, ...props }) => {\n    const [Wrapper, setWrapper] = useState();\n    useEffect(() => {\n        if (getRegistry) {\n            getRegistry()?.register?.({ systemProfileStore });\n        }\n\n        setWrapper(() => getRegistry ? Provider : Fragment);\n    }, []);\n    return Wrapper ? <Wrapper\n        {...getRegistry && {\n            store: getRegistry().getStore()\n        }}\n    >\n        <GeneralInformation {...props} />\n    </Wrapper> : fallback;\n};\n\nGeneralInfoTab.propTypes = {\n    getRegistry: PropTypes.func\n};\n\nexport default GeneralInfoTab;\n"],"names":["InventoryApp","registry","init","value","getRegistry","Provider","store","getStore","basename","getBaseName","window","location","pathname","propTypes","useLogger","PropTypes","defaultProps","ReactDOM","document","getElementById","BiosCard","bios","detailLoaded","hasVendor","hasVersion","handleClick","hasReleaseDate","extra","title","isLoading","items","vendor","version","isDate","releaseDate","date","Date","type","map","onClick","e","csm","extraShape","connect","systemProfile","systemProfileStore","loaded","biosSelector","VersionTooltip","egg","client","content","CollectionCard","collectionInformation","entity","hasClient","hasLastCheckIn","hasRegistered","hasInsightsId","hasReporter","hasMachineId","DateFormat","updated","toLocaleString","created","insights_id","reporter","rhel_machine_id","hasEgg","entityDetails","collectionInformationSelector","enabledRepos","repositories","enabled","length","disabled","filter","Boolean","join","ConfigurationCard","configuration","hasPackages","hasServices","hasProcesses","hasRepositories","packages","singular","target","generalMapper","services","processes","plural","repositoriesMapper","base_url","name","gpgcheck","configurationSelector","InfrastructureCard","infrastructure","hasType","hasIPv4","hasIPv6","hasInterfaces","ipv4","ipv6","nics","interfaceMapper","infrastructureSelector","OperatingSystemCard","systemInfo","hasRelease","hasKernelRelease","hasArchitecture","hasLastBoot","hasKernelModules","release","kernelRelease","architecture","bootTime","kernelModules","operatingSystem","TitleWithPopover","headerContent","bodyContent","variant","className","SystemCard","isDisplayNameModalOpen","isAnsibleHostModalOpen","setState","fn","props","id","onCancel","event","preventDefault","ansible_host","fqdn","this","properties","setDisplayName","setAnsibleHost","writePermissions","hasHostName","hasDisplayName","hasAnsibleHostname","hasSAP","hasCPUs","hasSockets","hasCores","hasCPUFlags","hasRAM","state","Fragment","size","display_name","link","onShowDisplayModal","getAnsibleHost","onShowAnsibleModal","sapIds","cpuNumber","sockets","coresPerSocket","cpuFlags","ramSize","isOpen","ariaLabel","modalOuiaId","cancelOuiaId","confirmOuiaId","inputOuiaId","onSubmit","Component","storage","device","mount_point","options","propertiesSelector","dispatch","reloadWrapper","payload","then","data","hasItems","loadEntity","showTags","editDisplayName","editAnsibleHost","statusHelper","UP","DOWN","enabledHelper","true","false","cells","transforms","sortable","rows","item","mac_address","mtu","repository","sortValue","filters","label","safeParser","toParse","key","JSON","parse","number_of_cpus","number_of_sockets","cores_per_socket","disk_devices","sap_sids","cpu_flags","facts","rhsm","CPU_CORES","CPU_SOCKETS","Number","MEMORY","arch","os_release","os_kernel_version","last_boot_time","kernel_modules","ARCHITECTURE","bios_vendor","bios_version","bios_release_date","infrastructure_type","infrastructure_vendor","network","undefined","IS_VIRTUAL","interfaces","installed_packages","enabled_services","running_processes","insights_client_version","insights_egg_version","GeneralInfoTab","useState","Wrapper","setWrapper","useEffect","register","fallback"],"sourceRoot":""}