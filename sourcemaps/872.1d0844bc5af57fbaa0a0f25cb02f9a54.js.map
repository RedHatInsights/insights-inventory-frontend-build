{"version":3,"file":"js/872.1659608694532.1171499ec38e98e61bd7.js","mappings":"8yBAEO,IAAMA,EAAwB,SAACC,GAAD,OAAgBA,EAAWC,QAAO,SAACC,EAAKC,GACzE,MAAqCA,EAAQC,MAAM,KAAnD,eAAOC,EAAP,KAAqBC,EAArB,KAKA,OAJAJ,EAAI,GAAD,OAAIG,EAAJ,OAAH,OACQH,EAAI,GAAD,OAAIG,EAAJ,QAAyB,IADpC,wBAEQA,EAFR,YAEwBC,IAAiB,IAElCJ,IACR,KAEUK,EAAkB,SAACP,GAG5B,OAFsBA,EAAWQ,QAAO,kBAAuC,MAAvC,EAAGC,MAAkBL,MAAM,KAAK,MAEnDM,KAAI,SAACL,GAAD,cAClBA,GADkB,IAErBM,iBAAiB,EACjBC,MAAOZ,EAAWQ,QAAO,YAAe,IACpC,EADoC,EAAZC,MACuBL,MAAM,KAArD,eAAOS,EAAP,KAAuBC,EAAvB,KACA,OAAOD,IAAmBR,EAAaI,MAAML,MAAM,KAAK,IAAyB,MAAnBU,KAC/DC,MAAK,qBAAGN,MAAkBL,MAAM,KAAK,YAInCY,EAAsB,eAACC,EAAD,uDAAU,GAAV,cAC5BA,GAD4B,IAE/BC,MAAO,mBACPT,MAAO,YACPU,KAAM,QACNC,aAAc,CACVC,SAAUJ,EAAOR,MACjBa,SAAUL,EAAOK,SACjBC,OAAQhB,EAAgBiB,EAAAA,kBAAkBd,KAAI,SAACe,GAAD,oBACvCA,GADuC,IAE1CN,KAAM,WACNP,MAAK,UAAEa,EAAKb,aAAP,aAAE,EAAYF,KAAI,SAACgB,GAAD,cAChBA,GADgB,IAEnBP,KAAM,yBAMTQ,EAAc,SAACC,GACxB,IAAMnB,EAAQoB,OAAOC,OAAOF,GAAwB,IAAIG,SAAQ,SAAClB,GAAD,OAAoBgB,OAAOG,KAAKnB,MAChG,OAAQJ,MAAAA,OAAA,EAAAA,EAAOwB,QAAS,EAAI,CAAC,CACzBC,SAAU,mBACVf,KAAMgB,EAAAA,QACNC,MAAOZ,EAAAA,iBAAAA,QAAwB,gBAAUa,EAAV,EAAG5B,MAAH,OAAwBA,EAAM6B,MAAK,SAACC,GAAD,OAAmBA,IAAkBF,QACtG3B,KAAI,sBAA4B8B,KAA5B,EAAGtB,QAAH,kBACJ,K,ovBChDIuB,EAA0B,SAACC,EAAIC,GACpCA,EACAA,IAKIC,SAASC,UAAYD,SAASC,WAAT,UAAyBD,SAASE,SAASC,QAA3C,OAAoDH,SAASE,SAASE,UAC3FC,QAAQC,OAERJ,SAASK,KAAOL,SAASE,SAASI,QAAQ,IAAIC,OAAJ,UAAc,CAACX,GAAf,MAAwB,KAAM,KAKvEY,EAAU,SAACC,EAAMC,GAAP,OAAoBC,GAAAA,CAAID,EAAUD,OAAMG,ICAzDC,EAAiB,SAAC,GAAuC,IAArCC,EAAqC,EAArCA,YAAajB,EAAwB,EAAxBA,kBACnC,OAAO,kBAACkB,EAAA,EAAD,CAAYC,QAASC,EAAAA,EAAAA,MACxB,kBAACC,EAAA,EAAD,CAAgBC,KAAMC,EAAAA,KACtB,kBAACC,EAAA,EAAD,CAAOC,aAAa,KAAKC,KAAK,MAA9B,oBAGA,kBAACC,EAAA,EAAD,uBACwBV,EADxB,mBAGA,kBAACW,EAAA,GAAD,CACIT,QAAQ,UACRU,QAAS,kBAAM/B,EAAwBmB,EAAajB,KAFxD,2BASRgB,EAAec,UAAY,CACvBb,YAAac,IAAAA,OACb/B,kBAAmB+B,IAAAA,MAGvB,U,+JCfMC,EAAS,SAAC,GAeV,IAdFC,EAcE,EAdFA,OACAC,EAaE,EAbFA,OACAC,EAYE,EAZFA,QACAC,EAWE,EAXFA,aACAC,EAUE,EAVFA,gBACAC,EASE,EATFA,YACAtC,EAQE,EARFA,kBACAuC,EAOE,EAPFA,WACAC,EAME,EANFA,oBACAC,EAKE,EALFA,aACAC,EAIE,EAJFA,YACAC,EAGE,EAHFA,cACAC,EAEE,EAFFA,eACAC,EACE,EADFA,SAEMC,GAAWC,EAAAA,EAAAA,eACjB,GAA4BC,EAAAA,EAAAA,WAAS,GAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAsCF,EAAAA,EAAAA,WAAS,GAA/C,eAAOG,EAAP,KAAoBC,EAApB,KACMC,EAAmB,GAAH,eACbf,EAIA,GAJc,CAAC,CAChBgB,MAAO,2BACPC,UAAW,IACX/C,KAAM,wBAAF,OAA0ByB,MAAAA,OAA1B,EAA0BA,EAAQlC,QAJxB,OAMdoC,GAAW,KAGnB,OACI,kBAACqB,EAAA,EAAD,CAAOC,UAAU,mCACb,kBAACC,EAAA,EAAD,CAAWC,UAAQ,GAEXzB,EACI,kBAAC0B,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACpB,EAAD,KACI,kBAACjB,EAAA,EAAD,CAAOC,aAAa,KAAKC,KAAK,OAAQO,GAAUA,EAAO6B,gBAI3DjB,GACA,kBAACgB,EAAA,EAAD,KACI,kBAACnB,EAAD,KACI,kBAAC,EAAAqB,cAAD,CACIC,MAAQ/B,GAAUA,EAAOgC,MAAQhC,EAAOgC,KAAK3E,OAC7C4E,SAAWjC,GAAUA,EAAOlC,KAEhC,kBAAC,EAAAoE,UAAD,SAMhB,kBAACC,EAAA,EAAD,CAAU1C,KAAO2C,EAAAA,EAAAA,MAIzB,kBAACX,EAAA,EAAD,KAEQxB,EACI,kBAAC0B,EAAA,EAAD,KACKrB,GAAc,kBAACsB,EAAA,EAAD,KACX,kBAAClB,EAAD,KACI,kBAACf,EAAA,GAAD,CACIC,QAAU,kBAAMuB,GAAe,IAC/BjC,QAAQ,aAFZ,aAONkC,MAAAA,OAAA,EAAAA,EAAkB/D,QAAS,GACzB,kBAACuE,EAAA,EAAD,KACI,kBAACjB,EAAD,KACI,kBAAC0B,EAAA,EAAD,CACIC,SAAW,kBAAMrB,GAAU,IAC3BsB,OAAS,kBAACC,EAAA,EAAD,CACLC,SAAU,SAACzB,GAAD,OAAYC,EAAUD,KAD3B,WAGTA,OAASA,EACT0B,SAAWC,EAAAA,GAAAA,MACXC,cACIxB,EAAiBtF,KAAI,WAAuB+G,GAAvB,IAAGxB,EAAH,EAAGA,MAAUyB,GAAb,mBACjB,kBAACC,EAAA,GAAD,QACIF,IAAMA,EACNvB,UAAU,SACV1B,QACI,SAACoD,GAAD,OAAWF,EAAOlD,QAAQoD,EAAOF,EAAQA,EAAOD,KAAOA,KAEvDC,GAEFzB,UAM9B,kBAACO,EAAA,EAAD,KAEQrB,GACA,kBAACZ,EAAA,GAAD,CAAQC,QAAS,kBAAMiB,GAASoC,EAAAA,EAAAA,KAAa,MAA7C,2BAOZ,kBAACd,EAAA,EAAD,CAAU1C,KAAO2C,EAAAA,EAAAA,MAI/BlB,GACE,kBAAC,EAAAgC,YAAD,CACIC,kBAAmB,kBAAMhC,GAAgBD,IACzCA,YAAaA,EACbkC,cAAepD,EACfqD,UAAW,WACPjD,EAAgB,CACZtC,GAAI,mBACJoB,QAAS,UACTmC,MAAO,6BACPiC,YAAa,cAAF,OAAgBtD,EAAO6B,aAAvB,aACX0B,aAAa,IAEjBpD,EACI,CAACH,EAAOlC,IACRkC,EAAO6B,cACP,kBAAMhE,EAAwBmC,EAAOlC,GAAIC,MAE7CoD,GAAe,QAOvCpB,EAAOF,UAAY,CACfG,OAAQF,IAAAA,OACRG,OAAQH,IAAAA,KACRQ,WAAYR,IAAAA,KACZO,YAAaP,IAAAA,KACbS,oBAAqBT,IAAAA,KACrBc,SAAUd,IAAAA,KACVI,QAASJ,IAAAA,QAAkBA,IAAAA,MAAgB,CACvC+C,IAAK/C,IAAAA,OACLuB,MAAOvB,IAAAA,KACPF,QAASE,IAAAA,QAEbK,aAAcL,IAAAA,KACdM,gBAAiBN,IAAAA,KACjB/B,kBAAmB+B,IAAAA,KACnBU,aAAcV,IAAAA,YACdW,YAAaX,IAAAA,YACbY,cAAeZ,IAAAA,YACfa,eAAgBb,IAAAA,aAGpBC,EAAOyD,aAAe,CAClBtD,QAAS,GACTD,QAAQ,EACRI,aAAa,EACbC,YAAY,EACZC,qBAAqB,EACrBJ,aAAc,aACdC,gBAAiB,aACjBrC,kBAAmB,aACnByC,aAAciD,EAAAA,SACdC,wBAAyBD,EAAAA,SACzB/C,cAAe+C,EAAAA,SACf9C,eAAgB8C,EAAAA,UAGpB,U,4HCtLME,EAAY,SAAC,GAAD,IAAG3D,EAAH,EAAGA,OAAQC,EAAX,EAAWA,OAAqB2D,GAAhC,EAAmBC,YAAnB,EAAgCD,iBAAoBE,GAApD,mBACd,kBAACC,EAAA,GAAD,QAAMvC,UAAU,oBAAwBsC,GACpC,kBAACE,EAAA,EAAD,CAAUC,GAAK,GACX,kBAACtC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,cACA,kBAACA,EAAA,EAAD,CAAUsC,KAAM,CAAEC,QAAS,SACtBlE,EAASvB,EAAQ,KAAMsB,IAAW,IAAM,kBAACmC,EAAA,EAAD,CAAU1C,KAAM2C,EAAAA,EAAAA,GAAiBgC,SAAS,SAG3F,kBAACzC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,mBACA,kBAACA,EAAA,EAAD,CAAUsC,KAAM,CAAEC,QAAS,SAEnBlE,EACI,kBAAC2D,EAAD,KAEQS,EAAAA,EAAqB,kBAACA,EAAA,EAAD,CACjBC,OAAQ5F,EAAQ,mBAAoBsB,GACpCuE,aAAc7F,EAAQ,0BAA2BsB,GACjDwE,MAAO9F,EAAQ,kBAAmBsB,GAClCyE,SAAU,IAAIC,MAEd,kBAACC,EAAA,EAAD,CAAYC,KAAMlG,EAAQ,UAAWsB,GAASzD,KAAK,WAC/B,kBAACoI,EAAA,EAAD,CAAYC,KAAMlG,EAAQ,UAAWsB,GAASzD,KAAK,WAGnF,kBAAC4F,EAAA,EAAD,CAAU1C,KAAM2C,EAAAA,EAAAA,GAAiBgC,SAAS,OAEjDnE,IAAU4E,EAAAA,EAAAA,GAAyBnG,EAAQ,yBAA0BsB,KAAY,kBAAC8E,EAAA,EAAD,WAOtGnB,EAAU9D,UAAY,CAClBI,OAAQH,IAAAA,KACRE,OAAQF,IAAAA,OACR+D,YAAa/D,IAAAA,YACb8D,gBAAiB9D,IAAAA,aAGrB6D,EAAUH,aAAe,CACrBK,YAAaJ,EAAAA,SACbG,gBAAiBH,EAAAA,UAGrB,U,6EClDMsB,GAAqB,SAAC,GAAuC,QAArCC,EAAqC,EAArCA,YAAaC,EAAwB,EAAxBA,QAAYnB,GAAY,aACvDoB,GAAWC,EAAAA,EAAAA,eAAXD,OACF7G,GAAU+G,EAAAA,EAAAA,cACVvE,GAAWC,EAAAA,EAAAA,eACXuE,EAAe,IAAIC,gBAAgBJ,GACnClJ,GAAQuJ,EAAAA,EAAAA,cAAY,gBAAGC,EAAH,EAAGA,cAAH,OAAuBA,MAAAA,OAAA,EAAAA,EAAeC,aAAc,MAC7E7J,QAAO,mBAAiC,IAAjC,EAAG8J,aACLC,GAAYJ,EAAAA,EAAAA,cAAY,gBAAGC,EAAH,EAAGA,cAAH,OAAuBA,MAAAA,OAAvB,EAAuBA,EAAeG,aAC9DC,GAAeL,EAAAA,EAAAA,cAAY,gBAAGM,EAAH,EAAGA,mBAAH,OAA4BA,MAAAA,OAA5B,EAA4BA,EAAoBD,gBAC3EE,GAAaH,MAAAA,OAAA,EAAAA,EAAWI,WAAWd,MAAAA,GAAtB,UAAsBA,EAASe,MAAK,kBAAGC,EAAH,EAAGA,OAAQrI,EAAX,EAAWA,KAAX,OAAsB5B,MAAAA,GAAA,UAAAA,EAAQ,UAAR,eAAY4B,SACrFqI,GAAUrI,aADK,aAAsB,EACnBA,QAAQ5B,MAAAA,GADX,UACWA,EAAQ,UADnB,aACW,EAAY4B,MACtCsI,EAAejB,GAAWjJ,EAC9B,GAAoC+E,EAAAA,EAAAA,UAASmF,GAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KAsBA,OApBAC,EAAAA,EAAAA,YAAU,WAIN,IAAMN,EAAUV,EAAaxG,IAAI,WAC7BkH,GACAlF,GAASyF,EAAAA,EAAAA,IAAaP,MAE3B,KAEHM,EAAAA,EAAAA,YAAU,WACN,IAAME,EAAiBL,EAAatK,QAAO,SAAA4K,GAAG,QAAKZ,MAAAA,GAAAA,EAAca,SAASD,EAAI5I,UACvD,IAAnB2I,QAAkDzH,KAA1B,OAAOyH,GAC/BH,EAAcG,GAGdH,EAAcF,KAEnB,CAACN,IAGA,kBAAC,aAAD,MAEQM,MAAAA,OAAA,EAAAA,EAAc7I,QAAS,GACvB,kBAACqJ,EAAA,GAAD,UACQ5C,EADR,CAEI6C,UAAYb,EACZxD,SAAW,SAACU,EAAOnG,GACf,IAAM+J,EAAaT,EAAWH,MAAK,SAAAa,GAAM,OAAIA,EAAOjJ,OAASf,KACzDmI,EACAA,EAAYhC,EAAOnG,EAAM+J,IAEzBvB,EAAayB,IAAI,UAAWF,EAAWhJ,MACvCS,EAAQ0I,KAAK,CAAE7B,OAAQG,EAAa2B,cAGxCnG,GAASyF,EAAAA,EAAAA,IAAaM,EAAWhJ,QAErC8D,UAAQ,EACRF,UAAU,qCAER2E,MAAAA,OAjBN,EAiBMA,EAAYrK,KAAI,SAACe,EAAMgG,GAAP,OACd,kBAACoE,EAAA,EAAD,CAAKpE,IAAMA,EAAMqE,SAAWrK,EAAKe,KAAOyD,MAAQxE,EAAKwE,cAQ7E0D,GAAmBlF,UAAY,CAC3BoF,QAASnF,IAAAA,QAAkBA,IAAAA,MAAgB,CACvCuB,MAAOvB,IAAAA,KACPlC,KAAMkC,IAAAA,OAAAA,WACNmG,OAAQnG,IAAAA,UAEZkF,YAAalF,IAAAA,MAGjB,Y,yHCnBA,SA5DuB,WACnB,OACI,kBAACqH,GAAA,EAAD,CAAOjI,QAAQ,OAAOkI,UAAQ,EAAC/F,MAAM,yCACjC,kBAAC0C,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACD,EAAA,EAAD,CAAMsD,WAAS,GACX,kBAACrD,EAAA,EAAD,CAAUsD,KAAM,GACZ,kBAACC,GAAA,EAAD,CAAaC,MAAO,CAAE,6BAA8B,IAAK,2BAA4B,WACjF,kBAACC,GAAA,EAAD,CAAMnG,UAAWoG,GAAAA,EAAAA,GAAjB,gCAGA,kBAACC,GAAA,EAAD,CACIrG,UAAU,KACVkG,MAAO,CAAE,kCAAmC,IAAK,iCAAkC,SAEnF,kBAACI,GAAAC,EAAD,oCACA,kBAACD,GAAAC,EAAD,4CACA,kBAACD,GAAAC,EAAD,8CAIZ,kBAAC7D,EAAA,EAAD,CAAUsD,KAAM,GACZ,kBAACQ,GAAA,EAAD,CAAMC,WAAS,GACX,kBAACC,GAAA,EAAD,qBACA,kBAACC,GAAA,EAAD,kEACA,kBAACC,GAAA,EAAD,KACI,kBAACC,GAAA,GAAD,CAAeC,QAAM,EAACC,YAAU,EAACnJ,QAAS,aACrC,kEAKjB,kBAAC8E,EAAA,EAAD,CAAUsD,KAAM,GACZ,kBAACQ,GAAA,EAAD,CAAMC,WAAS,EAACP,MAAO,CAAEc,OAAQ,SAC7B,kBAACN,GAAA,EAAD,kCACA,kBAACC,GAAA,EAAD,kHAEA,kBAACC,GAAA,EAAD,KACI,kBAACvI,EAAA,GAAD,CAAQ2B,UAAU,IAAIiH,OAAO,SACzBrJ,QAAQ,OAAOX,KAAK,8CAA8C6I,UAAQ,GAD9E,oDAUpB,kBAACpD,EAAA,EAAD,KACI,kBAACrE,EAAA,GAAD,CAAQ2B,UAAU,IAAIiH,OAAO,SAASrJ,QAAQ,OAC1CX,KAAK,+CAA+C6I,UAAQ,GADhE,0CClCpB,IAAMoB,GAAkB,SAAC,GAgBnB,IAfFtI,EAeE,EAfFA,QACAU,EAcE,EAdFA,SACAP,EAaE,EAbFA,YACA2E,EAYE,EAZFA,YACAjH,EAWE,EAXFA,kBACAuC,EAUE,EAVFA,WACA2E,EASE,EATFA,QACA1E,EAQE,EARFA,oBACAsD,EAOE,EAPFA,YACAD,EAME,EANFA,gBACApD,EAKE,EALFA,aACAC,EAIE,EAJFA,YACAC,EAGE,EAHFA,cACAC,EAEE,EAFFA,eACA8H,EACE,EADFA,SAEQzJ,GAAgB0J,EAAAA,EAAAA,aAAhB1J,YACF6B,GAAWC,EAAAA,EAAAA,eACXb,GAASsF,EAAAA,EAAAA,cAAY,gBAAGC,EAAH,EAAGA,cAAH,OAAuBA,MAAAA,OAAA,EAAAA,EAAevF,UAAU,KACrED,GAASuF,EAAAA,EAAAA,cAAY,gBAAGC,EAAH,EAAGA,cAAH,OAAuBA,MAAAA,OAAvB,EAAuBA,EAAexF,UAOjE,OANAqG,EAAAA,EAAAA,YAAU,WACN,IAAMsC,EAAS3J,GAAed,SAASE,SAASI,QAAQ,MAAO,IAAIhD,MAAM,KAAKoN,MACzE5I,IAAYA,MAAAA,OAAA,EAAAA,EAAQlC,MAAO6K,GAAY1I,GACxCY,GAASgI,EAAAA,EAAAA,IAAWF,EAAQ,CAAEG,UAAU,GAAQ,CAAElI,SAAAA,OAEvD,IACI,yBAAKY,UAAU,qBACjBvB,IAAWD,EACR,kBAAC,EAAD,CACIjC,kBAAmBA,EACnBiB,YAAad,SAASE,SAAS5C,MAAM,KAAK0C,SAASE,SAAS5C,MAAM,KAAK6B,OAAS,KAEpF,kBAAC,EAAAoG,SAAD,KACA,kBAAC,EAAD,CACIzD,OAASA,EACTC,OAASA,EACTlC,kBAAoBA,EACpBmC,QAAUA,EACVC,aAAe,SAAC4I,EAASC,EAAaC,GAClC,IAAMnG,GAAS3C,EAAAA,EAAAA,IAAa4I,EAASC,GACrCnI,GAASqI,EAAAA,EAAAA,eAAcpG,EAAQmG,KAEnC7I,gBAAkB,SAAC+I,GAAD,OAAatI,GAAST,EAAAA,EAAAA,IAAgB+I,KACxD9I,YAAcA,EACdE,oBAAsBA,EACtBD,WAAaA,EACbM,SAAWA,EACXJ,aAAcA,EACdC,YAAaA,EACbC,cAAeA,EACfC,eAAgBA,IAEpB,kBAAC,EAAD,CACIV,OAASA,EACTD,OAASA,EACT6D,YAAaA,EACbD,gBAAiBA,IAEnB3D,KAAWD,MAAAA,GAAAA,EAAQoJ,cAAgB,kBAAC,GAAD,MACpCX,GAGJxI,GAAUD,GACP,kBAAC,GAAD,CAAoBgF,YAAcA,EAAcC,QAAUA,MAKtEuD,GAAgB3I,UAAY,CACxBQ,YAAaP,IAAAA,KACbuJ,SAAUvJ,IAAAA,KACVc,SAAUd,IAAAA,KACVQ,WAAYR,IAAAA,KACZS,oBAAqBT,IAAAA,KACrBI,QAASJ,IAAAA,QAAkBA,IAAAA,MAAgB,CACvCuB,MAAOvB,IAAAA,KACPF,QAASE,IAAAA,KACT+C,IAAK/C,IAAAA,UAETmF,QAASnF,IAAAA,QAAkBA,IAAAA,MAAgB,CACvCuB,MAAOvB,IAAAA,KACPlC,KAAMkC,IAAAA,OACNmG,OAAQnG,IAAAA,UAEZkF,YAAalF,IAAAA,KACb/B,kBAAmB+B,IAAAA,KACnB2I,SAAU3I,IAAAA,KACV+D,YAAa/D,IAAAA,YACb8D,gBAAiB9D,IAAAA,YACjBU,aAAcV,IAAAA,YACdW,YAAaX,IAAAA,YACbY,cAAeZ,IAAAA,YACfa,eAAgBb,IAAAA,aAEpB0I,GAAgBhF,aAAe,CAC3BtD,QAAS,GACTG,aAAa,EACbO,UAAU,EACViD,YAAaJ,EAAAA,SACbG,gBAAiBH,EAAAA,SACjBjD,aAAciD,EAAAA,SACdhD,YAAagD,EAAAA,SACb/C,cAAe+C,EAAAA,SACf9C,eAAgB8C,EAAAA,UAGpB,YCnHA,IAAM6F,GAAU,SAAC,GAAiC,IAA/BC,EAA+B,EAA/BA,gBAAiBtE,EAAc,EAAdA,QAC1BuE,GAAQC,EAAAA,EAAAA,YACNvE,GAAWC,EAAAA,EAAAA,eAAXD,OACFG,EAAe,IAAIC,gBAAgBJ,GACnCjF,GAASsF,EAAAA,EAAAA,cAAY,gBAAGC,EAAH,EAAGA,cAAH,OAAuBA,MAAAA,OAAvB,EAAuBA,EAAevF,UAC3DD,GAASuF,EAAAA,EAAAA,cAAY,gBAAGC,EAAH,EAAGA,cAAH,OAAuBA,MAAAA,OAAvB,EAAuBA,EAAexF,UAC3D2F,GAAYJ,EAAAA,EAAAA,cAAY,YAAuB,IACtB,MADEC,EAAoB,EAApBA,cAC7B,GAAIA,MAAAA,GAAAA,EAAevF,OACf,OAAO,UAACgF,IAAWO,MAAAA,OAAJ,EAAIA,EAAeC,mBAA3B,mBAAwCO,YAAxC,uBAA+C,SAAAnJ,GAAI,aAAIA,MAAAA,OAAA,EAAAA,EAAMe,SAChEyH,EAAaxG,IAAI,aAAc2G,MAAAA,GAA/B,UAA+BA,EAAeG,iBAA9C,aAA+B,EAA0BI,gBACvDP,MAAAA,GAFC,UAEDA,EAAeC,kBAFd,aAED,EAA4B,OAGpCiE,EAAMH,IAAmB5D,MAAAA,OAAJ,EAAIA,EAAWrE,WAE1C,OAAe,IAAXrB,GAAoBD,EAKpB,kBAAC,EAAAyD,SAAD,KAEQxD,EAAS0F,GACL,yBAAKnE,UAAS,yBAAqBmE,MAAAA,OAArB,EAAqBA,EAAW/H,OACxC8L,EACE,kBAACA,EAAD,CACIF,MAAOA,EACPxK,YAAagB,MAAAA,OAAF,EAAEA,EAAQlC,GACrBiI,QAASJ,MAAAA,OAAF,EAAEA,EAAW/H,OAExB,qBAER,kBAACuE,EAAA,EAAD,CAAU1C,KAAO2C,EAAAA,EAAAA,MAhBtB,MAsBfkH,GAAQzJ,UAAY,CAChB0J,gBAAiBzJ,IAAAA,QACjBmF,QAASnF,IAAAA,QAAkBA,IAAAA,MAAgB,CACvCuB,MAAOvB,IAAAA,KACPlC,KAAMkC,IAAAA,OACNmG,OAAQnG,IAAAA,WAIhB,YC3CA,GAP0B,SAACgE,GAAD,OACtB,kBAAC,EAAAL,SAAD,KACI,kBAAC,GAAqBK,GACtB,kBAAC,GAAaA,K,mJCLhB6F,GAAY,SAAC,GAA8B,IAA5BtJ,EAA4B,EAA5BA,YAAaO,EAAe,EAAfA,SACxBoI,GAAczD,EAAAA,EAAAA,cAAY,gBAAoBvF,EAApB,EAAGwF,cAAiBxF,OAApB,OAAmCA,MAAAA,OAAnC,EAAmCA,EAAQ6B,gBACrEI,GAAWsD,EAAAA,EAAAA,cAAY,gBAAoBvF,EAApB,EAAGwF,cAAiBxF,OAApB,OAAmCA,MAAAA,OAAnC,EAAmCA,EAAQlC,MAClEkE,GAAOuD,EAAAA,EAAAA,cAAY,gBAAoBvF,EAApB,EAAGwF,cAAiBxF,OAApB,OAAmCA,MAAAA,OAAnC,EAAmCA,EAAQgC,QACpE,OAAO,kBAAC4H,GAAA,EAAD,CAAOvC,WAAS,GACnB,kBAACwC,GAAA,EAAD,KACI,kBAACtI,EAAA,EAAD,KACI,kBAACE,EAAA,EAAD,CAAWC,UAAQ,GACf,kBAACnC,EAAA,EAAD,CAAOC,aAAa,KAAKC,KAAK,MAAOuJ,KAEvC3I,GAAe,kBAACoB,EAAA,EAAD,KACb,uBAAGD,UAAU,gCAAgCjD,KAAI,+BAA0B0D,IAA3E,wBAKRrB,GACA,kBAACiJ,GAAA,EAAD,KACI,kBAACtI,EAAA,EAAD,CAAO8F,WAAS,GACZ,kBAAC5F,EAAA,EAAD,cAGA,kBAACA,EAAA,EAAD,KACI,kBAACqI,GAAA,EAAD,KACsB,KAAjB9H,MAAAA,OAAA,EAAAA,EAAM3E,QAAe2E,MAAAA,OAArB,EAAqBA,EAAMlG,KAAI,SAACe,EAAMgG,GAAP,OAC5B,kBAACkH,GAAA,EAAD,CAAMlH,IAAKA,EAAKwF,YAAU,IACrBxL,MAAAA,OAAA,EAAAA,EAAMmN,YAAN,UAAsBnN,MAAAA,OAAtB,EAAsBA,EAAMmN,UAA5B,KACAnN,MAAAA,OAFL,EAEKA,EAAMgG,KACNhG,MAAAA,OAAA,EAAAA,EAAMhB,QAAN,WAAmBgB,MAAAA,OAAnB,EAAmBA,EAAMhB,WAE7B,gBASjC8N,GAAU9J,UAAY,CAClBQ,YAAaP,IAAAA,KACbc,SAAUd,IAAAA,MAGd6J,GAAUnG,aAAe,CACrBnD,aAAa,EACbO,UAAU,GAGd,Y,gEC5CMqJ,GAAe,SAAC,GAAiB,wBAAfC,EAAe,EAAfA,SACdrJ,GAAWC,EAAAA,EAAAA,eACXmB,GAAWsD,EAAAA,EAAAA,cAAY,gBAAoBvF,EAApB,EAAGwF,cAAiBxF,OAApB,OAAmCA,MAAAA,OAAnC,EAAmCA,EAAQlC,MAClEqM,GAAU5E,EAAAA,EAAAA,cAAY,gBAAoB6E,EAApB,EAAG5E,cAAiB4E,aAApB,OAAyCA,MAAAA,OAAzC,EAAyCA,EAAcD,WAC7EE,GAAa9E,EAAAA,EAAAA,cAAY,gBAAoB6E,EAApB,EAAG5E,cAAiB4E,aAApB,OAAyCA,MAAAA,OAAzC,EAAyCA,EAAcC,cAChFC,GAAM/E,EAAAA,EAAAA,cAAY,gBAAoB6E,EAApB,EAAG5E,cAAiB4E,aAApB,OAAyCA,MAAAA,OAAzC,EAAyCA,EAAcE,OACzEC,GAAQhF,EAAAA,EAAAA,cAAY,gBAAoB6E,EAApB,EAAG5E,cAAiB4E,aAApB,OAAyCA,MAAAA,OAAzC,EAAyCA,EAAcG,SAUjF,OATAlE,EAAAA,EAAAA,YAAU,WACFpE,GAAYiI,IACZrJ,GAAS2J,EAAAA,EAAAA,IAAevI,IACxBpB,GAAS4J,EAAAA,EAAAA,IAAkBxI,IAC3BpB,GAAS6J,EAAAA,EAAAA,IAAazI,IACtBpB,GAAS8J,EAAAA,EAAAA,IAAY1I,OAE1B,CAACA,EAAUiI,IAEP,kBAACN,GAAA,EAAD,CAAOvC,WAAS,EAAC7F,UAAU,yCAC9B,kBAACqI,GAAA,EAAD,KACI,kBAACtK,EAAA,EAAD,CAAOC,aAAa,KAAKC,KAAK,MAA9B,sBAEJ,kBAACoK,GAAA,EAAD,KACI,kBAACe,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,KACI,kBAACjB,GAAA,EAAD,CAAOvC,WAAS,GACZ,kBAACwC,GAAA,EAAD,CAAWrI,UAAU,kCAArB,mBAGA,kBAACqI,GAAA,EAAD,KAEQS,MAAAA,GAAAA,EAAKQ,SACD,kBAACF,GAAA,EAAD,CAAOvD,WAAS,EAAC7F,UAAU,+BACvB,kBAACqJ,GAAA,EAAD,CAAWrJ,UAAU,kBACjB,uBAAGjD,KAAI,0CAAqC0D,EAArC,eACFqI,MAAAA,GAAA,UAAAA,EAAKS,gBAAL,eAAehJ,QAAS,EAD7B,cAIJ,kBAAC8I,GAAA,EAAD,CAAWrJ,UAAU,mBACjB,uBAAGjD,KAAI,0CAAqC0D,EAArC,eACFqI,MAAAA,GAAA,UAAAA,EAAKU,iBAAL,eAAgBjJ,QAAS,EAD9B,eAIJ,kBAAC8I,GAAA,EAAD,CAAWrJ,UAAU,kBACjB,uBAAGjD,KAAI,0CAAqC0D,EAArC,eACFqI,MAAAA,GAAA,UAAAA,EAAKW,gBAAL,eAAelJ,QAAS,EAD7B,cAIJ,kBAAC8I,GAAA,EAAD,CAAWrJ,UAAU,aACjB,uBAAGjD,KAAI,0CAAqC0D,EAArC,eACFqI,MAAAA,GAAA,UAAAA,EAAKY,WAAL,eAAUnJ,QAAS,EADxB,UAKR,kBAACI,EAAA,EAAD,CAAU1C,KAAO2C,EAAAA,EAAAA,QAKrC,kBAACyI,GAAA,EAAD,KACI,kBAACjB,GAAA,EAAD,CAAOvC,WAAS,GACZ,kBAACwC,GAAA,EAAD,CAAWrI,UAAU,kCAArB,yBAGA,kBAACqI,GAAA,EAAD,KAEQU,MAAAA,GAAAA,EAAOO,SACH,kBAACF,GAAA,EAAD,CAAOvD,WAAS,EAAC7F,UAAU,iCACvB,kBAACqJ,GAAA,EAAD,KACI,uBAAGtM,KAAI,kCAA6B0D,EAA7B,sBACH,kBAAC,MAAD,MADJ,IACiBsI,MAAAA,GADjB,UACiBA,EAAOY,WADxB,aACiB,EAAYpJ,QAGjC,kBAAC8I,GAAA,EAAD,CAAWrJ,UAAU,kBACjB,uBAAGjD,KAAI,kCAA6B0D,EAA7B,sBACH,kBAAC,MAAD,MADJ,IACsBsI,MAAAA,GADtB,UACsBA,EAAOa,gBAD7B,aACsB,EAAiBrJ,QAG3C,kBAAC8I,GAAA,EAAD,KACI,uBAAGtM,KAAI,kCAA6B0D,EAA7B,sBACH,kBAAC,MAAD,MADJ,IACyBsI,MAAAA,GADzB,UACyBA,EAAOc,mBADhC,aACyB,EAAoBtJ,SAIrD,kBAACI,EAAA,EAAD,CAAU1C,KAAO2C,EAAAA,EAAAA,UAO7C,kBAACyH,GAAA,EAAD,KAEQM,MAAAA,GAAAA,EAASW,SACL,8BACI,0BAAMtJ,UAAU,mBACX2I,MAAAA,GAAA,UAAAA,EAASmB,qBAAT,eAAwBjO,SAAU,EADvC,aADJ,uBAG+B,uBAAGkB,KAAI,qCAAgC0D,IAAvC,YAE/B,kBAACE,EAAA,EAAD,CAAU1C,KAAO2C,EAAAA,EAAAA,MAIzBiI,MAAAA,GAAAA,EAAYS,UACPT,MAAAA,OAAA,EAAAA,EAAYkB,WACT,uEAC0C,uBAClChN,KAAM,kCAEL8L,MAAAA,GAHiC,UAGjCA,EAAYkB,gBAHqB,aAGjC,EAAsBlO,OAHW,KAGFgN,MAAAA,GAAA,UAAAA,EAAYkB,gBAAZ,eAAsBlO,QAAS,EAAI,WAAa,WAI5F,kBAAC8E,EAAA,EAAD,CAAU1C,KAAO2C,EAAAA,EAAAA,OAKjC6H,GAAapK,UAAY,CACrBqK,SAAUpK,IAAAA,MAGd,Y,6ECjHM0L,GAAgB,SAAC,GAA+E,IAA7E/C,EAA6E,EAA7EA,SAAUpI,EAAmE,EAAnEA,YAAaO,EAAsD,EAAtDA,SAAU6K,EAA4C,EAA5CA,QAASjK,EAAmC,EAAnCA,UAAWuE,EAAwB,EAAxBA,QAAYjC,GAAY,aAC5FjD,GAAWC,EAAAA,EAAAA,eACX0I,GAAQC,EAAAA,EAAAA,YACRzJ,GAASuF,EAAAA,EAAAA,cAAY,gBAAGC,EAAH,EAAGA,cAAH,OAAuBA,MAAAA,OAAvB,EAAuBA,EAAexF,UAC3D0L,GAAanG,EAAAA,EAAAA,cAAY,gBAAGC,EAAH,EAAGA,cAAH,OAAuBA,MAAAA,OAAvB,EAAuBA,EAAemG,kBAC/D1L,GAASsF,EAAAA,EAAAA,cAAY,gBAAGC,EAAH,EAAGA,cAAH,OAAuBA,MAAAA,OAAvB,EAAuBA,EAAevF,UAEjE,OAAO,kBAAC2L,GAAA,IAAD,QACHpK,UAAS,kCAA6BA,GAAa,IACnDkK,WAAYA,EACZG,SAAU,kBAAMhL,GAASoC,EAAAA,EAAAA,KAAa,MAClCa,GAEJ,kBAACgI,GAAA,EAAD,CACIC,aACI,kBAACC,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,KACI,kBAAC,GAAD,CAAW5L,YAAcA,EAAcO,SAAWA,IAClD,kBAACsL,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,CAAmBvM,QAAS,kBAAOiB,GAASoC,EAAAA,EAAAA,KAAa,SAGjE,kBAACmJ,GAAA,EAAD,KACI,kBAACxC,GAAA,EAAD,CAAOpI,UAAU,oCACb,kBAACqI,GAAA,EAAD,KACI,kBAAC,GAAD,CAAcK,SAAUwB,KAE5B,kBAAC7B,GAAA,EAAD,CAAWnI,UAAQ,EAACF,UAAU,kCAC1B,kBAAC,EAAD,CAAWxB,OAAQA,EAAQC,OAAQA,IAE/ByL,GACAzL,GACAwL,GACA,kBAACA,EAAD,CACIjC,MAAOA,EACPzD,QAASA,SASrC,kBAACsG,GAAA,EAAD,KACK5D,MAMjB+C,GAAc3L,UAAY,CACtB4I,SAAU3I,IAAAA,IACVO,YAAaP,IAAAA,KACbc,SAAUd,IAAAA,KACViG,QAASjG,IAAAA,MAAgB,CACrB,sBACA,UACA,WACA,aACA,kBACA,UAEJ0B,UAAW1B,IAAAA,OACX2L,QAAS3L,IAAAA,aAGb0L,GAAchI,aAAe,CACzBuC,QAAS,uBAGb,Y,2zBCnFO,IAAMuG,GAAa,SAACzP,EAAM0P,EAASC,GACtC,OAAOD,EAAQzQ,KAAI,YAAmC,IAAhC+G,EAAgC,EAAhCA,IAAK4J,EAA2B,EAA3BA,SAAUC,EAAiB,EAAjBA,WAE3BC,EAAOF,EAAW,kBAAC,EAAAhJ,SAAD,MAAWmJ,EAAAA,GAAAA,GAC/BH,EAAS3Q,KAAI,SAAA+G,GAAG,OAAIhE,GAAAA,CAAIhC,EAAMgG,EAAK,QACnChG,EAAKiB,GACLjB,EACA2P,IACY3N,GAAAA,CAAIhC,EAAMgG,EAAK,KAC/B,OAAO6J,EAAa,kBAAC,EAAAjJ,SAAD,KAAYiJ,EAAWC,EAAM9P,EAAKiB,GAAIjB,EAAM2P,IAAsBG,MAIjFE,GAAa,WAAqF,IAApFC,EAAoF,uDAA7E,GAAIP,EAAyE,uDAA/D,GAA+D,yDAAP,GAAlDrM,EAAyD,EAAzDA,QAAS6M,EAAgD,EAAhDA,WAAYC,EAAoC,EAApCA,eAAmBR,GAAiB,aAC3G,OAAoB,IAAhBM,EAAKzP,OACE,CAAC,CACJ4P,MAAO,CAAC,CACJ5L,MAAO2L,EACPlJ,MAAO,CACHoJ,QAASX,EAAQlP,OAAS8P,QAAQjN,GAClCkN,UAAW,UAMpBC,IAAAA,CAAQP,EAAKhR,KAAI,SAACwR,EAASzK,GAAV,MAAmB,CAAC,GAAD,SACpCyK,GACAA,EAAQ7E,UAAYsE,GAAc,CAAE/L,SAAUsM,EAAQtM,SAFlB,IAGvCiM,MAAOX,GAAWgB,EAASf,EAASC,GACpCe,YAAa,CACT,mCAA6BD,EAAQxP,GAArC,qBAELwP,EAAQ7E,UAAYsE,GAAc,CACjCE,MAAO,CACH,CACI5L,MAAmC,mBAArBiM,EAAQ7E,SAA0B6E,EAAQ7E,WAAa6E,EAAQ7E,WAGrF+E,OAAc,EAAN3K,EACR4K,WAAW,QACT7R,OAAOuR,UAGJO,GAAiB,SAACC,GAA6B,MAApBC,EAAoB,uDAAP,GACjD,GAA+BD,MAAAA,GAAA,UAAAA,EAASnQ,aAAT,eAAiB,KAAM,GAAvCqQ,EAAf,EAAQhS,MACR,OAAQ+R,EAAWhS,QAAO,SAACiB,GAAD,OAAUA,IAASgR,MA6B3CC,GAAmB,SAACC,GAAD,OAAgBA,MAAAA,OAAhB,EAAgBA,EAAY1S,QAAO,SAACC,EAAK0S,GAAN,OAAa1S,GAAO0S,EAAGhH,WAAWP,SAAS,cAAY,I,+NC/E5G,IAAMwH,GAAkB,CAAEC,WAAY,IAChCC,GAAc,cACdC,GAAoB,SAACC,EAAD,OAAW9R,EAAX,EAAWA,KAAM4M,EAAjB,EAAiBA,QAAjB,O,uWAAA,IAC1B5M,IAAS4R,IAAe,CACvBD,WAAY/E,KAIPmF,GAAgB,WAA2C,6DAAtB,CAACL,IAAqB,eAAzCM,EAAyC,KAAlC1N,EAAkC,KACpE,GAAoCE,EAAAA,EAAAA,UAAS,IAA7C,eAAOyN,EAAP,KAAmBC,EAAnB,KACM5S,EAAQgF,EAAW0N,EAAML,WAAaM,EACtCE,EAAW7N,EAAW,SAAC8N,GAAD,OAAc9N,EAAS,CAAEtE,KAAM4R,GAAahF,QAASwF,KAAcF,EAEzF7S,EAAS,CACXU,MAAO,OACPT,MAAO,cACPW,aAAc,CACVoS,YAAa,iBACb/S,MAAAA,EACAa,SAAU,SAACmS,EAAIhT,GAAL,OAAe6S,EAAS7S,MAGpCiT,EAAOjT,EAAMwB,OAAS,EAAI,CAAC,CAC7BC,SAAU,eACVf,KAAMwS,EAAAA,aACNvR,MAAO,CACH,CAAEI,KAAM/B,MAEX,GACL,MAAO,CAACD,EAAQkT,EAAMjT,EAAO6S,I,slBC7B1B,IAAMM,GAAuB,CAAEC,gBAAiB,IAC1CC,GAAmB,mBACnBC,GAAyB,SAACd,EAAD,OAAW9R,EAAX,EAAWA,KAAM4M,EAAjB,EAAiBA,QAAjB,aAC/B5M,IAAS2S,IAAoB,CAC5BD,gBAAiB9F,KAIZiG,GAAqB,WAAgD,6DAA3B,CAACJ,IAA0B,eAA9CT,EAA8C,KAAvC1N,EAAuC,KAC9E,GAA2CE,EAAAA,EAAAA,UAAS,IAApD,eAAKsO,EAAL,KAA0BZ,EAA1B,KACMa,EAAiBzO,EAAW0N,EAAMU,gBAAkBI,EACpDX,EAAW7N,EAAW,SAAC8N,GAAD,OAAc9N,EAAS,CAAEtE,KAAM2S,GAAkB/F,QAASwF,KAAcF,EAE9F7S,EAAS,CACXU,MAAO,SACPT,MAAO,eACPU,KAAM,WACNC,aAAc,CACVX,MAAOyT,EACP5S,SAAU,SAACmS,EAAIhT,GAAL,OAAe6S,EAAS7S,IAClCG,MAAOuT,EAAAA,YAGTT,GAAOQ,MAAAA,OAAA,EAAAA,EAAgBjS,QAAS,EAAI,CAAC,CACvCC,SAAU,SACVf,KAAMiT,EAAAA,WACNhS,MAAO+R,EAAAA,UAAAA,QAAiB,gBAAG1T,EAAH,EAAGA,MAAH,OAAeyT,EAAe7I,SAAS5K,MAC9DC,KAAI,uBAA4B8B,KAA5B,EAAGtB,QAAH,mBACJ,GACL,MAAO,CAACV,EAAQkT,EAAMQ,EAAgBZ,I,slBC7BnC,IAAMe,GAA4B,CAAEC,qBAAsB,IACpDC,GAAyB,yBACzBC,GAA8B,SAACvB,EAAD,OAAW9R,EAAX,EAAWA,KAAM4M,EAAjB,EAAiBA,QAAjB,aACpC5M,IAASoT,IAA0B,CAClCD,qBAAsBvG,KAIjB0G,GAA0B,WAAqD,6DAAhC,CAACJ,IAA+B,eAAnDlB,EAAmD,KAA5C1N,EAA4C,KACxF,GAAgDE,EAAAA,EAAAA,UAAS,IAAzD,eAAK+O,EAAL,KAA+BrB,EAA/B,KACMsB,EAAsBlP,EAAW0N,EAAMmB,qBAAuBI,EAC9DpB,EAAW7N,EAAW,SAAC8N,GAAD,OAAc9N,EAAS,CAAEtE,KAAMoT,GAAwBxG,QAASwF,KAAcF,EAEpG7S,EAAS,CACXU,MAAO,iBACPT,MAAO,iCACPU,KAAM,WACNC,aAAc,CACVX,MAAOkU,EACPrT,SAAU,SAACmS,EAAIhT,GAAL,OAAe6S,EAAS7S,IAClCG,MAAOgU,EAAAA,aAGTlB,GAAOiB,MAAAA,OAAA,EAAAA,EAAqB1S,QAAS,EAAI,CAAC,CAC5CC,SAAU,iBACVf,KAAM0T,EAAAA,gBACNzS,MAAOwS,EAAAA,WAAAA,QAAkB,gBAAGnU,EAAH,EAAGA,MAAH,OAAekU,EAAoBtJ,SAAS5K,MACpEC,KAAI,uBAA4B8B,KAA5B,EAAGtB,QAAH,mBACJ,GACL,MAAO,CAACV,EAAQkT,EAAMiB,EAAqBrB,I,ykBC9BxC,IAAMwB,GAAgB,WAMxB,IALDC,EAKC,uDALS,GACVlQ,EAIC,wDAHDmQ,EAGC,uDAHqB,EACtBC,EAEC,uCADDC,EACC,uCACD,GAOIC,EAAAA,GAAAA,IACAJ,EACAlQ,EACAmQ,EACAC,EACAC,EACA,UAZA1U,EADJ,EACIA,OACA4B,EAFJ,EAEIA,MACAgT,EAHJ,EAGIA,aACA9B,EAJJ,EAIIA,SACA+B,EALJ,EAKIA,aACAC,EANJ,EAMIA,eAUJ,MAAO,CACHH,WAAY,CACRjU,MAAO,OACPT,MAAO,OACPU,KAAM,QACNqS,YAAa,uBACbpS,aAAc,MACPZ,IAGX+U,SAAUnT,EACVgT,aAAAA,EACAI,gBAAiBlC,EACjB+B,aAAAA,EACAC,eAAAA,I,2OCpCD,IAAMG,GAA6B,CAAEC,sBAAuB,IACtDC,GAA0B,0BAC1BC,GAA+B,SAAC3C,EAAD,OAAW9R,EAAX,EAAWA,KAAM4M,EAAjB,EAAiBA,QAAjB,O,uWAAA,IACrC5M,IAASwU,IAA2B,CACnCD,sBAAuB3H,KAIlB8H,GAA2B,WAAsD,6DAAjC,CAACJ,IAAgC,eAApDtC,EAAoD,KAA7C1N,EAA6C,KAC1F,GAAmDE,EAAAA,EAAAA,UAAS,IAA5D,eAAOmQ,EAAP,KAAkCzC,EAAlC,KACMzR,EAAuB6D,EAAW0N,EAAMuC,sBAAwBI,EAChExC,EAAW7N,EAAW,SAAC8N,GAAD,OAAc9N,EAAS,CAAEtE,KAAMwU,GAAyB5H,QAASwF,KAAcF,EACrG7S,GAASQ,EAAAA,GAAAA,IAAoB,CAC/BP,MAAOmB,EACPN,SAAU,SAACmS,EAAIhT,GAAL,OAAe6S,EAAS7S,MAEhCiT,GAAO/R,EAAAA,GAAAA,IAAYC,GAEzB,MAAO,CAACpB,EAAQkT,EAAM9R,EAAsB0R,I,ykBChBzC,IAAMyC,GAAiB,SAACC,GAAD,OAAkB,SAAC7C,EAAOzL,GAAR,OAAmBsO,EAAa/V,QAAO,SAACC,EAAK+V,GAAN,UAAC,MACjF/V,GACA+V,MAAAA,OAFgF,EAEhFA,EAAO9C,EAAOzL,MACjByL,K,y0BCoCJ,IAAM+C,GAAqB,SAAC,GAsBtB,MArBFC,EAqBE,EArBFA,MACAC,EAoBE,EApBFA,KACAC,EAmBE,EAnBFA,QACAC,EAkBE,EAlBFA,aACA5I,EAiBE,EAjBFA,SACAL,EAgBE,EAhBFA,SACAkJ,EAeE,EAfFA,cACAC,EAcE,EAdFA,oBACAhR,EAaE,EAbFA,SACAiR,EAYE,EAZFA,QACA7V,EAWE,EAXFA,MACA8V,EAUE,EAVFA,OACAC,EASE,EATFA,cACAC,EAQE,EARFA,UACAC,EAOE,EAPFA,WACAC,EAME,EANFA,YACAC,EAKE,EALFA,gBACAC,EAIE,EAJFA,cACAnS,EAGE,EAHFA,OACAoS,EAEE,EAFFA,aACGvO,GACD,aACIjD,GAAWC,EAAAA,EAAAA,eACXwR,GAAUC,EAAAA,EAAAA,YAAWpB,GAAe,CACtC/C,GACAe,GACAS,GACA4C,GAAAA,GACAxB,KALsB,GAAC,eAOpB/C,IACAe,IACAS,IACAgD,GAAAA,IACA5B,KAED6B,GAAUnN,EAAAA,EAAAA,cAAY,qBAAGoN,SAAYC,iBACrCC,GAAgBtN,EAAAA,EAAAA,cAAY,qBAAGoN,SAAYE,iBAC3C1C,GAAU5K,EAAAA,EAAAA,cAAY,qBAAGoN,SAAYxC,WACrCC,GAAsB7K,EAAAA,EAAAA,cAAY,qBAAGoN,SAAYvC,uBACvD,EAA0D9B,GAAcgE,GAAxE,eAAOQ,EAAP,KAAmBC,EAAnB,KAA6B7E,EAA7B,KAAyC8E,EAAzC,KACA,EAAsE5D,GAAmBkD,GAAzF,eAAOrD,EAAP,KAAwBgE,EAAxB,KAAuCC,EAAvC,KAAoDC,EAApD,KACA,EAA0FtD,GAAwByC,GAAlH,eAAOc,GAAP,KAAyBC,GAAzB,KAAyC3D,GAAzC,KAA+D4D,GAA/D,KACA,GAA4ErC,GAAyBqB,GAArG,iBAAOxB,GAAP,MAA8ByC,GAA9B,MAAmDC,GAAnD,MAA6DC,GAA7D,MACA,GAOIvD,GAAcC,EAAS0C,EAAezC,GAAqB,kBAAMvP,GAAS6S,EAAAA,EAAAA,KAAe,MAAQpB,GANjG/B,GADJ,GACIA,WACAI,GAFJ,GAEIA,SACAH,GAHJ,GAGIA,aACAI,GAJJ,GAIIA,gBACAH,GALJ,GAKIA,aACAC,GANJ,GAMIA,eAMEiD,IAAqBC,EAAAA,EAAAA,aAAYC,IAAAA,EAAS,SAACxX,EAAQyX,GACjDlT,IAAakI,GAAYkJ,GACzBnR,GAASkT,EAAAA,EAAAA,IAAa1X,EAAD,GAAC,MACf0V,GACA+B,GACHjC,MAET,KAAM,CAACE,MAAAA,OAAD,EAACA,EAAe/P,OAKnBgS,IAAqBJ,EAAAA,EAAAA,cAAY,SAACE,GAChC9B,IACAI,EAAc0B,GACVlT,IAAakI,GACbjI,GAASkT,EAAAA,EAAAA,IAAatD,GAAD,GAAC,MAAmBsB,GAApB,IAAmCW,SAASoB,MAAAA,OAAA,EAAAA,EAASpB,UAAWA,IAAWb,OAGzG,CAACE,MAAAA,OAAD,EAACA,EAAe/P,OAEbiS,GAAiB,CACnBrW,OAAQsU,EAAYgC,MAA4B,IAArBhC,EAAYtU,MAAoBsU,EAAYtU,MACvE4G,QAAS0N,EAAYgC,MAA6B,IAAtBhC,EAAY1N,OAAqB0N,EAAY1N,OACzE2P,iBAAkBjC,EAAYgC,MAAsC,IAA/BhC,EAAYiC,gBAA8BjC,EAAYiC,gBAC3FC,kBAAmBlC,EAAYgC,MAAuC,IAAhChC,EAAYkC,iBAA+BlC,EAAYkC,iBAC7FpS,OAAQkQ,EAAYgC,MAA4B,IAArBhC,EAAYlQ,MAAoBkQ,EAAYlQ,OAUrEqS,GAAa,SAAChY,GACZ2V,GACAgC,GAAmB3X,IAOrBiY,IAAmBV,EAAAA,EAAAA,aAAYC,IAAAA,EAAS,SAACxX,GAAD,OAAYgY,GAAWhY,KAAS,KAAM,CAACyV,MAAAA,OAAD,EAACA,EAAQjP,IAAKiP,MAAAA,OAAd,EAAcA,EAAQyC,aAK1GlO,EAAAA,EAAAA,YAAU,WACN,OAAgFmO,EAAAA,EAAAA,eAAc9B,GAAtFxE,EAAR,EAAQA,WAAYuG,EAApB,EAAoBA,WAAYvB,EAAhC,EAAgCA,YAAaxD,EAA7C,EAA6CA,qBAAsB8D,EAAnE,EAAmEA,SACnEc,KACAL,GAAerW,MAAQoV,EAAc9E,GACrC+F,GAAezP,OAAS2O,EAAeD,GACvCe,GAAeE,gBAAkBb,GAAwB5D,GACzDuE,GAAejS,MAAQ4O,GAAgB6D,GACvCR,GAAeG,iBAAmBX,GAAYD,KAC/C,IAOH,IAoBMkB,GAAc,SAAC7Y,EAAO8Y,EAAWC,GACnC,IAAMC,EAAa,GAAH,eACTnC,MAAAA,OADS,EACTA,EAAS9W,QAAO,SAAAkZ,GAAS,OAAK7X,OAAO8X,UAAUC,eAAeC,KAAKH,EAAWH,OADrE,YAETA,EAAY9Y,KAEnB+Y,EAAQ,CAAEpD,KAAM,EAAGC,QAAAA,EAASiB,QAASmC,KAGnCK,GAAe1D,GAAQC,GAAWiB,KAAa5J,GAAY9M,IAEjEqK,EAAAA,EAAAA,YAAU,WACF6O,IAAgBtU,GAAYqT,GAAejS,MAC3C2R,GAAmBlD,GAAc,CAAEiC,QAAAA,MAExC,CAACjC,GAAcsB,MAAAA,OAAf,EAAeA,EAAe/P,QAEjCqE,EAAAA,EAAAA,YAAU,WACF6O,IAAgBjB,GAAerW,MArCf,SAAC/B,GAA4B,IAArBsZ,IAAqB,yDAC3CC,EAAevZ,EAAMwZ,OAErBC,EAAgB5C,MAAAA,OAAH,EAAGA,EAAS1M,MAAK,SAAA8O,GAAS,OAAIA,EAAUjZ,QAAUsS,EAAAA,eACjEmH,EACAA,EAAc1Z,OAASwZ,EAEvB1C,MAAAA,GAAAA,EAAS3L,KAAK,CAAElL,MAAOsS,EAAAA,YAAavS,OAAQwZ,KAGhCD,EAAYb,GAAmBD,IACvC,CAAE7C,KAAM,EAAGC,QAAAA,EAASiB,QAAAA,IA2BxB6C,CAAgBrH,GAAY,KAEjC,CAACA,KAEJ7H,EAAAA,EAAAA,YAAU,WACF6O,IAAgBjB,GAAezP,OAC/BkQ,GAAYxB,EAAa,cAAeoB,MAE7C,CAACpB,KAEJ7M,EAAAA,EAAAA,YAAU,WACF6O,IAAgBjB,GAAeE,gBAC/BO,GAAYhF,GAAsB,uBAAwB4E,MAE/D,CAAC5E,MAEJrJ,EAAAA,EAAAA,YAAU,WACF6O,IAAgBtU,GAAYqT,GAAejS,MAC3C0S,IAAYc,EAAAA,GAAAA,IAAUhF,IAAe,aAAc8D,MAExD,CAAC9D,MAEJnK,EAAAA,EAAAA,YAAU,WACF6O,IAAgBjB,GAAeG,iBAC/BM,GAAYlB,GAAU,WAAYc,MAEvC,CAACd,KAKJ,IAAMiC,IAAY,eACb1G,EAAAA,cAAe,kBAAMiE,EAAc,QADtB,SAEb0C,EAAAA,UAAW,SAAC/H,GAAD,OAAaiD,GPrKN,SAACjD,EAAS6C,EAAcmF,GAAgB,QACzD9H,EAAcF,MAAAA,GAAH,UAAGA,EAASnQ,aAAZ,aAAG,EAAiB,GAMrC,YALyDsB,KAArD0R,MAAAA,GAAA,UAAAA,EAAe7C,MAAAA,OAAH,EAAGA,EAAS9K,YAAxB,eAA+BgL,MAAAA,OAA/B,EAA+BA,EAAahL,QAC5C2N,EAAa7C,MAAAA,OAAD,EAACA,EAAS9K,KAAKgL,MAAAA,OAA3B,EAA2BA,EAAahL,MAAO,GAGnD8S,GAAeA,EAAYnF,GACpBA,EO+JCoF,CACIjI,EACA6C,IACA,SAACA,GAAD,OAAkBkE,IAAYc,EAAAA,GAAAA,IAAUhF,GAAe,aAAc6D,YAN/D,SASb7E,EAAAA,YAAa,SAAC7B,GAAD,OAAawF,EAAezF,GAAeC,EAASuF,QATpD,SAUbjD,EAAAA,iBAAkB,SAACtC,GAAD,OAAa2F,GAC5B5F,GAAeC,EAAS+B,SAXd,SAabnS,EAAAA,SAAU,SAACoQ,GAAD,OAAa8F,GPhMA,SAAC9F,GAAgC,MAAvBkI,EAAuB,uDAAP,GACvChI,IAAgBF,MAAAA,GAAA,UAAAA,EAASnQ,aAAT,eAAiB,KAAM,IAA9C3B,MACFJ,EAAe,GAAH,OAAMoS,EAAYrS,MAAM,KAAK,GAA7B,MAElB,gBACOqa,GADP,cAEKpa,EAAewB,OAAOG,KAAKyY,EAAcpa,IAAeJ,QAAO,SAACC,EAAKuB,GAKlE,OAJIA,IAASgR,IACTvS,EAAIuB,IAAQ,GAGTvB,IACR,MOoLiCwa,CAAiBnI,EAAS6F,QAbhD,GAyDZuC,GAAmB,GAAH,eACdjN,EAMA,GAND,kBACImL,GAAerW,KAAO,CAACkV,GAAc,KADzC,OAEImB,GAAezP,MAAQ,CAACyK,GAAmB,KAF/C,OAGIgF,GAAeG,gBAAkB,CAACtD,IAAyB,KAH/D,OAIImD,GAAeE,eAAiB,CAACf,IAAoB,KAJzD,OAKIxS,GAAYqT,GAAejS,KAAO,CAACuO,IAAc,OANtC,QAQfmB,MAAAA,OAAA,EAAAA,EAAc1V,QAAS,KAG9B,OAAO,kBAAC,EAAAyH,SAAD,KACH,kBAACuS,GAAA,GAAD,UACQlS,EACAmO,GAAc,CACdA,WAAY,SACLA,GADG,IAENgE,YAAYhE,MAAAA,OAAA,EAAAA,EAAYgE,cAAejE,KALnD,CAQIxQ,UAAS,0CACLsH,IAAaiN,GAAiB1Y,OAAS,4CAA8C,MAErF0Y,MAAAA,QAAA,EAAAA,GAAkB1Y,QAAS,GAAK,CAChCqU,aAAc,SACPA,GAAgB,IADX,IAERuE,YAAajE,EACbhW,MAAO+Z,MAAAA,QAAF,EAAEA,GAAkBja,KAAI,SAAAF,GAAM,wBAC5BA,GAD4B,IAE/BY,aAAc,OACVoS,aAAahT,MAAAA,GAAA,UAAAA,EAAQY,oBAAR,eAAsBoS,cAAtB,oBAAkDhT,MAAAA,GAAlD,UAAkDA,EAAQU,aAA1D,aAAkD,EAAe4Z,gBAC3Eta,MAAAA,OAFK,EAELA,EAAQY,cAFH,IAGRyZ,YAAajE,YAKxBA,GAAa,CAAEJ,oBA9DxB,SACOA,GAAuB,IAD9B,IAEIc,QAAS,GAAF,eACC9R,IAAakI,GAAYmL,GAAejS,KAAQ2O,GAAW,KAD5D,QAEC7H,GAAYmL,GAAerW,KAAOmV,EAAW,KAF9C,QAGCjK,GAAYmL,GAAezP,MAAQyO,EAAgB,KAHpD,QAICnK,GAAYmL,GAAeE,eAAiBd,GAAiB,KAJ9D,QAKCvK,GAAYmL,GAAeG,gBAAkBb,GAAsB,KALpE,QAMA3B,MAAAA,OAAA,EAAAA,EAAqBc,UAAW,KAEvCyD,SAAU,SAACC,EAAD,EAA+BC,GAAU,IAIxC,EAJwC,cAApC1I,EAAoC,KAAxB2I,EAAwB,WAC3CD,GACAxV,GAAS0V,EAAAA,EAAAA,OAzBrBtC,GAAerW,MAAQoV,EAAc,IACrCiB,GAAezP,OAAS2O,EAAeqD,GAAAA,GAAAA,aACvCvC,GAAeE,gBAAkBb,GAAwB,IACzDW,GAAejS,MAAQ4O,GAAgB,IACvCqD,GAAeG,iBAAmBX,GAAY,IAC9C5S,GAAS4V,EAAAA,EAAAA,IAAU,CAACD,GAAAA,MACpBnC,GAAW,CAAE7C,KAAM,EAAGkB,QAAS,CAAC8D,GAAAA,OAsBpB,UAAAf,GAAa9H,EAAQpR,aAArB,cAAAkZ,GAA6B9H,GAGjCiE,GACAA,EAAoBuE,UACpBvE,EAAoBuE,SAASC,EAA7B,CAAiCzI,GAAjC,eAA6C2I,IAAcD,EAAOG,GAAAA,QAiB1E,CA0BI7E,cAAgB1R,EAAS0R,EAAgB,KACzC+E,WAAYzW,EAAS,IACjBuR,KAAAA,EACAmF,UAAY3E,EAAgBT,EAAJ,EACxB0E,YAAajE,EACbP,QAAAA,EACAmF,UAAW,SAAC/H,EAAIgI,GAAL,OAAiBzE,EAAc,CAAEZ,KAAMqF,KAClDC,gBAAiB,SAACjI,EAAIkI,GAAL,OAAoB3E,EAAc,CAAEZ,KAAM,EAAGwF,SAAUD,MACrE5E,GACH,kBAAChQ,EAAA,EAAD,CAAU1C,KAAM2C,EAAAA,EAAAA,OAElBqG,IAGD7H,GAAYqT,GAAejS,MAAQqQ,IAAiB,kBAAC,EAAAnQ,UAAD,CACjD6P,cAAeA,EACftB,aAAcA,GACdwG,QAAS,SAACxa,GAAD,OAAcmU,IAAgBsG,EAAAA,EAAAA,kBAAiBza,KACxD0a,cAAe,kBAAMzG,GAAe,KACpCmB,QAASA,MAMzBP,GAAmBzR,UAAY,CAC3Be,SAAUd,IAAAA,KACV+R,QAAS/R,IAAAA,KACTkS,UAAWlS,IAAAA,KACX4R,aAAc5R,IAAAA,OACdyR,MAAOzR,IAAAA,OACP4S,QAAS5S,IAAAA,MACTgJ,SAAUhJ,IAAAA,KACV0R,KAAM1R,IAAAA,OACNsX,eAAgBtX,IAAAA,KAChB4T,eAAgB5T,IAAAA,KAChB2R,QAAS3R,IAAAA,OACT2I,SAAU3I,IAAAA,KACV4W,WAAY5W,IAAAA,OACZ6R,cAAe7R,IAAAA,OACf8R,oBAAqB9R,IAAAA,OACrBsS,cAAetS,IAAAA,KACfiS,cAAejS,IAAAA,MAAgB,CAC3BkC,KAAMlC,IAAAA,UAAoB,CACtBA,IAAAA,OACAA,IAAAA,QAAkBA,IAAAA,YAG1BoS,YAAapS,IAAAA,MAAgB,CACzBkC,KAAMlC,IAAAA,KACNlC,KAAMkC,IAAAA,KACNqU,eAAgBrU,IAAAA,KAChB0E,MAAO1E,IAAAA,KACPsU,gBAAiBtU,IAAAA,KACjBoU,IAAKpU,IAAAA,OAETqS,gBAAiBrS,IAAAA,OACjBG,OAAQH,IAAAA,KACRuX,UAAWvX,IAAAA,KACXwX,YAAaxX,IAAAA,KACbgL,SAAUhL,IAAAA,KACV9D,MAAO8D,IAAAA,MACPgS,OAAQhS,IAAAA,OACRmS,WAAYnS,IAAAA,OACZuS,aAAcvS,IAAAA,KACdyX,sBAAuBzX,IAAAA,KAG3BwR,GAAmB9N,aAAe,CAC9B5C,UAAU,EACVoR,WAAW,EACXJ,oBAAqB,GACrBc,QAAS,GACTR,YAAa,IAGjB,Y,kDCrYA,SAXuB,kBACnB,kBAACjT,EAAA,EAAD,CAAYC,QAAUC,EAAAA,EAAAA,MAClB,kBAACI,EAAA,EAAD,CAAOC,aAAa,KAAKC,KAAK,MAA9B,6BAGA,kBAACC,EAAA,EAAD,mE,4lBCaR,IAAM8X,GAAc,SAAC,GAmBf,QAlBF1O,EAkBE,EAlBFA,SACAiE,EAiBE,EAjBFA,WACA0K,EAgBE,EAhBFA,cACAH,EAeE,EAfFA,YACApX,EAcE,EAdFA,QACAhB,EAaE,EAbFA,QACA4S,EAYE,EAZFA,OACA4F,EAWE,EAXFA,WACAC,EAUE,EAVFA,OACYC,EASV,EATF7K,WACA8K,EAQE,EARFA,WACAC,EAOE,EAPFA,SAOE,IANF9K,eAAAA,OAME,MANe,kBAAC,GAAD,MAMf,EALFpM,EAKE,EALFA,SACSmX,EAIP,EAJFxL,QACAgL,EAGE,EAHFA,sBACAtX,EAEE,EAFFA,OACA+X,EACE,EADFA,eAEMnX,GAAWC,EAAAA,EAAAA,eACXzC,GAAU+G,EAAAA,EAAAA,cACVlH,GAAWiH,EAAAA,EAAAA,eACX2H,GAAOvH,EAAAA,EAAAA,cAAY,qBAAGoN,SAAY7F,QAClCmL,GAAe1S,EAAAA,EAAAA,cACjB,qBAAGoN,SAAYpG,WACf,SAAC2L,EAAMC,GAAP,OAAgBD,EAAKE,OACjB,WAAUC,GAAV,IAAGxV,EAAH,EAAGA,IAAH,OAAoBsV,EAAKG,WAAU,qBAAGzV,MAA+BA,OAASwV,QAiBhF9L,GAAUgM,EAAAA,EAAAA,QAAO,KACvBC,EAAAA,EAAAA,UAAQ,WACJ,GAA2B,mBAAhBT,EACPxL,EAAQkM,QAAUV,EAAYW,GAAAA,SAC3B,GAAIX,EAAa,CACpB,IAAMY,EAAkBC,MAAMC,QAAQtB,GAAyBA,EAAwB,GACjFuB,EAAyBJ,GAAAA,GAAAA,QAAsB,gBAAG7V,EAAH,EAAGA,IAAH,MACxC,SAARA,GAAkBjC,GAAsB,SAARiC,IAAmB8V,EAAgBlS,SAAS5D,MAEjF0J,EAAQkM,SAAUM,EAAAA,GAAAA,kBAAiB,CACE,kBAA1BxB,GAAuCA,EAAwB,GAAKuB,EAC3Ef,GACD,YAEHxL,EAAQkM,QAAUR,IAEvB,CACCrX,EACAgY,MAAMC,QAAQtB,GAAyBA,EAAsByB,OAASzB,EACtEqB,MAAMC,QAAQd,GACVA,EAAYjc,KAAI,qBAAG+G,OAAemW,OACX,mBAAhBjB,EAA6B,WAAaA,EACrDa,MAAMC,QAAQZ,GAAgBA,EAAanc,KAAI,qBAAG+G,OAAemW,OAASf,EAC1ED,IAGJ,IAAM/K,EAAQhN,GTVW,SAACsM,EAASzD,EAAUgE,EAAM8K,GAA1B,OACzBrL,MAAAA,OADyB,EACzBA,EAASzQ,KAAI,gBAAGgI,EAAH,EAAGA,MAAOiK,EAAV,EAAUA,WAAYkL,EAAtB,EAAsBA,eAAtB,mCAETlL,WAAY,GAAF,eACHA,GAAc,KADX,OAEHjK,MAAAA,GAAAA,EAAOoV,MAAQ,EAACC,EAAAA,GAAAA,WAAUrV,EAAMoV,QAAU,KAFvC,OAGHpQ,GACHgE,EAAKzP,QAAU,GACdyG,GAASA,EAAMsV,UAChBrL,MAAAA,GAAAA,EAAYtH,SAAS4S,GAAAA,WACrBvL,GAAiBC,GAAc,GAAK,CAACsL,GAAAA,YAEzCJ,eAAgB,GAAF,eACPA,GAAkB,KADX,OAEPrB,EAAe,CAAC7K,GAAAA,YAAc,USJjBuM,CAAc/M,EAAQkM,QAAS3P,EAAUgE,EAAM8K,GAWvE,cALOF,EAAW6B,WACG,KAAjBzM,MAAAA,OAAA,EAAAA,EAAMzP,gBACCqa,EAAW8B,eAIlB,kBAAC,aAAD,KACMvZ,GAAUgN,EACRwM,GAAAA,OAAW,kBAAC,UAAD,QACPva,QAAUA,EACV,aAAW,iBACX+N,MAAQA,EACRH,KAAOD,GACHC,EACAP,EAAQkM,QACR,CACIvY,QAAAA,EACA6M,WAAAA,EACA9M,OAAAA,EACA4X,WAAYA,GAvBZ,SAAC6B,EAAQ7W,GAC7BxE,EAAQ0I,KAAR,UAAgB7I,EAASE,UAAzB,OAAoE,MAAhCF,EAASE,SAASub,OAAO,GAAa,GAAK,KAA/E,OAAqF9W,KAuBjEiV,SAAAA,EACAhG,OAAAA,EACA9E,eAAAA,IAGR4M,gBACI,UAAArN,EAAQkM,eAAR,eAAiBpb,QAAS,EACtBwc,GAAAA,oBAAAA,OACAA,GAAAA,oBAAAA,OAERrY,UAAU,qBACVmW,OAAS,SAAC3U,EAAOqV,EAAO9D,GAAc,SAvEjC,SAACmF,EAAQ7W,EAAK0R,EAAW8D,GAC9B,WAARxV,GAA4B,WAARA,GACpBhC,GAASiZ,EAAAA,EAAAA,IAAQ,CAAEzB,MAAAA,EAAOxV,IAAAA,EAAK0R,UAAAA,KAGnCoD,MAAAA,GAAAA,EAAS,CAAEU,MAAAA,EAAOxV,IAAAA,EAAK0R,UAAAA,IAmEPwF,CACI/W,GACAiK,MAAAA,GAAA,UAAAA,EAAQoL,EAAQlL,QAAQmK,GAAenK,QAAQJ,WAA/C,eAA6DiN,WAC7D/M,MAAAA,GADA,UACAA,EAAQoL,EAAQlL,QAAQmK,GAAenK,QAAQJ,WAD/C,aACA,EAA6DlK,KAC7D0R,EACA8D,IAGRvG,OAAS,CACLuG,OAAOpL,MAAAA,OAAA,EAAAA,EAAOqL,WAAU,SAAAzb,GAAI,OAAIiV,MAAAA,OAAA,EAAAA,EAAQjP,OAAQhG,EAAKgG,QAAOsK,QAAQmK,GAAenK,QAAQJ,GAC3FwH,UAAWzC,MAAAA,OAAF,EAAEA,EAAQyC,YAlChB,YAqCA+C,GAAgC,KAAjBxK,MAAAA,OAAA,EAAAA,EAAMzP,QAAe,CAAEiF,SA1FxC,SAACoX,EAAQO,EAASC,GACnC,IAAMC,EAAMvC,EAAe9K,EAAKoN,EAAQ,GAAKpN,EAAKoN,GAClDrZ,GAASuZ,EAAAA,EAAAA,KAAwB,IAAXF,EAAe,EAAIC,EAAIrc,GAAImc,MAwFmC,IACjElN,EAAa,CAAEsN,WAAY5C,GAAkB,IAC7CvX,IAAW4M,MAAAA,OAAA,EAAAA,EAAMzP,QAAS,GAAK,CAAE6C,QAAAA,IAvCjC,CAyCPoa,gBAAc,GACT5C,GAEL,kBAAC,GAAA6C,YAAD,MACA,kBAAC,GAAAC,UAAD,OAEJ,kBAACC,GAAA,EAAD,CACIC,SAAU,UAAAnO,EAAQkM,eAAR,eAAiBpb,SAAU,EACrCsd,QAAU,GACVzb,QAASA,MAAAA,EAAAA,EAAWwY,EAAWxY,YAOnDsY,GAAY3X,UAAY,CACpBX,QAASY,IAAAA,MAAgB,CAAC,YAC1BiN,WAAYjN,IAAAA,KACZ2X,cAAe3X,IAAAA,KACf6X,OAAQ7X,IAAAA,KACRwX,YAAaxX,IAAAA,KACb8a,YAAa9a,IAAAA,KACbgJ,SAAUhJ,IAAAA,KACV+a,WAAY/a,IAAAA,KACZgS,OAAQhS,IAAAA,MAAgB,CACpB+C,IAAK/C,IAAAA,OACLyU,UAAWzU,IAAAA,MAAgB,CAAC,MAAO,WAEvC4X,WAAY5X,IAAAA,OAAA,iBACPA,IAAAA,OAAmBA,IAAAA,MADZ,uBAEIA,IAAAA,cAFJ,oBAGCA,IAAAA,SAHD,2BAIQA,IAAAA,MAJR,KAMZ+X,WAAY/X,IAAAA,KACZc,SAAUd,IAAAA,KACVkN,eAAgBlN,IAAAA,KAChByX,sBAAuBzX,IAAAA,UAAoB,CAACA,IAAAA,KAAgBA,IAAAA,QAAkBA,IAAAA,UAC9EG,OAAQH,IAAAA,KACRkY,eAAgBlY,IAAAA,OAChByM,QAASzM,IAAAA,UAAoB,CAACA,IAAAA,MAAiBA,IAAAA,OAC/CgL,SAAUhL,IAAAA,KACVI,QAASJ,IAAAA,MACTgY,SAAUhY,IAAAA,KAGd0X,GAAYhU,aAAe,CACvBvD,QAAQ,EACR4a,YAAY,EACZ9N,YAAY,EACZuK,aAAa,EACbsD,aAAa,EACb9N,KAAM,GACN5N,QAAS4b,GAAAA,aAAAA,QACTrD,cAAe,aACfC,WAAY,IAGhB,Y,8EC3MMqD,GAAe,SAAC,GAAD,IAAG1Z,EAAH,EAAGA,MAAOiC,EAAV,EAAUA,YAAgBQ,GAA1B,oBACjB,kBAACkX,GAAA,GAAD,UACQlX,EADR,CAEItC,UAAU,8BACVH,MAAOA,EACPiC,YAAa,kBAAC2X,GAAA,EAAD,CAASC,QAAQ,oBACzB5X,OAKbyX,GAAalb,UAAY,CACrBwB,MAAOvB,IAAAA,OACPwD,YAAaxD,IAAAA,MAGjBib,GAAavX,aAAe,CACxBnC,MAAO,sCACPiC,YAAa,kIAKjB,Y,yrBClBA,IAAM6X,GAAc,SAAC,GAAD,SAAG1S,SAAH,EAAazH,QAAb,cAKdoa,GAAuB,SAAC,GAA2D,EAAzDP,WAAyD,IAA7CzI,EAA6C,EAA7CA,cAAeiJ,EAA8B,EAA9BA,cAAkBvX,GAAY,aAC/EwX,GAAY/C,EAAAA,EAAAA,QAAOzU,EAAM9H,OACzBuf,GAAahD,EAAAA,EAAAA,QAAOzU,EAAMgO,QA0BhC,OAxBAzL,EAAAA,EAAAA,YAAU,WACFvC,EAAMgF,UACNsJ,EAAc,GAAIiJ,KAEvB,KAQHhV,EAAAA,EAAAA,YAAU,WACFvC,EAAMgF,WAAa0S,IAAAA,CAAQF,EAAU7C,QAAQ3c,IAAIqf,IAAcrX,EAAM9H,MAAMF,IAAIqf,OAC/EG,EAAU7C,QAAU3U,EAAM9H,MAC1BoW,EAAc,GAAIiJ,IAGjBvX,EAAMgF,UAAa0S,IAAAA,CAAQD,EAAW9C,QAAS3U,EAAMgO,UACtDyJ,EAAW9C,QAAU3U,EAAMgO,OAC3BM,EAAc,GAAIiJ,OAIlB,kBAACtX,EAAA,EAAD,CAAM0X,OAAO,KAAKja,UAAU,sBAChC,kBAACwC,EAAA,EAAD,CAAUsD,KAAO,IACb,kBAAC,IAAD,UAA2BxD,EAA3B,CAAmCsO,cAAeA,QAQxDsJ,GAAgBC,IAAAA,YAAiB,WAAyCC,GAAQ,IAA9C5J,EAA8C,EAA9CA,UAAWI,EAAmC,EAAnCA,cAAkBtO,GAAiB,aAC9E8O,GAAgBrN,EAAAA,EAAAA,cAAY,qBAAGoN,SAAYC,iBAQjD,OANIgJ,IACAA,EAAInD,QAAU,CACVrG,cAAe,SAACyJ,GAAD,IAASC,IAAT,gEAAmC1J,EAAcyJ,EAAQC,MAIxE9J,EAKA,kBAACoJ,IAAD,UACStX,EADT,CAEI8O,cAAgBA,EAChBR,cAAgBA,KAPxB,yBAAK5Q,UAAU,8BACX,kBAAC,GAAD,CAAcua,kBAAkB,QAW5CX,GAAqBvb,UAArB,SACO6b,GAAc7b,WADrB,IAEImc,WAAYlc,IAAAA,KACZsS,cAAetS,IAAAA,KACfub,cAAevb,IAAAA,OAEnBsb,GAAqB5X,aAAe,CAChCiO,QAAS,GACTD,KAAM,EACN6J,eAAe,GAEnBK,GAAc7b,UAAY,CACtBe,SAAUd,IAAAA,KACVmc,eAAgBnc,IAAAA,KAChBoc,aAAcpc,IAAAA,KACd+a,WAAY/a,IAAAA,KACZ0R,KAAM1R,IAAAA,OACN2R,QAAS3R,IAAAA,OACTgS,OAAQhS,IAAAA,MAAgB,CACpB+C,IAAK/C,IAAAA,OACLyU,UAAWzU,IAAAA,SAEf9D,MAAO8D,IAAAA,QAAkBA,IAAAA,UAAoB,CACzCA,IAAAA,OACAA,IAAAA,MAAgB,CACZhC,GAAIgC,IAAAA,OAAAA,aAERA,IAAAA,MAAgB,CACZqc,QAASrc,IAAAA,IACTkB,OAAQlB,IAAAA,KACRuB,MAAOvB,IAAAA,UAGf6S,SAAU7S,IAAAA,QAAkBA,IAAAA,KAC5BiS,cAAejS,IAAAA,MAAgB,CAC3BkC,KAAMlC,IAAAA,UAAoB,CACtBA,IAAAA,OACAA,IAAAA,QAAkBA,IAAAA,YAG1Bsc,YAAatc,IAAAA,KACboS,YAAapS,IAAAA,MAAgB,CACzBkC,KAAMlC,IAAAA,KACNlC,KAAMkC,IAAAA,KACNqU,eAAgBrU,IAAAA,KAChB0E,MAAO1E,IAAAA,KACPsU,gBAAiBtU,IAAAA,OAErBsS,cAAetS,IAAAA,MAGnB4b,GAAclY,aAAe,CACzBwO,WAAW,GAGf,Y,gBC1HMqK,GAAmB,SAAC,GAUpB,IATF9K,EASE,EATFA,MACAC,EAQE,EARFA,KACAC,EAOE,EAPFA,QACA8C,EAME,EANFA,UACA+H,EAKE,EALFA,OACAtK,EAIE,EAJFA,UACAG,EAGE,EAHFA,gBACAC,EAEE,EAFFA,cAkBA,OAhBE,EADFnS,SAiBmB+R,EACf,kBAACuK,GAAA,GAAD,UACSD,GAAU,CACXpd,QAASsd,GAAAA,EAAAA,QAFjB,CAIIvG,YAAajE,EACb2E,UAAYpF,EACZC,KAAOA,EACPC,QAAUA,EACVgL,cAAgBlI,EAChBqC,UApBU,SAAC8C,EAAQgD,GAAT,OAAqBtK,EAAc,CAAEZ,KAAMkL,KAqBrD5F,gBAbgB,SAAC4C,EAAQiD,GAAT,OAAwBvK,EAAc,CAAEZ,KAAM,EAAGwF,SAAU2F,MAcvExK,IAER,MAGRkK,GAAiBxc,UAAY,CACzB4R,QAAS3R,IAAAA,OACTyR,MAAOzR,IAAAA,OACP0R,KAAM1R,IAAAA,OACNwc,OAAQxc,IAAAA,KACRkS,UAAWlS,IAAAA,KACXyU,UAAWzU,IAAAA,OACXqS,gBAAiBrS,IAAAA,OACjBG,OAAQH,IAAAA,KACRsS,cAAetS,IAAAA,KAAAA,YAGnBuc,GAAiB7Y,aAAe,CAC5B+N,MAAO,EACP+K,QAAQ,EACR/H,UAAW,KACXvC,WAAW,GAGf,Y,82BClDA,IAkBM4K,IAAiBC,EAAAA,EAAAA,aAAW,WAyB/BjB,GAAQ,IAxBPvE,EAwBO,EAxBPA,UACA5O,EAuBO,EAvBPA,SAEAzM,GAqBO,EAtBP8gB,aAsBO,EArBP9gB,OACO+gB,EAoBA,EApBPxL,MACMyL,EAmBC,EAnBPxL,KACSyL,EAkBF,EAlBPxL,QACAiB,EAiBO,EAjBPA,QACA9R,EAgBO,EAhBPA,SACQsc,EAeD,EAfPpL,OACAC,EAcO,EAdPA,cAcO,IAbPC,UAAAA,OAaO,aAZPmL,WAAAA,OAYO,SAXPf,EAWO,EAXPA,YACAvK,EAUO,EAVPA,QACAK,EASO,EATPA,YACAC,EAQO,EARPA,gBAQO,IAPPiL,WAAAA,OAOO,MAPM,kBAACC,GAAA,EAAD,MAON,EANPC,EAMO,EANPA,YACAxS,EAKO,EALPA,SACAyS,EAIO,EAJPA,eACAlC,EAGO,EAHPA,cACAhJ,EAEO,EAFPA,aACGvO,GACI,aACDgF,EAAWqE,QAAQnR,GACnBwhB,GAAQjY,EAAAA,EAAAA,cAAY,gBAAGoN,EAAH,EAAGA,SAAH,OACtBA,MAAAA,OADsB,EACtBA,EAAU6K,SAERhM,GAAOjM,EAAAA,EAAAA,cAAY,gBAAqBkY,EAArB,EAAG9K,SAAYnB,KAAf,OACrB1I,EAAWkU,EAAaS,GAAW,IAErCC,EAAAA,cACIjM,GAAUlM,EAAAA,EAAAA,cAAY,gBAAwBoY,EAAxB,EAAGhL,SAAYlB,QAAf,OACxB3I,EAAWmU,EAAgBU,GAAc,KAE3CD,EAAAA,cAQIhH,EAAa,CACflF,KAAAA,EACAC,QAAAA,EACAF,OAVUhM,EAAAA,EAAAA,cAAY,YAAuC,IAAjBqY,EAAiB,EAApCjL,SAAYpB,MACrC,OAAIzI,OACsBhK,IAAfie,EAA2BA,EAAa/gB,MAAAA,OAAxC,EAAwCA,EAAOqB,OAGnDugB,IACRF,EAAAA,eAMG5L,GAASvM,EAAAA,EAAAA,cAAY,gBAAuBsY,EAAvB,EAAGlL,SAAYb,OAAf,OACvBhJ,EAAWoU,EAAcW,IAC1BH,EAAAA,cAEGI,GAAcvY,EAAAA,EAAAA,cAAY,gBAAGoN,EAAH,EAAGA,SAAH,OAC5B7J,QAAyBhK,IAAbgM,EAA0BA,IAAY6H,MAAAA,OAAJ,EAAIA,EAAU1S,QAAU0S,MAAAA,OAAtE,EAAsEA,EAAU1S,UAOpF,GAAsDc,EAAAA,EAAAA,UAASwc,GAA/D,eAAOQ,EAAP,KAA6BC,EAA7B,MACA3X,EAAAA,EAAAA,YAAU,WACDyX,GACDE,MAEL,CAACF,IACJ,IAAM7d,EAAS6d,IAAgBC,EAEzBld,GAAWC,EAAAA,EAAAA,eACX0I,GAAQC,EAAAA,EAAAA,YAERwU,GAAQ1F,EAAAA,EAAAA,QA3FC,WACf,IAAI0F,EAAQ,GAMZ,MAAO,CAAEC,YAJW,SAACpa,GAAYma,EAAQna,GAInBqa,SAFL,kBAAMF,IAsFFG,IACrBH,EAAMxF,QAAQyF,YAAY,CACtB1M,KAAAA,EACAC,QAAAA,EACAzV,MAAAA,EACA8V,OAAAA,EACAI,YAAAA,EACAtR,SAAAA,EACAwb,YAAAA,EACArK,cAAAA,EACAjJ,SAAAA,IAOJ,IAAMsJ,EAAgB,WAAoC,MAAnC0B,EAAmC,uDAAzB,GAAIuK,EAAqB,uCAC9CzL,EAAkBpJ,EAAM8U,WAAW3L,SAAnCC,cACF2L,GAAc,UAAAN,EAAMxF,eAAN,eAAe0F,aAAc,GAC3CK,GAAc1K,MAAAA,OAAA,EAAAA,EAASkD,YAAYlD,MAAAA,OAArB,EAAqBA,EAASrC,UAAW8M,EAAY9M,QAEnEoK,EAAS,OACXrK,KAAM+M,EAAY/M,KAClBwF,SAAUwH,EACVxiB,MAAOuiB,EAAYviB,MACnB8V,OAAQyM,EAAYzM,OACpBI,YAAaqM,EAAYrM,YACzBQ,QAASE,EACT9J,SAAUyV,EAAYzV,UACnByV,EAAYxM,eACZ+B,GAGHuD,IAAcgH,GACdxd,GAAS4d,EAAAA,EAAAA,OACTpH,EAAUwE,GAAQ,SAAC/H,GACfjT,GACI6d,EAAAA,EAAAA,aAAY,SACH7C,GAAW/H,GAChByK,EAAY3d,SACZ2d,EAAYnC,kBAKxBvb,GACI6d,EAAAA,EAAAA,aACI7C,EACA0C,EAAY3d,SACZ2d,EAAYnC,eAMtBuC,GAAcpG,EAAAA,EAAAA,QAAOxG,GAQ3B,OAPA1L,EAAAA,EAAAA,YAAU,WACFiX,IAAgB9B,IAAAA,CAAQmD,EAAYlG,QAAS1G,KAC7CK,EAAc,CAAEZ,KAAM,IACtBmN,EAAYlG,QAAU1G,OAKX,IAAdC,GAAuBmL,EACpB,kBAAC,GAAD,CACI9b,MAAM,kDACNiC,YAAa,iKAKhBka,EAmDaJ,EAnDL,kBAAC,EAAA3Z,SAAD,KACL,kBAAC,IAAD,UACSK,EADT,CAEIiO,cAAeA,EACfC,UAAWA,EACXhW,MAAQA,EACR0W,QAAUA,EACV5J,SAAWA,EACXyI,MAAQmF,EAAWnF,MACnBC,KAAOkF,EAAWlF,KAClBC,QAAUiF,EAAWjF,QACrB7Q,SAAWA,EACXiR,QAAUA,EACVO,cAAeA,EACfN,OAASA,EACTI,YAAaA,EACbC,gBAAiBA,EACjBlS,OAAQA,EACRoS,aAAcA,EACdT,oBAAmB,IAAIgN,YAAa,iBAAoB9a,EAAM8N,uBAE5DnJ,GAEN,kBAAC,IAAD,UACS3E,EADT,CAEIiO,cAAeA,EACfC,UAAWA,EACX4J,IAAKA,EACL9S,SAAWA,EACX9M,MAAQA,EACRwV,KAAOkF,EAAWlF,KAClBM,OAASA,EACTL,QAAUiF,EAAWjF,QACrB7Q,SAAWA,EACXwR,cAAeA,EACfnS,OAAQA,EACRob,cAAeA,KAEnB,kBAACwD,GAAA,EAAD,CAAcC,UAAQ,EAACtd,UAAU,mCAC7B,kBAAC,GAAD,CACIwQ,UAAWA,EACXsK,QAAM,EACN/K,MAAQmF,EAAWnF,MACnBC,KAAOkF,EAAWlF,KAClBC,QAAUiF,EAAWjF,QACrB3I,SAAWA,EACXsJ,cAAeA,EACfD,gBAAiBA,EACjBlS,OAAQA,SAOhC2c,GAAe/c,UAAY,CACvByd,YAAaxd,IAAAA,KACbuX,UAAWvX,IAAAA,KACX2I,SAAU3I,IAAAA,KACVgd,aAAchd,IAAAA,OACd9D,MAAO8D,IAAAA,MACPyR,MAAOzR,IAAAA,OACP0R,KAAM1R,IAAAA,OACN2R,QAAS3R,IAAAA,OACT4S,QAAS5S,IAAAA,IACTc,SAAUd,IAAAA,KACV+R,QAAS/R,IAAAA,KACTgS,OAAQhS,IAAAA,OACRiS,cAAejS,IAAAA,IACfkS,UAAWlS,IAAAA,KACXqd,WAAYrd,IAAAA,KACZsc,YAAatc,IAAAA,KACboS,YAAapS,IAAAA,OACbqS,gBAAiBrS,IAAAA,OACjBsd,WAAYtd,IAAAA,KACZgL,SAAUhL,IAAAA,KACVyd,eAAgBzd,IAAAA,KAChBub,cAAevb,IAAAA,KACfuS,aAAcvS,IAAAA,KACd8R,oBAAqB9R,IAAAA,QAGzB,Y,qCCpQMif,GAAiB,SAAC,GAAgC,IAA9BC,EAA8B,EAA9BA,cAAkBlb,GAAY,aAC5CkO,GAAciN,EAAAA,GAAAA,IAA0B,CAC5C,gBACA,mBACA,yBAHIjN,UAMR,OAAIgN,IAA+B,IAAdhN,EACV,kBAAC,GAAD,MAEA,kBAAC,GAAkBlO,IAIlCib,GAAelf,UAAY,CACvBmf,cAAelf,IAAAA,MAGnB,Y,ykBCfO,SAASof,GAAmB1V,EAAO2V,EAAkB1T,GAA+B,IAAtBuT,IAAsB,yDACjFze,EAAsB4M,QAAQ1B,GACpC,WACImR,eAAgBjB,IAAAA,YACZ,SAAC7X,EAAO8X,GAAR,OAAgB,kBAAC,MAAD,UACP9X,EADO,CAEZkb,cAAgBA,EAChBlC,aAAelB,EACfpS,MAAQA,EACR4V,IAAMxC,SAGdtT,QAASqS,IAAAA,YACL,SAAC7X,EAAO8X,GAAR,OAAgB,kBAAC,MAAD,QACZyD,YAAU,GACLvb,EACDqb,EAHQ,CAIZH,cAAgBA,EAChBlC,aAAelB,EACfpS,MAAQA,EACR4V,IAAM9V,SAGdgW,oBAAqB3D,IAAAA,YACjB,SAAC7X,EAAO8X,GAAR,OAAgB,kBAAC,MAAD,QACZyD,YAAU,GACLvb,EACDqb,EAHQ,CAIZH,cAAgBA,EAChBlC,aAAelB,EACfpS,MAAQA,EAERjJ,oBAAsBA,IAAwBuD,EAAMyb,cACpDH,IAAM5W,SAGdA,gBAAiBmT,IAAAA,YACb,SAAC7X,EAAO8X,GAAR,OAAgB,kBAAC,MAAD,QACZyD,YAAU,GACLvb,EACDqb,EAHQ,CAIZH,cAAgBA,EAChBlC,aAAelB,EACfpS,MAAQA,EACRjJ,oBAAsBA,EACtB6e,IAAMI,SAGd1d,cAAe6Z,IAAAA,YACX,SAAC7X,EAAO8X,GAAR,OAAgB,kBAAC,MAAD,UACP9X,EADO,CAEZgZ,aAAelB,EACfoD,cAAgBA,EAChBxV,MAAQA,EACR4V,IAAMtd,GAAAA,QAId0J,cAAe,SAAC1H,GAAD,OAAW,kBAAC,IAAD,QACtB2H,QAASA,EACTuT,cAAgBA,EAChBze,oBAAsBA,GAClBuD,MAEL2b,K","sources":["webpack:///./src/Utilities/OperatingSystemFilterHelpers.js","webpack:///./src/components/InventoryDetail/helpers.js","webpack:///./src/components/InventoryDetail/SystemNotFound.js","webpack:///./src/components/InventoryDetail/TopBar.js","webpack:///./src/components/InventoryDetail/FactsInfo.js","webpack:///./src/components/InventoryDetail/ApplicationDetails.js","webpack:///./src/components/InventoryDetail/InsightsPrompt.js","webpack:///./src/components/InventoryDetail/InventoryDetail.js","webpack:///./src/components/InventoryDetail/AppInfo.js","webpack:///./src/components/InventoryDetail/FullDetail.js","webpack:///./src/components/InventoryDetailDrawer/BasicInfo.js","webpack:///./src/components/InventoryDetailDrawer/SystemIssues.js","webpack:///./src/components/InventoryDetail/DetailWrapper.js","webpack:///./src/components/InventoryTable/helpers.js","webpack:///./src/components/filters/useTextFilter.js","webpack:///./src/components/filters/useStalenessFilter.js","webpack:///./src/components/filters/useRegisteredWithFilter.js","webpack:///./src/components/filters/useTagsFilter.js","webpack:///./src/components/filters/useOperatingSystemFilter.js","webpack:///./src/components/filters/index.js","webpack:///./src/components/InventoryTable/EntityTableToolbar.js","webpack:///./src/components/InventoryTable/NoSystemsTable.js","webpack:///./src/components/InventoryTable/EntityTable.js","webpack:///./src/Utilities/AccessDenied.js","webpack:///./src/components/InventoryTable/InventoryList.js","webpack:///./src/components/InventoryTable/Pagination.js","webpack:///./src/components/InventoryTable/InventoryTable.js","webpack:///./src/components/InventoryDetail/DetailRenderer.js","webpack:///./src/Utilities/inventoryConnector.js"],"sourcesContent":["import { OS_CHIP, operatingSystems } from './index';\n\nexport const toGroupSelectionValue = (osVersions) => osVersions.reduce((acc, version) => {\n    const [majorVersion, minorVersion] = version.split('.');\n    acc[`${majorVersion}.0`] = {\n        ...(acc[`${majorVersion}.0`] || {}),\n        [`${majorVersion}.${minorVersion}`]: true\n    };\n    return acc;\n}, {});\n\nexport const groupOSVersions = (osVersions) => {\n    const majorVersions = osVersions.filter(({ value }) => value.split('.')[1] === '0');\n\n    return majorVersions.map((majorVersion) => ({\n        ...majorVersion,\n        groupSelectable: true,\n        items: osVersions.filter(({ value }) => {\n            const [majorOsVersion, minorOsVersion] = value.split('.');\n            return majorOsVersion === majorVersion.value.split('.')[0] && minorOsVersion !== '0';\n        }).sort(({ value }) => value.split('.')[1])\n    }));\n};\n\nexport const buildOSFilterConfig = (config = {}) => ({\n    ...config,\n    label: 'Operating System',\n    value: 'os-filter',\n    type: 'group',\n    filterValues: {\n        selected: config.value,\n        onChange: config.onChange,\n        groups: groupOSVersions(operatingSystems).map((item) => ({\n            ...item,\n            type: 'checkbox',\n            items: item.items?.map((subItem) => ({\n                ...subItem,\n                type: 'checkbox'\n            }))\n        }))\n    }\n});\n\nexport const buildOSChip = (operatingSystemValue) => {\n    const value = Object.values(operatingSystemValue || {}).flatMap((majorOsVersion) => Object.keys(majorOsVersion));\n    return (value?.length > 0 ? [{\n        category: 'Operating System',\n        type: OS_CHIP,\n        chips: operatingSystems.filter(({ value: osValue }) => value.some((osFilterValue) => osFilterValue === osValue))\n        .map(({ label, ...props }) => ({ name: label, ...props }))\n    }] : []);};\n","import get from 'lodash/get';\n\nexport const redirectToInventoryList = (id, onBackToListClick) => {\n    if (onBackToListClick) {\n        onBackToListClick();\n    } else {\n        /**\n         * Prevent the case that refferer has the same URL as current browser URL is\n         */\n        if (document.referrer && document.referrer !== `${document.location.origin}${document.location.pathname}`) {\n            history.back();\n        } else {\n            location.href = location.pathname.replace(new RegExp(`${[id]}.*`, 'g'), '');\n        }\n    }\n};\n\nexport const getFact = (path, factDict) => get(factDict, path, undefined);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    EmptyState,\n    EmptyStateVariant,\n    EmptyStateIcon,\n    EmptyStateBody,\n    Title,\n    Button\n} from '@patternfly/react-core';\nimport CubesIcon from '@patternfly/react-icons/dist/js/icons/cubes-icon';\nimport { redirectToInventoryList } from './helpers';\n\n/**\n * Empty state when system was not found in inventory.\n * @param {*} params - inventoryId and onBackToListClick.\n */\nconst SystemNotFound = ({ inventoryId, onBackToListClick }) => {\n    return <EmptyState variant={EmptyStateVariant.full}>\n        <EmptyStateIcon icon={CubesIcon} />\n        <Title headingLevel=\"h5\" size=\"lg\">\n                System not found\n        </Title>\n        <EmptyStateBody>\n                System with ID {inventoryId} does not exist\n        </EmptyStateBody>\n        <Button\n            variant=\"primary\"\n            onClick={() => redirectToInventoryList(inventoryId, onBackToListClick)}\n        >\n                Back to previous page\n        </Button>\n    </EmptyState>;\n};\n\nSystemNotFound.propTypes = {\n    inventoryId: PropTypes.string,\n    onBackToListClick: PropTypes.func\n};\n\nexport default SystemNotFound;\n","import React, { Fragment, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { DeleteModal, TagsModal, TagWithDialog } from '../../Utilities/index';\nimport { Skeleton, SkeletonSize } from '@redhat-cloud-services/frontend-components/Skeleton';\nimport {\n    Dropdown,\n    DropdownItem,\n    DropdownPosition,\n    DropdownToggle,\n    Title,\n    Button,\n    Flex,\n    FlexItem,\n    Split,\n    SplitItem\n} from '@patternfly/react-core';\nimport { redirectToInventoryList } from './helpers';\nimport { useDispatch } from 'react-redux';\nimport { toggleDrawer } from '../../store/actions';\n\n/**\n * Top inventory bar with title, buttons (namely remove from inventory and inventory detail button) and actions.\n * Remove from inventory button requires remove modal, which is included at bottom of this component.\n * @param {*} props namely entity and if entity is loaded.\n */\nconst TopBar = ({\n    entity,\n    loaded,\n    actions,\n    deleteEntity,\n    addNotification,\n    hideInvLink,\n    onBackToListClick,\n    showDelete,\n    showInventoryDrawer,\n    TitleWrapper,\n    TagsWrapper,\n    DeleteWrapper,\n    ActionsWrapper,\n    showTags\n}) => {\n    const dispatch = useDispatch();\n    const [isOpen, setIsOpen] = useState(false);\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const inventoryActions = [\n        ...(!hideInvLink ? [{\n            title: 'View system in Inventory',\n            component: 'a',\n            href: `./insights/inventory/${entity?.id}`\n        }] : []),\n        ... actions || []\n    ];\n\n    return (\n        <Split className=\"ins-c-inventory__detail--header\">\n            <SplitItem isFilled>\n                {\n                    loaded ? (\n                        <Flex>\n                            <FlexItem>\n                                <TitleWrapper>\n                                    <Title headingLevel=\"h1\" size='2xl'>{ entity && entity.display_name }</Title>\n                                </TitleWrapper>\n                            </FlexItem>\n                            {\n                                showTags &&\n                                <FlexItem>\n                                    <TagsWrapper>\n                                        <TagWithDialog\n                                            count={ entity && entity.tags && entity.tags.length }\n                                            systemId={ entity && entity.id }\n                                        />\n                                        <TagsModal />\n                                    </TagsWrapper>\n                                </FlexItem>\n                            }\n                        </Flex>\n                    ) :\n                        <Skeleton size={ SkeletonSize.md } />\n                }\n            </SplitItem>\n            {\n                <SplitItem>\n                    {\n                        loaded ?\n                            <Flex>\n                                {showDelete && <FlexItem>\n                                    <DeleteWrapper>\n                                        <Button\n                                            onClick={ () => setIsModalOpen(true) }\n                                            variant=\"secondary\">\n                                        Delete\n                                        </Button>\n                                    </DeleteWrapper>\n                                </FlexItem>}\n                                { inventoryActions?.length > 0 && (\n                                    <FlexItem>\n                                        <ActionsWrapper>\n                                            <Dropdown\n                                                onSelect={ () => setIsOpen(false) }\n                                                toggle={ <DropdownToggle\n                                                    onToggle={(isOpen) => setIsOpen(isOpen)}\n                                                >Actions</DropdownToggle>}\n                                                isOpen={ isOpen }\n                                                position={ DropdownPosition.right }\n                                                dropdownItems={\n                                                    inventoryActions.map(({ title, ...action }, key) => (\n                                                        <DropdownItem\n                                                            key={ key }\n                                                            component=\"button\"\n                                                            onClick={\n                                                                (event) => action.onClick(event, action, action.key || key)\n                                                            }\n                                                            {...action}\n                                                        >\n                                                            { title }\n                                                        </DropdownItem>)\n                                                    ) }\n                                            />\n                                        </ActionsWrapper>\n                                    </FlexItem>)}\n                                <FlexItem>\n                                    {\n                                        showInventoryDrawer &&\n                                        <Button onClick={() => dispatch(toggleDrawer(true))}>\n                                            Show more information\n                                        </Button>\n                                    }\n                                </FlexItem>\n                            </Flex>\n                            :\n                            <Skeleton size={ SkeletonSize.lg } />\n                    }\n                </SplitItem>\n            }\n            { isModalOpen && (\n                <DeleteModal\n                    handleModalToggle={() => setIsModalOpen(!isModalOpen)}\n                    isModalOpen={isModalOpen}\n                    currentSytems={entity}\n                    onConfirm={() => {\n                        addNotification({\n                            id: 'remove-initiated',\n                            variant: 'warning',\n                            title: 'Delete operation initiated',\n                            description: `Removal of ${entity.display_name} started.`,\n                            dismissable: false\n                        });\n                        deleteEntity(\n                            [entity.id],\n                            entity.display_name,\n                            () => redirectToInventoryList(entity.id, onBackToListClick)\n                        );\n                        setIsModalOpen(false);\n                    }}\n                />)}\n        </Split>\n    );\n};\n\nTopBar.propTypes = {\n    entity: PropTypes.object,\n    loaded: PropTypes.bool,\n    showDelete: PropTypes.bool,\n    hideInvLink: PropTypes.bool,\n    showInventoryDrawer: PropTypes.bool,\n    showTags: PropTypes.bool,\n    actions: PropTypes.arrayOf(PropTypes.shape({\n        key: PropTypes.string,\n        title: PropTypes.node,\n        onClick: PropTypes.func\n    })),\n    deleteEntity: PropTypes.func,\n    addNotification: PropTypes.func,\n    onBackToListClick: PropTypes.func,\n    TitleWrapper: PropTypes.elementType,\n    TagsWrapper: PropTypes.elementType,\n    DeleteWrapper: PropTypes.elementType,\n    ActionsWrapper: PropTypes.elementType\n};\n\nTopBar.defaultProps = {\n    actions: [],\n    loaded: false,\n    hideInvLink: false,\n    showDelete: false,\n    showInventoryDrawer: false,\n    deleteEntity: () => undefined,\n    addNotification: () => undefined,\n    onBackToListClick: () => undefined,\n    TitleWrapper: Fragment,\n    TitleWTagsWrapperrapper: Fragment,\n    DeleteWrapper: Fragment,\n    ActionsWrapper: Fragment\n};\n\nexport default TopBar;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { Grid, GridItem, Flex, FlexItem } from '@patternfly/react-core';\nimport { Skeleton, SkeletonSize } from '@redhat-cloud-services/frontend-components/Skeleton';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { CullingInformation } from '@redhat-cloud-services/frontend-components/CullingInfo';\nimport { getFact } from './helpers';\nimport InsightsDisconnected from '../../Utilities/InsightsDisconnected';\nimport { verifyDisconnectedSystem } from '../../Utilities/sharedFunctions';\n/**\n * Basic information about system.\n * UUID and last seen.\n * @param {*} props entity and if entity is loaded.\n */\nconst FactsInfo = ({ entity, loaded, UUIDWrapper, LastSeenWrapper, ...props }) => (\n    <Grid className=\"ins-entity-facts\" { ...props }>\n        <GridItem md={ 6 }>\n            <Flex>\n                <FlexItem>UUID:</FlexItem>\n                <FlexItem grow={{ default: 'grow' }}>\n                    {loaded ? getFact(`id`, entity) || ' ' : <Skeleton size={SkeletonSize.md} fontSize=\"sm\" />}\n                </FlexItem>\n            </Flex>\n            <Flex>\n                <FlexItem>Last seen:</FlexItem>\n                <FlexItem grow={{ default: 'grow' }}>\n                    {\n                        loaded ?\n                            <LastSeenWrapper>{\n                                (\n                                    CullingInformation ? <CullingInformation\n                                        culled={getFact('culled_timestamp', entity)}\n                                        staleWarning={getFact('stale_warning_timestamp', entity)}\n                                        stale={getFact('stale_timestamp', entity)}\n                                        currDate={new Date()}\n                                    >\n                                        <DateFormat date={getFact('updated', entity)} type=\"exact\" />\n                                    </CullingInformation> : <DateFormat date={getFact('updated', entity)} type=\"exact\" />\n                                )}\n                            </LastSeenWrapper> :\n                            <Skeleton size={SkeletonSize.md} fontSize=\"sm\" />\n                    }\n                    {loaded && verifyDisconnectedSystem(getFact('per_reporter_staleness', entity)) && <InsightsDisconnected />}\n                </FlexItem>\n            </Flex>\n        </GridItem>\n    </Grid>\n);\n\nFactsInfo.propTypes = {\n    loaded: PropTypes.bool,\n    entity: PropTypes.object,\n    UUIDWrapper: PropTypes.elementType,\n    LastSeenWrapper: PropTypes.elementType\n};\n\nFactsInfo.defaultProps = {\n    UUIDWrapper: Fragment,\n    LastSeenWrapper: Fragment\n};\n\nexport default FactsInfo;\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useLocation, useHistory } from 'react-router-dom';\nimport { Tabs, Tab } from '@patternfly/react-core';\nimport { detailSelect } from '../../store/actions';\n\n/**\n * Component that renders tabs for each application detail and handles clicking on each item.\n * @param {*} props onTabSelect can be used to notify parent component that detail has been selected.\n */\nconst ApplicationDetails = ({ onTabSelect, appList, ...props }) => {\n    const { search } = useLocation();\n    const history = useHistory();\n    const dispatch = useDispatch();\n    const searchParams = new URLSearchParams(search);\n    const items = useSelector(({ entityDetails }) => entityDetails?.activeApps || [])\n    .filter(({ isVisible }) => isVisible !== false);\n    const activeApp = useSelector(({ entityDetails }) => entityDetails?.activeApp);\n    const disabledApps = useSelector(({ systemProfileStore }) => systemProfileStore?.disabledApps);\n    const defaultApp = activeApp?.appName || appList?.find(({ pageId, name }) => items?.[0]?.name === (\n        pageId || name))?.name || items?.[0]?.name;\n    let applications = appList || items;\n    const [activeTabs, setActiveTabs] = useState(applications);\n\n    useEffect(() => {\n        /**\n         * Initialize first inventory detail type\n         */\n        const appName = searchParams.get('appName');\n        if (appName) {\n            dispatch(detailSelect(appName));\n        }\n    }, []);\n\n    useEffect(() => {\n        const filteredResult = applications.filter(app => !disabledApps?.includes(app.name));\n        if (filteredResult !== 0 && typeof filteredResult !== undefined) {\n            setActiveTabs(filteredResult);\n        }\n        else {\n            setActiveTabs(applications);\n        }\n    }, [disabledApps]);\n\n    return (\n        <React.Fragment>\n            {\n                applications?.length > 1 &&\n                <Tabs\n                    {...props}\n                    activeKey={ defaultApp }\n                    onSelect={ (event, item) => {\n                        const activeItem = activeTabs.find(oneApp => oneApp.name === item);\n                        if (onTabSelect) {\n                            onTabSelect(event, item, activeItem);\n                        } else {\n                            searchParams.set('appName', activeItem.name);\n                            history.push({ search: searchParams.toString() });\n                        }\n\n                        dispatch(detailSelect(activeItem.name));\n                    } }\n                    isFilled\n                    className=\"ins-c-inventory-detail__app-tabs\"\n                >\n                    { activeTabs?.map((item, key) => (\n                        <Tab key={ key } eventKey={ item.name } title={ item.title }></Tab>\n                    )) }\n                </Tabs>\n            }\n        </React.Fragment>\n    );\n};\n\nApplicationDetails.propTypes = {\n    appList: PropTypes.arrayOf(PropTypes.shape({\n        title: PropTypes.node,\n        name: PropTypes.string.isRequired,\n        pageId: PropTypes.string\n    })),\n    onTabSelect: PropTypes.func\n};\n\nexport default ApplicationDetails;\n","import React from 'react';\nimport {\n    Alert, Grid, GridItem, Text, TextContent, TextVariants, TextList, TextListItem,\n    Card, CardTitle, CardFooter, CardBody, ClipboardCopy, Button } from '@patternfly/react-core';\n\nconst InsightsPrompt = () => {\n    return (\n        <Alert variant=\"info\" isInline title=\"Your insights-client is not reporting\">\n            <Grid>\n                <GridItem>\n                    <Grid hasGutter>\n                        <GridItem span={4}>\n                            <TextContent style={{ '--pf-c-content--LineHeight': '1', '--pf-c-content--FontSize': '0.9rem' }}>\n                                <Text component={TextVariants.p}>\n                                    With Insights you can easly:\n                                </Text>\n                                <TextList\n                                    component='ul'\n                                    style={{ '--pf-c-content--ul--PaddingLeft': '0', '--pf-c-content--ul--MarginLeft': '1rem' }}\n                                >\n                                    <TextListItem>Optimize your IT Operations</TextListItem>\n                                    <TextListItem>Manage your security and compliance</TextListItem>\n                                    <TextListItem>Resolve operational issues quickly</TextListItem>\n                                </TextList>\n                            </TextContent>\n                        </GridItem>\n                        <GridItem span={4}>\n                            <Card isCompact>\n                                <CardTitle>Client setup</CardTitle>\n                                <CardBody>Make sure the client is properly installed and registered</CardBody>\n                                <CardFooter>\n                                    <ClipboardCopy isCode isReadOnly variant={'expansion'}>\n                                        {'yum install -y insights-client \\ninsights-client --register'}\n                                    </ClipboardCopy>\n                                </CardFooter>\n                            </Card>\n                        </GridItem>\n                        <GridItem span={4}>\n                            <Card isCompact style={{ height: '100%' }}>\n                                <CardTitle>Configure troubleshooting</CardTitle>\n                                <CardBody>Proceed with verification on the client to ensure insights-client is\n                                    properly running and collecting data</CardBody>\n                                <CardFooter>\n                                    <Button component=\"a\" target=\"_blank\"\n                                        variant=\"link\" href='https://access.redhat.com/solutions/6758841' isInline\n                                    >\n                                        Host not reporting data to Red Hat Insights\n                                    </Button>\n                                </CardFooter>\n                            </Card>\n                        </GridItem>\n                    </Grid>\n                </GridItem>\n                <GridItem>\n                    <Button component=\"a\" target=\"_blank\" variant=\"link\"\n                        href='https://console.redhat.com/security/insights' isInline\n                    >\n                        How does Red Hat keep data secure?\n                    </Button>\n                </GridItem>\n            </Grid>\n        </Alert>\n    );\n};\n\nexport default InsightsPrompt;\n","import React, { useEffect, Fragment } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { loadEntity, deleteEntity } from '../../store/actions';\nimport './InventoryDetail.scss';\nimport SystemNotFound from './SystemNotFound';\nimport TopBar from './TopBar';\nimport FactsInfo from './FactsInfo';\nimport { reloadWrapper } from '../../Utilities/index';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport ApplicationDetails from './ApplicationDetails';\nimport './InventoryDetail.scss';\nimport InsightsPrompt from './InsightsPrompt';\n\n/**\n * Composit component which tangles together Topbar, facts, tags, app details and if system is found or not.\n * This component is connected to redux and reads `loaded` and `entity`.\n * @param {*} props additional features from parent component.\n */\nconst InventoryDetail = ({\n    actions,\n    showTags,\n    hideInvLink,\n    onTabSelect,\n    onBackToListClick,\n    showDelete,\n    appList,\n    showInventoryDrawer,\n    UUIDWrapper,\n    LastSeenWrapper,\n    TitleWrapper,\n    TagsWrapper,\n    DeleteWrapper,\n    ActionsWrapper,\n    children\n}) => {\n    const { inventoryId } = useParams();\n    const dispatch = useDispatch();\n    const loaded = useSelector(({ entityDetails }) => entityDetails?.loaded || false);\n    const entity = useSelector(({ entityDetails }) => entityDetails?.entity);\n    useEffect(() => {\n        const currId = inventoryId || location.pathname.replace(/\\/$/, '').split('/').pop();\n        if (!entity || !(entity?.id === currId) || !loaded) {\n            dispatch(loadEntity(currId, { hasItems: true }, { showTags }));\n        }\n    }, []);\n    return <div className=\"ins-entity-detail\">\n        {loaded && !entity ? (\n            <SystemNotFound\n                onBackToListClick={onBackToListClick}\n                inventoryId={location.pathname.split('/')[location.pathname.split('/').length - 1]}\n            />\n        ) : <Fragment>\n            <TopBar\n                entity={ entity }\n                loaded={ loaded }\n                onBackToListClick={ onBackToListClick }\n                actions={ actions }\n                deleteEntity={ (systems, displayName, callback) => {\n                    const action = deleteEntity(systems, displayName);\n                    dispatch(reloadWrapper(action, callback));\n                } }\n                addNotification={ (payload) => dispatch(addNotification(payload))}\n                hideInvLink={ hideInvLink }\n                showInventoryDrawer={ showInventoryDrawer }\n                showDelete={ showDelete }\n                showTags={ showTags }\n                TitleWrapper={TitleWrapper}\n                TagsWrapper={TagsWrapper}\n                DeleteWrapper={DeleteWrapper}\n                ActionsWrapper={ActionsWrapper}\n            />\n            <FactsInfo\n                loaded={ loaded }\n                entity={ entity }\n                UUIDWrapper={UUIDWrapper}\n                LastSeenWrapper={LastSeenWrapper}\n            />\n            {(loaded && !entity?.insights_id) && <InsightsPrompt />}\n            {children}\n        </Fragment>\n        }\n        {loaded && entity && (\n            <ApplicationDetails onTabSelect={ onTabSelect } appList={ appList } />\n        )}\n    </div>;\n};\n\nInventoryDetail.propTypes = {\n    hideInvLink: PropTypes.bool,\n    hideBack: PropTypes.bool,\n    showTags: PropTypes.bool,\n    showDelete: PropTypes.bool,\n    showInventoryDrawer: PropTypes.bool,\n    actions: PropTypes.arrayOf(PropTypes.shape({\n        title: PropTypes.node,\n        onClick: PropTypes.func,\n        key: PropTypes.string\n    })),\n    appList: PropTypes.arrayOf(PropTypes.shape({\n        title: PropTypes.node,\n        name: PropTypes.string,\n        pageId: PropTypes.string\n    })),\n    onTabSelect: PropTypes.func,\n    onBackToListClick: PropTypes.func,\n    children: PropTypes.node,\n    UUIDWrapper: PropTypes.elementType,\n    LastSeenWrapper: PropTypes.elementType,\n    TitleWrapper: PropTypes.elementType,\n    TagsWrapper: PropTypes.elementType,\n    DeleteWrapper: PropTypes.elementType,\n    ActionsWrapper: PropTypes.elementType\n};\nInventoryDetail.defaultProps = {\n    actions: [],\n    hideInvLink: false,\n    showTags: false,\n    UUIDWrapper: Fragment,\n    LastSeenWrapper: Fragment,\n    TitleWrapper: Fragment,\n    TagsWrapper: Fragment,\n    DeleteWrapper: Fragment,\n    ActionsWrapper: Fragment\n};\n\nexport default InventoryDetail;\n","/* eslint-disable camelcase */\nimport React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { useLocation } from 'react-router-dom';\nimport { useStore, useSelector } from 'react-redux';\nimport { Skeleton, SkeletonSize } from '@redhat-cloud-services/frontend-components/Skeleton';\n\n/**\n * Small component that just renders active detail with some specific class.\n * This component detail is accessed from redux if no component found `missing component` is displayed.\n * @param {*} props `componentsMapper` if you want to pass different components list.\n */\nconst AppInfo = ({ componentMapper, appList }) => {\n    const store = useStore();\n    const { search } = useLocation();\n    const searchParams = new URLSearchParams(search);\n    const loaded = useSelector(({ entityDetails }) => entityDetails?.loaded);\n    const entity = useSelector(({ entityDetails }) => entityDetails?.entity);\n    const activeApp = useSelector(({ entityDetails }) => {\n        if (entityDetails?.loaded) {\n            return (appList || entityDetails?.activeApps)?.find?.(item => item?.name === (\n                searchParams.get('appName') || entityDetails?.activeApp?.appName\n            )) || entityDetails?.activeApps?.[0];\n        }\n    });\n    const Cmp = componentMapper || activeApp?.component;\n\n    if (loaded === true && !entity) {\n        return null;\n    }\n\n    return (\n        <Fragment>\n            {\n                loaded ? activeApp && (\n                    <div className={ `ins-active-app-${activeApp?.name}` }>\n                        { Cmp ?\n                            <Cmp\n                                store={store}\n                                inventoryId={entity?.id}\n                                appName={activeApp?.name}\n                            /> :\n                            'missing component'}\n                    </div>\n                ) : <Skeleton size={ SkeletonSize.md } />\n            }\n        </Fragment>\n    );\n};\n\nAppInfo.propTypes = {\n    componentMapper: PropTypes.element,\n    appList: PropTypes.arrayOf(PropTypes.shape({\n        title: PropTypes.node,\n        name: PropTypes.string,\n        pageId: PropTypes.string\n    }))\n};\n\nexport default AppInfo;\n","import React, { Fragment } from 'react';\nimport InventoryDetail from './InventoryDetail';\nimport AppInfo from './AppInfo';\n\n/**\n * Fallback component that binds together App info and inventory Detail.\n * You should not use this component unless you know what you are doing.\n * @param {*} props any parent props, just passed to InventoryDetail and AppInfo.\n */\nexport const FullDetail = (props) => (\n    <Fragment>\n        <InventoryDetail { ...props } />\n        <AppInfo { ...props } />\n    </Fragment>\n);\n\nexport default FullDetail;\n","/* eslint-disable react/display-name */\n/* eslint-disable camelcase */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Chip, ChipGroup, Title, Split, SplitItem, Stack, StackItem } from '@patternfly/react-core';\nimport { useSelector } from 'react-redux';\n\nconst BasicInfo = ({ hideInvLink, showTags }) => {\n    const displayName = useSelector(({ entityDetails: { entity } }) => entity?.display_name);\n    const systemId = useSelector(({ entityDetails: { entity } }) => entity?.id);\n    const tags = useSelector(({ entityDetails: { entity } }) => entity?.tags);\n    return <Stack hasGutter>\n        <StackItem>\n            <Split>\n                <SplitItem isFilled>\n                    <Title headingLevel=\"h3\" size='xl'>{ displayName }</Title>\n                </SplitItem>\n                {!hideInvLink && <SplitItem>\n                    <a className='ins-c-entity-detail__inv-link' href={`./insights/inventory/${systemId}`}>Open in Inventory</a>\n                </SplitItem>}\n            </Split>\n        </StackItem>\n        {\n            showTags &&\n            <StackItem>\n                <Split hasGutter>\n                    <SplitItem>\n                        Tags:\n                    </SplitItem>\n                    <SplitItem>\n                        <ChipGroup>\n                            {tags?.length !== 0 ? tags?.map((item, key) => (\n                                <Chip key={key} isReadOnly>\n                                    {item?.namespace && `${item?.namespace}/`}\n                                    {item?.key}\n                                    {item?.value && `=${item?.value}`}\n                                </Chip>\n                            )) : 'No tags'}\n                        </ChipGroup>\n                    </SplitItem>\n                </Split>\n            </StackItem>\n        }\n    </Stack>;\n};\n\nBasicInfo.propTypes = {\n    hideInvLink: PropTypes.bool,\n    showTags: PropTypes.bool\n};\n\nBasicInfo.defaultProps = {\n    hideInvLink: false,\n    showTags: false\n};\n\nexport default BasicInfo;\n","/* eslint-disable react/prop-types */\n/* eslint-disable react/display-name */\nimport React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getAdvisorData, getComplianceData, getPatchData, getVulnData } from '../../store/actions';\nimport { Title, Level, LevelItem,  Stack, StackItem } from '@patternfly/react-core';\nimport { Skeleton, SkeletonSize } from '@redhat-cloud-services/frontend-components/Skeleton';\nimport BugIcon from '@patternfly/react-icons/dist/js/icons/bug-icon';\nimport EnhancementIcon from '@patternfly/react-icons/dist/js/icons/enhancement-icon';\nimport SecurityIcon from '@patternfly/react-icons/dist/js/icons/security-icon';\n\nconst SystemIssues = ({ isOpened }) => {\n    const dispatch = useDispatch();\n    const systemId = useSelector(({ entityDetails: { entity } }) => entity?.id);\n    const advisor = useSelector(({ entityDetails: { systemIssues } }) => systemIssues?.advisor);\n    const compliance = useSelector(({ entityDetails: { systemIssues } }) => systemIssues?.compliance);\n    const cve = useSelector(({ entityDetails: { systemIssues } }) => systemIssues?.cve);\n    const patch = useSelector(({ entityDetails: { systemIssues } }) => systemIssues?.patch);\n    useEffect(() => {\n        if (systemId && isOpened) {\n            dispatch(getAdvisorData(systemId));\n            dispatch(getComplianceData(systemId));\n            dispatch(getPatchData(systemId));\n            dispatch(getVulnData(systemId));\n        }\n    }, [systemId, isOpened]);\n\n    return <Stack hasGutter className=\"ins-c-inventory__drawer-system-issues\">\n        <StackItem>\n            <Title headingLevel=\"h4\" size='lg'>Top system issues</Title>\n        </StackItem>\n        <StackItem>\n            <Level>\n                <LevelItem>\n                    <Stack hasGutter>\n                        <StackItem className=\"ins-c-inventory__drawer--title\">\n                            Applicable CVEs\n                        </StackItem>\n                        <StackItem>\n                            {\n                                cve?.isLoaded ?\n                                    <Level hasGutter className=\"ins-c-inventory__drawer-cve\">\n                                        <LevelItem className=\"ins-m-critical\">\n                                            <a href={`/insights/vulnerability/systems/${systemId}?impact=7`}>\n                                                {cve?.critical?.count || 0} critical\n                                            </a>\n                                        </LevelItem>\n                                        <LevelItem className=\"ins-m-important\">\n                                            <a href={`/insights/vulnerability/systems/${systemId}?impact=5`}>\n                                                {cve?.important?.count || 0} important\n                                            </a>\n                                        </LevelItem>\n                                        <LevelItem className=\"ins-m-moderate\">\n                                            <a href={`/insights/vulnerability/systems/${systemId}?impact=4`}>\n                                                {cve?.moderate?.count || 0} moderate\n                                            </a>\n                                        </LevelItem>\n                                        <LevelItem className=\"ins-m-low\">\n                                            <a href={`/insights/vulnerability/systems/${systemId}?impact=2`}>\n                                                {cve?.low?.count || 0} low\n                                            </a>\n                                        </LevelItem>\n                                    </Level> :\n                                    <Skeleton size={ SkeletonSize.md } />\n                            }\n                        </StackItem>\n                    </Stack>\n                </LevelItem>\n                <LevelItem>\n                    <Stack hasGutter>\n                        <StackItem className=\"ins-c-inventory__drawer--title\">\n                            Applicable advisories\n                        </StackItem>\n                        <StackItem>\n                            {\n                                patch?.isLoaded ?\n                                    <Level hasGutter className=\"ins-c-inventory__drawer-patch\">\n                                        <LevelItem>\n                                            <a href={`/insights/patch/systems/${systemId}/?advisory_type=2`}>\n                                                <BugIcon /> {patch?.bug?.count}\n                                            </a>\n                                        </LevelItem>\n                                        <LevelItem className=\"ins-m-moderate\">\n                                            <a href={`/insights/patch/systems/${systemId}/?advisory_type=3`}>\n                                                <SecurityIcon /> {patch?.security?.count}\n                                            </a>\n                                        </LevelItem>\n                                        <LevelItem>\n                                            <a href={`/insights/patch/systems/${systemId}/?advisory_type=1`}>\n                                                <EnhancementIcon /> {patch?.enhancement?.count}\n                                            </a>\n                                        </LevelItem>\n                                    </Level> :\n                                    <Skeleton size={ SkeletonSize.md } />\n                            }\n                        </StackItem>\n                    </Stack>\n                </LevelItem>\n            </Level>\n        </StackItem>\n        <StackItem>\n            {\n                advisor?.isLoaded ?\n                    <span>\n                        <span className=\"ins-m-critical\">\n                            {advisor?.criticalCount?.length || 0} critical\n                        </span> recommendations in <a href={`./insights/advisor/systems/${systemId}`}>Advisor</a>\n                    </span> :\n                    <Skeleton size={ SkeletonSize.md } />\n            }\n        </StackItem>\n        {\n            compliance?.isLoaded ?\n                (compliance?.profiles &&\n                    <span>\n                        System above compliance threshold for <a\n                            href={'./insights/compliance/reports/'}\n                        >\n                            {compliance?.profiles?.length} {compliance?.profiles?.length > 1 ? 'policies' : 'policy'}\n                        </a>\n                    </span>\n                ) :\n                <Skeleton size={ SkeletonSize.md } />\n        }\n    </Stack>;\n};\n\nSystemIssues.propTypes = {\n    isOpened: PropTypes.bool\n};\n\nexport default SystemIssues;\n","import React from 'react';\nimport {\n    Drawer,\n    DrawerPanelContent,\n    DrawerContent,\n    DrawerContentBody,\n    DrawerPanelBody,\n    DrawerActions,\n    DrawerHead,\n    DrawerCloseButton,\n    Stack,\n    StackItem\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch, useStore } from 'react-redux';\nimport { toggleDrawer } from '../../store/actions';\nimport { BasicInfo, SystemIssues } from '../InventoryDetailDrawer';\nimport FactsInfo from './FactsInfo';\n\nconst DetailWrapper = ({ children, hideInvLink, showTags, Wrapper, className, appName, ...props }) => {\n    const dispatch = useDispatch();\n    const store = useStore();\n    const entity = useSelector(({ entityDetails }) => entityDetails?.entity);\n    const isExpanded = useSelector(({ entityDetails }) => entityDetails?.isToggleOpened);\n    const loaded = useSelector(({ entityDetails }) => entityDetails?.loaded);\n\n    return <Drawer\n        className={`ins-c-inventory__drawer ${className || ''}`}\n        isExpanded={isExpanded}\n        onExpand={() => dispatch(toggleDrawer(true))}\n        {...props}\n    >\n        <DrawerContent\n            panelContent={\n                <DrawerPanelContent>\n                    <DrawerHead>\n                        <BasicInfo hideInvLink={ hideInvLink } showTags={ showTags } />\n                        <DrawerActions>\n                            <DrawerCloseButton onClick={() =>  dispatch(toggleDrawer(false))} />\n                        </DrawerActions>\n                    </DrawerHead>\n                    <DrawerPanelBody>\n                        <Stack className=\"ins-c-inventory__drawer--content\">\n                            <StackItem>\n                                <SystemIssues isOpened={isExpanded} />\n                            </StackItem>\n                            <StackItem isFilled className=\"ins-c-inventory__drawer--facts\">\n                                <FactsInfo entity={entity} loaded={loaded} />\n                                {\n                                    isExpanded &&\n                                    loaded &&\n                                    Wrapper &&\n                                    <Wrapper\n                                        store={store}\n                                        appName={appName}\n                                    />\n                                }\n                            </StackItem>\n                        </Stack>\n                    </DrawerPanelBody>\n                </DrawerPanelContent>\n            }\n        >\n            <DrawerContentBody>\n                {children}\n            </DrawerContentBody>\n        </DrawerContent>\n    </Drawer>;\n};\n\nDetailWrapper.propTypes = {\n    children: PropTypes.any,\n    hideInvLink: PropTypes.bool,\n    showTags: PropTypes.bool,\n    appName: PropTypes.oneOf([\n        'general_information',\n        'advisor',\n        'insights',\n        'compliance',\n        'vulnerabilities',\n        'patch'\n    ]),\n    className: PropTypes.string,\n    Wrapper: PropTypes.elementType\n};\n\nDetailWrapper.defaultProps = {\n    appName: 'general_information'\n};\n\nexport default DetailWrapper;\n","import React from 'react';\nimport { cellWidth, sortable, expandable } from '@patternfly/react-table';\nimport get from 'lodash/get';\nimport flatten from 'lodash/flatten';\nimport TitleColumn from './TitleColumn';\nimport { Fragment } from 'react';\n\nexport const buildCells = (item, columns, extra) => {\n    return columns.map(({ key, composed, renderFunc }) => {\n        // eslint-disable-next-line new-cap\n        const data = composed ? <Fragment>{TitleColumn(\n            composed.map(key => get(item, key, ' ')),\n            item.id,\n            item,\n            extra\n        )}</Fragment> : get(item, key, ' ');\n        return renderFunc ? <Fragment>{ renderFunc(data, item.id, item, extra) }</Fragment> : data;\n    });\n};\n\nexport const createRows = (rows = [], columns = [], { actions, expandable, noSystemsTable, ...extra } = {}) => {\n    if (rows.length === 0) {\n        return [{\n            cells: [{\n                title: noSystemsTable,\n                props: {\n                    colSpan: columns.length + Boolean(actions),\n                    dataLabel: null\n                }\n            }]\n        }];\n    }\n\n    return flatten(rows.map((oneItem, key) => ([{\n        ...oneItem,\n        ...oneItem.children && expandable && { isOpen: !!oneItem.isOpen },\n        cells: buildCells(oneItem, columns, extra),\n        actionProps: {\n            'data-ouia-component-id': `${oneItem.id}-actions-kebab`\n        }\n    }, oneItem.children && expandable && {\n        cells: [\n            {\n                title: typeof oneItem.children === 'function' ? oneItem.children() : oneItem.children\n            }\n        ],\n        parent: key * 2,\n        fullWidth: true\n    }]))).filter(Boolean);\n};\n\nexport const onDeleteFilter = (deleted, currFilter = []) => {\n    const { value: deletedItem } = deleted?.chips?.[0] || {};\n    return  currFilter.filter((item) => item !== deletedItem);\n};\n\nexport const onDeleteOsFilter = (deleted, currentFilter = []) => {\n    const { value: deletedItem } = deleted?.chips?.[0] || {};\n    const majorVersion = `${deletedItem.split('.')[0]}.0`;\n\n    return {\n        ...currentFilter,\n        [majorVersion]: Object.keys(currentFilter[majorVersion]).reduce((acc, item) => {\n            if (item !== deletedItem) {\n                acc[item] = true;\n            }\n\n            return acc;\n        }, {})\n    };\n};\n\nexport const onDeleteTag = (deleted, selectedTags, onApplyTags) => {\n    const deletedItem = deleted?.chips?.[0];\n    if (selectedTags?.[deleted?.key]?.[deletedItem?.key] !== undefined) {\n        selectedTags[deleted?.key][deletedItem?.key] = false;\n    }\n\n    onApplyTags && onApplyTags(selectedTags, false);\n    return selectedTags;\n};\n\nconst includesSortable = (transforms) => transforms?.reduce((acc, fn) => acc || fn.toString().includes('onSort:'), false);\n\nexport const createColumns = (columns, hasItems, rows, isExpandable) => (\n    columns?.map(({ props, transforms, cellFormatters, ...oneCell }) => ({\n        ...oneCell,\n        transforms: [\n            ...transforms || [],\n            ...props?.width ? [cellWidth(props.width)] : [],\n            ...hasItems ||\n            rows.length <= 0 ||\n            (props && props.isStatic) ||\n            transforms?.includes(sortable) ||\n            includesSortable(transforms) ? [] : [sortable]\n        ],\n        cellFormatters: [\n            ...cellFormatters || [],\n            ...isExpandable ? [expandable] : []\n        ]\n    }))\n);\n\n","import { useState } from 'react';\nimport { TEXTUAL_CHIP } from '../../Utilities/index';\n\nexport const textFilterState = { textFilter: '' };\nexport const TEXT_FILTER = 'TEXT_FILTER';\nexport const textFilterReducer = (_state, { type, payload }) => ({\n    ...type === TEXT_FILTER && {\n        textFilter: payload\n    }\n});\n\nexport const useTextFilter = ([state, dispatch] = [textFilterState]) => {\n    const [stateValue, setStateValue] = useState('');\n    const value = dispatch ? state.textFilter : stateValue;\n    const setValue = dispatch ? (newValue) => dispatch({ type: TEXT_FILTER, payload: newValue }) : setStateValue;\n\n    const filter = {\n        label: 'Name',\n        value: 'name-filter',\n        filterValues: {\n            placeholder: 'Filter by name',\n            value,\n            onChange: (_e, value) => setValue(value)\n        }\n    };\n    const chip = value.length > 0 ? [{\n        category: 'Display name',\n        type: TEXTUAL_CHIP,\n        chips: [\n            { name: value }\n        ]\n    }] : [];\n    return [filter, chip, value, setValue];\n};\n","import { useState } from 'react';\nimport { STALE_CHIP, staleness } from '../../Utilities/index';\n\nexport const stalenessFilterState = { stalenessFilter: [] };\nexport const STALENESS_FILTER = 'STALENESS_FILTER';\nexport const stalenessFilterReducer = (_state, { type, payload }) => ({\n    ...type === STALENESS_FILTER && {\n        stalenessFilter: payload\n    }\n});\n\nexport const useStalenessFilter = ([state, dispatch] = [stalenessFilterState]) => {\n    let [stalenessStateValue, setStateValue] = useState([]);\n    const stalenessValue = dispatch ? state.stalenessFilter : stalenessStateValue;\n    const setValue = dispatch ? (newValue) => dispatch({ type: STALENESS_FILTER, payload: newValue }) : setStateValue;\n\n    const filter = {\n        label: 'Status',\n        value: 'stale-status',\n        type: 'checkbox',\n        filterValues: {\n            value: stalenessValue,\n            onChange: (_e, value) => setValue(value),\n            items: staleness\n        }\n    };\n    const chip = stalenessValue?.length > 0 ? [{\n        category: 'Status',\n        type: STALE_CHIP,\n        chips: staleness.filter(({ value }) => stalenessValue.includes(value))\n        .map(({ label, ...props }) => ({ name: label, ...props }))\n    }] : [];\n    return [filter, chip, stalenessValue, setValue];\n};\n","import { useState } from 'react';\nimport { REGISTERED_CHIP, registered } from '../../Utilities/index';\n\nexport const registeredWithFilterState = { registeredWithFilter: [] };\nexport const REGISTERED_WITH_FILTER = 'REGISTERED_WITH_FILTER';\nexport const registeredWithFilterReducer = (_state, { type, payload }) => ({\n    ...type === REGISTERED_WITH_FILTER && {\n        registeredWithFilter: payload\n    }\n});\n\nexport const useRegisteredWithFilter = ([state, dispatch] = [registeredWithFilterState]) => {\n    let [registeredWithStateValue, setStateValue] = useState([]);\n    const registeredWithValue = dispatch ? state.registeredWithFilter : registeredWithStateValue;\n    const setValue = dispatch ? (newValue) => dispatch({ type: REGISTERED_WITH_FILTER, payload: newValue }) : setStateValue;\n\n    const filter = {\n        label: 'Data Collector',\n        value: 'data-collector-registered-with',\n        type: 'checkbox',\n        filterValues: {\n            value: registeredWithValue,\n            onChange: (_e, value) => setValue(value),\n            items: registered\n        }\n    };\n    const chip = registeredWithValue?.length > 0 ? [{\n        category: 'Data Collector',\n        type: REGISTERED_CHIP,\n        chips: registered.filter(({ value }) => registeredWithValue.includes(value))\n        .map(({ label, ...props }) => ({ name: label, ...props }))\n    }] : [];\n    return [filter, chip, registeredWithValue, setValue];\n};\n","import { useTagsFilter as tagsFilter } from '@redhat-cloud-services/frontend-components/FilterHooks';\n\nexport const useTagsFilter = (\n    allTags = [],\n    loaded = false,\n    additionalTagsCount = 0,\n    onShowMoreClick,\n    stateMapper\n) => {\n    const {\n        filter,\n        chips,\n        selectedTags,\n        setValue,\n        filterTagsBy,\n        seFilterTagsBy\n    } = tagsFilter(\n        allTags,\n        loaded,\n        additionalTagsCount,\n        onShowMoreClick,\n        stateMapper,\n        'system'\n    );\n\n    return {\n        tagsFilter: {\n            label: 'Tags',\n            value: 'tags',\n            type: 'group',\n            placeholder: 'Filter system by tag',\n            filterValues: {\n                ...filter\n            }\n        },\n        tagsChip: chips,\n        selectedTags,\n        setSelectedTags: setValue,\n        filterTagsBy,\n        seFilterTagsBy\n    };\n};\n","import { useState } from 'react';\nimport { buildOSFilterConfig, buildOSChip } from '../../Utilities/OperatingSystemFilterHelpers';\n\nexport const operatingSystemFilterState = { operatingSystemFilter: [] };\nexport const OPERATING_SYSTEM_FILTER = 'OPERATING_SYSTEM_FILTER';\nexport const operatingSystemFilterReducer = (_state, { type, payload }) => ({\n    ...type === OPERATING_SYSTEM_FILTER && {\n        operatingSystemFilter: payload\n    }\n});\n\nexport const useOperatingSystemFilter = ([state, dispatch] = [operatingSystemFilterState]) => {\n    const [operatingSystemStateValue, setStateValue] = useState([]);\n    const operatingSystemValue = dispatch ? state.operatingSystemFilter : operatingSystemStateValue;\n    const setValue = dispatch ? (newValue) => dispatch({ type: OPERATING_SYSTEM_FILTER, payload: newValue }) : setStateValue;\n    const filter = buildOSFilterConfig({\n        value: operatingSystemValue,\n        onChange: (_e, value) => setValue(value)\n    });\n    const chip = buildOSChip(operatingSystemValue);\n\n    return [filter, chip, operatingSystemValue, setValue];\n};\n","export * from './useTextFilter';\nexport * from './useStalenessFilter';\nexport * from './useRegisteredWithFilter';\nexport * from './useTagsFilter';\nexport * from './useOperatingSystemFilter';\nexport const filtersReducer = (reducersList) => (state, action) => reducersList.reduce((acc, curr) => ({\n    ...acc,\n    ...curr?.(state, action)\n}), state);\n","/* eslint-disable camelcase */\nimport React, { Fragment, useEffect, useCallback, useReducer } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Skeleton, SkeletonSize } from '@redhat-cloud-services/frontend-components/Skeleton';\nimport { tagsFilterState, tagsFilterReducer, mapGroups } from '@redhat-cloud-services/frontend-components/FilterHooks';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport { fetchAllTags, clearFilters, toggleTagModal, setFilter } from '../../store/actions';\nimport { defaultFilters } from '../../Utilities/constants';\nimport debounce from 'lodash/debounce';\nimport {\n    TagsModal,\n    TEXT_FILTER,\n    reduceFilters,\n    TEXTUAL_CHIP,\n    STALE_CHIP,\n    REGISTERED_CHIP,\n    OS_CHIP,\n    TAG_CHIP,\n    arrayToSelection\n} from '../../Utilities/index';\nimport { onDeleteFilter, onDeleteTag, onDeleteOsFilter } from './helpers';\nimport {\n    useStalenessFilter,\n    useOperatingSystemFilter,\n    useTextFilter,\n    useRegisteredWithFilter,\n    useTagsFilter,\n    textFilterState,\n    textFilterReducer,\n    filtersReducer,\n    stalenessFilterReducer,\n    stalenessFilterState,\n    operatingSystemFilterReducer,\n    operatingSystemFilterState,\n    registeredWithFilterReducer,\n    registeredWithFilterState\n} from '../filters';\n\n/**\n * Table toolbar used at top of inventory table.\n * It uses couple of filters and acces redux data along side all passed props.\n * @param {*} props used in this component.\n */\nconst EntityTableToolbar = ({\n    total,\n    page,\n    perPage,\n    filterConfig,\n    hasItems,\n    children,\n    actionsConfig,\n    activeFiltersConfig,\n    showTags,\n    getTags,\n    items,\n    sortBy,\n    customFilters,\n    hasAccess,\n    bulkSelect,\n    hideFilters,\n    paginationProps,\n    onRefreshData,\n    loaded,\n    showTagModal,\n    ...props\n}) => {\n    const dispatch = useDispatch();\n    const reducer = useReducer(filtersReducer([\n        textFilterReducer,\n        stalenessFilterReducer,\n        registeredWithFilterReducer,\n        tagsFilterReducer,\n        operatingSystemFilterReducer\n    ]), {\n        ...textFilterState,\n        ...stalenessFilterState,\n        ...registeredWithFilterState,\n        ...tagsFilterState,\n        ...operatingSystemFilterState\n    });\n    const filters = useSelector(({ entities: { activeFilters } }) => activeFilters);\n    const allTagsLoaded = useSelector(({ entities: { allTagsLoaded } }) => allTagsLoaded);\n    const allTags = useSelector(({ entities: { allTags } }) => allTags);\n    const additionalTagsCount = useSelector(({ entities: { additionalTagsCount } }) => additionalTagsCount);\n    const [nameFilter, nameChip, textFilter, setTextFilter] = useTextFilter(reducer);\n    const [stalenessFilter, stalenessChip, staleFilter, setStaleFilter] = useStalenessFilter(reducer);\n    const [registeredFilter, registeredChip, registeredWithFilter, setRegisteredWithFilter] = useRegisteredWithFilter(reducer);\n    const [operatingSystemFilter, operatingSystemChip, osFilter, setOsFilter] = useOperatingSystemFilter(reducer);\n    const {\n        tagsFilter,\n        tagsChip,\n        selectedTags,\n        setSelectedTags,\n        filterTagsBy,\n        seFilterTagsBy\n    } = useTagsFilter(allTags, allTagsLoaded, additionalTagsCount, () => dispatch(toggleTagModal(true)), reducer);\n\n    /**\n     * Debounced function for fetching all tags.\n     */\n    const debounceGetAllTags = useCallback(debounce((config, options) => {\n        if (showTags && !hasItems && hasAccess) {\n            dispatch(fetchAllTags(config, {\n                ...customFilters,\n                ...options\n            },  getTags));\n        }\n    }, 800), [customFilters?.tags]);\n\n    /**\n     * Function to dispatch load systems and fetch all tags.\n     */\n    const onRefreshDataInner = useCallback((options) => {\n        if (hasAccess) {\n            onRefreshData(options);\n            if (showTags && !hasItems) {\n                dispatch(fetchAllTags(filterTagsBy, { ...customFilters, filters: options?.filters || filters }, getTags));\n            }\n        }\n    }, [customFilters?.tags]);\n\n    const enabledFilters = {\n        name: !(hideFilters.all && hideFilters.name !== false) && !hideFilters.name,\n        stale: !(hideFilters.all && hideFilters.stale !== false) && !hideFilters.stale,\n        registeredWith: !(hideFilters.all && hideFilters.registeredWith !== false) && !hideFilters.registeredWith,\n        operatingSystem: !(hideFilters.all && hideFilters.operatingSystem !== false) && !hideFilters.operatingSystem,\n        tags: !(hideFilters.all && hideFilters.tags !== false) && !hideFilters.tags\n    };\n\n    /**\n     * Function used to update data, it either calls `onRefresh` from props or dispatches `onRefreshData`.\n     * `onRefresh` function takes two parameters\n     *   * entire config with new changes.\n     *   * callback to update data.\n     * @param {*} config new config to fetch data.\n     */\n    const updateData = (config) => {\n        if (hasAccess) {\n            onRefreshDataInner(config);\n        }\n    };\n\n    /**\n     * Debounced `updateData` function.\n     */\n    const debouncedRefresh = useCallback(debounce((config) => updateData(config), 800), [sortBy?.key, sortBy?.direction]);\n\n    /**\n     * Component did mount effect to calculate actual filters from redux.\n     */\n    useEffect(() => {\n        const { textFilter, tagFilters, staleFilter, registeredWithFilter, osFilter } = reduceFilters(filters);\n        debouncedRefresh();\n        enabledFilters.name && setTextFilter(textFilter);\n        enabledFilters.stale && setStaleFilter(staleFilter);\n        enabledFilters.registeredWith && setRegisteredWithFilter(registeredWithFilter);\n        enabledFilters.tags && setSelectedTags(tagFilters);\n        enabledFilters.operatingSystem && setOsFilter(osFilter);\n    }, []);\n\n    /**\n     * Function used to change text filter.\n     * @param {*} value new value used for filtering.\n     * @param {*} debounced if debounce function should be used.\n     */\n    const onSetTextFilter = (value, debounced = true) => {\n        const trimmedValue = value.trim();\n\n        const textualFilter = filters?.find(oneFilter => oneFilter.value === TEXT_FILTER);\n        if (textualFilter) {\n            textualFilter.filter = trimmedValue;\n        } else {\n            filters?.push({ value: TEXT_FILTER, filter: trimmedValue });\n        }\n\n        const refresh = debounced ? debouncedRefresh : updateData;\n        refresh({ page: 1, perPage, filters });\n    };\n\n    /**\n     * General function to apply filter (excluding tag and text).\n     * @param {*} value new value to be set of specified filter.\n     * @param {*} filterKey which filter should be changed.\n     * @param {*} refresh refresh callback function.\n     */\n    const onSetFilter = (value, filterKey, refresh) => {\n        const newFilters = [\n            ...filters?.filter(oneFilter => !Object.prototype.hasOwnProperty.call(oneFilter, filterKey)),\n            { [filterKey]: value }\n        ];\n        refresh({ page: 1, perPage, filters: newFilters });\n    };\n\n    const shouldReload = page && perPage && filters && (!hasItems || items);\n\n    useEffect(() => {\n        if (shouldReload && showTags && enabledFilters.tags) {\n            debounceGetAllTags(filterTagsBy, { filters });\n        }\n    }, [filterTagsBy, customFilters?.tags]);\n\n    useEffect(() => {\n        if (shouldReload && enabledFilters.name) {\n            onSetTextFilter(textFilter, true);\n        }\n    }, [textFilter]);\n\n    useEffect(() => {\n        if (shouldReload && enabledFilters.stale) {\n            onSetFilter(staleFilter, 'staleFilter', debouncedRefresh);\n        }\n    }, [staleFilter]);\n\n    useEffect(() => {\n        if (shouldReload && enabledFilters.registeredWith) {\n            onSetFilter(registeredWithFilter, 'registeredWithFilter', debouncedRefresh);\n        }\n    }, [registeredWithFilter]);\n\n    useEffect(() => {\n        if (shouldReload && showTags && enabledFilters.tags) {\n            onSetFilter(mapGroups(selectedTags), 'tagFilters', debouncedRefresh);\n        }\n    }, [selectedTags]);\n\n    useEffect(() => {\n        if (shouldReload && enabledFilters.operatingSystem) {\n            onSetFilter(osFilter, 'osFilter', debouncedRefresh);\n        }\n    }, [osFilter]);\n\n    /**\n     * Mapper to simplify removing of any filter.\n     */\n    const deleteMapper = {\n        [TEXTUAL_CHIP]: () => setTextFilter(''),\n        [TAG_CHIP]: (deleted) => setSelectedTags(\n            onDeleteTag(\n                deleted,\n                selectedTags,\n                (selectedTags) => onSetFilter(mapGroups(selectedTags), 'tagFilters', updateData)\n            )\n        ),\n        [STALE_CHIP]: (deleted) => setStaleFilter(onDeleteFilter(deleted, staleFilter)),\n        [REGISTERED_CHIP]: (deleted) => setRegisteredWithFilter(\n            onDeleteFilter(deleted, registeredWithFilter)\n        ),\n        [OS_CHIP]: (deleted) => setOsFilter(onDeleteOsFilter(deleted, osFilter))\n    };\n    /**\n     * Function to reset all filters with 'Reset Filter' is clicked\n     */\n    const resetFilters = () => {\n        enabledFilters.name && setTextFilter('');\n        enabledFilters.stale && setStaleFilter(defaultFilters.staleFilter);\n        enabledFilters.registeredWith && setRegisteredWithFilter([]);\n        enabledFilters.tags && setSelectedTags({});\n        enabledFilters.operatingSystem && setOsFilter([]);\n        dispatch(setFilter([defaultFilters]));\n        updateData({ page: 1, filters: [defaultFilters] });\n    };\n\n    /**\n     * Function to create active filters chips.\n     */\n    const constructFilters = () => {\n        return {\n            ...activeFiltersConfig || {},\n            filters: [\n                ...(showTags && !hasItems && enabledFilters.tags) ? tagsChip : [],\n                ...!hasItems && enabledFilters.name ? nameChip : [],\n                ...!hasItems && enabledFilters.stale ? stalenessChip : [],\n                ...!hasItems && enabledFilters.registeredWith ? registeredChip : [],\n                ...!hasItems && enabledFilters.operatingSystem ? operatingSystemChip : [],\n                ...activeFiltersConfig?.filters || []\n            ],\n            onDelete: (e, [deleted, ...restDeleted], isAll) => {\n                if (isAll) {\n                    dispatch(clearFilters());\n                    resetFilters();\n                } else {\n                    deleteMapper[deleted.type]?.(deleted);\n                }\n\n                activeFiltersConfig &&\n                activeFiltersConfig.onDelete &&\n                activeFiltersConfig.onDelete(e, [deleted, ...restDeleted], isAll, defaultFilters);\n            }\n        };\n    };\n\n    const inventoryFilters = [\n        ...!hasItems ? [\n            ...enabledFilters.name ? [nameFilter] : [],\n            ...enabledFilters.stale ? [stalenessFilter] : [],\n            ...enabledFilters.operatingSystem ? [operatingSystemFilter] : [],\n            ...enabledFilters.registeredWith ? [registeredFilter] : [],\n            ...showTags && enabledFilters.tags ? [tagsFilter] : []\n        ] : [],\n        ...filterConfig?.items || []\n    ];\n\n    return <Fragment>\n        <PrimaryToolbar\n            {...props}\n            {...bulkSelect && {\n                bulkSelect: {\n                    ...bulkSelect,\n                    isDisabled: bulkSelect?.isDisabled || !hasAccess\n                }\n            }}\n            className={`ins-c-inventory__table--toolbar ${\n                hasItems || !inventoryFilters.length ? 'ins-c-inventory__table--toolbar-has-items' : ''\n            }`}\n            {...inventoryFilters?.length > 0 && {\n                filterConfig: {\n                    ...filterConfig || {},\n                    isDisabled: !hasAccess,\n                    items: inventoryFilters?.map(filter => ({\n                        ...filter,\n                        filterValues: {\n                            placeholder: filter?.filterValues?.placeholder || `Filter by ${filter?.label?.toLowerCase()}`,\n                            ...filter?.filterValues,\n                            isDisabled: !hasAccess\n                        }\n                    }))\n                }\n            }}\n            { ...hasAccess && { activeFiltersConfig: constructFilters() } }\n            actionsConfig={ loaded ? actionsConfig : null }\n            pagination={loaded ? {\n                page,\n                itemCount: !hasAccess ? 0 : total,\n                isDisabled: !hasAccess,\n                perPage,\n                onSetPage: (_e, newPage) => onRefreshData({ page: newPage }),\n                onPerPageSelect: (_e, newPerPage) => onRefreshData({ page: 1, per_page: newPerPage }),\n                ...paginationProps\n            } : <Skeleton size={SkeletonSize.lg} />}\n        >\n            { children }\n        </PrimaryToolbar>\n        {\n            (showTags || enabledFilters.tags || showTagModal) && <TagsModal\n                customFilters={customFilters}\n                filterTagsBy={filterTagsBy}\n                onApply={(selected) => setSelectedTags(arrayToSelection(selected))}\n                onToggleModal={() => seFilterTagsBy('')}\n                getTags={getTags}\n            />\n        }\n    </Fragment>;\n};\n\nEntityTableToolbar.propTypes = {\n    showTags: PropTypes.bool,\n    getTags: PropTypes.func,\n    hasAccess: PropTypes.bool,\n    filterConfig: PropTypes.object,\n    total: PropTypes.number,\n    filters: PropTypes.array,\n    hasItems: PropTypes.bool,\n    page: PropTypes.number,\n    onClearFilters: PropTypes.func,\n    toggleTagModal: PropTypes.func,\n    perPage: PropTypes.number,\n    children: PropTypes.node,\n    pagination: PropTypes.object,\n    actionsConfig: PropTypes.object,\n    activeFiltersConfig: PropTypes.object,\n    onRefreshData: PropTypes.func,\n    customFilters: PropTypes.shape({\n        tags: PropTypes.oneOfType([\n            PropTypes.object,\n            PropTypes.arrayOf(PropTypes.string)\n        ])\n    }),\n    hideFilters: PropTypes.shape({\n        tags: PropTypes.bool,\n        name: PropTypes.bool,\n        registeredWith: PropTypes.bool,\n        stale: PropTypes.bool,\n        operatingSystem: PropTypes.bool,\n        all: PropTypes.bool\n    }),\n    paginationProps: PropTypes.object,\n    loaded: PropTypes.bool,\n    onRefresh: PropTypes.func,\n    hasCheckbox: PropTypes.bool,\n    isLoaded: PropTypes.bool,\n    items: PropTypes.array,\n    sortBy: PropTypes.object,\n    bulkSelect: PropTypes.object,\n    showTagModal: PropTypes.bool,\n    disableDefaultColumns: PropTypes.any\n};\n\nEntityTableToolbar.defaultProps = {\n    showTags: false,\n    hasAccess: true,\n    activeFiltersConfig: {},\n    filters: [],\n    hideFilters: {}\n};\n\nexport default EntityTableToolbar;\n","import React from 'react';\nimport { EmptyStateBody, EmptyState, EmptyStateVariant, Title } from '@patternfly/react-core';\n\n/**\n * Empty state stable when no systems are found.\n */\nconst NoSystemsTable = () => (\n    <EmptyState variant={ EmptyStateVariant.full }>\n        <Title headingLevel=\"h5\" size=\"lg\">\n            No matching systems found\n        </Title>\n        <EmptyStateBody>\n            To continue, edit your filter settings and search again.\n        </EmptyStateBody>\n    </EmptyState>\n);\n\nexport default NoSystemsTable;\n","import React, { useMemo, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { selectEntity, setSort } from '../../store/actions';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport {\n    Table as PfTable,\n    TableBody,\n    TableHeader,\n    TableGridBreakpoint,\n    TableVariant\n} from '@patternfly/react-table';\nimport { mergeArraysByKey } from '@redhat-cloud-services/frontend-components-utilities/helpers/helpers';\nimport { SkeletonTable } from '@redhat-cloud-services/frontend-components/SkeletonTable';\nimport NoSystemsTable from './NoSystemsTable';\nimport { createRows, createColumns } from './helpers';\nimport { defaultColumns } from '../../store/entities';\n\n/**\n * The actual (PF)table component. It calculates each cell and every table property.\n * It uses rows, columns and loaded from redux to show correct data.\n * When row is selected `selectEntity` is dispatched.\n * @param {*} props all props used in this component.\n */\nconst EntityTable = ({\n    hasItems,\n    expandable,\n    onExpandClick,\n    hasCheckbox,\n    actions,\n    variant,\n    sortBy,\n    tableProps,\n    onSort,\n    expandable: isExpandable,\n    onRowClick,\n    noDetail,\n    noSystemsTable = <NoSystemsTable />,\n    showTags,\n    columns: columnsProp,\n    disableDefaultColumns,\n    loaded,\n    columnsCounter\n}) => {\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const location = useLocation();\n    const rows = useSelector(({ entities: { rows } }) => rows);\n    const columnsRedux = useSelector(\n        ({ entities: { columns } }) => columns,\n        (next, prev) => next.every(\n            ({ key }, index) => prev.findIndex(({ key: prevKey }) => prevKey === key) === index\n        )\n    );\n\n    const onItemSelect = (_event, checked, rowId) => {\n        const row = isExpandable ? rows[rowId / 2] : rows[rowId];\n        dispatch(selectEntity(rowId === -1 ? 0 : row.id, checked));\n    };\n\n    const onSortChange = (_event, key, direction, index) => {\n        if (key !== 'action' && key !== 'health') {\n            dispatch(setSort({ index, key, direction }));\n        }\n\n        onSort?.({ index, key, direction });\n    };\n\n    const columns = useRef([]);\n    useMemo(() => {\n        if (typeof columnsProp === 'function') {\n            columns.current = columnsProp(defaultColumns);\n        } else if (columnsProp) {\n            const disabledColumns = Array.isArray(disableDefaultColumns) ? disableDefaultColumns : [];\n            const defaultColumnsFiltered = defaultColumns.filter(({ key }) =>\n                (key === 'tags' && showTags) || (key !== 'tags' && !disabledColumns.includes(key))\n            );\n            columns.current = mergeArraysByKey([\n                typeof disableDefaultColumns === 'boolean' && disableDefaultColumns ? [] : defaultColumnsFiltered,\n                columnsProp\n            ], 'key');\n        } else {\n            columns.current = columnsRedux;\n        }\n    }, [\n        showTags,\n        Array.isArray(disableDefaultColumns) ? disableDefaultColumns.join() : disableDefaultColumns,\n        Array.isArray(columnsProp) ?\n            columnsProp.map(({ key }) => key).join() :\n            typeof columnsProp === 'function' ? 'function' : columnsProp,\n        Array.isArray(columnsRedux) ? columnsRedux.map(({ key }) => key).join() : columnsRedux,\n        columnsCounter\n    ]);\n\n    const cells = loaded && createColumns(columns.current, hasItems, rows, isExpandable);\n\n    const defaultRowClick = (_event, key) => {\n        history.push(`${location.pathname}${location.pathname.slice(-1) === '/' ? '' : '/'}${key}`);\n    };\n\n    delete tableProps.RowWrapper;\n    if (rows?.length === 0) {\n        delete tableProps.actionResolver;\n    }\n\n    return (\n        <React.Fragment>\n            { loaded && cells ?\n                PfTable && <PfTable\n                    variant={ variant }\n                    aria-label=\"Host inventory\"\n                    cells={ cells }\n                    rows={ createRows(\n                        rows,\n                        columns.current,\n                        {\n                            actions,\n                            expandable,\n                            loaded,\n                            onRowClick: onRowClick || defaultRowClick,\n                            noDetail,\n                            sortBy,\n                            noSystemsTable\n                        })\n                    }\n                    gridBreakPoint={\n                        columns.current?.length > 5 ?\n                            TableGridBreakpoint.gridLg :\n                            TableGridBreakpoint.gridMd\n                    }\n                    className=\"ins-c-entity-table\"\n                    onSort={ (event, index, direction) => {\n                        onSortChange(\n                            event,\n                            cells?.[index - Boolean(hasCheckbox) - Boolean(expandable)]?.sortKey ||\n                            cells?.[index - Boolean(hasCheckbox) - Boolean(expandable)]?.key,\n                            direction,\n                            index\n                        );\n                    } }\n                    sortBy={ {\n                        index: cells?.findIndex(item => sortBy?.key === item.key) + Boolean(hasCheckbox) + Boolean(expandable),\n                        direction: sortBy?.direction\n                    } }\n                    { ...{\n                        ...hasCheckbox && rows?.length !== 0 ? { onSelect: onItemSelect } : {},\n                        ...expandable ? { onCollapse: onExpandClick } : {},\n                        ...actions && rows?.length > 0 && { actions }\n                    } }\n                    isStickyHeader\n                    { ...tableProps }\n                >\n                    <TableHeader />\n                    <TableBody />\n                </PfTable> :\n                <SkeletonTable\n                    colSize={ columns.current?.length || 3 }\n                    rowSize={ 15 }\n                    variant={variant ?? tableProps.variant}\n                />\n            }\n        </React.Fragment>\n    );\n};\n\nEntityTable.propTypes = {\n    variant: PropTypes.oneOf(['compact']),\n    expandable: PropTypes.bool,\n    onExpandClick: PropTypes.func,\n    onSort: PropTypes.func,\n    hasCheckbox: PropTypes.bool,\n    showActions: PropTypes.bool,\n    hasItems: PropTypes.bool,\n    showHealth: PropTypes.bool,\n    sortBy: PropTypes.shape({\n        key: PropTypes.string,\n        direction: PropTypes.oneOf(['asc', 'desc'])\n    }),\n    tableProps: PropTypes.shape({\n        [PropTypes.string]: PropTypes.any,\n        RowWrapper: PropTypes.elementType,\n        variant: PropTypes.string,\n        actionResolver: PropTypes.func\n    }),\n    onRowClick: PropTypes.func,\n    showTags: PropTypes.bool,\n    noSystemsTable: PropTypes.node,\n    disableDefaultColumns: PropTypes.oneOfType([PropTypes.bool, PropTypes.arrayOf(PropTypes.string)]),\n    loaded: PropTypes.bool,\n    columnsCounter: PropTypes.number,\n    columns: PropTypes.oneOfType([PropTypes.array, PropTypes.func]),\n    isLoaded: PropTypes.bool,\n    actions: PropTypes.array,\n    noDetail: PropTypes.any\n};\n\nEntityTable.defaultProps = {\n    loaded: false,\n    showHealth: false,\n    expandable: false,\n    hasCheckbox: true,\n    showActions: false,\n    rows: [],\n    variant: TableVariant.compact,\n    onExpandClick: () => undefined,\n    tableProps: {}\n};\n\nexport default EntityTable;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { NotAuthorized } from '@redhat-cloud-services/frontend-components/NotAuthorized';\nimport { Tooltip } from '@patternfly/react-core';\n\nconst AccessDenied = ({ title, description, ...props }) => (\n    <NotAuthorized\n        {...props}\n        className=\"ins-c-inventory__no--access\"\n        title={title}\n        description={<Tooltip content=\"inventory:*:read\">\n            {description}\n        </Tooltip>}\n    />\n);\n\nAccessDenied.propTypes = {\n    title: PropTypes.string,\n    description: PropTypes.node\n};\n\nAccessDenied.defaultProps = {\n    title: 'You do not have access to Inventory',\n    description: <div>\n        To view your systems, you must be granted inventory access from your Organization Administrator.\n    </div>\n};\n\nexport default AccessDenied;\n","/* eslint-disable react/display-name */\nimport React, { useEffect, useRef } from 'react';\nimport { useSelector } from 'react-redux';\nimport InventoryEntityTable from './EntityTable';\nimport { Grid, GridItem } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport './InventoryList.scss';\nimport isEqual from 'lodash/isEqual';\nimport AccessDenied from '../../Utilities/AccessDenied';\n\nconst convertItem = ({ children, isOpen, ...item }) => item;\n\n/**\n * Component that works as a side channel for consumers to notify inventory of new data changes.\n */\nconst ContextInventoryList = ({ showHealth, onRefreshData, ignoreRefresh, ...props }) => {\n    const prevItems = useRef(props.items);\n    const prevSortBy = useRef(props.sortBy);\n\n    useEffect(() => {\n        if (props.hasItems) {\n            onRefreshData({}, ignoreRefresh);\n        }\n    }, []);\n\n    /**\n     * Function to calculate for new changes, this function limits re-renders by checking if previous items are\n     * same as new items.\n     * If items are not passed, it only checks for props sortBy.\n     * @param {*} prevProps previous props - items, hasItems, sortBy.\n     */\n    useEffect(() => {\n        if (props.hasItems && !isEqual(prevItems.current.map(convertItem), props.items.map(convertItem))) {\n            prevItems.current = props.items;\n            onRefreshData({}, ignoreRefresh);\n        }\n\n        if (!props.hasItems && !isEqual(prevSortBy.current, props.sortBy)) {\n            prevSortBy.current = props.sortBy;\n            onRefreshData({}, ignoreRefresh);\n        }\n    });\n\n    return (<Grid gutter=\"sm\" className=\"ins-inventory-list\">\n        <GridItem span={ 12 }>\n            <InventoryEntityTable { ...props } onRefreshData={onRefreshData} />\n        </GridItem>\n    </Grid>);\n};\n\n/**\n * Component that consumes active filters and passes them down to component.\n */\nconst InventoryList = React.forwardRef(({ hasAccess, onRefreshData, ...props }, ref) => {\n    const activeFilters = useSelector(({ entities: { activeFilters } }) => activeFilters);\n\n    if (ref) {\n        ref.current = {\n            onRefreshData: (params, disableRefresh = true) => onRefreshData(params, disableRefresh)\n        };\n    }\n\n    return !hasAccess ?\n        <div className=\"ins-c-inventory__no-access\">\n            <AccessDenied showReturnButton={false} />\n        </div>\n        : (\n            <ContextInventoryList\n                { ...props }\n                activeFilters={ activeFilters }\n                onRefreshData={ onRefreshData }\n            />\n        );\n});\n\nContextInventoryList.propTypes = {\n    ...InventoryList.propTypes,\n    setRefresh: PropTypes.func,\n    onRefreshData: PropTypes.func,\n    ignoreRefresh: PropTypes.bool\n};\nContextInventoryList.defaultProps = {\n    perPage: 50,\n    page: 1,\n    ignoreRefresh: true\n};\nInventoryList.propTypes = {\n    showTags: PropTypes.bool,\n    filterEntities: PropTypes.func,\n    loadEntities: PropTypes.func,\n    showHealth: PropTypes.bool,\n    page: PropTypes.number,\n    perPage: PropTypes.number,\n    sortBy: PropTypes.shape({\n        key: PropTypes.string,\n        direction: PropTypes.string\n    }),\n    items: PropTypes.arrayOf(PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.shape({\n            id: PropTypes.string.isRequired\n        }),\n        PropTypes.shape({\n            account: PropTypes.any,\n            isOpen: PropTypes.bool,\n            title: PropTypes.node\n        })\n    ])),\n    entities: PropTypes.arrayOf(PropTypes.any),\n    customFilters: PropTypes.shape({\n        tags: PropTypes.oneOfType([\n            PropTypes.object,\n            PropTypes.arrayOf(PropTypes.string)\n        ])\n    }),\n    getEntities: PropTypes.func,\n    hideFilters: PropTypes.shape({\n        tags: PropTypes.bool,\n        name: PropTypes.bool,\n        registeredWith: PropTypes.bool,\n        stale: PropTypes.bool,\n        operatingSystem: PropTypes.bool\n    }),\n    onRefreshData: PropTypes.func\n};\n\nInventoryList.defaultProps = {\n    hasAccess: true\n};\n\nexport default InventoryList;\n","/* eslint-disable camelcase */\nimport React from 'react';\nimport { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\n\n/**\n * Bottom pagination used in table. It can remember what page user is on if user entered the page number in input.\n */\nconst FooterPagination = ({\n    total,\n    page,\n    perPage,\n    direction,\n    isFull,\n    hasAccess,\n    paginationProps,\n    onRefreshData,\n    loaded\n}) => {\n    /**\n     * Thi method sets new page and combines previous props to apply sort, filters etc.\n     * @param {*} event html event to figure if target was input.\n     * @param {*} page current page to change to.\n     */\n    const onSetPage = (_event, pageArg) => onRefreshData({ page: pageArg });\n\n    /**\n     * This method changes per page, it automatically sets page to first one.\n     * It also applies previous sort, filters, etc.\n     * @param {*} _event event is now not used.\n     * @param {*} perPage new perPage set by user.\n     */\n    const onPerPageSelect = (_event, perPageArg) => onRefreshData({ page: 1, per_page: perPageArg });\n\n    return (loaded || !hasAccess) ? (\n        <Pagination\n            { ...isFull && {\n                variant: PaginationVariant.bottom\n            } }\n            isDisabled={!hasAccess}\n            itemCount={ total }\n            page={ page }\n            perPage={ perPage }\n            dropDirection={ direction }\n            onSetPage={ onSetPage }\n            onPerPageSelect={ onPerPageSelect }\n            {...paginationProps}\n        />\n    ) : null;\n};\n\nFooterPagination.propTypes = {\n    perPage: PropTypes.number,\n    total: PropTypes.number,\n    page: PropTypes.number,\n    isFull: PropTypes.bool,\n    hasAccess: PropTypes.bool,\n    direction: PropTypes.string,\n    paginationProps: PropTypes.object,\n    loaded: PropTypes.bool,\n    onRefreshData: PropTypes.func.isRequired\n};\n\nFooterPagination.defaultProps = {\n    total: 0,\n    isFull: false,\n    direction: 'up',\n    hasAccess: true\n};\n\nexport default FooterPagination;\n","/* eslint-disable camelcase */\nimport React, { Fragment, forwardRef, useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector, shallowEqual, useStore, useDispatch } from 'react-redux';\nimport EntityTableToolbar from './EntityTableToolbar';\nimport { TableToolbar } from '@redhat-cloud-services/frontend-components/TableToolbar';\nimport { ErrorState } from '@redhat-cloud-services/frontend-components/ErrorState';\nimport InventoryList from './InventoryList';\nimport Pagination from './Pagination';\nimport AccessDenied from '../../Utilities/AccessDenied';\nimport { loadSystems } from '../../Utilities/index';\nimport isEqual from 'lodash/isEqual';\nimport { entitiesLoading } from '../../store/actions';\n\n/**\n * A helper function to store props and to always return the latest state.\n * For example, EntityTableToolbar wraps OnRefreshData in a callback, so we need this\n * to get the latest props and not the props at the time of when the function is\n * being wrapped in callback.\n */\nconst propsCache = () => {\n    let cache = {};\n\n    const updateProps = (props) => { cache = props; };\n\n    const getProps = () => cache;\n\n    return { updateProps, getProps };\n};\n\n/**\n * This component is used to combine all essential components together:\n *   * EntityTableToolbar - to control top toolbar.\n *   * InventoryList - to allow consumers to change data from outside and contains actual inventory table.\n *   * Pagination - bottom pagination.\n * It also calculates pagination and sortBy from props or from store if consumer passed items or not.\n */\n\nconst InventoryTable = forwardRef(({ // eslint-disable-line react/display-name\n    onRefresh,\n    children,\n    inventoryRef,\n    items,\n    total: propsTotal,\n    page: propsPage,\n    perPage: propsPerPage,\n    filters,\n    showTags,\n    sortBy: propsSortBy,\n    customFilters,\n    hasAccess = true,\n    isFullView = false,\n    getEntities,\n    getTags,\n    hideFilters,\n    paginationProps,\n    errorState = <ErrorState />,\n    autoRefresh,\n    isLoaded,\n    initialLoading,\n    ignoreRefresh,\n    showTagModal,\n    ...props\n}, ref) => {\n    const hasItems = Boolean(items);\n    const error = useSelector(({ entities }) => (\n        entities?.error\n    ));\n    const page = useSelector(({ entities: { page: invPage } }) => (\n        hasItems ? propsPage : (invPage || 1)\n    )\n    , shallowEqual);\n    const perPage = useSelector(({ entities: { perPage: invPerPage } }) => (\n        hasItems ? propsPerPage : (invPerPage || 50)\n    )\n    , shallowEqual);\n    const total = useSelector(({ entities: { total: invTotal } }) => {\n        if (hasItems) {\n            return propsTotal !== undefined ? propsTotal : items?.length;\n        }\n\n        return invTotal;\n    }, shallowEqual);\n    const pagination = {\n        page,\n        perPage,\n        total\n    };\n    const sortBy = useSelector(({ entities: { sortBy: invSortBy } }) => (\n        hasItems ? propsSortBy : invSortBy\n    ), shallowEqual);\n\n    const reduxLoaded = useSelector(({ entities }) => (\n        hasItems && isLoaded !== undefined ? (isLoaded && entities?.loaded) : entities?.loaded\n    ));\n\n    /**\n     * If initialLoading is set to true, then the component should be in loading state until\n     * entities.loaded is false (and then we can use the redux loading state and forget this one)\n     */\n    const [initialLoadingActive, disableInitialLoading] = useState(initialLoading);\n    useEffect(() => {\n        if (!reduxLoaded) {\n            disableInitialLoading();\n        }\n    }, [reduxLoaded]);\n    const loaded = reduxLoaded && !initialLoadingActive;\n\n    const dispatch = useDispatch();\n    const store = useStore();\n\n    const cache = useRef(propsCache());\n    cache.current.updateProps({\n        page,\n        perPage,\n        items,\n        sortBy,\n        hideFilters,\n        showTags,\n        getEntities,\n        customFilters,\n        hasItems\n    });\n\n    /**\n     * If consumer wants to change data they can call this function via component ref.\n     * @param {*} options new options to be applied, like pagination, filters, etc.\n     */\n    const onRefreshData = (options = {}, disableOnRefresh) => {\n        const { activeFilters } = store.getState().entities;\n        const cachedProps = cache.current?.getProps() || {};\n        const currPerPage = options?.per_page || options?.perPage || cachedProps.perPage;\n\n        const params = {\n            page: cachedProps.page,\n            per_page: currPerPage,\n            items: cachedProps.items,\n            sortBy: cachedProps.sortBy,\n            hideFilters: cachedProps.hideFilters,\n            filters: activeFilters,\n            hasItems: cachedProps.hasItems,\n            ...cachedProps.customFilters,\n            ...options\n        };\n\n        if (onRefresh && !disableOnRefresh) {\n            dispatch(entitiesLoading());\n            onRefresh(params, (options) => {\n                dispatch(\n                    loadSystems(\n                        { ...params, ...options },\n                        cachedProps.showTags,\n                        cachedProps.getEntities\n                    )\n                );\n            });\n        } else {\n            dispatch(\n                loadSystems(\n                    params,\n                    cachedProps.showTags,\n                    cachedProps.getEntities\n                )\n            );\n        }\n    };\n\n    const prevFilters = useRef(customFilters);\n    useEffect(() => {\n        if (autoRefresh && !isEqual(prevFilters.current, customFilters)) {\n            onRefreshData({ page: 1 });\n            prevFilters.current = customFilters;\n        }\n    });\n\n    return (\n        (hasAccess === false && isFullView) ?\n            <AccessDenied\n                title=\"This application requires Inventory permissions\"\n                description={<div>\n                    To view the content of this page, you must be granted\n                    a minimum of inventory permissions from your Organization Administrator.\n                </div>}\n            /> :\n            !error ? <Fragment>\n                <EntityTableToolbar\n                    { ...props }\n                    customFilters={customFilters}\n                    hasAccess={hasAccess}\n                    items={ items }\n                    filters={ filters }\n                    hasItems={ hasItems }\n                    total={ pagination.total }\n                    page={ pagination.page }\n                    perPage={ pagination.perPage }\n                    showTags={ showTags }\n                    getTags={ getTags }\n                    onRefreshData={onRefreshData}\n                    sortBy={ sortBy }\n                    hideFilters={hideFilters}\n                    paginationProps={paginationProps}\n                    loaded={loaded}\n                    showTagModal={showTagModal}\n                    activeFiltersConfig={{ deleteTitle: 'Reset filters', ...props.activeFiltersConfig }}\n                >\n                    { children }\n                </EntityTableToolbar>\n                <InventoryList\n                    { ...props }\n                    customFilters={customFilters}\n                    hasAccess={hasAccess}\n                    ref={ref}\n                    hasItems={ hasItems }\n                    items={ items }\n                    page={ pagination.page }\n                    sortBy={ sortBy }\n                    perPage={ pagination.perPage }\n                    showTags={ showTags }\n                    onRefreshData={onRefreshData}\n                    loaded={loaded}\n                    ignoreRefresh={ignoreRefresh}\n                />\n                <TableToolbar isFooter className=\"ins-c-inventory__table--toolbar\">\n                    <Pagination\n                        hasAccess={hasAccess}\n                        isFull\n                        total={ pagination.total }\n                        page={ pagination.page }\n                        perPage={ pagination.perPage }\n                        hasItems={ hasItems }\n                        onRefreshData={onRefreshData}\n                        paginationProps={paginationProps}\n                        loaded={loaded}\n                    />\n                </TableToolbar>\n            </Fragment> : errorState\n    );\n});\n\nInventoryTable.propTypes = {\n    autoRefresh: PropTypes.bool,\n    onRefresh: PropTypes.func,\n    children: PropTypes.node,\n    inventoryRef: PropTypes.object,\n    items: PropTypes.array,\n    total: PropTypes.number,\n    page: PropTypes.number,\n    perPage: PropTypes.number,\n    filters: PropTypes.any,\n    showTags: PropTypes.bool,\n    getTags: PropTypes.func,\n    sortBy: PropTypes.object,\n    customFilters: PropTypes.any,\n    hasAccess: PropTypes.bool,\n    isFullView: PropTypes.bool,\n    getEntities: PropTypes.func,\n    hideFilters: PropTypes.object,\n    paginationProps: PropTypes.object,\n    errorState: PropTypes.node,\n    isLoaded: PropTypes.bool,\n    initialLoading: PropTypes.bool,\n    ignoreRefresh: PropTypes.bool,\n    showTagModal: PropTypes.bool,\n    activeFiltersConfig: PropTypes.object\n};\n\nexport default InventoryTable;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { usePermissionsWithContext } from '@redhat-cloud-services/frontend-components-utilities/RBACHook';\nimport DetailWrapper from './DetailWrapper';\nimport AccessDenied from '../../Utilities/AccessDenied';\n\nconst DetailRenderer = ({ isRbacEnabled, ...props }) => {\n    const { hasAccess } = usePermissionsWithContext([\n        'inventory:*:*',\n        'inventory:*:read',\n        'inventory:hosts:read'\n    ]);\n\n    if (isRbacEnabled && hasAccess === false) {\n        return <AccessDenied />;\n    } else {\n        return <DetailWrapper {...props} />;\n    }\n};\n\nDetailRenderer.propTypes = {\n    isRbacEnabled: PropTypes.bool\n};\n\nexport default DetailRenderer;\n","/* eslint-disable react/display-name */\nimport React from 'react';\nimport { AppInfo, InventoryDetail, FullDetail } from '../components/InventoryDetail';\nimport RenderWrapper from './Wrapper';\nimport TagWithDialog from './TagWithDialog';\nimport { InventoryTable } from '../components/InventoryTable';\nimport * as inventoryFitlers from '../components/filters';\nimport DetailRenderer from '../components/InventoryDetail/DetailRenderer';\n\nexport function inventoryConnector(store, componentsMapper, Wrapper, isRbacEnabled = true) {\n    const showInventoryDrawer = Boolean(Wrapper);\n    return {\n        InventoryTable: React.forwardRef(\n            (props, ref) => <RenderWrapper\n                { ...props }\n                isRbacEnabled={ isRbacEnabled }\n                inventoryRef={ ref }\n                store={ store }\n                cmp={ InventoryTable }\n            />\n        ),\n        AppInfo: React.forwardRef(\n            (props, ref) => <RenderWrapper\n                hideLoader\n                { ...props }\n                {...componentsMapper}\n                isRbacEnabled={ isRbacEnabled }\n                inventoryRef={ ref }\n                store={ store }\n                cmp={ AppInfo }\n            />\n        ),\n        InventoryDetailHead: React.forwardRef(\n            (props, ref) => <RenderWrapper\n                hideLoader\n                { ...props }\n                {...componentsMapper}\n                isRbacEnabled={ isRbacEnabled }\n                inventoryRef={ ref }\n                store={ store }\n                // eslint-disable-next-line react/prop-types\n                showInventoryDrawer={ showInventoryDrawer && !props.hideInvDrawer }\n                cmp={ InventoryDetail }\n            />\n        ),\n        InventoryDetail: React.forwardRef(\n            (props, ref) => <RenderWrapper\n                hideLoader\n                { ...props }\n                {...componentsMapper}\n                isRbacEnabled={ isRbacEnabled }\n                inventoryRef={ ref }\n                store={ store }\n                showInventoryDrawer={ showInventoryDrawer }\n                cmp={ FullDetail }\n            />\n        ),\n        TagWithDialog: React.forwardRef(\n            (props, ref) => <RenderWrapper\n                { ...props }\n                inventoryRef={ ref }\n                isRbacEnabled={ isRbacEnabled }\n                store={ store }\n                cmp={ TagWithDialog }\n            />\n        ),\n        // eslint-disable-next-line react/display-name\n        DetailWrapper: (props) => <DetailRenderer\n            Wrapper={Wrapper}\n            isRbacEnabled={ isRbacEnabled }\n            showInventoryDrawer={ showInventoryDrawer }\n            {...props}\n        />,\n        ...inventoryFitlers\n    };\n}\n"],"names":["toGroupSelectionValue","osVersions","reduce","acc","version","split","majorVersion","minorVersion","groupOSVersions","filter","value","map","groupSelectable","items","majorOsVersion","minorOsVersion","sort","buildOSFilterConfig","config","label","type","filterValues","selected","onChange","groups","operatingSystems","item","subItem","buildOSChip","operatingSystemValue","Object","values","flatMap","keys","length","category","OS_CHIP","chips","osValue","some","osFilterValue","name","redirectToInventoryList","id","onBackToListClick","document","referrer","location","origin","pathname","history","back","href","replace","RegExp","getFact","path","factDict","get","undefined","SystemNotFound","inventoryId","EmptyState","variant","EmptyStateVariant","EmptyStateIcon","icon","CubesIcon","Title","headingLevel","size","EmptyStateBody","Button","onClick","propTypes","PropTypes","TopBar","entity","loaded","actions","deleteEntity","addNotification","hideInvLink","showDelete","showInventoryDrawer","TitleWrapper","TagsWrapper","DeleteWrapper","ActionsWrapper","showTags","dispatch","useDispatch","useState","isOpen","setIsOpen","isModalOpen","setIsModalOpen","inventoryActions","title","component","Split","className","SplitItem","isFilled","Flex","FlexItem","display_name","TagWithDialog","count","tags","systemId","TagsModal","Skeleton","SkeletonSize","Dropdown","onSelect","toggle","DropdownToggle","onToggle","position","DropdownPosition","dropdownItems","key","action","DropdownItem","event","toggleDrawer","DeleteModal","handleModalToggle","currentSytems","onConfirm","description","dismissable","defaultProps","Fragment","TitleWTagsWrapperrapper","FactsInfo","LastSeenWrapper","UUIDWrapper","props","Grid","GridItem","md","grow","default","fontSize","CullingInformation","culled","staleWarning","stale","currDate","Date","DateFormat","date","verifyDisconnectedSystem","InsightsDisconnected","ApplicationDetails","onTabSelect","appList","search","useLocation","useHistory","searchParams","URLSearchParams","useSelector","entityDetails","activeApps","isVisible","activeApp","disabledApps","systemProfileStore","defaultApp","appName","find","pageId","applications","activeTabs","setActiveTabs","useEffect","detailSelect","filteredResult","app","includes","Tabs","activeKey","activeItem","oneApp","set","push","toString","Tab","eventKey","Alert","isInline","hasGutter","span","TextContent","style","Text","TextVariants","TextList","TextListItem","T","Card","isCompact","CardTitle","CardBody","CardFooter","ClipboardCopy","isCode","isReadOnly","height","target","InventoryDetail","children","useParams","currId","pop","loadEntity","hasItems","systems","displayName","callback","reloadWrapper","payload","insights_id","hideBack","AppInfo","componentMapper","store","useStore","Cmp","BasicInfo","Stack","StackItem","ChipGroup","Chip","namespace","SystemIssues","isOpened","advisor","systemIssues","compliance","cve","patch","getAdvisorData","getComplianceData","getPatchData","getVulnData","Level","LevelItem","isLoaded","critical","important","moderate","low","bug","security","enhancement","criticalCount","profiles","DetailWrapper","Wrapper","isExpanded","isToggleOpened","Drawer","onExpand","DrawerContent","panelContent","DrawerPanelContent","DrawerHead","DrawerActions","DrawerCloseButton","DrawerPanelBody","DrawerContentBody","buildCells","columns","extra","composed","renderFunc","data","TitleColumn","createRows","rows","expandable","noSystemsTable","cells","colSpan","Boolean","dataLabel","flatten","oneItem","actionProps","parent","fullWidth","onDeleteFilter","deleted","currFilter","deletedItem","includesSortable","transforms","fn","textFilterState","textFilter","TEXT_FILTER","textFilterReducer","_state","useTextFilter","state","stateValue","setStateValue","setValue","newValue","placeholder","_e","chip","TEXTUAL_CHIP","stalenessFilterState","stalenessFilter","STALENESS_FILTER","stalenessFilterReducer","useStalenessFilter","stalenessStateValue","stalenessValue","staleness","STALE_CHIP","registeredWithFilterState","registeredWithFilter","REGISTERED_WITH_FILTER","registeredWithFilterReducer","useRegisteredWithFilter","registeredWithStateValue","registeredWithValue","registered","REGISTERED_CHIP","useTagsFilter","allTags","additionalTagsCount","onShowMoreClick","stateMapper","tagsFilter","selectedTags","filterTagsBy","seFilterTagsBy","tagsChip","setSelectedTags","operatingSystemFilterState","operatingSystemFilter","OPERATING_SYSTEM_FILTER","operatingSystemFilterReducer","useOperatingSystemFilter","operatingSystemStateValue","filtersReducer","reducersList","curr","EntityTableToolbar","total","page","perPage","filterConfig","actionsConfig","activeFiltersConfig","getTags","sortBy","customFilters","hasAccess","bulkSelect","hideFilters","paginationProps","onRefreshData","showTagModal","reducer","useReducer","tagsFilterReducer","tagsFilterState","filters","entities","activeFilters","allTagsLoaded","nameFilter","nameChip","setTextFilter","stalenessChip","staleFilter","setStaleFilter","registeredFilter","registeredChip","setRegisteredWithFilter","operatingSystemChip","osFilter","setOsFilter","toggleTagModal","debounceGetAllTags","useCallback","debounce","options","fetchAllTags","onRefreshDataInner","enabledFilters","all","registeredWith","operatingSystem","updateData","debouncedRefresh","direction","reduceFilters","tagFilters","onSetFilter","filterKey","refresh","newFilters","oneFilter","prototype","hasOwnProperty","call","shouldReload","debounced","trimmedValue","trim","textualFilter","onSetTextFilter","mapGroups","deleteMapper","TAG_CHIP","onApplyTags","onDeleteTag","currentFilter","onDeleteOsFilter","inventoryFilters","PrimaryToolbar","isDisabled","toLowerCase","onDelete","e","isAll","restDeleted","clearFilters","defaultFilters","setFilter","pagination","itemCount","onSetPage","newPage","onPerPageSelect","newPerPage","per_page","onApply","arrayToSelection","onToggleModal","onClearFilters","onRefresh","hasCheckbox","disableDefaultColumns","EntityTable","onExpandClick","tableProps","onSort","isExpandable","onRowClick","noDetail","columnsProp","columnsCounter","columnsRedux","next","prev","every","index","findIndex","useRef","useMemo","current","defaultColumns","disabledColumns","Array","isArray","defaultColumnsFiltered","mergeArraysByKey","join","cellFormatters","width","cellWidth","isStatic","sortable","createColumns","RowWrapper","actionResolver","PfTable","_event","slice","gridBreakPoint","TableGridBreakpoint","setSort","onSortChange","sortKey","checked","rowId","row","selectEntity","onCollapse","isStickyHeader","TableHeader","TableBody","SkeletonTable","colSize","rowSize","showActions","showHealth","TableVariant","AccessDenied","NotAuthorized","Tooltip","content","convertItem","ContextInventoryList","ignoreRefresh","prevItems","prevSortBy","isEqual","gutter","InventoryList","React","ref","params","disableRefresh","showReturnButton","setRefresh","filterEntities","loadEntities","account","getEntities","FooterPagination","isFull","Pagination","PaginationVariant","dropDirection","pageArg","perPageArg","InventoryTable","forwardRef","inventoryRef","propsTotal","propsPage","propsPerPage","propsSortBy","isFullView","errorState","ErrorState","autoRefresh","initialLoading","error","invPage","shallowEqual","invPerPage","invTotal","invSortBy","reduxLoaded","initialLoadingActive","disableInitialLoading","cache","updateProps","getProps","propsCache","disableOnRefresh","getState","cachedProps","currPerPage","entitiesLoading","loadSystems","prevFilters","deleteTitle","TableToolbar","isFooter","DetailRenderer","isRbacEnabled","usePermissionsWithContext","inventoryConnector","componentsMapper","cmp","hideLoader","InventoryDetailHead","hideInvDrawer","FullDetail","inventoryFitlers"],"sourceRoot":""}