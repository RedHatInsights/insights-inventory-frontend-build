{"version":3,"sources":["webpack:///./node_modules/lodash/last.js","webpack:///./node_modules/lodash/union.js","webpack:///./node_modules/lodash/unionWith.js","webpack:///./node_modules/seamless-immutable/seamless-immutable.development.js"],"names":["module","exports","array","length","undefined","baseFlatten","baseRest","baseUniq","isArrayLikeObject","union","arrays","last","unionWith","comparator","Immutable","immutableInit","config","data","REACT_ELEMENT_TYPE","Symbol","for","globalConfig","use_static","instantiateEmptyObject","obj","prototype","Object","getPrototypeOf","create","addPropertyTo","target","methodName","value","defineProperty","enumerable","configurable","writable","banProperty","ImmutableError","Array","isArray","Boolean","immutabilityTag","isImmutable","getOwnPropertyDescriptor","isEqual","a","b","isMergableObject","Date","mutatingObjectMethods","mutatingArrayMethods","concat","nonMutatingArrayMethods","mutatingDateMethods","message","this","name","stack","Error","makeImmutable","bannedMethods","index","hasOwnProperty","freeze","makeMethodReturnImmutable","currentMethod","apply","arguments","arraySet","idx","deep","merge","mode","mutable","asMutableArray","call","makeImmutableArray","constructor","immutableEmptyArray","arraySetIn","pth","head","newValue","tail","slice","thisHead","setIn","nextHead","isFinite","objectSetIn","immutableEmptyObject","flatMap","asObject","update","updateIn","getIn","i","asMutableDate","getTime","iterator","result","iteratorResult","push","without","remove","keysToRemoveArray","forEach","el","arr","toString","val","key","indexOf","makeImmutableObject","opts","asDeepMutable","pair","asMutable","quickCopy","src","dest","other","TypeError","JSON","stringify","receivedArray","merger","addToResult","currentObj","otherObj","immutableValue","mergerResult","currentValue","clearDroppedKeys","otherFromArray","objectReplace","fnObject","fnArray","fnDate","path","objectSet","property","updater","restArgs","initialVal","set","getInPath","l","defaultValue","asMutableObject","instantiatePlainObject","options","stackRemaining","$$typeof","isReactElement","File","isFileObject","Blob","isBlobObject","isError","then","isPromise","date","clone","toStatic","fn","args","self","shift","toStaticObjectOrArray","from","replace","static"],"mappings":"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","file":"js/794.51b342e336324c329860.js","sourcesContent":["/**\n * Gets the last element of `array`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to query.\n * @returns {*} Returns the last element of `array`.\n * @example\n *\n * _.last([1, 2, 3]);\n * // => 3\n */\nfunction last(array) {\n  var length = array == null ? 0 : array.length;\n  return length ? array[length - 1] : undefined;\n}\n\nmodule.exports = last;\n","var baseFlatten = require('./_baseFlatten'),\n    baseRest = require('./_baseRest'),\n    baseUniq = require('./_baseUniq'),\n    isArrayLikeObject = require('./isArrayLikeObject');\n\n/**\n * Creates an array of unique values, in order, from all given arrays using\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {...Array} [arrays] The arrays to inspect.\n * @returns {Array} Returns the new array of combined values.\n * @example\n *\n * _.union([2], [1, 2]);\n * // => [2, 1]\n */\nvar union = baseRest(function(arrays) {\n  return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));\n});\n\nmodule.exports = union;\n","var baseFlatten = require('./_baseFlatten'),\n    baseRest = require('./_baseRest'),\n    baseUniq = require('./_baseUniq'),\n    isArrayLikeObject = require('./isArrayLikeObject'),\n    last = require('./last');\n\n/**\n * This method is like `_.union` except that it accepts `comparator` which\n * is invoked to compare elements of `arrays`. Result values are chosen from\n * the first array in which the value occurs. The comparator is invoked\n * with two arguments: (arrVal, othVal).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {...Array} [arrays] The arrays to inspect.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of combined values.\n * @example\n *\n * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n *\n * _.unionWith(objects, others, _.isEqual);\n * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n */\nvar unionWith = baseRest(function(arrays) {\n  var comparator = last(arrays);\n  comparator = typeof comparator == 'function' ? comparator : undefined;\n  return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);\n});\n\nmodule.exports = unionWith;\n","(function() {\n  \"use strict\";\n\nfunction immutableInit(config) {\n\n  // https://github.com/facebook/react/blob/v15.0.1/src/isomorphic/classic/element/ReactElement.js#L21\n  var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol.for && Symbol.for('react.element');\n  var REACT_ELEMENT_TYPE_FALLBACK = 0xeac7;\n\n  var globalConfig = {\n    use_static: false\n  };\n  if (isObject(config)) {\n      if (config.use_static !== undefined) {\n          globalConfig.use_static = Boolean(config.use_static);\n      }\n  }\n\n  function isObject(data) {\n    return (\n      typeof data === 'object' &&\n      !Array.isArray(data) &&\n      data !== null\n    );\n  }\n\n  function instantiateEmptyObject(obj) {\n      var prototype = Object.getPrototypeOf(obj);\n      if (!prototype) {\n          return {};\n      } else {\n          return Object.create(prototype);\n      }\n  }\n\n  function addPropertyTo(target, methodName, value) {\n    Object.defineProperty(target, methodName, {\n      enumerable: false,\n      configurable: false,\n      writable: false,\n      value: value\n    });\n  }\n\n  function banProperty(target, methodName) {\n    addPropertyTo(target, methodName, function() {\n      throw new ImmutableError(\"The \" + methodName +\n        \" method cannot be invoked on an Immutable data structure.\");\n    });\n  }\n\n  var immutabilityTag = \"__immutable_invariants_hold\";\n\n  function addImmutabilityTag(target) {\n    addPropertyTo(target, immutabilityTag, true);\n  }\n\n  function isImmutable(target) {\n    if (typeof target === \"object\") {\n      return target === null || Boolean(\n        Object.getOwnPropertyDescriptor(target, immutabilityTag)\n      );\n    } else {\n      // In JavaScript, only objects are even potentially mutable.\n      // strings, numbers, null, and undefined are all naturally immutable.\n      return true;\n    }\n  }\n\n  function isEqual(a, b) {\n    // Avoid false positives due to (NaN !== NaN) evaluating to true\n    return (a === b || (a !== a && b !== b));\n  }\n\n  function isMergableObject(target) {\n    return target !== null && typeof target === \"object\" && !(Array.isArray(target)) && !(target instanceof Date);\n  }\n\n  var mutatingObjectMethods = [\n    \"setPrototypeOf\"\n  ];\n\n  var nonMutatingObjectMethods = [\n    \"keys\"\n  ];\n\n  var mutatingArrayMethods = mutatingObjectMethods.concat([\n    \"push\", \"pop\", \"sort\", \"splice\", \"shift\", \"unshift\", \"reverse\"\n  ]);\n\n  var nonMutatingArrayMethods = nonMutatingObjectMethods.concat([\n    \"map\", \"filter\", \"slice\", \"concat\", \"reduce\", \"reduceRight\"\n  ]);\n\n  var mutatingDateMethods = mutatingObjectMethods.concat([\n    \"setDate\", \"setFullYear\", \"setHours\", \"setMilliseconds\", \"setMinutes\", \"setMonth\", \"setSeconds\",\n    \"setTime\", \"setUTCDate\", \"setUTCFullYear\", \"setUTCHours\", \"setUTCMilliseconds\", \"setUTCMinutes\",\n    \"setUTCMonth\", \"setUTCSeconds\", \"setYear\"\n  ]);\n\n  function ImmutableError(message) {\n    this.name = 'MyError';\n    this.message = message;\n    this.stack = (new Error()).stack;\n  }\n  ImmutableError.prototype = new Error();\n  ImmutableError.prototype.constructor = Error;\n\n  function makeImmutable(obj, bannedMethods) {\n    // Tag it so we can quickly tell it's immutable later.\n    addImmutabilityTag(obj);\n\n    if (\"development\" !== \"production\") {\n      // Make all mutating methods throw exceptions.\n      for (var index in bannedMethods) {\n        if (bannedMethods.hasOwnProperty(index)) {\n          banProperty(obj, bannedMethods[index]);\n        }\n      }\n\n      // Freeze it and return it.\n      Object.freeze(obj);\n    }\n\n    return obj;\n  }\n\n  function makeMethodReturnImmutable(obj, methodName) {\n    var currentMethod = obj[methodName];\n\n    addPropertyTo(obj, methodName, function() {\n      return Immutable(currentMethod.apply(obj, arguments));\n    });\n  }\n\n  function arraySet(idx, value, config) {\n    var deep          = config && config.deep;\n\n    if (idx in this) {\n      if (deep && this[idx] !== value && isMergableObject(value) && isMergableObject(this[idx])) {\n        value = Immutable.merge(this[idx], value, {deep: true, mode: 'replace'});\n      }\n      if (isEqual(this[idx], value)) {\n        return this;\n      }\n    }\n\n    var mutable = asMutableArray.call(this);\n    mutable[idx] = Immutable(value);\n    return makeImmutableArray(mutable);\n  }\n\n  var immutableEmptyArray = Immutable([]);\n\n  function arraySetIn(pth, value, config) {\n    var head = pth[0];\n\n    if (pth.length === 1) {\n      return arraySet.call(this, head, value, config);\n    } else {\n      var tail = pth.slice(1);\n      var thisHead = this[head];\n      var newValue;\n\n      if (typeof(thisHead) === \"object\" && thisHead !== null) {\n        // Might (validly) be object or array\n        newValue = Immutable.setIn(thisHead, tail, value);\n      } else {\n        var nextHead = tail[0];\n        // If the next path part is a number, then we are setting into an array, else an object.\n        if (nextHead !== '' && isFinite(nextHead)) {\n          newValue = arraySetIn.call(immutableEmptyArray, tail, value);\n        } else {\n          newValue = objectSetIn.call(immutableEmptyObject, tail, value);\n        }\n      }\n\n      if (head in this && thisHead === newValue) {\n        return this;\n      }\n\n      var mutable = asMutableArray.call(this);\n      mutable[head] = newValue;\n      return makeImmutableArray(mutable);\n    }\n  }\n\n  function makeImmutableArray(array) {\n    // Don't change their implementations, but wrap these functions to make sure\n    // they always return an immutable value.\n    for (var index in nonMutatingArrayMethods) {\n      if (nonMutatingArrayMethods.hasOwnProperty(index)) {\n        var methodName = nonMutatingArrayMethods[index];\n        makeMethodReturnImmutable(array, methodName);\n      }\n    }\n\n    if (!globalConfig.use_static) {\n      addPropertyTo(array, \"flatMap\",  flatMap);\n      addPropertyTo(array, \"asObject\", asObject);\n      addPropertyTo(array, \"asMutable\", asMutableArray);\n      addPropertyTo(array, \"set\", arraySet);\n      addPropertyTo(array, \"setIn\", arraySetIn);\n      addPropertyTo(array, \"update\", update);\n      addPropertyTo(array, \"updateIn\", updateIn);\n      addPropertyTo(array, \"getIn\", getIn);\n    }\n\n    for(var i = 0, length = array.length; i < length; i++) {\n      array[i] = Immutable(array[i]);\n    }\n\n    return makeImmutable(array, mutatingArrayMethods);\n  }\n\n  function makeImmutableDate(date) {\n    if (!globalConfig.use_static) {\n      addPropertyTo(date, \"asMutable\", asMutableDate);\n    }\n\n    return makeImmutable(date, mutatingDateMethods);\n  }\n\n  function asMutableDate() {\n    return new Date(this.getTime());\n  }\n\n  /**\n   * Effectively performs a map() over the elements in the array, using the\n   * provided iterator, except that whenever the iterator returns an array, that\n   * array's elements are added to the final result instead of the array itself.\n   *\n   * @param {function} iterator - The iterator function that will be invoked on each element in the array. It will receive three arguments: the current value, the current index, and the current object.\n   */\n  function flatMap(iterator) {\n    // Calling .flatMap() with no arguments is a no-op. Don't bother cloning.\n    if (arguments.length === 0) {\n      return this;\n    }\n\n    var result = [],\n        length = this.length,\n        index;\n\n    for (index = 0; index < length; index++) {\n      var iteratorResult = iterator(this[index], index, this);\n\n      if (Array.isArray(iteratorResult)) {\n        // Concatenate Array results into the return value we're building up.\n        result.push.apply(result, iteratorResult);\n      } else {\n        // Handle non-Array results the same way map() does.\n        result.push(iteratorResult);\n      }\n    }\n\n    return makeImmutableArray(result);\n  }\n\n  /**\n   * Returns an Immutable copy of the object without the given keys included.\n   *\n   * @param {array} keysToRemove - A list of strings representing the keys to exclude in the return value. Instead of providing a single array, this method can also be called by passing multiple strings as separate arguments.\n   */\n  function without(remove) {\n    // Calling .without() with no arguments is a no-op. Don't bother cloning.\n    if (typeof remove === \"undefined\" && arguments.length === 0) {\n      return this;\n    }\n\n    if (typeof remove !== \"function\") {\n      // If we weren't given an array, use the arguments list.\n      var keysToRemoveArray = (Array.isArray(remove)) ?\n         remove.slice() : Array.prototype.slice.call(arguments);\n\n      // Convert numeric keys to strings since that's how they'll\n      // come from the enumeration of the object.\n      keysToRemoveArray.forEach(function(el, idx, arr) {\n        if(typeof(el) === \"number\") {\n          arr[idx] = el.toString();\n        }\n      });\n\n      remove = function(val, key) {\n        return keysToRemoveArray.indexOf(key) !== -1;\n      };\n    }\n\n    var result = instantiateEmptyObject(this);\n\n    for (var key in this) {\n      if (this.hasOwnProperty(key) && remove(this[key], key) === false) {\n        result[key] = this[key];\n      }\n    }\n\n    return makeImmutableObject(result);\n  }\n\n  function asMutableArray(opts) {\n    var result = [], i, length;\n\n    if(opts && opts.deep) {\n      for(i = 0, length = this.length; i < length; i++) {\n        result.push(asDeepMutable(this[i]));\n      }\n    } else {\n      for(i = 0, length = this.length; i < length; i++) {\n        result.push(this[i]);\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Effectively performs a [map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map) over the elements in the array, expecting that the iterator function\n   * will return an array of two elements - the first representing a key, the other\n   * a value. Then returns an Immutable Object constructed of those keys and values.\n   *\n   * @param {function} iterator - A function which should return an array of two elements - the first representing the desired key, the other the desired value.\n   */\n  function asObject(iterator) {\n    // If no iterator was provided, assume the identity function\n    // (suggesting this array is already a list of key/value pairs.)\n    if (typeof iterator !== \"function\") {\n      iterator = function(value) { return value; };\n    }\n\n    var result = {},\n        length = this.length,\n        index;\n\n    for (index = 0; index < length; index++) {\n      var pair  = iterator(this[index], index, this),\n          key   = pair[0],\n          value = pair[1];\n\n      result[key] = value;\n    }\n\n    return makeImmutableObject(result);\n  }\n\n  function asDeepMutable(obj) {\n    if (\n      (!obj) ||\n      (typeof obj !== 'object') ||\n      (!Object.getOwnPropertyDescriptor(obj, immutabilityTag)) ||\n      (obj instanceof Date)\n    ) { return obj; }\n    return Immutable.asMutable(obj, {deep: true});\n  }\n\n  function quickCopy(src, dest) {\n    for (var key in src) {\n      if (Object.getOwnPropertyDescriptor(src, key)) {\n        dest[key] = src[key];\n      }\n    }\n\n    return dest;\n  }\n\n  /**\n   * Returns an Immutable Object containing the properties and values of both\n   * this object and the provided object, prioritizing the provided object's\n   * values whenever the same key is present in both objects.\n   *\n   * @param {object} other - The other object to merge. Multiple objects can be passed as an array. In such a case, the later an object appears in that list, the higher its priority.\n   * @param {object} config - Optional config object that contains settings. Supported settings are: {deep: true} for deep merge and {merger: mergerFunc} where mergerFunc is a function\n   *                          that takes a property from both objects. If anything is returned it overrides the normal merge behaviour.\n   */\n  function merge(other, config) {\n    // Calling .merge() with no arguments is a no-op. Don't bother cloning.\n    if (arguments.length === 0) {\n      return this;\n    }\n\n    if (other === null || (typeof other !== \"object\")) {\n      throw new TypeError(\"Immutable#merge can only be invoked with objects or arrays, not \" + JSON.stringify(other));\n    }\n\n    var receivedArray = (Array.isArray(other)),\n        deep          = config && config.deep,\n        mode          = config && config.mode || 'merge',\n        merger        = config && config.merger,\n        result;\n\n    // Use the given key to extract a value from the given object, then place\n    // that value in the result object under the same key. If that resulted\n    // in a change from this object's value at that key, set anyChanges = true.\n    function addToResult(currentObj, otherObj, key) {\n      var immutableValue = Immutable(otherObj[key]);\n      var mergerResult = merger && merger(currentObj[key], immutableValue, config);\n      var currentValue = currentObj[key];\n\n      if ((result !== undefined) ||\n        (mergerResult !== undefined) ||\n        (!currentObj.hasOwnProperty(key)) ||\n        !isEqual(immutableValue, currentValue)) {\n\n        var newValue;\n\n        if (mergerResult !== undefined) {\n          newValue = mergerResult;\n        } else if (deep && isMergableObject(currentValue) && isMergableObject(immutableValue)) {\n          newValue = Immutable.merge(currentValue, immutableValue, config);\n        } else {\n          newValue = immutableValue;\n        }\n\n        if (!isEqual(currentValue, newValue) || !currentObj.hasOwnProperty(key)) {\n          if (result === undefined) {\n            // Make a shallow clone of the current object.\n            result = quickCopy(currentObj, instantiateEmptyObject(currentObj));\n          }\n\n          result[key] = newValue;\n        }\n      }\n    }\n\n    function clearDroppedKeys(currentObj, otherObj) {\n      for (var key in currentObj) {\n        if (!otherObj.hasOwnProperty(key)) {\n          if (result === undefined) {\n            // Make a shallow clone of the current object.\n            result = quickCopy(currentObj, instantiateEmptyObject(currentObj));\n          }\n          delete result[key];\n        }\n      }\n    }\n\n    var key;\n\n    // Achieve prioritization by overriding previous values that get in the way.\n    if (!receivedArray) {\n      // The most common use case: just merge one object into the existing one.\n      for (key in other) {\n        if (Object.getOwnPropertyDescriptor(other, key)) {\n          addToResult(this, other, key);\n        }\n      }\n      if (mode === 'replace') {\n        clearDroppedKeys(this, other);\n      }\n    } else {\n      // We also accept an Array\n      for (var index = 0, length = other.length; index < length; index++) {\n        var otherFromArray = other[index];\n\n        for (key in otherFromArray) {\n          if (otherFromArray.hasOwnProperty(key)) {\n            addToResult(result !== undefined ? result : this, otherFromArray, key);\n          }\n        }\n      }\n    }\n\n    if (result === undefined) {\n      return this;\n    } else {\n      return makeImmutableObject(result);\n    }\n  }\n\n  function objectReplace(value, config) {\n    var deep          = config && config.deep;\n\n    // Calling .replace() with no arguments is a no-op. Don't bother cloning.\n    if (arguments.length === 0) {\n      return this;\n    }\n\n    if (value === null || typeof value !== \"object\") {\n      throw new TypeError(\"Immutable#replace can only be invoked with objects or arrays, not \" + JSON.stringify(value));\n    }\n\n    return Immutable.merge(this, value, {deep: deep, mode: 'replace'});\n  }\n\n  var immutableEmptyObject = Immutable({});\n\n  function objectSetIn(path, value, config) {\n    if (!(Array.isArray(path)) || path.length === 0) {\n      throw new TypeError(\"The first argument to Immutable#setIn must be an array containing at least one \\\"key\\\" string.\");\n    }\n\n    var head = path[0];\n    if (path.length === 1) {\n      return objectSet.call(this, head, value, config);\n    }\n\n    var tail = path.slice(1);\n    var newValue;\n    var thisHead = this[head];\n\n    if (this.hasOwnProperty(head) && typeof(thisHead) === \"object\" && thisHead !== null) {\n      // Might (validly) be object or array\n      newValue = Immutable.setIn(thisHead, tail, value);\n    } else {\n      newValue = objectSetIn.call(immutableEmptyObject, tail, value);\n    }\n\n    if (this.hasOwnProperty(head) && thisHead === newValue) {\n      return this;\n    }\n\n    var mutable = quickCopy(this, instantiateEmptyObject(this));\n    mutable[head] = newValue;\n    return makeImmutableObject(mutable);\n  }\n\n  function objectSet(property, value, config) {\n    var deep          = config && config.deep;\n\n    if (this.hasOwnProperty(property)) {\n      if (deep && this[property] !== value && isMergableObject(value) && isMergableObject(this[property])) {\n        value = Immutable.merge(this[property], value, {deep: true, mode: 'replace'});\n      }\n      if (isEqual(this[property], value)) {\n        return this;\n      }\n    }\n\n    var mutable = quickCopy(this, instantiateEmptyObject(this));\n    mutable[property] = Immutable(value);\n    return makeImmutableObject(mutable);\n  }\n\n  function update(property, updater) {\n    var restArgs = Array.prototype.slice.call(arguments, 2);\n    var initialVal = this[property];\n    return Immutable.set(this, property, updater.apply(initialVal, [initialVal].concat(restArgs)));\n  }\n\n  function getInPath(obj, path) {\n    /*jshint eqnull:true */\n    for (var i = 0, l = path.length; obj != null && i < l; i++) {\n      obj = obj[path[i]];\n    }\n\n    return (i && i == l) ? obj : undefined;\n  }\n\n  function updateIn(path, updater) {\n    var restArgs = Array.prototype.slice.call(arguments, 2);\n    var initialVal = getInPath(this, path);\n\n    return Immutable.setIn(this, path, updater.apply(initialVal, [initialVal].concat(restArgs)));\n  }\n\n  function getIn(path, defaultValue) {\n    var value = getInPath(this, path);\n    return value === undefined ? defaultValue : value;\n  }\n\n  function asMutableObject(opts) {\n    var result = instantiateEmptyObject(this), key;\n\n    if(opts && opts.deep) {\n      for (key in this) {\n        if (this.hasOwnProperty(key)) {\n          result[key] = asDeepMutable(this[key]);\n        }\n      }\n    } else {\n      for (key in this) {\n        if (this.hasOwnProperty(key)) {\n          result[key] = this[key];\n        }\n      }\n    }\n\n    return result;\n  }\n\n  // Creates plain object to be used for cloning\n  function instantiatePlainObject() {\n    return {};\n  }\n\n  // Finalizes an object with immutable methods, freezes it, and returns it.\n  function makeImmutableObject(obj) {\n    if (!globalConfig.use_static) {\n      addPropertyTo(obj, \"merge\", merge);\n      addPropertyTo(obj, \"replace\", objectReplace);\n      addPropertyTo(obj, \"without\", without);\n      addPropertyTo(obj, \"asMutable\", asMutableObject);\n      addPropertyTo(obj, \"set\", objectSet);\n      addPropertyTo(obj, \"setIn\", objectSetIn);\n      addPropertyTo(obj, \"update\", update);\n      addPropertyTo(obj, \"updateIn\", updateIn);\n      addPropertyTo(obj, \"getIn\", getIn);\n    }\n\n    return makeImmutable(obj, mutatingObjectMethods);\n  }\n\n  // Returns true if object is a valid react element\n  // https://github.com/facebook/react/blob/v15.0.1/src/isomorphic/classic/element/ReactElement.js#L326\n  function isReactElement(obj) {\n    return typeof obj === 'object' &&\n           obj !== null &&\n           (obj.$$typeof === REACT_ELEMENT_TYPE_FALLBACK || obj.$$typeof === REACT_ELEMENT_TYPE);\n  }\n\n  function isFileObject(obj) {\n    return typeof File !== 'undefined' &&\n           obj instanceof File;\n  }\n\n  function isBlobObject(obj) {\n    return typeof Blob !== 'undefined' &&\n           obj instanceof Blob;\n  }\n\n  function isPromise(obj) {\n    return typeof obj === 'object' &&\n           typeof obj.then === 'function';\n  }\n\n  function isError(obj) {\n    return obj instanceof Error;\n  }\n\n  function Immutable(obj, options, stackRemaining) {\n    if (isImmutable(obj) || isReactElement(obj) || isFileObject(obj) || isBlobObject(obj) || isError(obj)) {\n      return obj;\n    } else if (isPromise(obj)) {\n      return obj.then(Immutable);\n    } else if (Array.isArray(obj)) {\n      return makeImmutableArray(obj.slice());\n    } else if (obj instanceof Date) {\n      return makeImmutableDate(new Date(obj.getTime()));\n    } else {\n      // Don't freeze the object we were given; make a clone and use that.\n      var prototype = options && options.prototype;\n      var instantiateEmptyObject =\n        (!prototype || prototype === Object.prototype) ?\n          instantiatePlainObject : (function() { return Object.create(prototype); });\n      var clone = instantiateEmptyObject();\n\n      if (\"development\" !== \"production\") {\n        /*jshint eqnull:true */\n        if (stackRemaining == null) {\n          stackRemaining = 64;\n        }\n        if (stackRemaining <= 0) {\n          throw new ImmutableError(\"Attempt to construct Immutable from a deeply nested object was detected.\" +\n            \" Have you tried to wrap an object with circular references (e.g. React element)?\" +\n            \" See https://github.com/rtfeldman/seamless-immutable/wiki/Deeply-nested-object-was-detected for details.\");\n        }\n        stackRemaining -= 1;\n      }\n\n      for (var key in obj) {\n        if (Object.getOwnPropertyDescriptor(obj, key)) {\n          clone[key] = Immutable(obj[key], undefined, stackRemaining);\n        }\n      }\n\n      return makeImmutableObject(clone);\n    }\n  }\n\n  // Wrapper to allow the use of object methods as static methods of Immutable.\n  function toStatic(fn) {\n    function staticWrapper() {\n      var args = [].slice.call(arguments);\n      var self = args.shift();\n      return fn.apply(self, args);\n    }\n\n    return staticWrapper;\n  }\n\n  // Wrapper to allow the use of object methods as static methods of Immutable.\n  // with the additional condition of choosing which function to call depending\n  // if argument is an array or an object.\n  function toStaticObjectOrArray(fnObject, fnArray) {\n    function staticWrapper() {\n      var args = [].slice.call(arguments);\n      var self = args.shift();\n      if (Array.isArray(self)) {\n          return fnArray.apply(self, args);\n      } else {\n          return fnObject.apply(self, args);\n      }\n    }\n\n    return staticWrapper;\n  }\n\n  // Wrapper to allow the use of object methods as static methods of Immutable.\n  // with the additional condition of choosing which function to call depending\n  // if argument is an array or an object or a date.\n  function toStaticObjectOrDateOrArray(fnObject, fnArray, fnDate) {\n    function staticWrapper() {\n      var args = [].slice.call(arguments);\n      var self = args.shift();\n      if (Array.isArray(self)) {\n          return fnArray.apply(self, args);\n      } else if (self instanceof Date) {\n          return fnDate.apply(self, args);\n      } else {\n          return fnObject.apply(self, args);\n      }\n    }\n\n    return staticWrapper;\n  }\n\n  // Export the library\n  Immutable.from           = Immutable;\n  Immutable.isImmutable    = isImmutable;\n  Immutable.ImmutableError = ImmutableError;\n  Immutable.merge          = toStatic(merge);\n  Immutable.replace        = toStatic(objectReplace);\n  Immutable.without        = toStatic(without);\n  Immutable.asMutable      = toStaticObjectOrDateOrArray(asMutableObject, asMutableArray, asMutableDate);\n  Immutable.set            = toStaticObjectOrArray(objectSet, arraySet);\n  Immutable.setIn          = toStaticObjectOrArray(objectSetIn, arraySetIn);\n  Immutable.update         = toStatic(update);\n  Immutable.updateIn       = toStatic(updateIn);\n  Immutable.getIn          = toStatic(getIn);\n  Immutable.flatMap        = toStatic(flatMap);\n  Immutable.asObject       = toStatic(asObject);\n  if (!globalConfig.use_static) {\n      Immutable.static = immutableInit({\n          use_static: true\n      });\n  }\n\n  Object.freeze(Immutable);\n\n  return Immutable;\n}\n\n  var Immutable = immutableInit();\n  /* istanbul ignore if */\n  if (typeof define === 'function' && define.amd) {\n    define(function() {\n      return Immutable;\n    });\n  } else if (typeof module === \"object\") {\n    module.exports = Immutable;\n  } else if (typeof exports === \"object\") {\n    exports.Immutable = Immutable;\n  } else if (typeof window === \"object\") {\n    window.Immutable = Immutable;\n  } else if (typeof global === \"object\") {\n    global.Immutable = Immutable;\n  }\n})();\n"],"sourceRoot":""}