{"version":3,"file":"js/537.8d75feaedef3361f0f5a.js","mappings":"i5BAQO,SAASA,EAAaC,GACzB,GAAIA,EACA,MAAO,CACHA,EAAaC,SAAWD,EAAaC,QAAQC,OAAS,GAAtD,UAA8DF,EAAaC,QAAQC,OAAnF,YACAF,EAAaG,UAAYH,EAAaG,SAASD,OAAS,GAAxD,UAAgEF,EAAaG,SAASD,OAAtF,cACFE,OAAOC,SAASC,KAAK,OAI/B,IAAMC,EAAoB,SAAC,GAAD,UACtBC,EADsB,EACtBA,aACAC,EAFsB,EAEtBA,cACAC,EAHsB,EAGtBA,YACAC,EAJsB,EAItBA,YACAC,EALsB,EAKtBA,YACAC,EANsB,EAMtBA,aACAC,EAPsB,EAOtBA,gBACAC,EARsB,EAQtBA,MARsB,OASnB,kBAAC,IAAD,CACHC,MAAM,gBACNC,WAAaT,EACbU,MAAK,kBACEP,EAAc,CAAC,CACdK,MAAO,qBACPG,MAAK,UAAEV,EAAcW,gBAAhB,aAAE,EAAwBlB,OAC/BmB,SAAU,UACVC,OAAQ,qBACRC,QAAS,WACLb,EACI,sBACAc,EAAAA,EAAAA,eAAcf,EAAcW,SAAU,oBAG7C,KAZJ,OAaER,EAAc,CAAC,CACdI,MAAO,WACPG,MAAK,UAAEV,EAAcgB,gBAAhB,aAAE,EAAwBvB,OAC/BmB,SAAU,UACVC,OAAQ,WACRC,QAAS,WACLb,EACI,YACAc,EAAAA,EAAAA,eAAcf,EAAcgB,SAAU,oBAG7C,KAxBJ,OAyBEZ,EAAe,CAAC,CACfG,MAAO,oBACPG,MAAK,UAAEV,EAAciB,iBAAhB,aAAE,EAAyBxB,OAChCmB,SAAU,UACVM,OAAQ,YACRL,OAAQ,oBACRC,QAAS,WACLb,EACI,qBACAc,EAAAA,EAAAA,eAAcf,EAAciB,UAAW,oBAG9C,KArCJ,OAsCEZ,EAAkB,CAAC,CAClBE,MAAO,eACPG,MAAOpB,EAAaU,EAAcT,cAClCsB,OAAQ,eACRC,QAAS,WACLb,EACI,gBACAkB,EAAAA,EAAAA,oBAAmBnB,EAAcT,cACjC,aAGP,KAjDJ,OAkDEe,EAAMc,KAAI,gBAAGN,EAAH,EAAGA,QAAH,4BAENA,GAAW,CAAEA,QAAS,SAACO,GAAD,OAAOP,EAAQO,EAAGpB,cAKvDH,EAAkBwB,UAAY,CAC1BvB,aAAcwB,IAAAA,KACdtB,YAAasB,IAAAA,KACbvB,cAAeuB,IAAAA,MAAgB,CAC3BZ,SAAUY,IAAAA,QAAkBA,IAAAA,QAC5BP,SAAUO,IAAAA,QAAkBA,IAAAA,QAC5BN,UAAWM,IAAAA,QAAkBA,IAAAA,QAC7BhC,aAAcgC,IAAAA,MAAgB,CAC1B/B,QAAS+B,IAAAA,QAAkBA,IAAAA,MAAgB,CAEvCC,SAAUD,IAAAA,OACVE,KAAMF,IAAAA,OACN/B,QAAS+B,IAAAA,KACTG,SAAUH,IAAAA,QAEd7B,SAAU6B,IAAAA,QAAkBA,IAAAA,MAAgB,CAExCC,SAAUD,IAAAA,OACVE,KAAMF,IAAAA,OACN/B,QAAS+B,IAAAA,KACTG,SAAUH,IAAAA,YAItBrB,YAAaqB,IAAAA,KACbpB,YAAaoB,IAAAA,KACbnB,aAAcmB,IAAAA,KACdlB,gBAAiBkB,IAAAA,KACjBjB,MAAOiB,IAAAA,QAAkBI,EAAAA,KAE7B7B,EAAkB8B,aAAe,CAC7B7B,cAAc,EACdE,YAAa,aACbC,aAAa,EACbC,aAAa,EACbC,cAAc,EACdC,iBAAiB,EACjBC,MAAO,IAGX,SAAeuB,EAAAA,EAAAA,UAAQ,gBAEfC,EAFe,EACnBC,mBACID,cAFe,MAIhB,CACH/B,aAAc+B,GAAiBA,EAAcE,OAC7ChC,eAAeiC,EAAAA,EAAAA,IAAsBH,MANzC,CAOIhC","sources":["webpack:///./src/components/GeneralInfo/ConfigurationCard/ConfigurationCard.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport LoadingCard from '../LoadingCard';\nimport { generalMapper, repositoriesMapper } from '../dataMapper';\nimport { configurationSelector } from '../selectors';\nimport { extraShape } from '../../../constants';\n\nexport function enabledRepos(repositories) {\n    if (repositories) {\n        return [\n            repositories.enabled && repositories.enabled.length > 0 && `${repositories.enabled.length} enabled`,\n            repositories.disabled && repositories.disabled.length > 0 && `${repositories.disabled.length} disabled`\n        ].filter(Boolean).join(' / ');\n    }\n}\n\nconst ConfigurationCard = ({\n    detailLoaded,\n    configuration,\n    handleClick,\n    hasPackages,\n    hasServices,\n    hasProcesses,\n    hasRepositories,\n    extra\n}) => (<LoadingCard\n    title=\"Configuration\"\n    isLoading={ !detailLoaded }\n    items={ [\n        ...hasPackages ? [{\n            title: 'Installed packages',\n            value: configuration.packages?.length,\n            singular: 'package',\n            target: 'installed_packages',\n            onClick: () => {\n                handleClick(\n                    'Installed packages',\n                    generalMapper(configuration.packages, 'Package name')\n                );\n            }\n        }] : [],\n        ...hasServices ? [{\n            title: 'Services',\n            value: configuration.services?.length,\n            singular: 'service',\n            target: 'services',\n            onClick: () => {\n                handleClick(\n                    'Services',\n                    generalMapper(configuration.services, 'Service name')\n                );\n            }\n        }] : [],\n        ...hasProcesses ? [{\n            title: 'Running processes',\n            value: configuration.processes?.length,\n            singular: 'process',\n            plural: 'processes',\n            target: 'running_processes',\n            onClick: () => {\n                handleClick(\n                    'Running processes',\n                    generalMapper(configuration.processes, 'Process name')\n                );\n            }\n        }] : [],\n        ...hasRepositories ? [{\n            title: 'Repositories',\n            value: enabledRepos(configuration.repositories),\n            target: 'repositories',\n            onClick: () => {\n                handleClick(\n                    'Repositories',\n                    repositoriesMapper(configuration.repositories),\n                    'medium'\n                );\n            }\n        }] : [],\n        ...extra.map(({ onClick, ...item }) => ({\n            ...item,\n            ...onClick && { onClick: (e) => onClick(e, handleClick) }\n        }))\n    ] }\n/>);\n\nConfigurationCard.propTypes = {\n    detailLoaded: PropTypes.bool,\n    handleClick: PropTypes.func,\n    configuration: PropTypes.shape({\n        packages: PropTypes.arrayOf(PropTypes.string),\n        services: PropTypes.arrayOf(PropTypes.string),\n        processes: PropTypes.arrayOf(PropTypes.string),\n        repositories: PropTypes.shape({\n            enabled: PropTypes.arrayOf(PropTypes.shape({\n                // eslint-disable-next-line camelcase\n                base_url: PropTypes.string,\n                name: PropTypes.string,\n                enabled: PropTypes.bool,\n                gpgcheck: PropTypes.bool\n            })),\n            disabled: PropTypes.arrayOf(PropTypes.shape({\n                // eslint-disable-next-line camelcase\n                base_url: PropTypes.string,\n                name: PropTypes.string,\n                enabled: PropTypes.bool,\n                gpgcheck: PropTypes.bool\n            }))\n        })\n    }),\n    hasPackages: PropTypes.bool,\n    hasServices: PropTypes.bool,\n    hasProcesses: PropTypes.bool,\n    hasRepositories: PropTypes.bool,\n    extra: PropTypes.arrayOf(extraShape)\n};\nConfigurationCard.defaultProps = {\n    detailLoaded: false,\n    handleClick: () => undefined,\n    hasPackages: true,\n    hasServices: true,\n    hasProcesses: true,\n    hasRepositories: true,\n    extra: []\n};\n\nexport default connect(({\n    systemProfileStore: {\n        systemProfile\n    }\n}) => ({\n    detailLoaded: systemProfile && systemProfile.loaded,\n    configuration: configurationSelector(systemProfile)\n}))(ConfigurationCard);\n"],"names":["enabledRepos","repositories","enabled","length","disabled","filter","Boolean","join","ConfigurationCard","detailLoaded","configuration","handleClick","hasPackages","hasServices","hasProcesses","hasRepositories","extra","title","isLoading","items","value","packages","singular","target","onClick","generalMapper","services","processes","plural","repositoriesMapper","map","e","propTypes","PropTypes","base_url","name","gpgcheck","extraShape","defaultProps","connect","systemProfile","systemProfileStore","loaded","configurationSelector"],"sourceRoot":""}