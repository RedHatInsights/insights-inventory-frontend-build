{"version":3,"file":"js/5855.9d92cefd3921f0cd6e78.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-core/dist/esm/components/Card/CardFooter.js","webpack:///./node_modules/@patternfly/react-core/dist/esm/components/Card/CardTitle.js","webpack:///./node_modules/@patternfly/react-core/dist/esm/components/Dropdown/Dropdown.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/Dark/DarkContext.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/PageHeader/PageHeader.js","webpack:///./src/components/InventoryDetail/TopBar.js","webpack:///./src/components/InventoryDetail/InsightsPrompt.js","webpack:///./src/components/InventoryDetail/DetailHeader.js","webpack:///./src/components/InventoryDetail/FactsInfo.js","webpack:///./src/components/InventoryDetail/helpers.js"],"sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Card/card';\nimport { css } from '@patternfly/react-styles';\nexport const CardFooter = (_a) => {\n    var { children = null, className = '', component = 'div' } = _a, props = __rest(_a, [\"children\", \"className\", \"component\"]);\n    const Component = component;\n    return (React.createElement(Component, Object.assign({ className: css(styles.cardFooter, className) }, props), children));\n};\nCardFooter.displayName = 'CardFooter';\n//# sourceMappingURL=CardFooter.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Card/card';\nimport { CardContext } from './Card';\nexport const CardTitle = (_a) => {\n    var { children = null, className = '', component = 'div' } = _a, props = __rest(_a, [\"children\", \"className\", \"component\"]);\n    const { cardId, registerTitleId } = React.useContext(CardContext);\n    const Component = component;\n    const titleId = cardId ? `${cardId}-title` : '';\n    React.useEffect(() => {\n        registerTitleId(titleId);\n        return () => registerTitleId('');\n    }, [registerTitleId, titleId]);\n    return (React.createElement(Component, Object.assign({ className: css(styles.cardTitle, className), id: titleId || undefined }, props), children));\n};\nCardTitle.displayName = 'CardTitle';\n//# sourceMappingURL=CardTitle.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Dropdown/dropdown';\nimport { DropdownContext } from './dropdownConstants';\nimport { DropdownWithContext } from './DropdownWithContext';\nimport { useOUIAId } from '../../helpers';\nexport const Dropdown = (_a) => {\n    var { onSelect, \n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    ref, // Types of Ref are different for React.FunctionComponent vs React.Component\n    ouiaId, ouiaSafe, alignments, contextProps, menuAppendTo = 'inline', isFlipEnabled = true, removeFindDomNode = false, zIndex = 9999 } = _a, props = __rest(_a, [\"onSelect\", \"ref\", \"ouiaId\", \"ouiaSafe\", \"alignments\", \"contextProps\", \"menuAppendTo\", \"isFlipEnabled\", \"removeFindDomNode\", \"zIndex\"]);\n    return (React.createElement(DropdownContext.Provider, { value: Object.assign({ onSelect: event => onSelect && onSelect(event), toggleTextClass: styles.dropdownToggleText, toggleIconClass: styles.dropdownToggleImage, toggleIndicatorClass: styles.dropdownToggleIcon, menuClass: styles.dropdownMenu, itemClass: styles.dropdownMenuItem, toggleClass: styles.dropdownToggle, baseClass: styles.dropdown, baseComponent: 'div', sectionClass: styles.dropdownGroup, sectionTitleClass: styles.dropdownGroupTitle, sectionComponent: 'section', disabledClass: styles.modifiers.disabled, plainTextClass: styles.modifiers.text, ouiaId: useOUIAId(Dropdown.displayName, ouiaId), ouiaSafe, ouiaComponentType: Dropdown.displayName, alignments }, contextProps) },\n        React.createElement(DropdownWithContext, Object.assign({ menuAppendTo: menuAppendTo, isFlipEnabled: isFlipEnabled, removeFindDomNode: removeFindDomNode, zIndex: zIndex }, props))));\n};\nDropdown.displayName = 'Dropdown';\n//# sourceMappingURL=Dropdown.js.map","import React from 'react';\nvar DarkContext = React.createContext('light');\nexport default DarkContext;\n//# sourceMappingURL=DarkContext.js.map","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport classNames from 'classnames';\nimport { DarkContext } from '../Dark';\nimport '../PageHeader/page-header.css';\nvar PageHeader = function (_a) {\n    var className = _a.className, children = _a.children, props = __rest(_a, [\"className\", \"children\"]);\n    var pageHeaderClasses = classNames(className, 'pf-l-page-header', 'pf-c-page-header', 'pf-l-page__main-section', 'pf-c-page__main-section');\n    return (_jsx(DarkContext.Consumer, { children: function (theme) {\n            var _a, _b;\n            if (theme === void 0) { theme = 'light'; }\n            var themeClasses = classNames((_a = {}, _a[\"pf-m-\".concat(theme, \"-200\")] = theme === 'dark', _a), (_b = {}, _b[\"pf-m-light\"] = theme === 'light', _b));\n            return (_jsx(\"section\", __assign({}, props, { className: \"\".concat(pageHeaderClasses, \" \").concat(themeClasses), \"widget-type\": \"InsightsPageHeader\" }, { children: children })));\n        } }));\n};\nexport default PageHeader;\n//# sourceMappingURL=PageHeader.js.map","import React, { Fragment, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { DeleteModal, TagsModal, TagWithDialog } from '../../Utilities/index';\nimport { Skeleton, SkeletonSize } from '@redhat-cloud-services/frontend-components/Skeleton';\nimport {\n    Dropdown,\n    DropdownItem,\n    DropdownPosition,\n    DropdownToggle,\n    Title,\n    Button,\n    Flex,\n    FlexItem,\n    Split,\n    SplitItem\n} from '@patternfly/react-core';\nimport { redirectToInventoryList } from './helpers';\nimport { useDispatch } from 'react-redux';\nimport { toggleDrawer } from '../../store/actions';\n\n/**\n * Top inventory bar with title, buttons (namely remove from inventory and inventory detail button) and actions.\n * Remove from inventory button requires remove modal, which is included at bottom of this component.\n * @param {*} props namely entity and if entity is loaded.\n */\nconst TopBar = ({\n    entity,\n    loaded,\n    actions,\n    deleteEntity,\n    addNotification,\n    hideInvLink,\n    onBackToListClick,\n    showDelete,\n    showInventoryDrawer,\n    TitleWrapper,\n    TagsWrapper,\n    DeleteWrapper,\n    ActionsWrapper,\n    showTags\n}) => {\n    const dispatch = useDispatch();\n    const [isOpen, setIsOpen] = useState(false);\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const inventoryActions = [\n        ...(!hideInvLink ? [{\n            title: 'View system in Inventory',\n            component: 'a',\n            href: `./insights/inventory/${entity?.id}`\n        }] : []),\n        ... actions || []\n    ];\n\n    return (\n        <Split className=\"ins-c-inventory__detail--header\">\n            <SplitItem isFilled>\n                {\n                    loaded ? (\n                        <Flex>\n                            <FlexItem>\n                                <TitleWrapper>\n                                    <Title headingLevel=\"h1\" size='2xl'>{ entity && entity.display_name }</Title>\n                                </TitleWrapper>\n                            </FlexItem>\n                            {\n                                showTags &&\n                                <FlexItem>\n                                    <TagsWrapper>\n                                        <TagWithDialog\n                                            count={ entity && entity.tags && entity.tags.length }\n                                            systemId={ entity && entity.id }\n                                        />\n                                        <TagsModal />\n                                    </TagsWrapper>\n                                </FlexItem>\n                            }\n                        </Flex>\n                    ) :\n                        <Skeleton size={ SkeletonSize.md } />\n                }\n            </SplitItem>\n            {\n                <SplitItem>\n                    {\n                        loaded ?\n                            <Flex>\n                                {showDelete && <FlexItem>\n                                    <DeleteWrapper>\n                                        <Button\n                                            onClick={ () => setIsModalOpen(true) }\n                                            variant=\"secondary\">\n                                        Delete\n                                        </Button>\n                                    </DeleteWrapper>\n                                </FlexItem>}\n                                { inventoryActions?.length > 0 && (\n                                    <FlexItem>\n                                        <ActionsWrapper>\n                                            <Dropdown\n                                                onSelect={ () => setIsOpen(false) }\n                                                toggle={ <DropdownToggle\n                                                    onToggle={(isOpen) => setIsOpen(isOpen)}\n                                                >Actions</DropdownToggle>}\n                                                isOpen={ isOpen }\n                                                position={ DropdownPosition.right }\n                                                dropdownItems={\n                                                    inventoryActions.map(({ title, ...action }, key) => (\n                                                        <DropdownItem\n                                                            key={ key }\n                                                            component=\"button\"\n                                                            onClick={\n                                                                (event) => action.onClick(event, action, action.key || key)\n                                                            }\n                                                            {...action}\n                                                        >\n                                                            { title }\n                                                        </DropdownItem>)\n                                                    ) }\n                                            />\n                                        </ActionsWrapper>\n                                    </FlexItem>)}\n                                <FlexItem>\n                                    {\n                                        showInventoryDrawer &&\n                                        <Button onClick={() => dispatch(toggleDrawer(true))}>\n                                            Show more information\n                                        </Button>\n                                    }\n                                </FlexItem>\n                            </Flex>\n                            :\n                            <Skeleton size={ SkeletonSize.lg } />\n                    }\n                </SplitItem>\n            }\n            { isModalOpen && (\n                <DeleteModal\n                    className ='sentry-mask data-hj-suppress'\n                    handleModalToggle={() => setIsModalOpen(!isModalOpen)}\n                    isModalOpen={isModalOpen}\n                    currentSytems={entity}\n                    onConfirm={() => {\n                        addNotification({\n                            id: 'remove-initiated',\n                            variant: 'warning',\n                            title: 'Delete operation initiated',\n                            description: `Removal of ${entity.display_name} started.`,\n                            dismissable: false\n                        });\n                        deleteEntity(\n                            [entity.id],\n                            entity.display_name,\n                            () => redirectToInventoryList(entity.id, onBackToListClick)\n                        );\n                        setIsModalOpen(false);\n                    }}\n                />)}\n        </Split>\n    );\n};\n\nTopBar.propTypes = {\n    entity: PropTypes.object,\n    loaded: PropTypes.bool,\n    showDelete: PropTypes.bool,\n    hideInvLink: PropTypes.bool,\n    showInventoryDrawer: PropTypes.bool,\n    showTags: PropTypes.bool,\n    actions: PropTypes.arrayOf(PropTypes.shape({\n        key: PropTypes.string,\n        title: PropTypes.node,\n        onClick: PropTypes.func\n    })),\n    deleteEntity: PropTypes.func,\n    addNotification: PropTypes.func,\n    onBackToListClick: PropTypes.func,\n    TitleWrapper: PropTypes.elementType,\n    TagsWrapper: PropTypes.elementType,\n    DeleteWrapper: PropTypes.elementType,\n    ActionsWrapper: PropTypes.elementType\n};\n\nTopBar.defaultProps = {\n    actions: [],\n    loaded: false,\n    hideInvLink: false,\n    showDelete: false,\n    showInventoryDrawer: false,\n    deleteEntity: () => undefined,\n    addNotification: () => undefined,\n    onBackToListClick: () => undefined,\n    TitleWrapper: Fragment,\n    TitleWTagsWrapperrapper: Fragment,\n    DeleteWrapper: Fragment,\n    ActionsWrapper: Fragment\n};\n\nexport default TopBar;\n","import React from 'react';\nimport {\n    Alert, Grid, GridItem, Text, TextContent, TextVariants, TextList, TextListItem,\n    Card, CardTitle, CardFooter, CardBody, ClipboardCopy, Button } from '@patternfly/react-core';\n\nconst InsightsPrompt = () => {\n    return (\n        <Alert variant=\"info\" isInline title=\"Your insights-client is not reporting\">\n            <Grid>\n                <GridItem>\n                    <Grid hasGutter>\n                        <GridItem span={4}>\n                            <TextContent style={{ '--pf-c-content--LineHeight': '1', '--pf-c-content--FontSize': '0.9rem' }}>\n                                <Text component={TextVariants.p}>\n                                    With Insights you can easly:\n                                </Text>\n                                <TextList\n                                    component='ul'\n                                    style={{ '--pf-c-content--ul--PaddingLeft': '0', '--pf-c-content--ul--MarginLeft': '1rem' }}\n                                >\n                                    <TextListItem>Optimize your IT Operations</TextListItem>\n                                    <TextListItem>Manage your security and compliance</TextListItem>\n                                    <TextListItem>Resolve operational issues quickly</TextListItem>\n                                </TextList>\n                            </TextContent>\n                        </GridItem>\n                        <GridItem span={4}>\n                            <Card isCompact>\n                                <CardTitle>Client setup</CardTitle>\n                                <CardBody>Make sure the client is properly installed and registered</CardBody>\n                                <CardFooter>\n                                    <ClipboardCopy isCode isReadOnly variant={'expansion'}>\n                                        {'yum install -y insights-client \\ninsights-client --register'}\n                                    </ClipboardCopy>\n                                </CardFooter>\n                            </Card>\n                        </GridItem>\n                        <GridItem span={4}>\n                            <Card isCompact style={{ height: '100%' }}>\n                                <CardTitle>Configure troubleshooting</CardTitle>\n                                <CardBody>Proceed with verification on the client to ensure insights-client is\n                                    properly running and collecting data</CardBody>\n                                <CardFooter>\n                                    <Button component=\"a\" target=\"_blank\"\n                                        variant=\"link\" href='https://access.redhat.com/solutions/6758841' isInline\n                                    >\n                                        Host not reporting data to Red Hat Insights\n                                    </Button>\n                                </CardFooter>\n                            </Card>\n                        </GridItem>\n                    </Grid>\n                </GridItem>\n                <GridItem>\n                    <Button component=\"a\" target=\"_blank\" variant=\"link\"\n                        href='https://console.redhat.com/security/insights' isInline\n                    >\n                        How does Red Hat keep data secure?\n                    </Button>\n                </GridItem>\n            </Grid>\n        </Alert>\n    );\n};\n\nexport default InsightsPrompt;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport './InventoryDetail.scss';\nimport TopBar from './TopBar';\nimport FactsInfo from './FactsInfo';\nimport './InventoryDetail.scss';\nimport InsightsPrompt from './InsightsPrompt';\nimport { verifyCulledInsightsClient } from '../../Utilities/sharedFunctions';\nimport { PageHeader } from '@redhat-cloud-services/frontend-components';\nimport classnames from 'classnames';\n\nconst HeaderInfo = ({ entity, loaded, UUIDWrapper, LastSeenWrapper, children, ...props }) => (<Fragment>\n    <TopBar\n        entity={entity}\n        loaded={loaded}\n        {...props}\n    />\n    <FactsInfo\n        loaded={loaded}\n        entity={entity}\n        UUIDWrapper={UUIDWrapper}\n        LastSeenWrapper={LastSeenWrapper}\n    />\n    {(loaded && verifyCulledInsightsClient(entity?.per_reporter_staleness)) && <InsightsPrompt />}\n    {children}\n</Fragment>);\n\nconst DetailHeader = ({ shouldWrapAsPage, BreadcrumbWrapper, additionalClasses, ...props }) => {\n    return (shouldWrapAsPage ?\n        (<PageHeader className={classnames('pf-m-light ins-inventory-detail', additionalClasses)} >\n            {BreadcrumbWrapper}\n            <HeaderInfo {...props}/>\n        </PageHeader>) : <HeaderInfo  {...props} />);\n};\n\nHeaderInfo.propTypes = {\n    hideInvLink: PropTypes.bool,\n    showTags: PropTypes.bool,\n    showDelete: PropTypes.bool,\n    showInventoryDrawer: PropTypes.bool,\n    actions: PropTypes.arrayOf(PropTypes.shape({\n        title: PropTypes.node,\n        onClick: PropTypes.func,\n        key: PropTypes.string\n    })),\n    onBackToListClick: PropTypes.func,\n    children: PropTypes.node,\n    UUIDWrapper: PropTypes.elementType,\n    LastSeenWrapper: PropTypes.elementType,\n    TitleWrapper: PropTypes.elementType,\n    TagsWrapper: PropTypes.elementType,\n    DeleteWrapper: PropTypes.elementType,\n    ActionsWrapper: PropTypes.elementType,\n    inventoryId: PropTypes.string,\n    deleteEntity: PropTypes.func,\n    entity: PropTypes.object,\n    loaded: PropTypes.bool,\n    addNotification: PropTypes.func\n};\nDetailHeader.propTypes = {\n    BreadcrumbWrapper: PropTypes.elementType,\n    shouldWrapAsPage: PropTypes.bool,\n    additionalClasses: PropTypes.object\n};\n\nexport default DetailHeader;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { Grid, GridItem, Flex, FlexItem } from '@patternfly/react-core';\nimport { Skeleton, SkeletonSize } from '@redhat-cloud-services/frontend-components/Skeleton';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { CullingInformation } from '@redhat-cloud-services/frontend-components/CullingInfo';\nimport { getFact } from './helpers';\nimport InsightsDisconnected from '../../Utilities/InsightsDisconnected';\nimport { verifyCulledInsightsClient } from '../../Utilities/sharedFunctions';\n/**\n * Basic information about system.\n * UUID and last seen.\n * @param {*} props entity and if entity is loaded.\n */\nconst FactsInfo = ({ entity, loaded, UUIDWrapper, LastSeenWrapper, ...props }) => (\n    <Grid className=\"ins-entity-facts\" { ...props }>\n        <GridItem md={ 6 }>\n            <Flex>\n                <FlexItem>UUID:</FlexItem>\n                <FlexItem grow={{ default: 'grow' }}>\n                    {loaded ? getFact(`id`, entity) || ' ' : <Skeleton size={SkeletonSize.md} fontSize=\"sm\" />}\n                </FlexItem>\n            </Flex>\n            <Flex>\n                <FlexItem>Last seen:</FlexItem>\n                <FlexItem grow={{ default: 'grow' }}>\n                    {\n                        loaded ?\n                            <LastSeenWrapper>{\n                                (\n                                    CullingInformation ? <CullingInformation\n                                        culled={getFact('culled_timestamp', entity)}\n                                        staleWarning={getFact('stale_warning_timestamp', entity)}\n                                        stale={getFact('stale_timestamp', entity)}\n                                        currDate={new Date()}\n                                    >\n                                        <DateFormat date={getFact('updated', entity)} type=\"exact\" />\n                                    </CullingInformation> : <DateFormat date={getFact('updated', entity)} type=\"exact\" />\n                                )}\n                            </LastSeenWrapper> :\n                            <Skeleton size={SkeletonSize.md} fontSize=\"sm\" />\n                    }\n                    {loaded && verifyCulledInsightsClient(getFact('per_reporter_staleness', entity)) && <InsightsDisconnected />}\n                </FlexItem>\n            </Flex>\n        </GridItem>\n    </Grid>\n);\n\nFactsInfo.propTypes = {\n    loaded: PropTypes.bool,\n    entity: PropTypes.object,\n    UUIDWrapper: PropTypes.elementType,\n    LastSeenWrapper: PropTypes.elementType\n};\n\nFactsInfo.defaultProps = {\n    UUIDWrapper: Fragment,\n    LastSeenWrapper: Fragment\n};\n\nexport default FactsInfo;\n","import get from 'lodash/get';\n\nexport const redirectToInventoryList = (id, onBackToListClick) => {\n    if (onBackToListClick) {\n        onBackToListClick();\n    } else {\n        /**\n         * Prevent the case that refferer has the same URL as current browser URL is\n         */\n        if (document.referrer && document.referrer !== `${document.location.origin}${document.location.pathname}`) {\n            history.back();\n        } else {\n            location.href = location.pathname.replace(new RegExp(`${[id]}.*`, 'g'), '');\n        }\n    }\n};\n\nexport const getFact = (path, factDict) => get(factDict, path, undefined);\n"],"names":["CardFooter","_a","children","className","component","props","__rest","Component","Object","assign","displayName","CardTitle","cardId","registerTitleId","titleId","id","undefined","Dropdown","onSelect","ref","ouiaId","ouiaSafe","alignments","contextProps","menuAppendTo","isFlipEnabled","removeFindDomNode","zIndex","value","event","toggleTextClass","toggleIconClass","toggleIndicatorClass","menuClass","itemClass","toggleClass","baseClass","baseComponent","sectionClass","sectionTitleClass","sectionComponent","disabledClass","plainTextClass","ouiaComponentType","__assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","pageHeaderClasses","theme","_b","themeClasses","concat","TopBar","entity","loaded","actions","deleteEntity","addNotification","hideInvLink","onBackToListClick","showDelete","showInventoryDrawer","TitleWrapper","TagsWrapper","DeleteWrapper","ActionsWrapper","showTags","dispatch","useDispatch","useState","isOpen","setIsOpen","isModalOpen","setIsModalOpen","inventoryActions","title","href","Split","SplitItem","isFilled","Flex","FlexItem","Title","headingLevel","size","display_name","TagWithDialog","count","tags","systemId","TagsModal","Skeleton","SkeletonSize","Button","onClick","variant","toggle","DropdownToggle","onToggle","position","DropdownPosition","dropdownItems","map","key","action","DropdownItem","toggleDrawer","DeleteModal","handleModalToggle","currentSytems","onConfirm","description","dismissable","redirectToInventoryList","propTypes","PropTypes","defaultProps","Fragment","TitleWTagsWrapperrapper","Alert","isInline","Grid","GridItem","hasGutter","span","TextContent","style","Text","TextVariants","TextList","TextListItem","T","Card","isCompact","CardBody","ClipboardCopy","isCode","isReadOnly","height","target","HeaderInfo","UUIDWrapper","LastSeenWrapper","FactsInfo","verifyCulledInsightsClient","per_reporter_staleness","DetailHeader","shouldWrapAsPage","BreadcrumbWrapper","additionalClasses","PageHeader","classnames","inventoryId","md","grow","default","getFact","fontSize","CullingInformation","culled","staleWarning","stale","currDate","Date","date","type","document","referrer","location","origin","pathname","history","back","replace","RegExp","path","factDict","get"],"sourceRoot":""}