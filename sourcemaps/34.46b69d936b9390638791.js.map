{"version":3,"sources":["webpack:///./src/Utilities/constants.js","webpack:///./src/components/DeleteModal.js","webpack:///./src/routes/InventoryTable.js"],"names":["defaultFilters","staleFilter","registeredWithFilter","isEmpty","check","length","generateFilter","status","source","tagsFilter","filterbyName","Array","isArray","tagFilters","value","filter","Boolean","DeleteModal","systemToRemove","handleModalToggle","isModalOpen","currentSytem","onConfirm","systemLabel","display_name","displayName","variant","title","className","isOpen","onClose","appendTo","document","getElementsByClassName","hasGutter","size","isFilled","location","host","onClick","ouiaId","ActiveSystemProp","PropTypes","id","propTypes","defaultProps","reloadWrapper","event","callback","payload","then","calculateChecked","rows","selected","every","has","some","mapTags","category","values","map","tagKey","filterMapper","searchParams","forEach","item","append","flatMap","calculatePagination","page","perPage","currSearch","URLSearchParams","search","newPage","undefined","get","newPerPage","isNaN","parseInt","Inventory","history","useHistory","getRegistry","useContext","RegistryContext","inventory","useRef","useState","activateSystem","filters","onSetfilters","ediOpen","onEditOpen","globalFilter","setGlobalFilter","useSelector","permissionsReducer","loading","writePermissions","shallowEqual","entities","loaded","dispatch","useDispatch","onSelectRows","isSelected","actions","onRefresh","options","reduce","acc","curr","Object","keys","key","calculateFilters","per_page","toString","push","hash","current","onRefreshData","useEffect","insights","chrome","hideGlobalFilter","appAction","appObjectId","on","data","mapGlobalFilter","workloads","SID","tags","system_profile","SAP","sap_system","sap_sids","calculateSelected","gutter","span","customFilters","isFullView","ref","showTags","hasCheckbox","autoRefresh","initialLoading","_event","_index","systemId","actionsConfig","label","props","isDisabled","from","bulkSelect","count","items","checked","onSelect","tableProps","canSelectAll","onRowClick","_e","app","onLoad","filtersList","mergeWithEntities","INVENTORY_ACTION_TYPES","register","entitiesReducer","setPagination","removeSystems","hostName","description","dismissable","addNotificationAction","onCancel","onSubmit"],"mappings":"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","file":"js/34.7d962c7067f6009928fe.js","sourcesContent":["export const defaultFilters = [\n    {\n        staleFilter: ['fresh', 'stale']\n    }, {\n        registeredWithFilter: ['insights']\n    }\n];\n\nexport const isEmpty = (check) => !check || check?.length === 0;\n\nexport const generateFilter = (status, source, tagsFilter, filterbyName) => ([\n    !isEmpty(status) && {\n        staleFilter: Array.isArray(status) ? status : [status]\n    },\n    !isEmpty(tagsFilter) && {\n        tagFilters: Array.isArray(tagsFilter) ? tagsFilter : [tagsFilter]\n    },\n    !isEmpty(source) && {\n        registeredWithFilter: Array.isArray(source) ? source : [source]\n    },\n    !isEmpty(filterbyName) && {\n        value: 'hostname_or_id',\n        filter: Array.isArray(filterbyName) ? filterbyName[0] : filterbyName\n    },\n    (!isEmpty(status) || !isEmpty(tagsFilter) || !isEmpty(filterbyName)) && isEmpty(source) && {\n        registeredWithFilter: []\n    },\n    (!isEmpty(source) || !isEmpty(tagsFilter) || !isEmpty(filterbyName)) && isEmpty(status) && {\n        staleFilter: []\n    }\n].filter(Boolean));\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    Modal,\n    Split,\n    SplitItem,\n    Stack,\n    StackItem,\n    Level,\n    LevelItem,\n    Button,\n    ClipboardCopy\n} from '@patternfly/react-core';\nimport { ExclamationTriangleIcon } from  '@patternfly/react-icons';\n\nconst DeleteModal = ({ handleModalToggle, isModalOpen, currentSytem, onConfirm }) => {\n    let systemToRemove;\n    let systemLabel = 'system';\n    if (Array.isArray(currentSytem)) {\n        systemToRemove = currentSytem.length === 1 ? currentSytem[0].display_name : `${currentSytem.length} systems`;\n        systemLabel = currentSytem.length === 1 ? systemLabel : 'systems';\n    } else {\n        systemToRemove = currentSytem.displayName;\n    }\n\n    return <Modal\n        variant=\"small\"\n        title=\"Remove from inventory\"\n        className=\"ins-c-inventory__table--remove\"\n        isOpen={isModalOpen}\n        onClose={() => handleModalToggle(false)}\n        appendTo={document.getElementsByClassName('inventory')[0]}\n    >\n        <Split hasGutter>\n            <SplitItem><ExclamationTriangleIcon size=\"xl\" className=\"ins-m-alert\" /></SplitItem>\n            <SplitItem isFilled>\n                <Stack hasGutter>\n                    <StackItem>\n                        {systemToRemove} will be removed from\n                                    all {location.host} applications and services. You need to re-register\n                        the {systemLabel} to add it back to your inventory.\n                    </StackItem>\n                    <StackItem>\n                        To disable the daily upload for this {systemLabel}, use the following command:\n                    </StackItem>\n                    <StackItem>\n                        <ClipboardCopy>insights-client --unregister</ClipboardCopy>\n                    </StackItem>\n                </Stack>\n            </SplitItem>\n        </Split>\n        <Level hasGutter>\n            <LevelItem>\n                <Button variant=\"danger\" onClick={onConfirm} ouiaId=\"confirm-delete\">\n                    Remove\n                </Button>\n                <Button variant=\"link\" onClick={() => handleModalToggle(false)}>Cancel</Button>\n            </LevelItem>\n        </Level>\n    </Modal>;\n};\n\nconst ActiveSystemProp = PropTypes.shape({\n    id: PropTypes.string,\n    displayName: PropTypes.string\n});\n\nDeleteModal.propTypes = {\n    isModalOpen: PropTypes.bool,\n    currentSytem: PropTypes.oneOfType([ActiveSystemProp, PropTypes.arrayOf(ActiveSystemProp)]),\n    handleModalToggle: PropTypes.func,\n    onConfirm: PropTypes.func\n};\n\nDeleteModal.defaultProps = {\n    isModalOpen: false,\n    currentSytem: {},\n    handleModalToggle: () => undefined,\n    onConfirm: () => undefined\n};\n\nexport default DeleteModal;\n","/* eslint-disable camelcase */\nimport React, { useEffect, useState, useRef, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport './inventory.scss';\nimport { PageHeader, PageHeaderTitle, Main } from '@redhat-cloud-services/frontend-components';\nimport { entitiesReducer, RegistryContext } from '../store';\nimport * as actions from '../actions';\nimport { Grid, GridItem } from '@patternfly/react-core';\nimport { addNotification as addNotificationAction } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport DeleteModal from '../components/DeleteModal';\nimport TextInputModal from '@redhat-cloud-services/frontend-components-inventory-general-info/TextInputModal';\nimport flatMap from 'lodash/flatMap';\nimport { defaultFilters, generateFilter } from '../Utilities/constants';\n\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\n\nconst reloadWrapper = (event, callback) => {\n    event.payload.then(callback);\n    return event;\n};\n\nconst calculateChecked = (rows = [], selected) => (\n    rows.every(({ id }) => selected && selected.has(id))\n        ? rows.length > 0\n        : rows.some(({ id }) => selected && selected.has(id)) && null\n);\n\nconst mapTags = ({ category, values }) => values.map(({ tagKey, value }) => `${\n    category ? `${category}/` : ''\n}${\n    tagKey\n}${\n    value ? `=${value}` : ''\n}`);\n\nconst filterMapper = {\n    staleFilter: ({ staleFilter }, searchParams) => staleFilter.forEach(item => searchParams.append('status', item)),\n    registeredWithFilter: ({ registeredWithFilter }, searchParams) => registeredWithFilter\n    ?.forEach(item => searchParams.append('source', item)),\n    value: ({ value, filter }, searchParams) => value === 'hostname_or_id' &&\n    Boolean(filter) &&\n    searchParams.append('hostname_or_id', filter),\n    tagFilters: ({ tagFilters }, searchParams) => tagFilters?.length > 0 && searchParams.append(\n        'tags',\n        flatMap(tagFilters, mapTags)\n    )\n};\n\nconst calculateFilters = (searchParams, filters = []) => {\n    filters.forEach((filter) => {\n        Object.keys(filter).forEach(key => {\n            filterMapper?.[key]?.(filter, searchParams);\n        });\n    });\n\n    return searchParams;\n};\n\nexport const calculatePagination = (searchParams, page, perPage) => {\n    const currSearch = new URLSearchParams(location.search);\n    const newPage = page !== undefined ? page : currSearch.get('page');\n    const newPerPage = perPage !== undefined ? perPage : currSearch.get('per_page');\n    !isNaN(parseInt(newPage)) && searchParams.append('page', newPage);\n    !isNaN(parseInt(newPerPage)) && searchParams.append('per_page', newPerPage);\n};\n\nconst Inventory = ({\n    status,\n    source,\n    filterbyName,\n    tagsFilter,\n    page,\n    perPage\n}) => {\n    document.title = 'Inventory | Red Hat Insights';\n    const history = useHistory();\n    const { getRegistry } = useContext(RegistryContext);\n    const inventory = useRef(null);\n    const [isModalOpen, handleModalToggle] = useState(false);\n    const [currentSytem, activateSystem] = useState({});\n    const [filters, onSetfilters] = useState([]);\n    const [ediOpen, onEditOpen] = useState(false);\n    const [globalFilter, setGlobalFilter] = useState();\n    const { loading, writePermissions } = useSelector(\n        ({ permissionsReducer }) =>\n            ({ loading: permissionsReducer?.loading, writePermissions: permissionsReducer?.writePermissions }),\n        shallowEqual\n    );\n\n    const rows = useSelector(({ entities }) => entities?.rows, shallowEqual);\n    const loaded = useSelector(({ entities }) => entities?.loaded);\n    const selected = useSelector(({ entities }) => entities?.selected);\n    const dispatch = useDispatch();\n\n    const clearNotifications = () => dispatch(actions.clearNotifications());\n    const deleteEntity = (id, hostName, callback) => dispatch(reloadWrapper(actions.deleteEntity(id, hostName), callback));\n    const addNotification = (payload) => dispatch(addNotificationAction(payload));\n    const updateDisplayName = (id, displayName, callback) => dispatch(\n        reloadWrapper(actions.editDisplayName(id, displayName), callback)\n    );\n    const onSelectRows = (id, isSelected) => dispatch(actions.selectEntity(id, isSelected));\n    const setFilter = (filtersList) => filtersList?.length > 0 && dispatch(actions.setFilter(filtersList));\n    const setPagination = (page, perPage) => dispatch(actions.setPagination(page, perPage));\n\n    const onRefresh = (options, callback) => {\n        if (!options?.filters) {\n            options.filters = defaultFilters;\n        }\n\n        const { status, source, tagsFilter, filterbyName } = options?.filters.reduce((acc, curr) => ({\n            ...acc,\n            ...curr?.staleFilter && { status: curr.staleFilter },\n            ...curr?.registeredWithFilter && { source: curr.registeredWithFilter },\n            ...curr?.tagFilters && { tagsFilter: curr.tagFilters },\n            ...curr?.value === 'hostname_or_id' && { filterbyName: curr.filter }\n        }), { status: undefined, source: undefined, tagsFilter: undefined, filterbyName: undefined });\n        options.filters = generateFilter(status, source, tagsFilter, filterbyName);\n\n        onSetfilters(options?.filters);\n        const searchParams = new URLSearchParams();\n        calculateFilters(searchParams, options?.filters);\n        // eslint-disable-next-line camelcase\n        calculatePagination(searchParams, options?.page, options?.per_page);\n        const search = searchParams.toString();\n        history.push({\n            search,\n            hash: location.hash\n        });\n\n        if (!callback && inventory?.current) {\n            inventory.current.onRefreshData(options);\n        } else if (callback) {\n            callback(options);\n        }\n    };\n\n    useEffect(() => {\n        insights.chrome?.hideGlobalFilter?.(false);\n        insights.chrome.appAction('system-list');\n        insights.chrome.appObjectId();\n        insights.chrome.on('GLOBAL_FILTER_UPDATE', ({ data }) => {\n            const [workloads, SID, tags] = insights.chrome?.mapGlobalFilter?.(data, false, true);\n            setGlobalFilter({\n                tags,\n                filter: {\n                    ...globalFilter?.filter,\n                    system_profile: {\n                        ...globalFilter?.filter?.system_profile,\n                        ...workloads?.SAP?.isSelected && { sap_system: true },\n                        ...SID?.length > 0 && { sap_sids: SID }\n                    }\n                }\n            });\n        });\n        clearNotifications();\n    }, []);\n\n    const calculateSelected = () => selected ? selected.size : 0;\n\n    return (\n        <React.Fragment>\n            <PageHeader className=\"pf-m-light\">\n                <PageHeaderTitle title='Inventory'/>\n            </PageHeader>\n            <Main>\n                <Grid gutter=\"md\">\n                    <GridItem span={12}>\n                        {\n                            !loading && <InventoryTable\n                                customFilters={globalFilter}\n                                isFullView\n                                ref={inventory}\n                                showTags\n                                onRefresh={onRefresh}\n                                hasCheckbox={writePermissions}\n                                autoRefresh\n                                initialLoading\n                                {...(writePermissions && {\n                                    actions: [\n                                        {\n                                            title: 'Delete',\n                                            onClick: (_event, _index, { id: systemId, display_name: displayName }) => {\n                                                activateSystem(() => ({\n                                                    id: systemId,\n                                                    displayName\n                                                }));\n                                                handleModalToggle(() => true);\n                                            }\n                                        }, {\n                                            title: 'Edit',\n                                            onClick: (_event, _index, data) => {\n                                                activateSystem(() => data);\n                                                onEditOpen(() => true);\n                                            }\n                                        }\n                                    ],\n                                    actionsConfig: {\n                                        actions: [{\n                                            label: 'Delete',\n                                            props: {\n                                                isDisabled: calculateSelected() === 0,\n                                                variant: 'secondary',\n                                                onClick: () => {\n                                                    activateSystem(Array.from(selected.values()));\n                                                    handleModalToggle(true);\n                                                }\n                                            }\n                                        }]\n                                    },\n                                    bulkSelect: {\n                                        count: calculateSelected(),\n                                        items: [{\n                                            title: 'Select none (0)',\n                                            onClick: () => {\n                                                onSelectRows(-1, false);\n                                            }\n                                        },\n                                        {\n                                            ...loaded && rows && rows.length > 0 ? {\n                                                title: `Select page (${ rows.length })`,\n                                                onClick: () => {\n                                                    onSelectRows(0, true);\n                                                }\n                                            } : {}\n                                        }],\n                                        checked: calculateChecked(rows, selected),\n                                        onSelect: (value) => {\n                                            onSelectRows(0, value);\n                                        }\n                                    }\n                                })}\n                                tableProps={{\n                                    canSelectAll: false\n                                }}\n                                onRowClick={(_e, id, app) => history.push(`/${id}${app ? `/${app}` : ''}`)}\n                                onLoad={({ mergeWithEntities, INVENTORY_ACTION_TYPES }) => {\n                                    getRegistry().register({\n                                        ...mergeWithEntities(entitiesReducer(INVENTORY_ACTION_TYPES))\n                                    });\n\n                                    setFilter(generateFilter(status, source, tagsFilter, filterbyName));\n\n                                    if (perPage || page) {\n                                        setPagination(\n                                            Array.isArray(page) ? page[0] : page,\n                                            Array.isArray(perPage) ? perPage[0] : perPage\n                                        );\n                                    }\n                                }}\n                            />\n                        }\n                    </GridItem>\n                </Grid>\n            </Main>\n            <DeleteModal\n                handleModalToggle={handleModalToggle}\n                isModalOpen={isModalOpen}\n                currentSytem={currentSytem}\n                onConfirm={() => {\n                    let displayName;\n                    let removeSystems;\n                    if (Array.isArray(currentSytem)) {\n                        removeSystems = currentSytem.map(({ id }) => id);\n                        displayName = currentSytem.length > 1 ?\n                            `${currentSytem.length} systems` :\n                            currentSytem[0].display_name;\n                    } else {\n                        displayName = currentSytem.displayName;\n                        removeSystems = [currentSytem.id];\n                    }\n\n                    addNotification({\n                        id: 'remove-initiated',\n                        variant: 'warning',\n                        title: 'Delete operation initiated',\n                        description: `Removal of ${displayName} started.`,\n                        dismissable: false\n                    });\n                    deleteEntity(removeSystems, displayName, () => onRefresh({ filters }));\n                    handleModalToggle(false);\n                }}\n            />\n\n            <TextInputModal\n                title=\"Edit display name\"\n                isOpen={ediOpen}\n                value={currentSytem.display_name}\n                onCancel={() => onEditOpen(false)}\n                onSubmit={(value) => {\n                    updateDisplayName(currentSytem.id, value, inventory.current.onRefreshData);\n                    onEditOpen(false);\n                }}\n            />\n        </React.Fragment>\n    );\n};\n\nInventory.propTypes = {\n    status: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string), PropTypes.string]),\n    source: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string), PropTypes.string]),\n    filterbyName: PropTypes.string,\n    tagsFilter: PropTypes.any,\n    page: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    perPage: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};\n\nexport default Inventory;\n"],"sourceRoot":""}