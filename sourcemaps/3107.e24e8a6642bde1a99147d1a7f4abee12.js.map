{"version":3,"file":"js/3107.42afdd0fd59174bc6b28.js","mappings":"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","sources":["webpack:///./src/components/GeneralInfo/BiosCard/BiosCard.js","webpack:///./src/components/GeneralInfo/ConfigurationCard/ConfigurationCard.js","webpack:///./src/components/GeneralInfo/DataCollectorsCard/DataCollectorsCard.js","webpack:///./src/components/GeneralInfo/InfoTable/InfoTable.js","webpack:///./src/components/GeneralInfo/SystemStatusCard/SystemStatusCard.js","webpack:///./src/components/GeneralInfo/GeneralInformation/GeneralInformation.js","webpack:///./src/components/GeneralInfo/InfrastructureCard/InfrastructureCard.js","webpack:///./src/components/GeneralInfo/OperatingSystemCard/OperatingSystemCard.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport LoadingCard from '../LoadingCard';\nimport { biosSelector } from '../selectors';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { extraShape, isDate } from '../../../constants';\n\nconst BiosCardCore = ({\n  bios,\n  detailLoaded,\n  hasVendor,\n  hasVersion,\n  handleClick,\n  hasReleaseDate,\n  extra,\n}) => (\n  <LoadingCard\n    title=\"BIOS\"\n    isLoading={!detailLoaded}\n    items={[\n      ...(hasVendor ? [{ title: 'Vendor', value: bios.vendor }] : []),\n      ...(hasVersion ? [{ title: 'Version', value: bios.version }] : []),\n      ...(hasReleaseDate\n        ? [\n            {\n              title: 'Release date',\n              value: isDate(bios.releaseDate) ? (\n                <DateFormat date={new Date(bios.releaseDate)} type=\"onlyDate\" />\n              ) : (\n                'Not available'\n              ),\n            },\n          ]\n        : []),\n      ...extra.map(({ onClick, ...item }) => ({\n        ...item,\n        ...(onClick && { onClick: (e) => onClick(e, handleClick) }),\n      })),\n    ]}\n  />\n);\n\nBiosCardCore.propTypes = {\n  detailLoaded: PropTypes.bool,\n  handleClick: PropTypes.func,\n  bios: PropTypes.shape({\n    vendor: PropTypes.string,\n    version: PropTypes.string,\n    releaseDate: PropTypes.string,\n    csm: PropTypes.arrayOf(PropTypes.string),\n  }),\n  hasVendor: PropTypes.bool,\n  hasVersion: PropTypes.bool,\n  hasReleaseDate: PropTypes.bool,\n  extra: PropTypes.arrayOf(extraShape),\n};\nBiosCardCore.defaultProps = {\n  detailLoaded: false,\n  handleClick: () => undefined,\n  extra: [],\n  hasVendor: true,\n  hasVersion: true,\n  hasReleaseDate: true,\n};\n\nexport const BiosCard = connect(\n  ({ systemProfileStore: { systemProfile } }) => ({\n    detailLoaded: systemProfile && systemProfile.loaded,\n    bios: biosSelector(systemProfile),\n  })\n)(BiosCardCore);\n\nBiosCard.propTypes = BiosCardCore.propTypes;\nBiosCard.defaultProps = BiosCardCore.defaultProps;\n\nexport default BiosCard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport LoadingCard from '../LoadingCard';\nimport { generalMapper, repositoriesMapper } from '../dataMapper';\nimport { configurationSelector } from '../selectors';\nimport { extraShape } from '../../../constants';\n\nexport function enabledRepos(repositories) {\n  if (repositories) {\n    return [\n      repositories.enabled &&\n        repositories.enabled.length > 0 &&\n        `${repositories.enabled.length} enabled`,\n      repositories.disabled &&\n        repositories.disabled.length > 0 &&\n        `${repositories.disabled.length} disabled`,\n    ]\n      .filter(Boolean)\n      .join(' / ');\n  }\n}\n\nconst ConfigurationCardCore = ({\n  detailLoaded,\n  configuration,\n  handleClick,\n  hasPackages,\n  hasServices,\n  hasProcesses,\n  hasRepositories,\n  extra,\n}) => (\n  <LoadingCard\n    title=\"Configuration\"\n    isLoading={!detailLoaded}\n    items={[\n      ...(hasPackages\n        ? [\n            {\n              title: 'Installed packages',\n              value: configuration.packages?.length,\n              singular: 'package',\n              target: 'installed_packages',\n              onClick: () => {\n                handleClick(\n                  'Installed packages',\n                  generalMapper(configuration.packages, 'Package name')\n                );\n              },\n            },\n          ]\n        : []),\n      ...(hasServices\n        ? [\n            {\n              title: 'Services',\n              value: configuration.services?.length,\n              singular: 'service',\n              target: 'services',\n              onClick: () => {\n                handleClick(\n                  'Services',\n                  generalMapper(configuration.services, 'Service name')\n                );\n              },\n            },\n          ]\n        : []),\n      ...(hasProcesses\n        ? [\n            {\n              title: 'Running processes',\n              value: configuration.processes?.length,\n              singular: 'process',\n              plural: 'processes',\n              target: 'running_processes',\n              onClick: () => {\n                handleClick(\n                  'Running processes',\n                  generalMapper(configuration.processes, 'Process name')\n                );\n              },\n            },\n          ]\n        : []),\n      ...(hasRepositories\n        ? [\n            {\n              title: 'Repositories',\n              value: enabledRepos(configuration.repositories),\n              target: 'repositories',\n              onClick: () => {\n                handleClick(\n                  'Repositories',\n                  repositoriesMapper(configuration.repositories),\n                  'medium'\n                );\n              },\n            },\n          ]\n        : []),\n      ...extra.map(({ onClick, ...item }) => ({\n        ...item,\n        ...(onClick && { onClick: (e) => onClick(e, handleClick) }),\n      })),\n    ]}\n  />\n);\n\nConfigurationCardCore.propTypes = {\n  detailLoaded: PropTypes.bool,\n  handleClick: PropTypes.func,\n  configuration: PropTypes.shape({\n    packages: PropTypes.arrayOf(PropTypes.string),\n    services: PropTypes.arrayOf(PropTypes.string),\n    processes: PropTypes.arrayOf(PropTypes.string),\n    repositories: PropTypes.shape({\n      enabled: PropTypes.arrayOf(\n        PropTypes.shape({\n          // eslint-disable-next-line camelcase\n          base_url: PropTypes.string,\n          name: PropTypes.string,\n          enabled: PropTypes.bool,\n          gpgcheck: PropTypes.bool,\n        })\n      ),\n      disabled: PropTypes.arrayOf(\n        PropTypes.shape({\n          // eslint-disable-next-line camelcase\n          base_url: PropTypes.string,\n          name: PropTypes.string,\n          enabled: PropTypes.bool,\n          gpgcheck: PropTypes.bool,\n        })\n      ),\n    }),\n  }),\n  hasPackages: PropTypes.bool,\n  hasServices: PropTypes.bool,\n  hasProcesses: PropTypes.bool,\n  hasRepositories: PropTypes.bool,\n  extra: PropTypes.arrayOf(extraShape),\n};\nConfigurationCardCore.defaultProps = {\n  detailLoaded: false,\n  handleClick: () => undefined,\n  hasPackages: true,\n  hasServices: true,\n  hasProcesses: true,\n  hasRepositories: true,\n  extra: [],\n};\n\nexport const ConfigurationCard = connect(\n  ({ systemProfileStore: { systemProfile } }) => ({\n    detailLoaded: systemProfile && systemProfile.loaded,\n    configuration: configurationSelector(systemProfile),\n  })\n)(ConfigurationCardCore);\n\nConfigurationCard.propTypes = ConfigurationCardCore.propTypes;\nConfigurationCard.defaultProps = ConfigurationCardCore.defaultProps;\n\nexport default ConfigurationCard;\n","/* eslint-disable camelcase */\nimport React, { useCallback, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport LoadingCard from '../LoadingCard';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport {\n  ExpandableRowContent,\n  TableComposable,\n  TableVariant,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from '@patternfly/react-table';\nimport { Flex, FlexItem } from '@patternfly/react-core';\nimport { getDefaultCollectors } from '../selectors/selectors';\n\nconst DataCollectorsCardCore = ({\n  detailLoaded,\n  collectors,\n  entity,\n  dataMapper,\n}) => {\n  const [expandedNames, setExpandedNames] = useState([]);\n  const setExpanded = useCallback(\n    (collector, isExpanding = true) =>\n      setExpandedNames((prevExpanded) => {\n        const otherExpandedNames = prevExpanded.filter(\n          (r) => r !== collector.name\n        );\n        return isExpanding\n          ? [...otherExpandedNames, collector.name]\n          : otherExpandedNames;\n      }),\n    []\n  );\n  const isExpanded = (collector) => expandedNames.includes(collector.name);\n  const data = collectors ?? getDefaultCollectors(entity);\n  return (\n    <LoadingCard title=\"Data collectors\" isLoading={!detailLoaded}>\n      <TableComposable\n        aria-label=\"Data collectors\"\n        variant={TableVariant.compact}\n        borders={false}\n      >\n        <Thead>\n          <Tr className=\"ins-c__no-border\">\n            <Th />\n            <Th>Name</Th>\n            <Th>Status</Th>\n            <Th>Last upload</Th>\n          </Tr>\n        </Thead>\n        {dataMapper\n          ? dataMapper(data, isExpanded, setExpanded)\n          : data.map((collector, rowIndex) => (\n              <Tbody key={collector.name} isExpanded={isExpanded(collector)}>\n                <Tr>\n                  {collector.details.name ? (\n                    <Td\n                      expand={\n                        collector.details\n                          ? {\n                              rowIndex,\n                              isExpanded: isExpanded(collector),\n                              onToggle: () =>\n                                setExpanded(collector, !isExpanded(collector)),\n                            }\n                          : undefined\n                      }\n                      style={{ paddingLeft: 0 }}\n                    />\n                  ) : (\n                    <Td />\n                  )}\n                  <Td dataLabel=\"Name\">{collector.name}</Td>\n                  <Td dataLabel=\"Status\">{collector.status}</Td>\n                  <Td dataLabel=\"Last upload\">\n                    {collector.updated ? (\n                      <DateFormat date={collector.updated} type=\"exact\" />\n                    ) : (\n                      'N/A'\n                    )}\n                  </Td>\n                </Tr>\n                {collector.details && collector.details.name && (\n                  <Tr isExpanded={isExpanded(collector)}>\n                    <Td />\n                    <Td colSpan={3}>\n                      <ExpandableRowContent>\n                        <Flex>\n                          <FlexItem className=\"ins-c__flex-row-margin\">\n                            {`${collector.details.name}:`}\n                          </FlexItem>\n                          <FlexItem grow={{ default: 'grow' }}>\n                            {collector.details.id ?? 'N/A'}\n                          </FlexItem>\n                        </Flex>\n                      </ExpandableRowContent>\n                    </Td>\n                  </Tr>\n                )}\n              </Tbody>\n            ))}\n      </TableComposable>\n    </LoadingCard>\n  );\n};\n\nDataCollectorsCardCore.propTypes = {\n  detailLoaded: PropTypes.bool,\n  collectors: PropTypes.array,\n  dataMapper: PropTypes.func,\n  entity: PropTypes.shape({\n    per_reporter_staleness: PropTypes.object,\n  }),\n};\nDataCollectorsCardCore.defaultProps = {\n  detailLoaded: false,\n};\n\nexport const DataCollectorsCard = connect(\n  ({ entityDetails: { entity }, systemProfileStore: { systemProfile } }) => ({\n    entity,\n    systemProfile,\n    detailLoaded: systemProfile?.loaded,\n    defaultCollectors: getDefaultCollectors(entity),\n  })\n)(DataCollectorsCardCore);\n\nDataCollectorsCard.propTypes = DataCollectorsCardCore.propTypes;\nDataCollectorsCard.defaultProps = DataCollectorsCardCore.defaultProps;\n\nexport default DataCollectorsCard;\n","import React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Pagination,\n  Text,\n  TextContent,\n  TextVariants,\n} from '@patternfly/react-core';\nimport PrimaryToolbar from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport TableToolbar from '@redhat-cloud-services/frontend-components/TableToolbar';\nimport {\n  SortByDirection,\n  Table,\n  TableBody,\n  TableHeader,\n  TableVariant,\n} from '@patternfly/react-table';\nimport flatMap from 'lodash/flatMap';\nimport {\n  filterRows,\n  generateFilters,\n  onDeleteFilter,\n  prepareRows,\n} from '../../../constants';\nclass InfoTable extends Component {\n  state = {\n    sortBy: { index: 0, direction: SortByDirection.asc },\n    opened: [],\n    pagination: {\n      page: 1,\n      perPage: 10,\n    },\n    activeFilters: {},\n  };\n\n  onSort = (event, index, direction) => {\n    const { expandable } = this.props;\n    this.props.onSort(event, expandable ? index - 1 : index, direction);\n    this.setState({\n      sortBy: {\n        index,\n        direction,\n      },\n    });\n  };\n\n  onCollapse = (_event, index, isOpen) => {\n    const { opened } = this.state;\n    opened[index] = isOpen;\n    this.setState({\n      opened,\n    });\n  };\n\n  onUpdatePagination = ({ page, perPage }) => {\n    this.setState({ pagination: { ...this.state.pagination, page, perPage } });\n  };\n\n  setFilter = (key, value, label) => {\n    const { activeFilters } = this.state;\n    // eslint-disable-next-line no-unused-vars\n    const { [key]: currFilter, ...restFilter } = activeFilters;\n    this.setState({\n      activeFilters: {\n        ...restFilter,\n        ...(value.length !== 0 && {\n          [key]: { key, value, label },\n        }),\n      },\n      pagination: { ...this.state.pagination, page: 1 },\n    });\n  };\n\n  onDeleteFilter = (_e, [deleted], deleteAll) => {\n    this.setState({\n      activeFilters: onDeleteFilter(\n        deleted,\n        deleteAll,\n        this.state.activeFilters\n      ),\n      pagination: { ...this.state.pagination, page: 1 },\n    });\n  };\n\n  render() {\n    const { cells, rows, expandable, filters } = this.props;\n    const { sortBy, opened, pagination, activeFilters } = this.state;\n    const collapsibleProps = expandable ? { onCollapse: this.onCollapse } : {};\n    const activeRows = filterRows(rows, activeFilters);\n    const mappedRows = expandable\n      ? flatMap(\n          prepareRows(activeRows, pagination),\n          ({ child, ...row }, key) => [\n            {\n              ...row,\n              isOpen: opened[key * 2] || false,\n            },\n            {\n              cells: [{ title: child }],\n              parent: key * 2,\n            },\n          ]\n        )\n      : prepareRows(activeRows, pagination);\n    return (\n      <Fragment>\n        <PrimaryToolbar\n          pagination={{\n            ...pagination,\n            itemCount: activeRows.length,\n            onSetPage: (_e, page) =>\n              this.onUpdatePagination({ ...pagination, page }),\n            onPerPageSelect: (_e, perPage) =>\n              this.onUpdatePagination({ ...pagination, page: 1, perPage }),\n          }}\n          {...(filters && {\n            filterConfig: {\n              items: generateFilters(\n                cells,\n                filters,\n                activeFilters,\n                this.setFilter\n              ),\n            },\n          })}\n          activeFiltersConfig={{\n            filters: Object.values(activeFilters).map((filter) => ({\n              ...filter,\n              category: filter.label,\n              chips: Array.isArray(filter.value)\n                ? filter.value.map((item) => ({ name: item }))\n                : [{ name: filter.value }],\n            })),\n            onDelete: this.onDeleteFilter,\n          }}\n        />\n        {cells.length !== 1 ? (\n          <Table\n            aria-label=\"General information dialog table\"\n            variant={TableVariant.compact}\n            cells={cells}\n            rows={mappedRows}\n            sortBy={{\n              ...sortBy,\n              index: expandable && sortBy.index === 0 ? 1 : sortBy.index,\n            }}\n            onSort={this.onSort}\n            {...collapsibleProps}\n          >\n            <TableHeader />\n            <TableBody />\n          </Table>\n        ) : (\n          <TextContent>\n            {prepareRows(activeRows, pagination).map((row, key) => (\n              <Text component={TextVariants.p} key={key}>\n                {row.title || row}\n              </Text>\n            ))}\n          </TextContent>\n        )}\n        <TableToolbar isFooter className=\"ins-c-inventory__table--toolbar\">\n          <Pagination\n            {...pagination}\n            itemCount={activeRows.length}\n            variant=\"bottom\"\n            onSetPage={(_e, page) =>\n              this.onUpdatePagination({ ...pagination, page })\n            }\n            onPerPageSelect={(_e, perPage) =>\n              this.onUpdatePagination({ ...pagination, page: 1, perPage })\n            }\n          />\n        </TableToolbar>\n      </Fragment>\n    );\n  }\n}\n\nInfoTable.propTypes = {\n  rows: PropTypes.array,\n  cells: PropTypes.array,\n  onSort: PropTypes.func,\n  expandable: PropTypes.bool,\n  filters: PropTypes.arrayOf(\n    PropTypes.shape({\n      index: PropTypes.number,\n      title: PropTypes.string,\n      type: PropTypes.oneOf(['text', 'checkbox', 'radio', 'group']),\n      options: PropTypes.arrayOf(\n        PropTypes.shape({\n          value: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n          label: PropTypes.node,\n        })\n      ),\n    })\n  ),\n};\nInfoTable.defaultProps = {\n  cells: [],\n  rows: [],\n  onSort: () => undefined,\n  sortBy: {},\n  expandable: false,\n};\n\nexport default InfoTable;\n","/* eslint-disable camelcase */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport LoadingCard from '../LoadingCard';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { systemStatus } from '../selectors';\n\nconst SystemStatusCardCore = ({\n  detailLoaded,\n  hasState,\n  hasRegistered,\n  hasLastCheckIn,\n  hasRHC,\n  entity,\n  systemProfile,\n  systemStatus,\n}) => (\n  <LoadingCard\n    title=\"System status\"\n    isLoading={!detailLoaded}\n    items={[\n      ...(hasState\n        ? [\n            {\n              title: 'Current state',\n              value: systemStatus.stale ? 'Stale' : 'Active',\n            },\n          ]\n        : []),\n      ...(hasRegistered\n        ? [\n            {\n              title: 'Registered',\n              value: entity && (\n                <DateFormat date={entity.created} type=\"exact\" />\n              ),\n            },\n          ]\n        : []),\n      ...(hasLastCheckIn\n        ? [\n            {\n              title: 'Last upload',\n              value: entity && (\n                <DateFormat date={entity.updated} type=\"exact\" />\n              ),\n            },\n          ]\n        : []),\n      ...(hasRHC\n        ? [\n            {\n              title: 'RHC',\n              value: systemProfile?.rhc_client_id\n                ? 'Connected'\n                : 'Not available',\n            },\n          ]\n        : []),\n    ]}\n  />\n);\n\nSystemStatusCardCore.propTypes = {\n  detailLoaded: PropTypes.bool,\n  entity: PropTypes.shape({\n    updated: PropTypes.string,\n    created: PropTypes.string,\n  }),\n  systemProfile: PropTypes.shape({\n    rhc_client_id: PropTypes.string,\n  }),\n  systemStatus: PropTypes.object,\n  handleClick: PropTypes.func,\n  hasState: PropTypes.bool,\n  hasLastCheckIn: PropTypes.bool,\n  hasRegistered: PropTypes.bool,\n  hasRHC: PropTypes.bool,\n};\nSystemStatusCardCore.defaultProps = {\n  detailLoaded: false,\n  systemStatus: {},\n  handleClick: () => undefined,\n  hasState: true,\n  hasLastCheckIn: true,\n  hasRegistered: true,\n  hasRHC: true,\n};\n\nexport const SystemStatusCard = connect(\n  ({ entityDetails: { entity }, systemProfileStore: { systemProfile } }) => ({\n    entity,\n    systemProfile,\n    detailLoaded: systemProfile?.loaded,\n    systemStatus: systemStatus(entity),\n  })\n)(SystemStatusCardCore);\n\nSystemStatusCard.propTypes = SystemStatusCardCore.propTypes;\nSystemStatusCard.defaultProps = SystemStatusCardCore.defaultProps;\n\nexport default SystemStatusCard;\n","import React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Grid, GridItem, Modal } from '@patternfly/react-core';\nimport { SortByDirection } from '@patternfly/react-table';\nimport AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';\n\nimport { systemProfile } from '../../../store/actions';\nimport InfoTable from '../InfoTable';\n// Since there's a problem with cards loading asynchronously we have to import the cards here as named\nimport { OperatingSystemCard } from '../OperatingSystemCard';\nimport { SystemCard } from '../SystemCard';\nimport { BiosCard } from '../BiosCard';\nimport { InfrastructureCard } from '../InfrastructureCard';\nimport { ConfigurationCard } from '../ConfigurationCard';\nimport { SystemStatusCard } from '../SystemStatusCard';\nimport { DataCollectorsCard } from '../DataCollectorsCard/DataCollectorsCard';\nimport { Provider } from 'react-redux';\nimport useInsightsNavigate from '@redhat-cloud-services/frontend-components-utilities/useInsightsNavigate/useInsightsNavigate';\n\nimport './general-information.scss';\n\nclass GeneralInformation extends Component {\n  state = {\n    isModalOpen: false,\n    modalTitle: '',\n    modalVariant: 'small',\n  };\n\n  onSort = (_event, index, direction, customRows) => {\n    const { rows } = this.state;\n    const sorted = (customRows || rows).sort((a, b) => {\n      const firstRow = a.cells || a;\n      const secondRow = b.cells || b;\n      const aSortBy = (\n        '' + (firstRow[index].sortValue || firstRow[index])\n      ).toLocaleLowerCase();\n      const bSortBy = (\n        '' + (secondRow[index].sortValue || secondRow[index])\n      ).toLocaleLowerCase();\n      return aSortBy < bSortBy ? -1 : 1;\n    });\n    this.setState({\n      rows: direction === SortByDirection.asc ? sorted : sorted.reverse(),\n    });\n  };\n\n  handleModalToggle = (\n    modalTitle = '',\n    { cells, rows, expandable, filters } = {},\n    modalVariant = 'small'\n  ) => {\n    rows &&\n      this.onSort(undefined, expandable ? 1 : 0, SortByDirection.asc, rows);\n    if (this.state.isModalOpen) {\n      this.props.navigate(-1);\n    }\n\n    this.setState(({ isModalOpen }) => ({\n      isModalOpen: !isModalOpen,\n      modalTitle,\n      cells,\n      expandable,\n      filters,\n      modalVariant,\n    }));\n  };\n\n  componentDidMount() {\n    //Avoids duplicate profile fetch if consumer app already fetched, while staying backwards compatible\n    if (!this.props.systemProfilePrefetched) {\n      this.props.loadSystemDetail?.(\n        this.props.inventoryId || this.props.entity.id\n      );\n    }\n  }\n\n  render() {\n    const {\n      isModalOpen,\n      modalTitle,\n      cells,\n      rows,\n      expandable,\n      filters,\n      modalVariant,\n    } = this.state;\n    const {\n      store,\n      writePermissions,\n      SystemCardWrapper,\n      OperatingSystemCardWrapper,\n      BiosCardWrapper,\n      InfrastructureCardWrapper,\n      ConfigurationCardWrapper,\n      SystemStatusCardWrapper,\n      DataCollectorsCardWrapper,\n      CollectionCardWrapper,\n      children,\n    } = this.props;\n    const Wrapper = store ? Provider : Fragment;\n    return (\n      <Wrapper {...(store && { store })}>\n        <div className=\"ins-c-general-information\">\n          <Grid hasGutter>\n            <GridItem md={6} sm={12}>\n              <Grid hasGutter>\n                {SystemCardWrapper && (\n                  <GridItem>\n                    <SystemCardWrapper\n                      handleClick={this.handleModalToggle}\n                      writePermissions={writePermissions}\n                    />\n                  </GridItem>\n                )}\n                {InfrastructureCardWrapper && (\n                  <GridItem>\n                    <InfrastructureCardWrapper\n                      handleClick={this.handleModalToggle}\n                    />\n                  </GridItem>\n                )}\n                {SystemStatusCardWrapper && (\n                  <GridItem>\n                    <SystemStatusCardWrapper\n                      handleClick={this.handleModalToggle}\n                    />\n                  </GridItem>\n                )}\n                {DataCollectorsCardWrapper && (\n                  <GridItem>\n                    <DataCollectorsCardWrapper\n                      handleClick={this.handleModalToggle}\n                    />\n                  </GridItem>\n                )}\n              </Grid>\n            </GridItem>\n            <GridItem md={6} sm={12}>\n              <Grid hasGutter>\n                {OperatingSystemCardWrapper && (\n                  <GridItem>\n                    <OperatingSystemCardWrapper\n                      handleClick={this.handleModalToggle}\n                    />\n                  </GridItem>\n                )}\n\n                {BiosCardWrapper && (\n                  <GridItem>\n                    <BiosCardWrapper handleClick={this.handleModalToggle} />\n                  </GridItem>\n                )}\n\n                {ConfigurationCardWrapper && (\n                  <GridItem>\n                    <ConfigurationCardWrapper\n                      handleClick={this.handleModalToggle}\n                    />\n                  </GridItem>\n                )}\n                {CollectionCardWrapper && (\n                  <GridItem>\n                    <CollectionCardWrapper\n                      handleClick={this.handleModalToggle}\n                    />\n                  </GridItem>\n                )}\n\n                {this.props.showImageDetails && (\n                  <GridItem>\n                    <AsyncComponent\n                      appName=\"edge\"\n                      module=\"./ImagesInformationCard\"\n                      deviceIdProps={\n                        this.props.inventoryId || this.props.entity.id\n                      }\n                    />\n                  </GridItem>\n                )}\n              </Grid>\n            </GridItem>\n            {children}\n            <Modal\n              title={modalTitle || ''}\n              aria-label={`${modalTitle || ''} modal`}\n              isOpen={isModalOpen}\n              onClose={() => this.handleModalToggle()}\n              className=\"ins-c-inventory__detail--dialog\"\n              variant={modalVariant}\n            >\n              <InfoTable\n                cells={cells}\n                rows={rows}\n                expandable={expandable}\n                onSort={this.onSort}\n                filters={filters}\n              />\n            </Modal>\n          </Grid>\n        </div>\n      </Wrapper>\n    );\n  }\n}\n\nGeneralInformation.propTypes = {\n  entity: PropTypes.shape({\n    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  }),\n  openedModal: PropTypes.string,\n  loadSystemDetail: PropTypes.func,\n  store: PropTypes.any,\n  writePermissions: PropTypes.bool,\n  SystemCardWrapper: PropTypes.oneOfType([\n    PropTypes.elementType,\n    PropTypes.bool,\n  ]),\n  OperatingSystemCardWrapper: PropTypes.oneOfType([\n    PropTypes.elementType,\n    PropTypes.bool,\n  ]),\n  BiosCardWrapper: PropTypes.oneOfType([PropTypes.elementType, PropTypes.bool]),\n  InfrastructureCardWrapper: PropTypes.oneOfType([\n    PropTypes.elementType,\n    PropTypes.bool,\n  ]),\n  ConfigurationCardWrapper: PropTypes.oneOfType([\n    PropTypes.elementType,\n    PropTypes.bool,\n  ]),\n  SystemStatusCardWrapper: PropTypes.oneOfType([\n    PropTypes.elementType,\n    PropTypes.bool,\n  ]),\n  DataCollectorsCardWrapper: PropTypes.oneOfType([\n    PropTypes.elementType,\n    PropTypes.bool,\n  ]),\n  CollectionCardWrapper: PropTypes.oneOfType([\n    PropTypes.elementType,\n    PropTypes.bool,\n  ]),\n  children: PropTypes.node,\n  navigate: PropTypes.any,\n  inventoryId: PropTypes.string.isRequired,\n  systemProfilePrefetched: PropTypes.bool,\n  showImageDetails: PropTypes.bool,\n};\nGeneralInformation.defaultProps = {\n  entity: {},\n  SystemCardWrapper: SystemCard,\n  OperatingSystemCardWrapper: OperatingSystemCard,\n  BiosCardWrapper: BiosCard,\n  InfrastructureCardWrapper: InfrastructureCard,\n  ConfigurationCardWrapper: ConfigurationCard,\n  SystemStatusCardWrapper: SystemStatusCard,\n  DataCollectorsCardWrapper: DataCollectorsCard,\n  CollectionCardWrapper: false,\n  systemProfilePrefetched: false,\n  showImageDetails: false,\n};\n\nconst GeneralInformationComponent = (props) => {\n  const navigate = useInsightsNavigate();\n  const dispatch = useDispatch();\n  const entity = useSelector(({ entityDetails }) => entityDetails.entity);\n  const loadSystemDetail = (itemId) => dispatch(systemProfile(itemId));\n  return (\n    <GeneralInformation\n      {...props}\n      navigate={navigate}\n      entity={entity}\n      loadSystemDetail={loadSystemDetail}\n    />\n  );\n};\n\nexport default GeneralInformationComponent;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport LoadingCard from '../LoadingCard';\nimport { generalMapper, interfaceMapper } from '../dataMapper';\nimport { infrastructureSelector } from '../selectors';\nimport { extraShape } from '../../../constants';\n\nconst InfrastructureCardCore = ({\n  infrastructure,\n  handleClick,\n  detailLoaded,\n  hasType,\n  hasVendor,\n  hasIPv4,\n  hasIPv6,\n  hasInterfaces,\n  extra,\n}) => (\n  <LoadingCard\n    title=\"Infrastructure\"\n    isLoading={!detailLoaded}\n    items={[\n      ...(hasType ? [{ title: 'Type', value: infrastructure.type }] : []),\n      ...(hasVendor ? [{ title: 'Vendor', value: infrastructure.vendor }] : []),\n      ...(hasIPv4\n        ? [\n            {\n              title: 'IPv4 addresses',\n              value: infrastructure.ipv4?.length,\n              plural: 'addresses',\n              singular: 'address',\n              target: 'ipv4',\n              onClick: () => {\n                handleClick(\n                  'IPv4',\n                  generalMapper(infrastructure.ipv4, 'IP address')\n                );\n              },\n            },\n          ]\n        : []),\n      ...(hasIPv6\n        ? [\n            {\n              title: 'IPv6 addresses',\n              value: infrastructure.ipv6?.length,\n              plural: 'addresses',\n              singular: 'address',\n              target: 'ipv6',\n              onClick: () => {\n                handleClick(\n                  'IPv6',\n                  generalMapper(infrastructure.ipv6, 'IP address')\n                );\n              },\n            },\n          ]\n        : []),\n      ...(hasInterfaces\n        ? [\n            {\n              title: 'Interfaces/NICs',\n              value: infrastructure.nics?.length,\n              singular: 'NIC',\n              target: 'interfaces',\n              onClick: () => {\n                handleClick(\n                  'Interfaces/NICs',\n                  interfaceMapper(infrastructure.nics),\n                  'medium'\n                );\n              },\n            },\n          ]\n        : []),\n      ...extra.map(({ onClick, ...item }) => ({\n        ...item,\n        ...(onClick && { onClick: (e) => onClick(e, handleClick) }),\n      })),\n    ]}\n  />\n);\n\nInfrastructureCardCore.propTypes = {\n  detailLoaded: PropTypes.bool,\n  handleClick: PropTypes.func,\n  infrastructure: PropTypes.shape({\n    type: PropTypes.string,\n    vendor: PropTypes.string,\n    ipv4: PropTypes.array,\n    ipv6: PropTypes.array,\n    nics: PropTypes.array,\n  }),\n  hasType: PropTypes.bool,\n  hasVendor: PropTypes.bool,\n  hasIPv4: PropTypes.bool,\n  hasIPv6: PropTypes.bool,\n  hasInterfaces: PropTypes.bool,\n  extra: PropTypes.arrayOf(extraShape),\n};\nInfrastructureCardCore.defaultProps = {\n  detailLoaded: false,\n  handleClick: () => undefined,\n  hasType: true,\n  hasVendor: true,\n  hasIPv4: true,\n  hasIPv6: true,\n  hasInterfaces: true,\n  extra: [],\n};\n\nexport const InfrastructureCard = connect(\n  ({ entityDetails: { entity }, systemProfileStore: { systemProfile } }) => ({\n    detailLoaded: systemProfile && systemProfile.loaded,\n    infrastructure: infrastructureSelector(systemProfile, entity),\n  })\n)(InfrastructureCardCore);\n\nInfrastructureCard.propTypes = InfrastructureCardCore.propTypes;\nInfrastructureCard.defaultProps = InfrastructureCardCore.defaultProps;\n\nexport default InfrastructureCard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport LoadingCard from '../LoadingCard';\nimport { generalMapper } from '../dataMapper';\nimport { operatingSystem } from '../selectors';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { extraShape, isDate } from '../../../constants';\nimport OperatingSystemFormatter from '../../../Utilities/OperatingSystemFormatter';\n\nconst OperatingSystemCardCore = ({\n  systemInfo,\n  detailLoaded,\n  handleClick,\n  hasRelease,\n  hasKernelRelease,\n  hasArchitecture,\n  hasLastBoot,\n  hasKernelModules,\n  extra,\n}) => (\n  <LoadingCard\n    title=\"Operating system\"\n    isLoading={!detailLoaded}\n    items={[\n      ...(hasRelease\n        ? [\n            {\n              title: 'Release',\n              value: (\n                <OperatingSystemFormatter\n                  operatingSystem={systemInfo.release}\n                />\n              ),\n            },\n          ]\n        : []),\n      ...(hasKernelRelease\n        ? [{ title: 'Kernel release', value: systemInfo.kernelRelease }]\n        : []),\n      ...(hasArchitecture\n        ? [{ title: 'Architecture', value: systemInfo.architecture }]\n        : []),\n      ...(hasLastBoot\n        ? [\n            {\n              title: 'Last boot time',\n              value: isDate(systemInfo.bootTime) ? (\n                <DateFormat date={systemInfo.bootTime} type=\"onlyDate\" />\n              ) : (\n                'Not available'\n              ),\n            },\n          ]\n        : []),\n      ...(hasKernelModules\n        ? [\n            {\n              title: 'Kernel modules',\n              value: systemInfo.kernelModules?.length,\n              singular: 'module',\n              target: 'kernel_modules',\n              onClick: () => {\n                handleClick(\n                  'Kernel modules',\n                  generalMapper(systemInfo.kernelModules, 'Module')\n                );\n              },\n            },\n          ]\n        : []),\n      ...(systemInfo.systemUpdateMethod\n        ? [{ title: 'Update method', value: systemInfo.systemUpdateMethod }]\n        : []),\n      ...extra.map(({ onClick, ...item }) => ({\n        ...item,\n        ...(onClick && { onClick: (e) => onClick(e, handleClick) }),\n      })),\n    ]}\n  />\n);\n\nOperatingSystemCardCore.propTypes = {\n  detailLoaded: PropTypes.bool,\n  handleClick: PropTypes.func,\n  systemInfo: PropTypes.shape({\n    release: PropTypes.shape({\n      name: PropTypes.string,\n      major: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n      minor: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    }),\n    architecture: PropTypes.string,\n    kernelRelease: PropTypes.string,\n    bootTime: PropTypes.string,\n    kernelModules: PropTypes.arrayOf(PropTypes.string),\n  }),\n  hasRelease: PropTypes.bool,\n  hasKernelRelease: PropTypes.bool,\n  hasArchitecture: PropTypes.bool,\n  hasLastBoot: PropTypes.bool,\n  hasKernelModules: PropTypes.bool,\n  extra: PropTypes.arrayOf(extraShape),\n};\nOperatingSystemCardCore.defaultProps = {\n  detailLoaded: false,\n  handleClick: () => undefined,\n  hasRelease: true,\n  hasKernelRelease: true,\n  hasArchitecture: true,\n  hasLastBoot: true,\n  hasKernelModules: true,\n  extra: [],\n};\n\nexport const OperatingSystemCard = connect(\n  ({ entityDetails: { entity }, systemProfileStore: { systemProfile } }) => ({\n    detailLoaded: systemProfile && systemProfile.loaded,\n    systemInfo: operatingSystem(systemProfile, entity),\n  })\n)(OperatingSystemCardCore);\n\nOperatingSystemCard.propTypes = OperatingSystemCardCore.propTypes;\nOperatingSystemCard.defaultProps = OperatingSystemCardCore.defaultProps;\n\nexport default OperatingSystemCard;\n"],"names":["BiosCardCore","_ref","bios","detailLoaded","hasVendor","hasVersion","handleClick","hasReleaseDate","extra","React","LoadingCard","title","isLoading","items","concat","_toConsumableArray","value","vendor","version","isDate","releaseDate","DateFormat","date","Date","type","map","_ref2","onClick","_objectSpread","_objectWithoutProperties","_excluded","e","propTypes","PropTypes","csm","extraShape","defaultProps","BiosCard","connect","_ref3","systemProfile","systemProfileStore","loaded","biosSelector","enabledRepos","repositories","enabled","length","disabled","filter","Boolean","join","ConfigurationCardCore","_configuration$packag","_configuration$servic","_configuration$proces","configuration","hasPackages","hasServices","hasProcesses","hasRepositories","packages","singular","target","generalMapper","services","processes","plural","repositoriesMapper","base_url","name","gpgcheck","ConfigurationCard","configurationSelector","DataCollectorsCardCore","collectors","entity","dataMapper","_useState","useState","_useState2","_slicedToArray","expandedNames","setExpandedNames","setExpanded","useCallback","collector","isExpanding","arguments","undefined","prevExpanded","otherExpandedNames","r","isExpanded","includes","data","getDefaultCollectors","TableComposable","variant","TableVariant","compact","borders","Thead","Tr","className","Th","rowIndex","_collector$details$id","Tbody","key","details","Td","expand","onToggle","style","paddingLeft","dataLabel","status","updated","colSpan","ExpandableRowContent","Flex","FlexItem","grow","default","id","per_reporter_staleness","DataCollectorsCard","entityDetails","defaultCollectors","InfoTable","_Component","_inherits","_super","_this","_classCallCheck","_len","args","Array","_key","call","apply","_defineProperty","_assertThisInitialized","sortBy","index","direction","SortByDirection","asc","opened","pagination","page","perPage","activeFilters","event","expandable","props","onSort","setState","_event","isOpen","state","label","restFilter","_toPropertyKey","_e","deleteAll","deleted","onDeleteFilter","_createClass","_this2","_this$props","this","cells","rows","filters","_this$state","collapsibleProps","onCollapse","activeRows","filterRows","mappedRows","flatMap","prepareRows","_ref5","child","parent","Fragment","PrimaryToolbar","_extends","itemCount","onSetPage","onUpdatePagination","onPerPageSelect","filterConfig","generateFilters","setFilter","activeFiltersConfig","Object","values","category","chips","isArray","item","onDelete","Table","TableHeader","TableBody","TextContent","row","Text","component","TextVariants","p","TableToolbar","isFooter","Pagination","Component","options","SystemStatusCardCore","hasState","hasRegistered","hasLastCheckIn","hasRHC","systemStatus","stale","created","rhc_client_id","SystemStatusCard","GeneralInformation","isModalOpen","modalTitle","modalVariant","customRows","sorted","sort","a","b","firstRow","secondRow","sortValue","toLocaleLowerCase","reverse","navigate","_this$props$loadSyste","systemProfilePrefetched","loadSystemDetail","inventoryId","_this$props2","store","writePermissions","SystemCardWrapper","OperatingSystemCardWrapper","BiosCardWrapper","InfrastructureCardWrapper","ConfigurationCardWrapper","SystemStatusCardWrapper","DataCollectorsCardWrapper","CollectionCardWrapper","children","Wrapper","Provider","Grid","hasGutter","GridItem","md","sm","handleModalToggle","showImageDetails","AsyncComponent","appName","module","deviceIdProps","Modal","onClose","openedModal","isRequired","SystemCard","OperatingSystemCard","InfrastructureCard","useInsightsNavigate","dispatch","useDispatch","useSelector","itemId","InfrastructureCardCore","_infrastructure$ipv","_infrastructure$ipv2","_infrastructure$nics","infrastructure","hasType","hasIPv4","hasIPv6","hasInterfaces","ipv4","ipv6","nics","interfaceMapper","infrastructureSelector","OperatingSystemCardCore","_systemInfo$kernelMod","systemInfo","hasRelease","hasKernelRelease","hasArchitecture","hasLastBoot","hasKernelModules","OperatingSystemFormatter","operatingSystem","release","kernelRelease","architecture","bootTime","kernelModules","systemUpdateMethod","major","minor"],"sourceRoot":""}