{"version":3,"file":"js/9806.1654006601968.5e6fb6e13cb058e2892f.js","mappings":"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","sources":["webpack:///./src/components/GeneralInfo/BiosCard/BiosCard.js","webpack:///./src/components/GeneralInfo/ConfigurationCard/ConfigurationCard.js","webpack:///./src/components/GeneralInfo/InfrastructureCard/InfrastructureCard.js","webpack:///./src/components/GeneralInfo/OperatingSystemCard/OperatingSystemCard.js","webpack:///./src/components/SystemDetails/GeneralInfo.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport LoadingCard from '../LoadingCard';\nimport { biosSelector } from '../selectors';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { extraShape, isDate } from '../../../constants';\n\nconst BiosCard = ({ bios, detailLoaded, hasVendor, hasVersion, handleClick, hasReleaseDate, extra }) => (<LoadingCard\n    title=\"BIOS\"\n    isLoading={ !detailLoaded }\n    items={ [\n        ...hasVendor ? [{ title: 'Vendor', value: bios.vendor }] : [],\n        ...hasVersion ? [{ title: 'Version', value: bios.version }] : [],\n        ...hasReleaseDate ? [{ title: 'Release date', value: (isDate(bios.releaseDate) ?\n            <DateFormat date={ new Date(bios.releaseDate) } type=\"onlyDate\" /> :\n            'Not available'\n        ) }] : [],\n        ...extra.map(({ onClick, ...item }) => ({\n            ...item,\n            ...onClick && { onClick: (e) => onClick(e, handleClick) }\n        }))\n    ] }\n/>);\n\nBiosCard.propTypes = {\n    detailLoaded: PropTypes.bool,\n    handleClick: PropTypes.func,\n    bios: PropTypes.shape({\n        vendor: PropTypes.string,\n        version: PropTypes.string,\n        releaseDate: PropTypes.string,\n        csm: PropTypes.arrayOf(PropTypes.string)\n    }),\n    hasVendor: PropTypes.bool,\n    hasVersion: PropTypes.bool,\n    hasReleaseDate: PropTypes.bool,\n    extra: PropTypes.arrayOf(extraShape)\n};\nBiosCard.defaultProps = {\n    detailLoaded: false,\n    handleClick: () => undefined,\n    extra: [],\n    hasVendor: true,\n    hasVersion: true,\n    hasReleaseDate: true\n};\n\nexport default connect(({\n    systemProfileStore: {\n        systemProfile\n    }\n}) => ({\n    detailLoaded: systemProfile && systemProfile.loaded,\n    bios: biosSelector(systemProfile)\n}))(BiosCard);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport LoadingCard from '../LoadingCard';\nimport { generalMapper, repositoriesMapper } from '../dataMapper';\nimport { configurationSelector } from '../selectors';\nimport { extraShape } from '../../../constants';\n\nexport function enabledRepos(repositories) {\n    if (repositories) {\n        return [\n            repositories.enabled && repositories.enabled.length > 0 && `${repositories.enabled.length} enabled`,\n            repositories.disabled && repositories.disabled.length > 0 && `${repositories.disabled.length} disabled`\n        ].filter(Boolean).join(' / ');\n    }\n}\n\nconst ConfigurationCard = ({\n    detailLoaded,\n    configuration,\n    handleClick,\n    hasPackages,\n    hasServices,\n    hasProcesses,\n    hasRepositories,\n    extra\n}) => (<LoadingCard\n    title=\"Configuration\"\n    isLoading={ !detailLoaded }\n    items={ [\n        ...hasPackages ? [{\n            title: 'Installed packages',\n            value: configuration.packages?.length,\n            singular: 'package',\n            target: 'installed_packages',\n            onClick: () => {\n                handleClick(\n                    'Installed packages',\n                    generalMapper(configuration.packages, 'Package name')\n                );\n            }\n        }] : [],\n        ...hasServices ? [{\n            title: 'Services',\n            value: configuration.services?.length,\n            singular: 'service',\n            target: 'services',\n            onClick: () => {\n                handleClick(\n                    'Services',\n                    generalMapper(configuration.services, 'Service name')\n                );\n            }\n        }] : [],\n        ...hasProcesses ? [{\n            title: 'Running processes',\n            value: configuration.processes?.length,\n            singular: 'process',\n            plural: 'processes',\n            target: 'running_processes',\n            onClick: () => {\n                handleClick(\n                    'Running processes',\n                    generalMapper(configuration.processes, 'Process name')\n                );\n            }\n        }] : [],\n        ...hasRepositories ? [{\n            title: 'Repositories',\n            value: enabledRepos(configuration.repositories),\n            target: 'repositories',\n            onClick: () => {\n                handleClick(\n                    'Repositories',\n                    repositoriesMapper(configuration.repositories),\n                    'medium'\n                );\n            }\n        }] : [],\n        ...extra.map(({ onClick, ...item }) => ({\n            ...item,\n            ...onClick && { onClick: (e) => onClick(e, handleClick) }\n        }))\n    ] }\n/>);\n\nConfigurationCard.propTypes = {\n    detailLoaded: PropTypes.bool,\n    handleClick: PropTypes.func,\n    configuration: PropTypes.shape({\n        packages: PropTypes.arrayOf(PropTypes.string),\n        services: PropTypes.arrayOf(PropTypes.string),\n        processes: PropTypes.arrayOf(PropTypes.string),\n        repositories: PropTypes.shape({\n            enabled: PropTypes.arrayOf(PropTypes.shape({\n                // eslint-disable-next-line camelcase\n                base_url: PropTypes.string,\n                name: PropTypes.string,\n                enabled: PropTypes.bool,\n                gpgcheck: PropTypes.bool\n            })),\n            disabled: PropTypes.arrayOf(PropTypes.shape({\n                // eslint-disable-next-line camelcase\n                base_url: PropTypes.string,\n                name: PropTypes.string,\n                enabled: PropTypes.bool,\n                gpgcheck: PropTypes.bool\n            }))\n        })\n    }),\n    hasPackages: PropTypes.bool,\n    hasServices: PropTypes.bool,\n    hasProcesses: PropTypes.bool,\n    hasRepositories: PropTypes.bool,\n    extra: PropTypes.arrayOf(extraShape)\n};\nConfigurationCard.defaultProps = {\n    detailLoaded: false,\n    handleClick: () => undefined,\n    hasPackages: true,\n    hasServices: true,\n    hasProcesses: true,\n    hasRepositories: true,\n    extra: []\n};\n\nexport default connect(({\n    systemProfileStore: {\n        systemProfile\n    }\n}) => ({\n    detailLoaded: systemProfile && systemProfile.loaded,\n    configuration: configurationSelector(systemProfile)\n}))(ConfigurationCard);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport LoadingCard from '../LoadingCard';\nimport { generalMapper, interfaceMapper } from '../dataMapper';\nimport { infrastructureSelector } from '../selectors';\nimport { extraShape } from '../../../constants';\n\nconst InfrastructureCard = ({\n    infrastructure,\n    handleClick,\n    detailLoaded,\n    hasType,\n    hasVendor,\n    hasIPv4,\n    hasIPv6,\n    hasInterfaces,\n    extra\n}) => (<LoadingCard\n    title=\"Infrastructure\"\n    isLoading={ !detailLoaded }\n    items={ [\n        ...hasType ? [{ title: 'Type', value: infrastructure.type }] : [],\n        ...hasVendor ? [{ title: 'Vendor', value: infrastructure.vendor }] : [],\n        ...hasIPv4 ? [{\n            title: 'IPv4 addresses',\n            value: infrastructure.ipv4?.length,\n            plural: 'addresses',\n            singular: 'address',\n            target: 'ipv4',\n            onClick: () => {\n                handleClick(\n                    'IPv4',\n                    generalMapper(infrastructure.ipv4, 'IP address')\n                );\n            }\n        }] : [],\n        ...hasIPv6 ? [{\n            title: 'IPv6 addresses',\n            value: infrastructure.ipv6?.length,\n            plural: 'addresses',\n            singular: 'address',\n            onClick: () => {\n                handleClick(\n                    'IPv6',\n                    generalMapper(infrastructure.ipv6, 'IP address')\n                );\n            }\n        }] : [],\n        ...hasInterfaces ? [{\n            title: 'Interfaces/NICs',\n            value: infrastructure.nics?.length,\n            singular: 'NIC',\n            target: 'interfaces',\n            onClick: () => {\n                handleClick(\n                    'Interfaces/NICs',\n                    interfaceMapper(infrastructure.nics),\n                    'medium'\n                );\n            }\n        }] : [],\n        ...extra.map(({ onClick, ...item }) => ({\n            ...item,\n            ...onClick && { onClick: (e) => onClick(e, handleClick) }\n        }))\n    ] }\n/>);\n\nInfrastructureCard.propTypes = {\n    detailLoaded: PropTypes.bool,\n    handleClick: PropTypes.func,\n    infrastructure: PropTypes.shape({\n        type: PropTypes.string,\n        vendor: PropTypes.string,\n        ipv4: PropTypes.array,\n        ipv6: PropTypes.array,\n        nics: PropTypes.array\n    }),\n    hasType: PropTypes.bool,\n    hasVendor: PropTypes.bool,\n    hasIPv4: PropTypes.bool,\n    hasIPv6: PropTypes.bool,\n    hasInterfaces: PropTypes.bool,\n    extra: PropTypes.arrayOf(extraShape)\n};\nInfrastructureCard.defaultProps = {\n    detailLoaded: false,\n    handleClick: () => undefined,\n    hasType: true,\n    hasVendor: true,\n    hasIPv4: true,\n    hasIPv6: true,\n    hasInterfaces: true,\n    extra: []\n};\n\nexport default connect(({\n    entityDetails: {\n        entity\n    },\n    systemProfileStore: {\n        systemProfile\n    }\n}) => ({\n    detailLoaded: systemProfile && systemProfile.loaded,\n    infrastructure: infrastructureSelector(systemProfile, entity)\n}))(InfrastructureCard);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport LoadingCard from '../LoadingCard';\nimport { generalMapper } from '../dataMapper';\nimport { operatingSystem } from '../selectors';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { extraShape, isDate } from '../../../constants';\nimport OperatingSystemFormatter from '../../../Utilities/OperatingSystemFormatter';\n\nconst OperatingSystemCard = ({\n    systemInfo,\n    detailLoaded,\n    handleClick,\n    hasRelease,\n    hasKernelRelease,\n    hasArchitecture,\n    hasLastBoot,\n    hasKernelModules,\n    extra\n}) => (\n    <LoadingCard\n        title=\"Operating system\"\n        isLoading={ !detailLoaded }\n        items={ [\n            ...hasRelease ? [{ title: 'Release', value: <OperatingSystemFormatter operatingSystem={systemInfo.release} /> }] : [],\n            ...hasKernelRelease ? [{ title: 'Kernel release', value: systemInfo.kernelRelease }] : [],\n            ...hasArchitecture ? [{ title: 'Architecture', value: systemInfo.architecture }] : [],\n            ...hasLastBoot ? [{ title: 'Last boot time', value: (isDate(systemInfo.bootTime) ?\n                <DateFormat date={ systemInfo.bootTime } type=\"onlyDate\" /> :\n                'Not available'\n            )\n            }] : [],\n            ...hasKernelModules ? [{\n                title: 'Kernel modules',\n                value: systemInfo.kernelModules?.length,\n                singular: 'module',\n                target: 'kernel_modules',\n                onClick: () => {\n                    handleClick(\n                        'Kernel modules',\n                        generalMapper(systemInfo.kernelModules, 'Module')\n                    );\n                }\n            }] : [],\n            ...extra.map(({ onClick, ...item }) => ({\n                ...item,\n                ...onClick && { onClick: (e) => onClick(e, handleClick) }\n            }))\n        ] }\n    />\n);\n\nOperatingSystemCard.propTypes = {\n    detailLoaded: PropTypes.bool,\n    handleClick: PropTypes.func,\n    systemInfo: PropTypes.shape({\n        release: PropTypes.string,\n        architecture: PropTypes.string,\n        kernelRelease: PropTypes.string,\n        bootTime: PropTypes.string,\n        kernelModules: PropTypes.arrayOf(PropTypes.string)\n    }),\n    hasRelease: PropTypes.bool,\n    hasKernelRelease: PropTypes.bool,\n    hasArchitecture: PropTypes.bool,\n    hasLastBoot: PropTypes.bool,\n    hasKernelModules: PropTypes.bool,\n    extra: PropTypes.arrayOf(extraShape)\n};\nOperatingSystemCard.defaultProps = {\n    detailLoaded: false,\n    handleClick: () => undefined,\n    hasRelease: true,\n    hasKernelRelease: true,\n    hasArchitecture: true,\n    hasLastBoot: true,\n    hasKernelModules: true,\n    extra: []\n};\n\nexport default connect(({\n    entityDetails: {\n        entity\n    },\n    systemProfileStore: {\n        systemProfile\n    }\n}) => ({\n    detailLoaded: systemProfile && systemProfile.loaded,\n    systemInfo: operatingSystem(systemProfile, entity)\n}))(OperatingSystemCard);\n","import React, { useEffect, useState, Fragment } from 'react';\nimport { Provider } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport GeneralInformation from '../GeneralInfo/GeneralInformation';\nexport { default as TextInputModal } from '../GeneralInfo/TextInputModal';\nimport fallback from '../SpinnerFallback';\nimport systemProfileStore from '../../store/systemProfileStore';\n\nconst GeneralInfoTab = ({ getRegistry, ...props }) => {\n    const [Wrapper, setWrapper] = useState();\n    useEffect(() => {\n        if (getRegistry) {\n            getRegistry()?.register?.({ systemProfileStore });\n        }\n\n        setWrapper(() => getRegistry ? Provider : Fragment);\n    }, []);\n    return Wrapper ? <Wrapper\n        {...getRegistry && {\n            store: getRegistry().getStore()\n        }}\n    >\n        <GeneralInformation {...props} />\n    </Wrapper> : fallback;\n};\n\nGeneralInfoTab.propTypes = {\n    getRegistry: PropTypes.func\n};\n\nexport default GeneralInfoTab;\n"],"names":["BiosCard","bios","detailLoaded","hasVendor","hasVersion","handleClick","hasReleaseDate","extra","title","isLoading","items","value","vendor","version","isDate","releaseDate","date","Date","type","map","onClick","e","propTypes","PropTypes","csm","extraShape","defaultProps","connect","systemProfile","systemProfileStore","loaded","biosSelector","enabledRepos","repositories","enabled","length","disabled","filter","Boolean","join","ConfigurationCard","configuration","hasPackages","hasServices","hasProcesses","hasRepositories","packages","singular","target","generalMapper","services","processes","plural","repositoriesMapper","base_url","name","gpgcheck","configurationSelector","InfrastructureCard","infrastructure","hasType","hasIPv4","hasIPv6","hasInterfaces","ipv4","ipv6","nics","interfaceMapper","entity","entityDetails","infrastructureSelector","OperatingSystemCard","systemInfo","hasRelease","hasKernelRelease","hasArchitecture","hasLastBoot","hasKernelModules","operatingSystem","release","kernelRelease","architecture","bootTime","kernelModules","GeneralInfoTab","getRegistry","props","useState","Wrapper","setWrapper","useEffect","register","Provider","Fragment","store","getStore","fallback"],"sourceRoot":""}