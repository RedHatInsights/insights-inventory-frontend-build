{"version":3,"file":"js/9765.415b5e19dcbad41ba6c5.js","mappings":"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","sources":["webpack:///./src/components/InventoryGroups/Modals/CreateGroupModal.js","webpack:///./src/components/InventoryGroups/Modals/Modal.js","webpack:///./src/components/InventoryGroups/Modals/ModalSchemas/schemes.js","webpack:///./src/components/InventoryGroups/helpers/validate.js","webpack:///./src/components/InventoryGroups/utils/apiWithToast.js"],"sourcesContent":["import React, { useCallback, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { createGroupSchema } from './ModalSchemas/schemes';\nimport Modal from './Modal';\nimport apiWithToast from '../utils/apiWithToast';\nimport {\n    createGroup,\n    validateGroupName\n} from '../utils/api';\nimport { useDispatch } from 'react-redux';\nimport awesomeDebouncePromise from 'awesome-debounce-promise';\n\nconst CreateGroupModal = ({\n    isModalOpen,\n    setIsModalOpen,\n    reloadData\n}) => {\n    const dispatch = useDispatch();\n\n    const handleCreateGroup = useCallback(\n        (values) => {\n            const statusMessages = {\n                onSuccess: {\n                    title: 'Success',\n                    description: `${values.name} has been created successfully`\n                },\n                onError: { title: 'Error', description: 'Failed to create group' }\n            };\n            return apiWithToast(dispatch, () => createGroup(values), statusMessages);\n        },\n        [isModalOpen]\n    );\n\n    const schema = useMemo(() => {\n        const check = async (value) => {\n            const results = await validateGroupName(value);\n            if (results === true) {\n                throw 'Group name already exists';\n            }\n\n            return undefined;\n        };\n\n        // eslint-disable-next-line new-cap\n        const d = awesomeDebouncePromise(check, 500, { onlyResolvesLast: false });\n        return createGroupSchema(d);\n    }, []);\n\n    return (\n        <Modal\n            data-testid=\"create-group-modal\"\n            isModalOpen={isModalOpen}\n            closeModal={() => setIsModalOpen(false)}\n            title=\"Create group\"\n            submitLabel=\"Create\"\n            schema={schema}\n            reloadData={reloadData}\n            onSubmit={handleCreateGroup}\n        />\n    );\n};\n\nexport default CreateGroupModal;\n\nCreateGroupModal.propTypes = {\n    isModalOpen: PropTypes.bool,\n    setIsModalOpen: PropTypes.func,\n    reloadData: PropTypes.func\n};\n","import React from 'react';\nimport { Modal } from '@patternfly/react-core';\nimport FormRenderer from '@data-driven-forms/react-form-renderer/form-renderer';\nimport FormTemplate from '@data-driven-forms/pf4-component-mapper/form-template';\nimport componentMapper from '@data-driven-forms/pf4-component-mapper/component-mapper';\nimport PropTypes from 'prop-types';\n\nconst RepoModal = ({\n    isModalOpen,\n    title,\n    titleIconVariant,\n    closeModal,\n    submitLabel,\n    schema,\n    initialValues,\n    variant,\n    reloadData,\n    size,\n    onSubmit,\n    additionalMappers\n}) => {\n    return (\n        <Modal\n            ouiaId=\"group-modal\"\n            variant={size ?? 'small'}\n            title={title}\n            titleIconVariant={titleIconVariant ?? null}\n            isOpen={isModalOpen}\n            onClose={closeModal}\n        >\n            <FormRenderer\n                schema={schema}\n                FormTemplate={(props) => (\n                    <FormTemplate\n                        {...props}\n                        submitLabel={submitLabel}\n                        disableSubmit={['invalid']}\n                        buttonsProps={{\n                            submit: { variant }\n                        }}\n                    />\n                )}\n                initialValues={initialValues}\n                componentMapper={additionalMappers\n                    ? { ...additionalMappers, ...componentMapper }\n                    : componentMapper}\n                //reload comes from the table and fetches fresh data\n                onSubmit={async (values) => {\n                    await onSubmit(values);\n                    setTimeout(async () => await reloadData(), 500);\n                    closeModal();\n                }}\n                onCancel={() => closeModal()}\n            />\n        </Modal>\n    );\n};\n\nRepoModal.propTypes = {\n    isModalOpen: PropTypes.bool,\n    title: PropTypes.string,\n    closeModal: PropTypes.func,\n    reloadData: PropTypes.func,\n    submitLabel: PropTypes.string,\n    schema: PropTypes.object,\n    initialValues: PropTypes.object,\n    variant: PropTypes.string,\n    onSubmit: PropTypes.func,\n    size: PropTypes.string,\n    additionalMappers: PropTypes.object,\n    titleIconVariant: PropTypes.any,\n    validatorMapper: PropTypes.object\n};\n\nexport default RepoModal;\n","import React from 'react';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport { nameValidator } from '../../helpers/validate';\nimport { Text } from '@patternfly/react-core';\n\nexport const createGroupSchema = (namePresenceValidator) => ({\n    fields: [\n        {\n            component: componentTypes.TEXT_FIELD,\n            name: 'name',\n            label: 'Group name',\n            helperText:\n        'Can only contain letters, numbers, spaces, hyphens ( - ), and underscores( _ ).',\n            isRequired: true,\n            autoFocus: true,\n            validate: [\n                // async validator has to be first in the list\n                namePresenceValidator,\n                { type: validatorTypes.REQUIRED },\n                { type: validatorTypes.MAX_LENGTH, threshold: 50 },\n                nameValidator\n            ]\n        }\n    ]\n});\n\nconst createDescription = (systemName) => {\n    return (\n        <Text>\n        Select a group to add <strong>{systemName}</strong> to, or create a new one.\n        </Text>\n    );\n};\n\n//this is a custom schema that is passed via additional mappers to the Modal component\n//it allows to create custom item types in the modal\n\nexport const addHostSchema = (systemName) => ({\n    fields: [\n        {\n            component: componentTypes.PLAIN_TEXT,\n            name: 'description',\n            label: createDescription(systemName)\n        },\n        {\n            component: 'search-input',\n            name: 'group',\n            label: 'Select a group',\n            isRequired: true,\n            validate: [{ type: validatorTypes.REQUIRED }]\n        },\n        { component: 'create-group-btn', name: 'create-group-btn' }\n    ]\n});\n","import validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\n\nexport const nameValidator = {\n    type: validatorTypes.PATTERN,\n    pattern: /^[A-Za-z0-9]+[A-Za-z0-9_\\-\\s]*$/,\n    message:\n      'Name must start with alphanumeric characters and can contain underscore and hyphen characters.'\n};\n","import { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nconst apiWithToast = (dispatch, api, statusMessages) => {\n    const hasSuccess = statusMessages?.onSuccess;\n    const hasInfo = statusMessages?.onInfo;\n\n    if (!statusMessages) {\n        statusMessages = {\n            onSuccess: {\n                title: 'Success',\n                description: 'The request has been made successfully'\n            },\n            onError: {\n                title: 'Error',\n                description: 'An error occurred making the request'\n            }\n        };\n    }\n\n    const fetchData = async () => {\n        try {\n            const response = await api();\n            hasInfo &&\n          dispatch({\n              ...addNotification({\n                  variant: 'info',\n                  ...statusMessages.onInfo\n              })\n          });\n            hasSuccess &&\n          dispatch({\n              ...addNotification({\n                  variant: 'success',\n                  ...statusMessages.onSuccess\n              })\n          });\n            return response;\n        } catch (err) {\n            dispatch({\n                ...addNotification({\n                    variant: 'danger',\n                    ...statusMessages.onError,\n                    // Add error message from API, if present\n                    description: err?.Title\n                        ? `${statusMessages.onError.description}: ${err.Title}`\n                        : statusMessages.onError.description\n                })\n            });\n            return err;\n        }\n    };\n\n    return fetchData();\n};\n\nexport default apiWithToast;\n"],"names":["i","CreateGroupModal","isModalOpen","setIsModalOpen","reloadData","dispatch","useDispatch","handleCreateGroup","useCallback","values","statusMessages","onSuccess","title","description","name","onError","apiWithToast","createGroup","schema","useMemo","check","value","validateGroupName","undefined","d","awesomeDebouncePromise","onlyResolvesLast","createGroupSchema","closeModal","submitLabel","onSubmit","propTypes","PropTypes","RepoModal","titleIconVariant","initialValues","variant","size","additionalMappers","ouiaId","isOpen","onClose","FormTemplate","props","disableSubmit","buttonsProps","submit","componentMapper","setTimeout","onCancel","validatorMapper","namePresenceValidator","fields","component","componentTypes","label","helperText","isRequired","autoFocus","validate","type","validatorTypes","threshold","nameValidator","createDescription","systemName","addHostSchema","pattern","message","api","hasSuccess","hasInfo","onInfo","fetchData","response","addNotification","Title"],"sourceRoot":""}