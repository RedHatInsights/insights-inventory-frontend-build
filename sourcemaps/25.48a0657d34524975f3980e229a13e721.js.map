{"version":3,"file":"js/25.17847d0bd9e9286194b1.js","mappings":"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","sources":["webpack:///./src/components/InventoryGroups/helpers/validate.js","webpack:///./src/components/InventoryGroups/Modals/Modal.js","webpack:///./src/components/InventoryGroups/utils/apiWithToast.js","webpack:///./src/components/InventoryGroups/Modals/CreateGroupModal.js","webpack:///./src/components/InventoryGroups/Modals/ModalSchemas/schemes.js","webpack:///./src/components/InventoryGroups/NoGroupsEmptyState.js","webpack:///./src/components/InventoryGroups/index.js","webpack:///./src/routes/InventoryGroups.js"],"sourcesContent":["import validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\n\nexport const nameValidator = {\n    type: validatorTypes.PATTERN,\n    pattern: /^[A-Za-z0-9]+[A-Za-z0-9_\\-\\s]*$/,\n    message:\n      'Name must start with alphanumeric characters and can contain underscore and hyphen characters.'\n};\n","import React from 'react';\nimport { Modal } from '@patternfly/react-core';\nimport FormRenderer from '@data-driven-forms/react-form-renderer/form-renderer';\nimport FormTemplate from '@data-driven-forms/pf4-component-mapper/form-template';\nimport componentMapper from '@data-driven-forms/pf4-component-mapper/component-mapper';\nimport PropTypes from 'prop-types';\n\nconst RepoModal = ({\n    isModalOpen,\n    title,\n    titleIconVariant,\n    closeModal,\n    submitLabel,\n    schema,\n    initialValues,\n    variant,\n    reloadData,\n    size,\n    onSubmit\n}) => {\n    return (\n        <Modal\n            ouiaId=\"group-modal\"\n            variant={size ?? 'small'}\n            title={title}\n            titleIconVariant={titleIconVariant ?? null}\n            isOpen={isModalOpen}\n            onClose={closeModal}\n        >\n            <FormRenderer\n                schema={schema}\n                FormTemplate={(props) => (\n                    <FormTemplate\n                        {...props}\n                        submitLabel={submitLabel}\n                        disableSubmit={['invalid']}\n                        buttonsProps={{\n                            submit: { variant }\n                        }}\n                    />\n                )}\n                initialValues={initialValues}\n                componentMapper={componentMapper}\n                //reload comes from the table and fetches fresh data\n                onSubmit={async (values) => {\n                    await onSubmit(values);\n                    setTimeout(async () => await reloadData(), 500);\n                    closeModal();\n                }}\n                onCancel={() => closeModal()}\n            />\n        </Modal>\n    );\n};\n\nRepoModal.propTypes = {\n    isModalOpen: PropTypes.bool,\n    title: PropTypes.string,\n    closeModal: PropTypes.func,\n    reloadData: PropTypes.func,\n    submitLabel: PropTypes.string,\n    schema: PropTypes.object,\n    initialValues: PropTypes.object,\n    variant: PropTypes.string,\n    onSubmit: PropTypes.func,\n    size: PropTypes.string,\n    additionalMappers: PropTypes.object,\n    titleIconVariant: PropTypes.any,\n    validatorMapper: PropTypes.object\n};\n\nexport default RepoModal;\n","import { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nconst apiWithToast = (dispatch, api, statusMessages) => {\n    const hasSuccess = statusMessages?.onSuccess;\n    const hasInfo = statusMessages?.onInfo;\n\n    if (!statusMessages) {\n        statusMessages = {\n            onSuccess: {\n                title: 'Success',\n                description: 'The request has been made successfully'\n            },\n            onError: {\n                title: 'Error',\n                description: 'An error occurred making the request'\n            }\n        };\n    }\n\n    const fetchData = async () => {\n        try {\n            const response = await api();\n            hasInfo &&\n          dispatch({\n              ...addNotification({\n                  variant: 'info',\n                  ...statusMessages.onInfo\n              })\n          });\n            hasSuccess &&\n          dispatch({\n              ...addNotification({\n                  variant: 'success',\n                  ...statusMessages.onSuccess\n              })\n          });\n            return response;\n        } catch (err) {\n            dispatch({\n                ...addNotification({\n                    variant: 'danger',\n                    ...statusMessages.onError,\n                    // Add error message from API, if present\n                    description: err?.Title\n                        ? `${statusMessages.onError.description}: ${err.Title}`\n                        : statusMessages.onError.description\n                })\n            });\n            return err;\n        }\n    };\n\n    return fetchData();\n};\n\nexport default apiWithToast;\n","import React, { useCallback, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { createGroupSchema } from './ModalSchemas/schemes';\nimport Modal from './Modal';\nimport apiWithToast from '../utils/apiWithToast';\nimport {\n    createGroup,\n    validateGroupName\n} from '../utils/api';\nimport { useDispatch } from 'react-redux';\nimport awesomeDebouncePromise from 'awesome-debounce-promise';\n\nconst CreateGroupModal = ({\n    isModalOpen,\n    setIsModalOpen,\n    reloadData\n}) => {\n    const dispatch = useDispatch();\n\n    const handleCreateGroup = useCallback(\n        (values) => {\n            const statusMessages = {\n                onSuccess: {\n                    title: 'Success',\n                    description: `${values.name} has been created successfully`\n                },\n                onError: { title: 'Error', description: 'Failed to create group' }\n            };\n            return apiWithToast(dispatch, () => createGroup(values), statusMessages);\n        },\n        [isModalOpen]\n    );\n\n    const schema = useMemo(() => {\n        const check = async (value) => {\n            const results = await validateGroupName(value);\n            if (results === true) {\n                throw 'Group name already exists';\n            }\n\n            return undefined;\n        };\n\n        // eslint-disable-next-line new-cap\n        const d = awesomeDebouncePromise(check, 500, { onlyResolvesLast: false });\n        return createGroupSchema(d);\n    }, []);\n\n    return (\n        <Modal\n            data-testid=\"create-group-modal\"\n            isModalOpen={isModalOpen}\n            closeModal={() => setIsModalOpen(false)}\n            title=\"Create group\"\n            submitLabel=\"Create\"\n            schema={schema}\n            reloadData={reloadData}\n            onSubmit={handleCreateGroup}\n        />\n    );\n};\n\nexport default CreateGroupModal;\n\nCreateGroupModal.propTypes = {\n    isModalOpen: PropTypes.bool,\n    setIsModalOpen: PropTypes.func,\n    reloadData: PropTypes.func,\n    deviceIds: PropTypes.array,\n    isOpen: PropTypes.bool\n};\n","import validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport { nameValidator } from '../../helpers/validate';\n\nexport const createGroupSchema = (namePresenceValidator) => ({\n    fields: [\n        {\n            component: componentTypes.TEXT_FIELD,\n            name: 'name',\n            label: 'Group name',\n            helperText:\n        'Can only contain letters, numbers, spaces, hyphens ( - ), and underscores( _ ).',\n            isRequired: true,\n            autoFocus: true,\n            validate: [\n                // async validator has to be first in the list\n                namePresenceValidator,\n                { type: validatorTypes.REQUIRED },\n                { type: validatorTypes.MAX_LENGTH, threshold: 50 },\n                nameValidator\n            ]\n        }\n    ]\n});\n","import React, { useState } from 'react';\nimport {\n    Button,\n    EmptyState,\n    EmptyStateBody,\n    EmptyStateIcon,\n    EmptyStateSecondaryActions,\n    Title\n} from '@patternfly/react-core';\nimport { ExternalLinkAltIcon, PlusCircleIcon } from '@patternfly/react-icons';\n\nimport { global_palette_black_600 as globalPaletteBlack600 } from '@patternfly/react-tokens/dist/js/global_palette_black_600';\nimport CreateGroupModal from './Modals/CreateGroupModal';\n\nconst NoGroupsEmptyState = () => {\n    const [createGroupModalOpen, setCreateGroupModalOpen] = useState(false);\n\n    return (\n        <EmptyState\n            data-ouia-component-id=\"empty-state\"\n            data-ouia-component-type=\"PF4/EmptyState\"\n            data-ouia-safe={true}\n        >\n            <CreateGroupModal\n                isModalOpen={createGroupModalOpen}\n                setIsModalOpen={setCreateGroupModalOpen}\n            //Todo: reloadData={reloadData}  add refetch data so the list of groups will update\n            />\n            <EmptyStateIcon icon={PlusCircleIcon} color={globalPaletteBlack600.value} />\n            <Title headingLevel=\"h4\" size=\"lg\">\n      Create a system group\n            </Title>\n            <EmptyStateBody>\n      Manage device operations efficiently by creating system groups.\n            </EmptyStateBody>\n            <Button variant=\"primary\" onClick={() => setCreateGroupModalOpen(true)}>Create group</Button>\n            <EmptyStateSecondaryActions>\n                <Button\n                    variant=\"link\"\n                    icon={<ExternalLinkAltIcon />}\n                    iconPosition=\"right\"\n                // TODO: component={(props) => <a href='' {...props} />}\n                >\n        Learn more about system groups\n                </Button>\n            </EmptyStateSecondaryActions>\n        </EmptyState>\n    );};\n\nexport default NoGroupsEmptyState;\n","import React from 'react';\nimport {\n    PageHeader,\n    PageHeaderTitle\n} from '@redhat-cloud-services/frontend-components';\nimport NoGroupsEmptyState from './NoGroupsEmptyState';\n\nconst InventoryGroups = () => {\n    return (\n        <React.Fragment>\n            <PageHeader>\n                <PageHeaderTitle title=\"Groups\" />\n            </PageHeader>\n            <section className=\"pf-l-page__main-section pf-c-page__main-section\">\n                <NoGroupsEmptyState />\n            </section>\n        </React.Fragment>\n    );\n};\n\nexport default InventoryGroups;\n","import React, { useEffect } from 'react';\nimport InventoryGroups from '../components/InventoryGroups';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\n\nconst Groups = () => {\n    const chrome = useChrome();\n\n    useEffect(() => {\n        chrome?.updateDocumentTitle?.('Inventory Groups | Red Hat Insights');\n    }, [chrome]);\n\n    return <InventoryGroups />;\n};\n\nexport default Groups;\n"],"names":["nameValidator","type","validatorTypes","pattern","message","i","RepoModal","isModalOpen","title","titleIconVariant","closeModal","submitLabel","schema","initialValues","variant","reloadData","size","onSubmit","Modal","ouiaId","isOpen","onClose","FormTemplate","props","disableSubmit","buttonsProps","submit","componentMapper","values","setTimeout","onCancel","propTypes","PropTypes","additionalMappers","validatorMapper","CreateGroupModal","setIsModalOpen","dispatch","useDispatch","handleCreateGroup","useCallback","statusMessages","onSuccess","description","name","onError","api","hasSuccess","hasInfo","onInfo","fetchData","response","addNotification","Title","apiWithToast","createGroup","useMemo","namePresenceValidator","check","value","validateGroupName","undefined","awesomeDebouncePromise","onlyResolvesLast","fields","component","componentTypes","label","helperText","isRequired","autoFocus","validate","threshold","deviceIds","useState","createGroupModalOpen","setCreateGroupModalOpen","EmptyState","EmptyStateIcon","icon","PlusCircleIcon","color","globalPaletteBlack600","headingLevel","EmptyStateBody","Button","onClick","EmptyStateSecondaryActions","iconPosition","PageHeader","PageHeaderTitle","className","chrome","useChrome","useEffect","updateDocumentTitle"],"sourceRoot":""}