{"version":3,"file":"js/7406.884383470e354c9fc8af.js","mappings":"8OAmCA,QA3BY,WACR,IAAMA,GAAUC,EAAAA,EAAAA,cACVC,GAASC,EAAAA,EAAAA,KAef,OAdAC,EAAAA,EAAAA,YAAU,WAEN,OADAF,EAAOG,OACAH,EAAOI,GACV,kBACA,SAAAC,GACwB,cAAhBA,EAAMC,MACNR,EAAQS,KAAR,WAAiBC,SAASC,QAA1B,OAAmCD,SAASE,OAE5CZ,EAAQS,KAAR,WAAiBF,EAAMC,OAAvB,OAA+BE,SAASC,QAAxC,OAAiDD,SAASE,MAEjE,GAER,GAAE,IAGC,yBAAKC,UAAU,aACX,kBAAC,EAAAC,oBAAD,MACA,kBAAC,IAAD,CAAcC,QAAQ,aAClB,kBAAC,IAAD,OAIf,C,qJCFD,QAtBqB,WACjB,IAAMC,GAAWC,EAAAA,EAAAA,UAAQ,WACrB,IAAMC,GAAoCC,EAAAA,EAAAA,MAC1C,MAAO,CACHC,SAAU,SAACC,GAAD,OAAiBH,EAAMI,gBAAeC,EAAAA,EAAAA,IAAeF,GAArD,EACVF,SAAU,kBAAMD,CAAN,EAEjB,GAAE,IAEH,OAAQF,EACJ,kBAAC,cAAD,CAA0BQ,MAAO,CAC7BC,YAAa,kBAAMT,CAAN,IAEb,kBAAC,EAAAU,SAAD,CAAUR,MAAOF,EAASG,YACtB,kBAAC,gBAAD,CAAQQ,UAAUC,EAAAA,EAAAA,IAAYC,OAAOnB,SAASoB,WAC1C,kBAAC,IAAD,SAIZ,kBAAC,IAAD,KACP,C,6GCxBKC,GAAiBC,EAAAA,EAAAA,OAAK,kBAAM,4EAAN,IACtBC,GAAkBD,EAAAA,EAAAA,OAAK,kBAAM,qFAAN,IAEhBE,EAAS,CAClBC,MAAO,IACPC,OAAQ,gBACRC,gBAAiB,0BAGRC,EAAS,WAClB,IAAMC,EAAe,IAAIC,gBAAgB9B,SAASC,QAElD,OACI,kBAAC,EAAA8B,SAAD,CAAUC,SAAS,IACf,kBAAC,EAAAC,OAAD,KACI,kBAAC,EAAAC,MAAD,CACIC,OAAK,EACLC,KAAMZ,EAAOC,MACbY,OAAQ,gCAAM,kBAAC,IAAD,CACVC,IAAKjB,EACLkB,OAAQV,EAAaW,OAAO,UAC5BC,OAAQZ,EAAaW,OAAO,UAC5BE,aAAcb,EAAaW,OAAO,kBAClCG,WAAU,UAAEd,EAAaW,OAAO,eAAtB,iBAAE,EAA8B,UAAhC,iBAAE,EAAkCI,aAApC,kBAAE,WAA0C,MAAKC,cAAjD,aAAE,SAAwDC,EAAAA,GAAY,IAChFC,gBAAiBlB,EAAaW,OAAO,oBACrCQ,WAAYnB,EAAaW,OAAOS,EAAAA,IAChCC,mBAAoBrB,EAAaW,OAAOW,EAAAA,IACxCC,KAAMvB,EAAaW,OAAO,QAC1Ba,QAASxB,EAAaW,OAAO,aAVzB,EAYRc,UAAU,cAEd,kBAAC,EAAApB,MAAD,CAAOC,OAAK,EAACC,KAAMZ,EAAOG,gBAAiB4B,UAAWhC,EAAiB+B,UAAU,cACjF,kBAAC,EAAApB,MAAD,CAAOC,OAAK,EAACC,KAAMZ,EAAOE,OAAQ6B,UAAWhC,EAAiB+B,UAAU,cACxE,kBAAC,EAAAE,SAAD,CAAUpB,KAAK,IAAIqB,GAAG,OAIrC,C","sources":["webpack:///./src/App.js","webpack:///./src/AppEntry.js","webpack:///./src/Routes.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Routes } from './Routes';\nimport './App.scss';\nimport { NotificationsPortal } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { RBACProvider } from '@redhat-cloud-services/frontend-components/RBACProvider';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\n\nconst App = () => {\n    const history = useHistory();\n    const chrome = useChrome();\n    useEffect(() => {\n        chrome.init();\n        return chrome.on(\n            'APP_NAVIGATION',\n            event => {\n                if (event.navId === 'inventory') {\n                    history.push(`/${location.search}${location.hash}`);\n                } else {\n                    history.push(`/${event.navId}${location.search}${location.hash}`);\n                }\n            }\n        );\n    }, []);\n\n    return (\n        <div className=\"inventory\">\n            <NotificationsPortal />\n            <RBACProvider appName=\"inventory\">\n                <Routes />\n            </RBACProvider>\n        </div>\n    );\n};\n\nexport default App;\n","import React, { useMemo } from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { getStore, RegistryContext, updateReducers } from './store';\nimport App from './App';\nimport { getBaseName } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport logger from 'redux-logger';\nimport Fallback from './components/SpinnerFallback';\n\nconst InventoryApp = () => {\n    const registry = useMemo(() => {\n        const store = IS_DEV ? getStore(logger) : getStore();\n        return {\n            register: (newReducers) => store.replaceReducer(updateReducers(newReducers)),\n            getStore: () => store\n        };\n    }, []);\n\n    return (registry ? (\n        <RegistryContext.Provider value={{\n            getRegistry: () => registry\n        }}>\n            <Provider store={registry.getStore()}>\n                <Router basename={getBaseName(window.location.pathname)}>\n                    <App />\n                </Router>\n            </Provider>\n        </RegistryContext.Provider>\n    ) : <Fallback />);\n};\n\nexport default InventoryApp;\n","import { Route, Redirect, Switch } from 'react-router-dom';\nimport React, { lazy, Suspense } from 'react';\nimport { tagsMapper } from './constants';\nimport { RHCD_FILTER_KEY, UPDATE_METHOD_KEY } from './Utilities/constants';\nimport RenderWrapper from './Utilities/Wrapper';\nconst InventoryTable = lazy(() => import('./routes/InventoryTable'));\nconst InventoryDetail = lazy(() => import('./routes/InventoryDetail'));\n\nexport const routes = {\n    table: '/',\n    detail: '/:inventoryId',\n    detailWithModal: '/:inventoryId/:modalId'\n};\n\nexport const Routes = () => {\n    const searchParams = new URLSearchParams(location.search);\n\n    return (\n        <Suspense fallback=\"\">\n            <Switch>\n                <Route\n                    exact\n                    path={routes.table}\n                    render={() => <RenderWrapper\n                        cmp={InventoryTable}\n                        status={searchParams.getAll('status')}\n                        source={searchParams.getAll('source')}\n                        filterbyName={searchParams.getAll('hostname_or_id')}\n                        tagsFilter={searchParams.getAll('tags')?.[0]?.split?.(',').reduce?.(tagsMapper, [])}\n                        operatingSystem={searchParams.getAll('operating_system')}\n                        rhcdFilter={searchParams.getAll(RHCD_FILTER_KEY)}\n                        updateMethodFilter={searchParams.getAll(UPDATE_METHOD_KEY)}\n                        page={searchParams.getAll('page')}\n                        perPage={searchParams.getAll('per_page')}/>\n                    }\n                    rootClass='inventory'\n                />\n                <Route exact path={routes.detailWithModal} component={InventoryDetail} rootClass='inventory' />\n                <Route exact path={routes.detail} component={InventoryDetail} rootClass='inventory' />\n                <Redirect path=\"*\" to=\"/\" />\n            </Switch>\n        </Suspense>\n    );\n};\n"],"names":["history","useHistory","chrome","useChrome","useEffect","init","on","event","navId","push","location","search","hash","className","NotificationsPortal","appName","registry","useMemo","store","getStore","register","newReducers","replaceReducer","updateReducers","value","getRegistry","Provider","basename","getBaseName","window","pathname","InventoryTable","lazy","InventoryDetail","routes","table","detail","detailWithModal","Routes","searchParams","URLSearchParams","Suspense","fallback","Switch","Route","exact","path","render","cmp","status","getAll","source","filterbyName","tagsFilter","split","reduce","tagsMapper","operatingSystem","rhcdFilter","RHCD_FILTER_KEY","updateMethodFilter","UPDATE_METHOD_KEY","page","perPage","rootClass","component","Redirect","to"],"sourceRoot":""}