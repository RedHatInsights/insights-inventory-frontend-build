{"version":3,"file":"js/14.c8ffb15f4bd1dd43d1b7.js","mappings":"43BAQA,IAAMA,EAAW,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,aAAcC,EAAvB,EAAuBA,UAAWC,EAAlC,EAAkCA,WAAYC,EAA9C,EAA8CA,YAAaC,EAA3D,EAA2DA,eAAgBC,EAA3E,EAA2EA,MAA3E,OAAwF,kBAAC,IAAD,CACrGC,MAAM,OACNC,WAAaP,EACbQ,MAAK,kBACEP,EAAY,CAAC,CAAEK,MAAO,SAAUG,MAAOV,EAAKW,SAAY,KAD1D,OAEER,EAAa,CAAC,CAAEI,MAAO,UAAWG,MAAOV,EAAKY,UAAa,KAF7D,OAGEP,EAAiB,CAAC,CAAEE,MAAO,eAAgBG,OAAQG,EAAAA,EAAAA,IAAOb,EAAKc,aAC9D,kBAAC,IAAD,CAAYC,KAAO,IAAIC,KAAKhB,EAAKc,aAAeG,KAAK,aACrD,kBACG,KANN,OAOEX,EAAMY,KAAI,gBAAGC,EAAH,EAAGA,QAAH,4BAENA,GAAW,CAAEA,QAAS,SAACC,GAAD,OAAOD,EAAQC,EAAGhB,cAKvDL,EAASsB,UAAY,CACjBpB,aAAcqB,IAAAA,KACdlB,YAAakB,IAAAA,KACbtB,KAAMsB,IAAAA,MAAgB,CAClBX,OAAQW,IAAAA,OACRV,QAASU,IAAAA,OACTR,YAAaQ,IAAAA,OACbC,IAAKD,IAAAA,QAAkBA,IAAAA,UAE3BpB,UAAWoB,IAAAA,KACXnB,WAAYmB,IAAAA,KACZjB,eAAgBiB,IAAAA,KAChBhB,MAAOgB,IAAAA,QAAkBE,EAAAA,KAE7BzB,EAAS0B,aAAe,CACpBxB,cAAc,EACdG,YAAa,aACbE,MAAO,GACPJ,WAAW,EACXC,YAAY,EACZE,gBAAgB,GAGpB,SAAeqB,EAAAA,EAAAA,UAAQ,gBAEfC,EAFe,EACnBC,mBACID,cAFe,MAIhB,CACH1B,aAAc0B,GAAiBA,EAAcE,OAC7C7B,MAAM8B,EAAAA,EAAAA,IAAaH,MANvB,CAOI5B","sources":["webpack:///./src/components/GeneralInfo/BiosCard/BiosCard.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport LoadingCard from '../LoadingCard';\nimport { biosSelector } from '../selectors';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { extraShape, isDate } from '../../../constants';\n\nconst BiosCard = ({ bios, detailLoaded, hasVendor, hasVersion, handleClick, hasReleaseDate, extra }) => (<LoadingCard\n    title=\"BIOS\"\n    isLoading={ !detailLoaded }\n    items={ [\n        ...hasVendor ? [{ title: 'Vendor', value: bios.vendor }] : [],\n        ...hasVersion ? [{ title: 'Version', value: bios.version }] : [],\n        ...hasReleaseDate ? [{ title: 'Release date', value: (isDate(bios.releaseDate) ?\n            <DateFormat date={ new Date(bios.releaseDate) } type=\"onlyDate\" /> :\n            'Not available'\n        ) }] : [],\n        ...extra.map(({ onClick, ...item }) => ({\n            ...item,\n            ...onClick && { onClick: (e) => onClick(e, handleClick) }\n        }))\n    ] }\n/>);\n\nBiosCard.propTypes = {\n    detailLoaded: PropTypes.bool,\n    handleClick: PropTypes.func,\n    bios: PropTypes.shape({\n        vendor: PropTypes.string,\n        version: PropTypes.string,\n        releaseDate: PropTypes.string,\n        csm: PropTypes.arrayOf(PropTypes.string)\n    }),\n    hasVendor: PropTypes.bool,\n    hasVersion: PropTypes.bool,\n    hasReleaseDate: PropTypes.bool,\n    extra: PropTypes.arrayOf(extraShape)\n};\nBiosCard.defaultProps = {\n    detailLoaded: false,\n    handleClick: () => undefined,\n    extra: [],\n    hasVendor: true,\n    hasVersion: true,\n    hasReleaseDate: true\n};\n\nexport default connect(({\n    systemProfileStore: {\n        systemProfile\n    }\n}) => ({\n    detailLoaded: systemProfile && systemProfile.loaded,\n    bios: biosSelector(systemProfile)\n}))(BiosCard);\n"],"names":["BiosCard","bios","detailLoaded","hasVendor","hasVersion","handleClick","hasReleaseDate","extra","title","isLoading","items","value","vendor","version","isDate","releaseDate","date","Date","type","map","onClick","e","propTypes","PropTypes","csm","extraShape","defaultProps","connect","systemProfile","systemProfileStore","loaded","biosSelector"],"sourceRoot":""}