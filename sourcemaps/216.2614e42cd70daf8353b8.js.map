{"version":3,"file":"js/216.77e10c1146b2842c00b3.js","mappings":"yMAeA,QAR6B,kBACzB,kBAAC,IAAD,CAASA,QAAQ,qBACb,0BAAMC,UAAU,gDACZ,kBAAC,KAAD,U,4ECPNC,EAA2B,SAAC,GAAsB,QAApBC,EAAoB,EAApBA,cAChC,GAA8C,UAA1CA,MAAAA,GAAA,UAAAA,EAAeC,wBAAf,eAAiCC,MAAiB,OAC5CC,EAAWH,EAAcC,iBAAiBG,OAASJ,EAAcC,iBAAiBI,OAAxE,UACVL,EAAcC,iBAAiBG,MADrB,sBAC8BJ,EAAcC,wBAD5C,aAC8B,EAAgCI,QAAW,KAEzF,OAAO,sCACGF,GAId,OAAO,+BACFH,MAAAA,GAAA,UAAAA,EAAeC,wBAAf,eAAiCC,OAAQ,kBAIlDH,EAAyBO,UAAY,CACjCN,cAAeO,IAAAA,MAAgB,CAC3BL,KAAMK,IAAAA,OACNH,MAAOG,IAAAA,OACPF,MAAOE,IAAAA,OAEPN,iBAAkBM,IAAAA,MAAgB,CAAEL,KAAMK,IAAAA,OAAkBH,MAAOG,IAAAA,OAAkBF,MAAOE,IAAAA,YAIpG,W,yDCwBA,QAnBoB,SAACC,EAAMC,EAAIC,EAAMC,GAAjB,OAChB,yBAAKb,UAAU,oBACX,yBAAKc,IAAI,cAAcF,MAAAA,OAAvB,EAAuBA,EAAMG,YAC7B,yBAAKD,IAAI,OAAOd,UAAWa,MAAAA,GAAAA,EAAOG,SAAW,iBAAmB,IAC1DH,MAAAA,GAAAA,EAAOG,SACLN,EACA,uBACIO,OAAO,MACPC,KAAI,UAAMC,SAASC,UAAf,OAA2D,MAAjCD,SAASC,SAASC,QAAQ,GAAa,GAAK,KAAtE,OAA4EV,GAChFW,QAAU,SAAAC,IA/BX,SAACA,EAAOT,EAAR,GAA4D,IAA7CU,EAA6C,EAA7CA,OAAoBC,EAAyB,EAArCC,WAAsBV,EAAe,EAAfA,SAC5D,GAAIQ,IAAWR,EAAU,CACrB,IAAMW,EAAaJ,EAAMK,SAAWL,EAAMM,SAA2B,IAAhBN,EAAMO,MAC3D,GAAIH,EACA,OACOF,GACPA,EAASF,EAAOT,EAAKa,GAI7BJ,EAAMQ,iBACNR,EAAMS,kBAqBcN,CAAWH,EAAOZ,EAAIE,KAGxBH,O,u2BCvBf,IAAMuB,EAAe,CACxBT,QAAQ,EACRU,YAAY,EACZC,eAAe,EACfC,UAAW,GACXC,OAAQ,CACJvB,IAAK,UACLwB,UAAW,SAINC,EAAiB,CAC1B,CACIzB,IAAK,eACL0B,MAAO,OACPC,WAAYC,EAAAA,GAEhB,CACI5B,IAAK,OACL0B,MAAO,OACP3B,MAAO,CAAE8B,MAAO,GAAIC,UAAU,GAE9BH,WAAY,SAACI,EAAOC,GAAR,OAAqB,kBAAC,EAAAC,cAAD,CAAeC,MAAOH,EAAMI,OAAQH,SAAUA,MAEnF,CACIhC,IAAK,iBACL0B,MAAO,kBAAC,IAAD,CAASzC,QAAS,mDAA+B,qCAExD0C,WAAY,SAACvC,GAAD,OAAmB,kBAAC,IAAD,CAA0BA,cAAeA,KACxEW,MAAO,CAAE8B,MAAO,GAAIC,UAAU,IAElC,CACI9B,IAAK,UACL0B,MAAO,YAEPC,WAAY,SACRI,EACAK,EAFQ,GAKF,IADgBC,EAChB,EADFC,iBAAmDC,EACjD,EADwBC,wBAAqDC,EAC7E,EAD4DC,gBAAqCC,EACjG,EADoFC,YAE1F,OAAOC,EAAAA,EAAqB,kBAAC,IAAD,CACxBR,OAAQA,EACRS,aAAcP,EACdE,MAAOA,EACPM,OAAQ,gBAAGC,EAAH,EAAGA,IAAH,OAAa,kBAAC,aAAD,KACjB,kBAAC,IAAD,CAAYC,KAAOlB,EAAQmB,WACvB,kBAAC,aAAD,KACI,6BAAOF,GADX,qBAKFL,GAAc,kBAAC,IAAD,SAXI,IAc1B,kBAAC,IAAD,CAAYM,KAAOlB,IAdO,KAc4B,IAAIoB,KAAKpB,GAAOqB,kBAE5ErD,MAAO,CAAE8B,MAAO,MAwBxB,SAASwB,EAAeC,EAAxB,GAAiH,QAAhFC,QAAWC,EAAqE,EAArEA,QAAmBC,EAAkD,EAA5DC,SAAmBC,EAAyC,EAAzCA,KAAMzB,EAAmC,EAAnCA,MAAO0B,EAA4B,EAA5BA,MAAOlD,EAAqB,EAArBA,OAAQmD,EAAa,EAAbA,QAEhG,YAAeC,IAAXpD,QAAkCoD,IAATH,QAAkCG,IAAZL,EAInD,OACOH,GADP,IAEIS,cAAeF,GAAW,GAC1BnD,YAAmBoD,IAAXpD,GAAwBA,EAEhCsD,MAAMC,EAAAA,EAAAA,IAAiB,CAACX,EAAMU,KAAMR,IAAUU,QAAO,SAAApE,GAAI,OAAKY,GAAgBZ,EAAKqE,WACnFV,aAAqBK,IAAZL,EAAwBA,EAAUH,EAAMG,QACjDE,UAAeG,IAATH,EAAqBA,EAAOL,EAAMK,KACxCzB,WAAiB4B,IAAV5B,EAAsBA,EAAQoB,EAAMpB,MAC3C0B,WAAiBE,IAAVF,EAAsBA,EAAQN,EAAMM,QAZpCN,EAgBf,SAASc,EAAgBd,EAAzB,GAA6C,IAAXC,EAAW,EAAXA,QAC9B,cACOD,GADP,IAEIe,MAAOd,IAwDR,SAASe,EAAShB,EAAlB,GAA4C,IAAjBC,EAAiB,EAAjBA,QAASgB,EAAQ,EAARA,KACvC,EAAqCjB,EAAMU,KAAOV,EAAMU,KAAKQ,MAAK,gBAAG3E,EAAH,EAAGA,GAAH,OAAY0E,EAAKvC,WAAanC,KAAMyD,EAAMmB,QAAU,GAArGC,GAAjB,EAAQC,MAAR,aACA,cACOrB,GADP,IAEIsB,gBAAgB,EAChBF,gBAAiB,EAAF,KACRA,GADQ,IAEXC,KAAME,OAAOC,OAAOvB,EAAQC,SAAS,GACrCuB,UAAWR,EAAKQ,UAChBpB,KAAMJ,EAAQI,KACdF,QAASF,EAAQG,SACjBtC,YAAY,MAkBjB,SAAS4D,EAAsB1B,EAA/B,GAA+D,IAAZ2B,EAAY,EAAvB1B,QAAW0B,OACtD,cACO3B,GADP,IAEI4B,cAAeD,EACfP,qBAAiBZ,IAsBzB,wBACKqB,EAAAA,GAAAA,oBAnBE,SAAiB7B,EAAjB,GAAkF,QAAxDC,QAAWC,EAA6C,EAA7CA,QAASI,EAAoC,EAApCA,MAAOD,EAA6B,EAA7BA,KAAgBF,EAAa,EAAvBC,SAC9D,cACOJ,GADP,IAEI8B,QAASP,OAAOQ,QAAQC,GAAAA,CAAQ9B,GAAS,qBAAG+B,IAAOC,cAA8BC,KAAI,qCAAmB,CACpGnG,KADiF,KAEjFqF,KAFiF,SAIrFe,kBAAmB,CACfjC,QAAAA,EACAE,KAAAA,GAEJgC,oBAAqB/B,EAAQH,EAAUG,EAAQH,EAAU,EACzDmC,aAAchC,EACdvC,eAAe,EACfuD,gBAAgB,QAIxB,SAEKO,EAAAA,GAAAA,kBAAgC,SAAC7B,GAAD,cAAiBA,GAAjB,IAAwBjC,eAAe,EAAOuD,gBAAgB,QAFnG,SAGKO,EAAAA,GAAAA,uBA5JL,SAAyB7B,EAAzB,GAA0C,IAARiB,EAAQ,EAARA,KAC9B,cACOjB,GADP,IAEIuC,SAAS5B,EAAAA,EAAAA,IAAiB,CACtBxC,EAAeyC,QAAO,kBAAqB,SAArB,EAAGlE,MAA4BuE,MAAAA,OAAlB,EAAkBA,EAAMD,aAC3DhB,EAAMuC,SACP,OACH7B,KAAM,GACNtD,QAAQ,QAiJhB,SAIKyE,EAAAA,GAAAA,wBAAuC9B,IAJ5C,SAKK8B,EAAAA,GAAAA,uBAAsCf,IAL3C,SAMKe,EAAAA,GAAAA,mBA7CE,SAAyB7B,EAAzB,GAA0C,IAARiB,EAAQ,EAARA,KACrC,EAAqCjB,EAAMU,KAAOV,EAAMU,KAAKQ,MAAK,gBAAG3E,EAAH,EAAGA,GAAH,OAAY0E,EAAKvC,WAAanC,KAAMyD,EAAMmB,QAAU,GAArGC,GAAjB,EAAQC,MAAR,aACA,cACOrB,GADP,IAEIsB,gBAAgB,EAChBF,gBAAiB,EAAF,KACRA,GADQ,IAEXK,UAAWR,EAAKQ,UAChB3D,YAAY,UA+BxB,SAOK+D,EAAAA,GAAAA,oBAAmCb,IAPxC,SAQKa,EAAAA,GAAAA,kBAAiCf,IARtC,SASK0B,EAAAA,GAAkBzC,IATvB,SAUK0C,EAAAA,IAAgB,SAACzC,EAAO0C,GAAR,OAAmB3C,EAAeC,EAAO,CACtDC,QAAS,EAAF,KACAyC,EAAOzC,SADP,IAEH7C,QAAQ,UAbpB,SAgBKuF,EAAAA,IAhGL,SAAsB3C,EAAtB,GAAkF,QAAnDC,QAAmD,IAAxCzD,KAAQoG,EAAgC,EAAhCA,MAAUpG,GAAsB,YAAdqG,EAAc,EAAdA,SAChE,EAA6B7C,EAAvBS,cAAAA,OAAN,MAAsB,GAAtB,EACA,GAAIoC,EAAU,CAMV,IAAMrB,GALNf,EAAgB,GAAH,eACNA,GADM,CAETjE,IAFS,OAGNoG,GAAgB,MAEMT,KAAI,SAAAW,GAAM,OAAIA,EAAOrE,SAClDgC,EAAgBA,EAAcG,QAAO,SAACA,EAAQlE,GAAT,OAAiB8E,EAAOuB,YAAYnC,EAAOnC,SAAW/B,UAE3F+D,EAAcuC,OAAOvC,EAAc0B,KAAI,SAAAW,GAAM,OAAIA,EAAOrE,SAAOwE,QAAQzG,EAAKiC,OAAQ,GAChFmE,GACAA,EAAMM,SAAQ,SAAAC,GACV1C,EAAcuC,OAAOvC,EAAc0B,KAAI,SAAAW,GAAM,OAAIA,EAAOrE,SAAOwE,QAAQE,EAAQ1E,OAAQ,MAKnG,cACOuB,GADP,IAEIS,cAAAA,QA2DR,SAiBK2C,EAAAA,IA5HL,SAAsBpD,EAAtB,GAA0C,IAAXC,EAAW,EAAXA,QACrBS,GAAO,OAAIV,EAAMU,MAUvB,MATiB,GAAG2C,OAAOpD,GAClBiD,SAAQ,YAAsB,IAAnB3G,EAAmB,EAAnBA,GAAIsG,EAAe,EAAfA,SACd1B,EAAST,EAAKQ,MAAK,SAAAC,GAAM,OAAIA,EAAO5E,KAAOA,KAC7C4E,EACAA,EAAO0B,SAAWA,EAElBnC,EAAKwC,SAAQ,SAAA1G,GAAI,OAAIA,EAAKqG,SAAWA,QAG7C,OACO7C,GADP,IAEIU,KAAAA,QA8FR,SAkBK4C,EAAAA,IA5GL,SAAoBtD,EAApB,GAA4D,QAA/BC,QAAWvD,EAAoB,EAApBA,IAAKwB,EAAe,EAAfA,UACzC,cACO8B,GADP,IAEI/B,OAAQ,CACJvB,IAAAA,EACAwB,UAAAA,SAqFZ,SAmBKqF,EAAAA,IAhKL,SAAsBvD,GAClB,cACOA,GADP,IAEIS,cAAe,SA0IvB,SAoBK+C,EAAAA,IAAmB,SAACxD,EAAD,OAAqByD,EAArB,EAAUxD,QAAWwD,UAArB,cAA6CzD,GAA7C,IAAoD5C,QAASqG,QApBrF,SAqBKC,EAAAA,GAAmBhC,IArBxB,SAsBKiC,EAAAA,IAAiB,SAAC3D,EAAD,OAAUC,EAAV,EAAUA,QAAV,cAA8BD,GAA9B,IAAqChC,UAAWiC,OAtBtE","sources":["webpack:///./src/Utilities/InsightsDisconnected.js","webpack:///./src/Utilities/OperatingSystemFormatter.js","webpack:///./src/components/InventoryTable/TitleColumn.js","webpack:///./src/store/entities.js"],"sourcesContent":["import React from 'react';\n\nimport { Tooltip } from '@patternfly/react-core';\nimport { DisconnectedIcon } from '@patternfly/react-icons';\n\nimport './InsightsDisconnected.scss';\n\nconst InsightsDisconnected = () => (\n    <Tooltip content=\"Insights disabled\">\n        <span className=\"pf-u-ml-sm ins-c-inventor__disconnected-icon\">\n            <DisconnectedIcon />\n        </span>\n    </Tooltip>\n);\n\nexport default InsightsDisconnected;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst OperatingSystemFormatter = ({ systemProfile }) => {\n    if (systemProfile?.operating_system?.name === 'RHEL') {\n        const version = (systemProfile.operating_system.major && systemProfile.operating_system.minor)\n        && `${systemProfile.operating_system.major}.${systemProfile.operating_system?.minor}` || null;\n\n        return <span>\n            RHEL {version}\n        </span>;\n    }\n\n    return <span>\n        {systemProfile?.operating_system?.name || 'Not available'}\n    </span>;\n};\n\nOperatingSystemFormatter.propTypes = {\n    systemProfile: PropTypes.shape({\n        name: PropTypes.string,\n        major: PropTypes.number,\n        minor: PropTypes.number,\n        // eslint-disable-next-line camelcase\n        operating_system: PropTypes.shape({ name: PropTypes.string, major: PropTypes.number, minor: PropTypes.number })\n    })\n};\n\nexport default OperatingSystemFormatter;\n","/* eslint-disable camelcase */\n/* eslint-disable react/prop-types */\nimport React from 'react';\n\n/**\n * Helper function to proprly calculate what to do when user clicks on first cell.\n * Either full redirect if used with ctrl button or `onRowClick` from props is used.\n * @param {*} event html event, to find out if meta key was clicked.\n * @param {*} key inventory UUID.\n * @param {*} props additional props from `EntityTable` - loaded, onRowClick and noDetail.\n */\nconst onRowClick = (event, key, { loaded, onRowClick: rowClick, noDetail }) => {\n    if (loaded && !noDetail) {\n        const isMetaKey = (event.ctrlKey || event.metaKey || event.which === 2);\n        if (isMetaKey) {\n            return;\n        } else if (rowClick) {\n            rowClick(event, key, isMetaKey);\n        }\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n};\n\n/**\n * Helper function to generate first cell in plain inventory either with clickable detail or just data from attribut.\n * This is later on used in redux in `renderFunc`.\n * @param {React.node} data React node with information that will be shown to user as column title.\n * @param {string} id inventory UUID, used to navigate to correct URL.\n * @param {*} item row data, holds every information from redux store for currecnt row.\n * @param {*} props additional props passed from `EntityTable` - holds any props passed to inventory table.\n */\nconst TitleColumn = (data, id, item, props) => (\n    <div className=\"ins-composed-col\">\n        <div key=\"os_release\">{item?.os_release}</div>\n        <div key=\"data\" className={props?.noDetail ? 'ins-m-nodetail' : ''}>\n            { props?.noDetail ?\n                data :\n                <a\n                    widget=\"col\"\n                    href={ `${location.pathname}${location.pathname.substr(-1) === '/' ? '' : '/'}${id}` }\n                    onClick={ event => {\n                        onRowClick(event, id, props);\n                    }}\n                >\n                    { data }\n                </a> }\n        </div>\n    </div>\n);\n\nexport default TitleColumn;\n","import React from 'react';\nimport {\n    ACTION_TYPES,\n    SELECT_ENTITY,\n    CHANGE_SORT,\n    SHOW_ENTITIES,\n    FILTER_SELECT,\n    UPDATE_ENTITIES,\n    ENTITIES_LOADING,\n    CLEAR_FILTERS,\n    TOGGLE_TAG_MODAL,\n    CONFIG_CHANGED\n} from './action-types';\nimport { mergeArraysByKey } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { CullingInformation } from '@redhat-cloud-services/frontend-components/CullingInfo';\nimport { TagWithDialog } from '../Utilities/index';\nimport groupBy from 'lodash/groupBy';\nimport TitleColumn from '../components/InventoryTable/TitleColumn';\nimport InsightsDisconnected from '../Utilities/InsightsDisconnected';\nimport OperatingSystemFormatter from '../Utilities/OperatingSystemFormatter';\nimport { Tooltip } from '@patternfly/react-core';\n\nexport const defaultState = {\n    loaded: false,\n    tagsLoaded: false,\n    allTagsLoaded: false,\n    invConfig: {},\n    sortBy: {\n        key: 'updated',\n        direction: 'desc'\n    }\n};\n\nexport const defaultColumns = [\n    {\n        key: 'display_name',\n        title: 'Name',\n        renderFunc: TitleColumn\n    },\n    {\n        key: 'tags',\n        title: 'Tags',\n        props: { width: 10, isStatic: true },\n        // eslint-disable-next-line react/display-name\n        renderFunc: (value, systemId) => <TagWithDialog count={value.length} systemId={systemId} />\n    },\n    {\n        key: 'system_profile',\n        title: <Tooltip content={<span>Operating system</span>}><span>OS</span></Tooltip>,\n        // eslint-disable-next-line react/display-name\n        renderFunc: (systemProfile) => <OperatingSystemFormatter systemProfile={systemProfile} />,\n        props: { width: 10, isStatic: true }\n    },\n    {\n        key: 'updated',\n        title: 'Last seen',\n        // eslint-disable-next-line react/display-name\n        renderFunc: (\n            value,\n            _id,\n            {\n                culled_timestamp: culled, stale_warning_timestamp: staleWarn, stale_timestamp: stale, insights_id: insightsId\n            }) => {\n            return CullingInformation ? <CullingInformation\n                culled={culled}\n                staleWarning={staleWarn}\n                stale={stale}\n                render={({ msg }) => <React.Fragment>\n                    <DateFormat date={ value } extraTitle={ (\n                        <React.Fragment>\n                            <div>{ msg }</div>\n                        Last seen:{` `}\n                        </React.Fragment>\n                    ) }/>\n                    {!insightsId && <InsightsDisconnected />}\n                </React.Fragment>\n                }\n            > <DateFormat date={ value } /> </CullingInformation> : new Date(value).toLocaleString();\n        },\n        props: { width: 10 }\n    }\n];\n\nfunction entitiesPending(state, { meta }) {\n    return {\n        ...state,\n        columns: mergeArraysByKey([\n            defaultColumns.filter(({ key }) => key !== 'tags' || meta?.showTags),\n            state.columns\n        ], 'key'),\n        rows: [],\n        loaded: false\n    };\n}\n\nfunction clearFilters(state) {\n    return {\n        ...state,\n        activeFilters: []\n    };\n}\n\n// eslint-disable-next-line camelcase\nfunction entitiesLoaded(state, { payload: { results, per_page: perPage, page, count, total, loaded, filters } }) {\n    // Data are loaded and APi returned malicious data\n    if (loaded === undefined && (page === undefined || perPage === undefined)) {\n        return state;\n    }\n\n    return {\n        ...state,\n        activeFilters: filters || [],\n        loaded: loaded === undefined || loaded,\n        // filter data only if we are loaded\n        rows: mergeArraysByKey([state.rows, results]).filter(item => !loaded ? true : item.created),\n        perPage: perPage !== undefined ? perPage : state.perPage,\n        page: page !== undefined ? page : state.page,\n        count: count !== undefined ? count : state.count,\n        total: total !== undefined ? total : state.total\n    };\n}\n\nfunction loadingRejected(state, { payload }) {\n    return {\n        ...state,\n        error: payload\n    };\n}\n\nfunction selectEntity(state, { payload }) {\n    const rows = [...state.rows];\n    const toSelect = [].concat(payload);\n    toSelect.forEach(({ id, selected }) => {\n        const entity = rows.find(entity => entity.id === id);\n        if (entity) {\n            entity.selected = selected;\n        } else {\n            rows.forEach(item => item.selected = selected);\n        }\n    });\n    return {\n        ...state,\n        rows\n    };\n}\n\nfunction changeSort(state, { payload: { key, direction } }) {\n    return {\n        ...state,\n        sortBy: {\n            key,\n            direction\n        }\n    };\n}\n\nfunction selectFilter(state, { payload: { item: { items, ...item }, selected } }) {\n    let { activeFilters = [] } = state;\n    if (selected) {\n        activeFilters = [\n            ...activeFilters,\n            item,\n            ...items ? items : []\n        ];\n        const values = activeFilters.map(active => active.value);\n        activeFilters = activeFilters.filter((filter, key) => values.lastIndexOf(filter.value) === key);\n    } else {\n        activeFilters.splice(activeFilters.map(active => active.value).indexOf(item.value), 1);\n        if (items) {\n            items.forEach(subItem => {\n                activeFilters.splice(activeFilters.map(active => active.value).indexOf(subItem.value), 1);\n            });\n        }\n    }\n\n    return {\n        ...state,\n        activeFilters\n    };\n}\n\nexport function showTags(state, { payload, meta }) {\n    const { tags, ...activeSystemTag } = state.rows ? state.rows.find(({ id }) => meta.systemId === id) : state.entity || {};\n    return {\n        ...state,\n        tagModalLoaded: true,\n        activeSystemTag: {\n            ...activeSystemTag,\n            tags: Object.values(payload.results)[0],\n            tagsCount: meta.tagsCount,\n            page: payload.page,\n            perPage: payload.per_page,\n            tagsLoaded: true\n        }\n    };\n}\n\nexport function showTagsPending(state, { meta }) {\n    const { tags, ...activeSystemTag } = state.rows ? state.rows.find(({ id }) => meta.systemId === id) : state.entity || {};\n    return {\n        ...state,\n        tagModalLoaded: false,\n        activeSystemTag: {\n            ...activeSystemTag,\n            tagsCount: meta.tagsCount,\n            tagsLoaded: false\n        }\n    };\n}\n\nexport function toggleTagModalReducer(state, { payload: { isOpen } }) {\n    return {\n        ...state,\n        showTagDialog: isOpen,\n        activeSystemTag: undefined\n    };\n}\n\nexport function allTags(state, { payload: { results, total, page, per_page: perPage } }) {\n    return {\n        ...state,\n        allTags: Object.entries(groupBy(results, ({ tag: { namespace } }) => namespace)).map(([key, value]) => ({\n            name: key,\n            tags: value\n        })),\n        allTagsPagination: {\n            perPage,\n            page\n        },\n        additionalTagsCount: total > perPage ? total - perPage : 0,\n        allTagsTotal: total,\n        allTagsLoaded: true,\n        tagModalLoaded: true\n    };\n}\n\nexport default {\n    [ACTION_TYPES.ALL_TAGS_FULFILLED]: allTags,\n    [ACTION_TYPES.ALL_TAGS_PENDING]: (state) => ({ ...state, allTagsLoaded: false, tagModalLoaded: false }),\n    [ACTION_TYPES.LOAD_ENTITIES_PENDING]: entitiesPending,\n    [ACTION_TYPES.LOAD_ENTITIES_FULFILLED]: entitiesLoaded,\n    [ACTION_TYPES.LOAD_ENTITIES_REJECTED]: loadingRejected,\n    [ACTION_TYPES.LOAD_TAGS_PENDING]: showTagsPending,\n    [ACTION_TYPES.LOAD_TAGS_FULFILLED]: showTags,\n    [ACTION_TYPES.ALL_TAGS_REJECTED]: loadingRejected,\n    [UPDATE_ENTITIES]: entitiesLoaded,\n    [SHOW_ENTITIES]: (state, action) => entitiesLoaded(state, {\n        payload: {\n            ...action.payload,\n            loaded: false\n        }\n    }),\n    [FILTER_SELECT]: selectFilter,\n    [SELECT_ENTITY]: selectEntity,\n    [CHANGE_SORT]: changeSort,\n    [CLEAR_FILTERS]: clearFilters,\n    [ENTITIES_LOADING]: (state, { payload: { isLoading } }) => ({ ...state, loaded: !isLoading }),\n    [TOGGLE_TAG_MODAL]: toggleTagModalReducer,\n    [CONFIG_CHANGED]: (state, { payload }) => ({ ...state, invConfig: payload })\n};\n"],"names":["content","className","OperatingSystemFormatter","systemProfile","operating_system","name","version","major","minor","propTypes","PropTypes","data","id","item","props","key","os_release","noDetail","widget","href","location","pathname","substr","onClick","event","loaded","rowClick","onRowClick","isMetaKey","ctrlKey","metaKey","which","preventDefault","stopPropagation","defaultState","tagsLoaded","allTagsLoaded","invConfig","sortBy","direction","defaultColumns","title","renderFunc","TitleColumn","width","isStatic","value","systemId","TagWithDialog","count","length","_id","culled","culled_timestamp","staleWarn","stale_warning_timestamp","stale","stale_timestamp","insightsId","insights_id","CullingInformation","staleWarning","render","msg","date","extraTitle","Date","toLocaleString","entitiesLoaded","state","payload","results","perPage","per_page","page","total","filters","undefined","activeFilters","rows","mergeArraysByKey","filter","created","loadingRejected","error","showTags","meta","find","entity","activeSystemTag","tags","tagModalLoaded","Object","values","tagsCount","toggleTagModalReducer","isOpen","showTagDialog","ACTION_TYPES","allTags","entries","groupBy","tag","namespace","map","allTagsPagination","additionalTagsCount","allTagsTotal","columns","UPDATE_ENTITIES","SHOW_ENTITIES","action","FILTER_SELECT","items","selected","active","lastIndexOf","splice","indexOf","forEach","subItem","SELECT_ENTITY","concat","CHANGE_SORT","CLEAR_FILTERS","ENTITIES_LOADING","isLoading","TOGGLE_TAG_MODAL","CONFIG_CHANGED"],"sourceRoot":""}