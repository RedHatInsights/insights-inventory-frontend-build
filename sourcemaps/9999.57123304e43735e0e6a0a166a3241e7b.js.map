{"version":3,"file":"js/9999.f711315bfa57f84ce358.js","mappings":"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","sources":["webpack:///./src/components/InventoryGroups/Modals/DeleteGroupModal.js","webpack:///./src/components/InventoryGroups/Modals/Modal.js","webpack:///./src/components/InventoryGroups/Modals/RenameGroupModal.js","webpack:///./src/components/InventoryGroups/helpers/validate.js","webpack:///./src/components/InventoryGroups/utils/apiWithToast.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport Modal from './Modal';\nimport { deleteGroupsById } from '../utils/api';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons/dist/esm/icons/exclamation-triangle-icon';\nimport warningColor from '@patternfly/react-tokens/dist/esm/global_warning_color_100';\nimport { Text } from '@patternfly/react-core';\nimport apiWithToast from '../utils/apiWithToast';\nimport { useDispatch } from 'react-redux';\n\nconst description = (name = '', groupsCount) => {\n    const isMultiple = name === '' && groupsCount;\n\n    return isMultiple ? (\n        <Text>\n            <strong>{groupsCount}</strong> groups and all their data will be\n            permanently deleted. Associated systems will be removed from the\n            groups but will not be deleted.\n        </Text>\n    ) : (\n        <Text>\n            <strong>{name}</strong> and all its data will be\n            permanently deleted. Associated systems will be removed from the\n            group but will not be deleted.\n        </Text>\n    );\n};\n\nconst schema = (name, groupsCount) => ({\n    fields: [\n        {\n            component: componentTypes.PLAIN_TEXT,\n            name: 'warning-message',\n            label: description(name, groupsCount)\n        },\n        {\n            component: componentTypes.CHECKBOX,\n            name: 'confirmation',\n            label: 'I understand that this action cannot be undone.',\n            validate: [{ type: validatorTypes.REQUIRED }]\n        }\n    ]\n});\n\nconst defaultValueToBeRemoved = () => console.log('data reloaded');\n\nconst DeleteGroupModal = ({\n    isModalOpen,\n    setIsModalOpen,\n    reloadData = defaultValueToBeRemoved,\n    modalState\n}) => {\n    const { id, name, ids } = modalState;\n    const isMultiple = (ids || []).length > 0;\n    const dispatch = useDispatch();\n\n    const handleDeleteGroup = () => {\n        const statusMessages = {\n            onSuccess: {\n                title: 'Success',\n                description: `${name} has been removed successfully`\n            },\n            onError: { title: 'Error', description: 'Failed to delete group' }\n        };\n        apiWithToast(dispatch, () => deleteGroupsById(isMultiple ? ids : [id]), statusMessages);\n    };\n\n    return (\n        <Modal\n            isModalOpen={isModalOpen}\n            closeModal={() => setIsModalOpen(false)}\n            title={isMultiple ? 'Delete groups?' : 'Delete group?'}\n            titleIconVariant={() => (\n                <ExclamationTriangleIcon color={warningColor.value} />\n            )}\n            variant=\"danger\"\n            submitLabel=\"Delete\"\n            schema={schema(name, (ids || []).length)}\n            onSubmit={handleDeleteGroup}\n            reloadData={reloadData}\n        />\n    );\n};\n\nDeleteGroupModal.propTypes = {\n    modalState: PropTypes.shape({\n        id: PropTypes.string,\n        name: PropTypes.string,\n        ids: PropTypes.array\n    }),\n    isModalOpen: PropTypes.bool,\n    setIsModalOpen: PropTypes.func,\n    reloadData: PropTypes.func\n};\nexport default DeleteGroupModal;\n","import React from 'react';\nimport { Modal } from '@patternfly/react-core';\nimport FormRenderer from '@data-driven-forms/react-form-renderer/form-renderer';\nimport FormTemplate from '@data-driven-forms/pf4-component-mapper/form-template';\nimport componentMapper from '@data-driven-forms/pf4-component-mapper/component-mapper';\nimport PropTypes from 'prop-types';\n\nconst RepoModal = ({\n    isModalOpen,\n    title,\n    titleIconVariant,\n    closeModal,\n    submitLabel,\n    schema,\n    initialValues,\n    variant,\n    reloadData,\n    size,\n    onSubmit\n}) => {\n    return (\n        <Modal\n            ouiaId=\"group-modal\"\n            variant={size ?? 'small'}\n            title={title}\n            titleIconVariant={titleIconVariant ?? null}\n            isOpen={isModalOpen}\n            onClose={closeModal}\n        >\n            <FormRenderer\n                schema={schema}\n                FormTemplate={(props) => (\n                    <FormTemplate\n                        {...props}\n                        submitLabel={submitLabel}\n                        disableSubmit={['invalid']}\n                        buttonsProps={{\n                            submit: { variant }\n                        }}\n                    />\n                )}\n                initialValues={initialValues}\n                componentMapper={componentMapper}\n                //reload comes from the table and fetches fresh data\n                onSubmit={async (values) => {\n                    await onSubmit(values);\n                    setTimeout(async () => await reloadData(), 500);\n                    closeModal();\n                }}\n                onCancel={() => closeModal()}\n            />\n        </Modal>\n    );\n};\n\nRepoModal.propTypes = {\n    isModalOpen: PropTypes.bool,\n    title: PropTypes.string,\n    closeModal: PropTypes.func,\n    reloadData: PropTypes.func,\n    submitLabel: PropTypes.string,\n    schema: PropTypes.object,\n    initialValues: PropTypes.object,\n    variant: PropTypes.string,\n    onSubmit: PropTypes.func,\n    size: PropTypes.string,\n    additionalMappers: PropTypes.object,\n    titleIconVariant: PropTypes.any,\n    validatorMapper: PropTypes.object\n};\n\nexport default RepoModal;\n","import React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport Modal from './Modal';\nimport awesomeDebouncePromise from 'awesome-debounce-promise';\nimport { validateGroupName, updateGroupById } from '../utils/api';\nimport { nameValidator } from '../helpers/validate';\nimport apiWithToast from '../utils/apiWithToast';\nimport { useDispatch } from 'react-redux';\n\nconst renameGroupSchema = (namePresenceValidator) => ({\n    fields: [\n        {\n            component: componentTypes.TEXT_FIELD,\n            name: 'name',\n            label: 'Name',\n            helperText:\n          'Can only contain letters, numbers, spaces, hyphens ( - ), and underscores( _ ).',\n            isRequired: true,\n            validate: [\n                namePresenceValidator,\n                { type: validatorTypes.REQUIRED },\n                { type: validatorTypes.MAX_LENGTH, threshold: 50 },\n                nameValidator\n            ]\n        }\n    ]\n});\n\nconst RenameGroupModal = ({\n    isModalOpen,\n    setIsModalOpen,\n    modalState,\n    reloadData\n}) => {\n    const { id, name } = modalState;\n    const dispatch = useDispatch();\n\n    const handleRenameModal = (values) => {\n        const statusMessages = {\n            onSuccess: {\n                title: 'Success',\n                description: `${name} has been renamed to ${values.name} successfully`\n            },\n            onError: { title: 'Error', description: 'Failed to rename group' }\n        };\n        apiWithToast(dispatch, () => updateGroupById(id, values), statusMessages);\n    };\n\n    const schema = useMemo(() => {\n        const check = async (value) => {\n            const results = await validateGroupName(value);\n            if (results === true) {\n                throw 'Group name already exists';\n            }\n\n            return undefined;\n        };\n\n        // eslint-disable-next-line new-cap\n        const d = awesomeDebouncePromise(check, 500, { onlyResolvesLast: false });\n        return renameGroupSchema(d);\n    }, []);\n\n    return (\n        <Modal\n            isModalOpen={isModalOpen}\n            closeModal={() => setIsModalOpen(false)}\n            title=\"Rename group\"\n            submitLabel=\"Save\"\n            schema={schema}\n            initialValues={modalState}\n            onSubmit={handleRenameModal}\n            reloadData={reloadData}\n        />\n    );\n};\n\nRenameGroupModal.propTypes = {\n    modalState: PropTypes.shape({\n        id: PropTypes.string,\n        name: PropTypes.string\n    }),\n    isModalOpen: PropTypes.bool,\n    setIsModalOpen: PropTypes.func,\n    reloadData: PropTypes.func\n};\n\nexport default RenameGroupModal;\n","import validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\n\nexport const nameValidator = {\n    type: validatorTypes.PATTERN,\n    pattern: /^[A-Za-z0-9]+[A-Za-z0-9_\\-\\s]*$/,\n    message:\n      'Name must start with alphanumeric characters and can contain underscore and hyphen characters.'\n};\n","import { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nconst apiWithToast = (dispatch, api, statusMessages) => {\n    const hasSuccess = statusMessages?.onSuccess;\n    const hasInfo = statusMessages?.onInfo;\n\n    if (!statusMessages) {\n        statusMessages = {\n            onSuccess: {\n                title: 'Success',\n                description: 'The request has been made successfully'\n            },\n            onError: {\n                title: 'Error',\n                description: 'An error occurred making the request'\n            }\n        };\n    }\n\n    const fetchData = async () => {\n        try {\n            const response = await api();\n            hasInfo &&\n          dispatch({\n              ...addNotification({\n                  variant: 'info',\n                  ...statusMessages.onInfo\n              })\n          });\n            hasSuccess &&\n          dispatch({\n              ...addNotification({\n                  variant: 'success',\n                  ...statusMessages.onSuccess\n              })\n          });\n            return response;\n        } catch (err) {\n            dispatch({\n                ...addNotification({\n                    variant: 'danger',\n                    ...statusMessages.onError,\n                    // Add error message from API, if present\n                    description: err?.Title\n                        ? `${statusMessages.onError.description}: ${err.Title}`\n                        : statusMessages.onError.description\n                })\n            });\n            return err;\n        }\n    };\n\n    return fetchData();\n};\n\nexport default apiWithToast;\n"],"names":["description","name","groupsCount","isMultiple","schema","fields","component","componentTypes","label","validate","type","validatorTypes","defaultValueToBeRemoved","console","log","DeleteGroupModal","isModalOpen","setIsModalOpen","reloadData","modalState","id","ids","length","dispatch","useDispatch","closeModal","title","titleIconVariant","color","warningColor","variant","submitLabel","onSubmit","statusMessages","onSuccess","onError","apiWithToast","deleteGroupsById","propTypes","PropTypes","i","RepoModal","initialValues","size","ouiaId","isOpen","onClose","FormTemplate","props","disableSubmit","buttonsProps","submit","componentMapper","values","setTimeout","onCancel","additionalMappers","validatorMapper","RenameGroupModal","useMemo","namePresenceValidator","check","value","validateGroupName","undefined","awesomeDebouncePromise","onlyResolvesLast","helperText","isRequired","threshold","nameValidator","updateGroupById","pattern","message","api","hasSuccess","hasInfo","onInfo","fetchData","response","addNotification","Title"],"sourceRoot":""}