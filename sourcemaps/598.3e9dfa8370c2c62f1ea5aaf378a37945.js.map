{"version":3,"file":"js/598.9fef7a183fe4be97819f.js","mappings":"+PAOMA,EAAc,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAAT,OAChB,uBACIC,UAAU,kCACVC,KAAI,UAAMC,OAAOC,SAASF,KAAtB,YAA8BH,GAClCC,QAAUA,GAEV,kBAAC,KAAD,QAIRF,EAAYO,UAAY,CACpBN,KAAMO,IAAAA,OAAAA,WACNN,QAASM,IAAAA,KAAAA,YAGb,IAAIC,OAAmBC,EAEjBC,EAA+B,SAACC,GAClC,IAAQC,GAAcC,EAAAA,EAAAA,GAAe,YAAa,CAC9C,gBACA,wBACA,sBAHID,UAUR,OAJIA,IACAJ,EAAmBI,GAGlBA,EAIE,kBAACb,EAAgBY,GAHb,MAMfD,EAA6BJ,UAAY,CACrCN,KAAMO,IAAAA,OAAAA,WACNN,QAASM,IAAAA,KAAAA,YAGb,IAAMO,EAAoB,SAAC,GAAmC,IAAjCC,EAAiC,EAAjCA,iBAAqBJ,GAAY,YAC1D,OAAIK,SAASC,OAAOC,QAAUH,GAAoBP,EACvC,kBAACT,EAAgBY,GAGI,kBAArBI,EACA,kBAACL,EAAiCC,GAGtC,MAGXG,EAAkBR,UAAY,CAC1BS,iBAAkBR,IAAAA,MAGtB,W,4NCtDqBY,EAAAA,SAAAA,I,2bACjB,WAAaR,GAAO,6BAChB,cAAMA,IACDS,MAAQ,GAFG,E,qCAmBpB,WAAU,WACN,EAEIC,KAAKV,MADLW,EADJ,EACIA,MAAOC,EADX,EACWA,OAAQC,EADnB,EACmBA,SAAUC,EAD7B,EAC6BA,SAAUC,EADvC,EACuCA,UAAWC,EADlD,EACkDA,YAAaC,EAD/D,EAC+DA,aAAcC,EAD7E,EAC6EA,cAAeC,EAD5F,EAC4FA,YAEpFC,EAAUV,KAAKD,MAAfW,MAER,OACI,kBAAC,IAAD,CACIC,QAAQ,QACRV,MAAQA,EACRpB,UAAU,gCACV,aAAawB,EAAY,GAAH,OAAMA,EAAN,YAA4B,cAClDO,OAASN,EACTJ,OAASA,EACTW,QAAU,SAAAC,GAAK,OAAIX,EAASW,IAC5BC,QAAU,CACN,kBAAC,KAAD,CAAQC,IAAI,SAAS,cAAY,SAASL,QAAQ,YAAY/B,QAAUuB,EAAWS,OAASL,GAA5F,UAGA,kBAAC,KAAD,CACIS,IAAI,UACJ,cAAY,UACZL,QAAQ,UACR/B,QAAU,kBAAMwB,EAAS,EAAKL,MAAMW,QACpCE,OAASJ,GALb,UAWJ,kBAAC,KAAD,CACIE,MAAQA,EACRO,KAAK,OACLL,OAASH,EACTS,SAAW,SAAAR,GAAK,OAAI,EAAKS,SAAS,CAAET,MAAAA,KACpC,aAAaL,Q,uCAjD7B,SAAiCf,EAAOS,GACpC,OAAKT,EAAMY,YAISd,IAAhBW,EAAMW,MACC,KAGJ,CACHA,MAAOpB,EAAMoB,OAAS,IARf,CAAEA,WAAOtB,O,EARPU,CAAuBsB,EAAAA,WA8D5CtB,EAAeb,UAAY,CACvBgB,MAAOf,IAAAA,OACPgB,OAAQhB,IAAAA,KACRiB,SAAUjB,IAAAA,KACVkB,SAAUlB,IAAAA,KACVmB,UAAWnB,IAAAA,OACXoB,YAAapB,IAAAA,OACbqB,aAAcrB,IAAAA,OACdsB,cAAetB,IAAAA,OACfuB,YAAavB,IAAAA,OACbwB,MAAOxB,IAAAA,QAGXY,EAAeuB,aAAe,CAC1BlB,SAAU,aACVC,SAAU,aACVF,QAAQ,EACRD,MAAO,GACPI,UAAW,e","sources":["webpack:///./src/components/GeneralInfo/EditButton/EditButton.js","webpack:///./src/components/GeneralInfo/TextInputModal/TextInputModal.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { usePermissions } from '@redhat-cloud-services/frontend-components-utilities/RBACHook';\n\nimport { PencilAltIcon } from '@patternfly/react-icons';\n\nconst InnerButton = ({ link, onClick }) => (\n    <a\n        className=\"ins-c-inventory__detail--action\"\n        href={ `${window.location.href}/${link}` }\n        onClick={ onClick }\n    >\n        <PencilAltIcon />\n    </a>\n);\n\nInnerButton.propTypes = {\n    link: PropTypes.string.isRequired,\n    onClick: PropTypes.func.isRequired\n};\n\nlet permissionsCache = undefined;\n\nconst EditButtonUnknownPermissions = (props) => {\n    const { hasAccess } = usePermissions('inventory', [\n        'inventory:*:*',\n        'inventory:hosts:write',\n        'inventory:*:write'\n    ]);\n\n    if (hasAccess) {\n        permissionsCache = hasAccess;\n    }\n\n    if (!hasAccess) {\n        return null;\n    }\n\n    return <InnerButton {...props}/>;\n};\n\nEditButtonUnknownPermissions.propTypes = {\n    link: PropTypes.string.isRequired,\n    onClick: PropTypes.func.isRequired\n};\n\nconst EditButtonWrapper = ({ writePermissions, ...props }) => {\n    if (insights.chrome.isProd || writePermissions || permissionsCache) {\n        return <InnerButton {...props} />;\n    }\n\n    if (typeof writePermissions !== 'boolean') {\n        return <EditButtonUnknownPermissions {...props} />;\n    }\n\n    return null;\n};\n\nEditButtonWrapper.propTypes = {\n    writePermissions: PropTypes.bool\n};\n\nexport default EditButtonWrapper;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n    Button,\n    Modal,\n    TextInput\n} from '@patternfly/react-core';\n\nexport default class TextInputModal extends Component {\n    constructor (props) {\n        super(props);\n        this.state = {};\n    }\n\n    static getDerivedStateFromProps (props, state) {\n        if (!props.isOpen) {\n            return { value: undefined };\n        }\n\n        if (state.value !== undefined) {\n            return null;\n        }\n\n        return {\n            value: props.value || ''\n        };\n    };\n\n    render () {\n        const {\n            title, isOpen, onCancel, onSubmit, ariaLabel, modalOuiaId, cancelOuiaId, confirmOuiaId, inputOuiaId\n        } = this.props;\n        const { value } = this.state;\n\n        return (\n            <Modal\n                variant=\"small\"\n                title={ title }\n                className=\"ins-c-inventory__detail--edit\"\n                aria-label={ ariaLabel ? `${ariaLabel} - modal` : 'input modal' }\n                ouiaId={ modalOuiaId }\n                isOpen={ isOpen }\n                onClose={ event => onCancel(event) }\n                actions={ [\n                    <Button key=\"cancel\" data-action=\"cancel\" variant=\"secondary\" onClick={ onCancel } ouiaId={ cancelOuiaId }>\n                        Cancel\n                    </Button>,\n                    <Button\n                        key=\"confirm\"\n                        data-action=\"confirm\"\n                        variant=\"primary\"\n                        onClick={ () => onSubmit(this.state.value) }\n                        ouiaId={ confirmOuiaId }\n                    >\n                        Save\n                    </Button>\n                ] }\n            >\n                <TextInput\n                    value={ value }\n                    type=\"text\"\n                    ouiaId={ inputOuiaId }\n                    onChange={ value => this.setState({ value }) }\n                    aria-label={ ariaLabel  }\n                />\n            </Modal>\n        );\n    }\n}\n\nTextInputModal.propTypes = {\n    title: PropTypes.string,\n    isOpen: PropTypes.bool,\n    onCancel: PropTypes.func,\n    onSubmit: PropTypes.func,\n    ariaLabel: PropTypes.string,\n    modalOuiaId: PropTypes.string,\n    cancelOuiaId: PropTypes.string,\n    confirmOuiaId: PropTypes.string,\n    inputOuiaId: PropTypes.string,\n    value: PropTypes.string\n};\n\nTextInputModal.defaultProps = {\n    onCancel: () => undefined,\n    onSubmit: () => undefined,\n    isOpen: false,\n    title: '',\n    ariaLabel: 'input text'\n};\n"],"names":["InnerButton","link","onClick","className","href","window","location","propTypes","PropTypes","permissionsCache","undefined","EditButtonUnknownPermissions","props","hasAccess","usePermissions","EditButtonWrapper","writePermissions","insights","chrome","isProd","TextInputModal","state","this","title","isOpen","onCancel","onSubmit","ariaLabel","modalOuiaId","cancelOuiaId","confirmOuiaId","inputOuiaId","value","variant","ouiaId","onClose","event","actions","key","type","onChange","setState","Component","defaultProps"],"sourceRoot":""}