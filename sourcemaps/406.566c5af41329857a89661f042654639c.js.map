{"version":3,"file":"js/406.1659597871962.997dc30fb64e35696dd6.js","mappings":"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","sources":["webpack:///./src/App.js","webpack:///./src/AppEntry.js","webpack:///./src/Routes.js","webpack:///./src/config.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Routes } from './Routes';\nimport './App.scss';\nimport { INVENTORY_ROOT } from './config';\nimport { NotificationsPortal } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { RBACProvider } from '@redhat-cloud-services/frontend-components/RBACProvider';\n\nconst App = () => {\n    const history = useHistory();\n    useEffect(() => {\n        insights.chrome.init();\n        insights.chrome.identifyApp(INVENTORY_ROOT);\n        return insights.chrome.on(\n            'APP_NAVIGATION',\n            event => {\n                if (event.navId === 'inventory') {\n                    history.push(`/${location.search}${location.hash}`);\n                } else {\n                    history.push(`/${event.navId}${location.search}${location.hash}`);\n                }\n            }\n        );\n    }, []);\n\n    return (\n        <div className=\"inventory\">\n            <NotificationsPortal />\n            <RBACProvider appName=\"inventory\">\n                <Routes />\n            </RBACProvider>\n        </div>\n    );\n};\n\nexport default App;\n","import React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { init, RegistryContext } from './store';\nimport App from './App';\nimport { getBaseName } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport logger from 'redux-logger';\nimport Fallback from './components/SpinnerFallback';\n\nconst InventoryApp = () => {\n    const [registry, setRegistry] = useState();\n    const store = registry?.getStore();\n\n    useEffect(() => {\n        setRegistry(init(IS_DEV ? logger : undefined));\n\n        return () => {\n            setRegistry(undefined);\n        };\n    }, []);\n\n    return (registry ? (\n        <RegistryContext.Provider value={{\n            getRegistry: () => registry\n        }}>\n            <Provider store={store}>\n                <Router basename={getBaseName(window.location.pathname)}>\n                    <App />\n                </Router>\n            </Provider>\n        </RegistryContext.Provider>\n    ) : <Fallback />);\n};\n\nexport default InventoryApp;\n","import { Route, Switch, matchPath, useHistory } from 'react-router-dom';\nimport React, { lazy, Suspense, useContext, useEffect } from 'react';\nimport { tagsMapper } from './constants';\nimport { reducers, RegistryContext, tableReducer } from './store';\nimport { mergeWithEntities } from './store/reducers';\n\nconst InventoryTable = lazy(() => import('./routes/InventoryTable'));\nconst InventoryDetail = lazy(() => import('./routes/InventoryDetail'));\n\nexport const routes = {\n    table: '/',\n    detail: '/:inventoryId'\n};\n\nfunction checkPaths(technology, app) {\n    return Object\n    .values(routes)\n    .some(\n        route => {\n            return matchPath(location.href, { path: `${document.baseURI}${technology}/${app}${route}` });\n        }\n    );\n}\n\nexport const Routes = () => {\n    const { getRegistry } = useContext(RegistryContext);\n    useEffect(() => {\n        getRegistry().register({\n            ...reducers,\n            ...mergeWithEntities(tableReducer)\n        });\n    }, [getRegistry]);\n    const history = useHistory();\n    const pathName = window.location.pathname.split('/');\n    const searchParams = new URLSearchParams(location.search);\n    pathName.shift();\n\n    if (pathName[0] === 'beta') {\n        pathName.shift();\n    }\n\n    if (!checkPaths(pathName[0], pathName[1])) {\n        history.push(`${routes.table}${location.search}${location.hash}`);\n    }\n\n    return (\n        <Suspense fallback=\"\">\n            <Switch>\n                <Route\n                    exact\n                    path={routes.table}\n                    render={() => <InventoryTable\n                        status={searchParams.getAll('status')}\n                        source={searchParams.getAll('source')}\n                        filterbyName={searchParams.getAll('hostname_or_id')}\n                        tagsFilter={searchParams.getAll('tags')?.[0]?.split?.(',').reduce?.(tagsMapper, [])}\n                        operatingSystem={searchParams.getAll('operating_system')}\n                        page={searchParams.getAll('page')}\n                        perPage={searchParams.getAll('per_page')}\n                    />}\n                    rootClass='inventory'\n                />\n                <Route path={routes.detail} component={InventoryDetail} rootClass='inventory' />\n            </Switch>\n        </Suspense>\n    );\n};\n","\nexport const INVENTORY_API_BASE = '/api/inventory/v1';\nexport const INVENTORY_ROOT = 'inventory';\n"],"names":["history","useHistory","useEffect","insights","chrome","init","identifyApp","INVENTORY_ROOT","on","event","navId","push","location","search","hash","className","NotificationsPortal","appName","useState","registry","setRegistry","store","getStore","undefined","value","getRegistry","Provider","basename","getBaseName","window","pathname","InventoryTable","lazy","InventoryDetail","routes","table","detail","Routes","useContext","RegistryContext","register","reducers","mergeWithEntities","tableReducer","technology","app","pathName","split","searchParams","URLSearchParams","shift","Object","values","some","route","matchPath","href","path","document","baseURI","Suspense","fallback","Switch","Route","exact","render","status","getAll","source","filterbyName","tagsFilter","reduce","tagsMapper","operatingSystem","page","perPage","rootClass","component"],"sourceRoot":""}