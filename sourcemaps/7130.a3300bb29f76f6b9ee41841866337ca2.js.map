{"version":3,"file":"js/7130.3c3bf9941c665d048a91.js","mappings":"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","sources":["webpack:///./src/components/InventoryGroups/Modals/CreateGroupModal.js","webpack:///./src/components/InventoryGroups/Modals/ModalSchemas/schemes.js","webpack:///./src/components/InventoryGroups/Modals/DeleteGroupModal.js","webpack:///./src/components/InventoryGroups/Modals/Modal.js","webpack:///./src/components/InventoryGroups/Modals/RenameGroupModal.js","webpack:///./src/components/InventoryGroups/NoGroupsEmptyState.js","webpack:///./src/components/InventoryGroups/helpers/validate.js","webpack:///./src/components/InventoryGroups/utils/apiWithToast.js"],"sourcesContent":["import React, { useCallback, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { createGroupSchema } from './ModalSchemas/schemes';\nimport Modal from './Modal';\nimport apiWithToast from '../utils/apiWithToast';\nimport {\n    createGroup,\n    validateGroupName\n} from '../utils/api';\nimport { useDispatch } from 'react-redux';\nimport awesomeDebouncePromise from 'awesome-debounce-promise';\n\nconst CreateGroupModal = ({\n    isModalOpen,\n    setIsModalOpen,\n    reloadData\n}) => {\n    const dispatch = useDispatch();\n\n    const handleCreateGroup = useCallback(\n        (values) => {\n            const statusMessages = {\n                onSuccess: {\n                    title: 'Success',\n                    description: `${values.name} has been created successfully`\n                },\n                onError: { title: 'Error', description: 'Failed to create group' }\n            };\n            return apiWithToast(dispatch, () => createGroup(values), statusMessages);\n        },\n        [isModalOpen]\n    );\n\n    const schema = useMemo(() => {\n        const check = async (value) => {\n            const results = await validateGroupName(value);\n            if (results === true) {\n                throw 'Group name already exists';\n            }\n\n            return undefined;\n        };\n\n        // eslint-disable-next-line new-cap\n        const d = awesomeDebouncePromise(check, 500, { onlyResolvesLast: false });\n        return createGroupSchema(d);\n    }, []);\n\n    return (\n        <Modal\n            data-testid=\"create-group-modal\"\n            isModalOpen={isModalOpen}\n            closeModal={() => setIsModalOpen(false)}\n            title=\"Create group\"\n            submitLabel=\"Create\"\n            schema={schema}\n            reloadData={reloadData}\n            onSubmit={handleCreateGroup}\n        />\n    );\n};\n\nexport default CreateGroupModal;\n\nCreateGroupModal.propTypes = {\n    isModalOpen: PropTypes.bool,\n    setIsModalOpen: PropTypes.func,\n    reloadData: PropTypes.func\n};\n","import validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport { nameValidator } from '../../helpers/validate';\n\nexport const createGroupSchema = (namePresenceValidator) => ({\n    fields: [\n        {\n            component: componentTypes.TEXT_FIELD,\n            name: 'name',\n            label: 'Group name',\n            helperText:\n        'Can only contain letters, numbers, spaces, hyphens ( - ), and underscores( _ ).',\n            isRequired: true,\n            autoFocus: true,\n            validate: [\n                // async validator has to be first in the list\n                namePresenceValidator,\n                { type: validatorTypes.REQUIRED },\n                { type: validatorTypes.MAX_LENGTH, threshold: 50 },\n                nameValidator\n            ]\n        }\n    ]\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport Modal from './Modal';\nimport { deleteGroupsById } from '../utils/api';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons/dist/esm/icons/exclamation-triangle-icon';\nimport warningColor from '@patternfly/react-tokens/dist/esm/global_warning_color_100';\nimport { Text } from '@patternfly/react-core';\nimport apiWithToast from '../utils/apiWithToast';\nimport { useDispatch } from 'react-redux';\n\nconst description = (name = '', groupsCount) => {\n    const isMultiple = name === '' && groupsCount;\n\n    return isMultiple ? (\n        <Text>\n            <strong>{groupsCount}</strong> groups and all their data will be\n            permanently deleted. Associated systems will be removed from the\n            groups but will not be deleted.\n        </Text>\n    ) : (\n        <Text>\n            <strong>{name}</strong> and all its data will be\n            permanently deleted. Associated systems will be removed from the\n            group but will not be deleted.\n        </Text>\n    );\n};\n\nconst schema = (name, groupsCount) => ({\n    fields: [\n        {\n            component: componentTypes.PLAIN_TEXT,\n            name: 'warning-message',\n            label: description(name, groupsCount)\n        },\n        {\n            component: componentTypes.CHECKBOX,\n            name: 'confirmation',\n            label: 'I understand that this action cannot be undone.',\n            validate: [{ type: validatorTypes.REQUIRED }]\n        }\n    ]\n});\n\nconst defaultValueToBeRemoved = () => console.log('data reloaded');\n\nconst DeleteGroupModal = ({\n    isModalOpen,\n    setIsModalOpen,\n    reloadData = defaultValueToBeRemoved,\n    modalState\n}) => {\n    const { id, name, ids } = modalState;\n    const isMultiple = (ids || []).length > 0;\n    const dispatch = useDispatch();\n\n    const handleDeleteGroup = () => {\n        const statusMessages = {\n            onSuccess: {\n                title: 'Success',\n                description: `${name} has been removed successfully`\n            },\n            onError: { title: 'Error', description: 'Failed to delete group' }\n        };\n        apiWithToast(dispatch, () => deleteGroupsById(isMultiple ? ids : [id]), statusMessages);\n    };\n\n    return (\n        <Modal\n            isModalOpen={isModalOpen}\n            closeModal={() => setIsModalOpen(false)}\n            title={isMultiple ? 'Delete groups?' : 'Delete group?'}\n            titleIconVariant={() => (\n                <ExclamationTriangleIcon color={warningColor.value} />\n            )}\n            variant=\"danger\"\n            submitLabel=\"Delete\"\n            schema={schema(name, (ids || []).length)}\n            onSubmit={handleDeleteGroup}\n            reloadData={reloadData}\n        />\n    );\n};\n\nDeleteGroupModal.propTypes = {\n    modalState: PropTypes.shape({\n        id: PropTypes.string,\n        name: PropTypes.string,\n        ids: PropTypes.array\n    }),\n    isModalOpen: PropTypes.bool,\n    setIsModalOpen: PropTypes.func,\n    reloadData: PropTypes.func\n};\nexport default DeleteGroupModal;\n","import React from 'react';\nimport { Modal } from '@patternfly/react-core';\nimport FormRenderer from '@data-driven-forms/react-form-renderer/form-renderer';\nimport FormTemplate from '@data-driven-forms/pf4-component-mapper/form-template';\nimport componentMapper from '@data-driven-forms/pf4-component-mapper/component-mapper';\nimport PropTypes from 'prop-types';\n\nconst RepoModal = ({\n    isModalOpen,\n    title,\n    titleIconVariant,\n    closeModal,\n    submitLabel,\n    schema,\n    initialValues,\n    variant,\n    reloadData,\n    size,\n    onSubmit\n}) => {\n    return (\n        <Modal\n            ouiaId=\"group-modal\"\n            variant={size ?? 'small'}\n            title={title}\n            titleIconVariant={titleIconVariant ?? null}\n            isOpen={isModalOpen}\n            onClose={closeModal}\n        >\n            <FormRenderer\n                schema={schema}\n                FormTemplate={(props) => (\n                    <FormTemplate\n                        {...props}\n                        submitLabel={submitLabel}\n                        disableSubmit={['invalid']}\n                        buttonsProps={{\n                            submit: { variant }\n                        }}\n                    />\n                )}\n                initialValues={initialValues}\n                componentMapper={componentMapper}\n                //reload comes from the table and fetches fresh data\n                onSubmit={async (values) => {\n                    await onSubmit(values);\n                    setTimeout(async () => await reloadData(), 500);\n                    closeModal();\n                }}\n                onCancel={() => closeModal()}\n            />\n        </Modal>\n    );\n};\n\nRepoModal.propTypes = {\n    isModalOpen: PropTypes.bool,\n    title: PropTypes.string,\n    closeModal: PropTypes.func,\n    reloadData: PropTypes.func,\n    submitLabel: PropTypes.string,\n    schema: PropTypes.object,\n    initialValues: PropTypes.object,\n    variant: PropTypes.string,\n    onSubmit: PropTypes.func,\n    size: PropTypes.string,\n    additionalMappers: PropTypes.object,\n    titleIconVariant: PropTypes.any,\n    validatorMapper: PropTypes.object\n};\n\nexport default RepoModal;\n","import React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport Modal from './Modal';\nimport awesomeDebouncePromise from 'awesome-debounce-promise';\nimport { validateGroupName, updateGroupById } from '../utils/api';\nimport { nameValidator } from '../helpers/validate';\nimport apiWithToast from '../utils/apiWithToast';\nimport { useDispatch } from 'react-redux';\n\nconst renameGroupSchema = (namePresenceValidator) => ({\n    fields: [\n        {\n            component: componentTypes.TEXT_FIELD,\n            name: 'name',\n            label: 'Name',\n            helperText:\n          'Can only contain letters, numbers, spaces, hyphens ( - ), and underscores( _ ).',\n            isRequired: true,\n            validate: [\n                namePresenceValidator,\n                { type: validatorTypes.REQUIRED },\n                { type: validatorTypes.MAX_LENGTH, threshold: 50 },\n                nameValidator\n            ]\n        }\n    ]\n});\n\nconst RenameGroupModal = ({\n    isModalOpen,\n    setIsModalOpen,\n    modalState,\n    reloadData\n}) => {\n    const { id, name } = modalState;\n    const dispatch = useDispatch();\n\n    const handleRenameModal = (values) => {\n        const statusMessages = {\n            onSuccess: {\n                title: 'Success',\n                description: `${name} has been renamed to ${values.name} successfully`\n            },\n            onError: { title: 'Error', description: 'Failed to rename group' }\n        };\n        apiWithToast(dispatch, () => updateGroupById(id, values), statusMessages);\n    };\n\n    const schema = useMemo(() => {\n        const check = async (value) => {\n            const results = await validateGroupName(value);\n            if (results === true) {\n                throw 'Group name already exists';\n            }\n\n            return undefined;\n        };\n\n        // eslint-disable-next-line new-cap\n        const d = awesomeDebouncePromise(check, 500, { onlyResolvesLast: false });\n        return renameGroupSchema(d);\n    }, []);\n\n    return (\n        <Modal\n            isModalOpen={isModalOpen}\n            closeModal={() => setIsModalOpen(false)}\n            title=\"Rename group\"\n            submitLabel=\"Save\"\n            schema={schema}\n            initialValues={modalState}\n            onSubmit={handleRenameModal}\n            reloadData={reloadData}\n        />\n    );\n};\n\nRenameGroupModal.propTypes = {\n    modalState: PropTypes.shape({\n        id: PropTypes.string,\n        name: PropTypes.string\n    }),\n    isModalOpen: PropTypes.bool,\n    setIsModalOpen: PropTypes.func,\n    reloadData: PropTypes.func\n};\n\nexport default RenameGroupModal;\n","import React, { useState } from 'react';\nimport {\n    Button,\n    EmptyState,\n    EmptyStateBody,\n    EmptyStateIcon,\n    EmptyStateSecondaryActions,\n    Title\n} from '@patternfly/react-core';\nimport { ExternalLinkAltIcon, PlusCircleIcon } from '@patternfly/react-icons';\n\nimport { global_palette_black_600 as globalPaletteBlack600 } from '@patternfly/react-tokens/dist/js/global_palette_black_600';\nimport CreateGroupModal from './Modals/CreateGroupModal';\n\nconst NoGroupsEmptyState = () => {\n    const [createGroupModalOpen, setCreateGroupModalOpen] = useState(false);\n\n    return (\n        <EmptyState\n            data-ouia-component-id=\"empty-state\"\n            data-ouia-component-type=\"PF4/EmptyState\"\n            data-ouia-safe={true}\n        >\n            <CreateGroupModal\n                isModalOpen={createGroupModalOpen}\n                setIsModalOpen={setCreateGroupModalOpen}\n            //Todo: reloadData={reloadData}  add refetch data so the list of groups will update\n            />\n            <EmptyStateIcon icon={PlusCircleIcon} color={globalPaletteBlack600.value} />\n            <Title headingLevel=\"h4\" size=\"lg\">\n      Create a system group\n            </Title>\n            <EmptyStateBody>\n      Manage device operations efficiently by creating system groups.\n            </EmptyStateBody>\n            <Button variant=\"primary\" onClick={() => setCreateGroupModalOpen(true)}>Create group</Button>\n            <EmptyStateSecondaryActions>\n                <Button\n                    variant=\"link\"\n                    icon={<ExternalLinkAltIcon />}\n                    iconPosition=\"right\"\n                // TODO: component={(props) => <a href='' {...props} />}\n                >\n        Learn more about system groups\n                </Button>\n            </EmptyStateSecondaryActions>\n        </EmptyState>\n    );};\n\nexport default NoGroupsEmptyState;\n","import validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\n\nexport const nameValidator = {\n    type: validatorTypes.PATTERN,\n    pattern: /^[A-Za-z0-9]+[A-Za-z0-9_\\-\\s]*$/,\n    message:\n      'Name must start with alphanumeric characters and can contain underscore and hyphen characters.'\n};\n","import { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nconst apiWithToast = (dispatch, api, statusMessages) => {\n    const hasSuccess = statusMessages?.onSuccess;\n    const hasInfo = statusMessages?.onInfo;\n\n    if (!statusMessages) {\n        statusMessages = {\n            onSuccess: {\n                title: 'Success',\n                description: 'The request has been made successfully'\n            },\n            onError: {\n                title: 'Error',\n                description: 'An error occurred making the request'\n            }\n        };\n    }\n\n    const fetchData = async () => {\n        try {\n            const response = await api();\n            hasInfo &&\n          dispatch({\n              ...addNotification({\n                  variant: 'info',\n                  ...statusMessages.onInfo\n              })\n          });\n            hasSuccess &&\n          dispatch({\n              ...addNotification({\n                  variant: 'success',\n                  ...statusMessages.onSuccess\n              })\n          });\n            return response;\n        } catch (err) {\n            dispatch({\n                ...addNotification({\n                    variant: 'danger',\n                    ...statusMessages.onError,\n                    // Add error message from API, if present\n                    description: err?.Title\n                        ? `${statusMessages.onError.description}: ${err.Title}`\n                        : statusMessages.onError.description\n                })\n            });\n            return err;\n        }\n    };\n\n    return fetchData();\n};\n\nexport default apiWithToast;\n"],"names":["i","CreateGroupModal","isModalOpen","setIsModalOpen","reloadData","dispatch","useDispatch","handleCreateGroup","useCallback","values","statusMessages","onSuccess","title","description","name","onError","apiWithToast","createGroup","schema","useMemo","namePresenceValidator","check","value","validateGroupName","undefined","awesomeDebouncePromise","onlyResolvesLast","fields","component","componentTypes","label","helperText","isRequired","autoFocus","validate","type","validatorTypes","threshold","nameValidator","Modal","closeModal","submitLabel","onSubmit","propTypes","PropTypes","groupsCount","isMultiple","defaultValueToBeRemoved","console","log","DeleteGroupModal","modalState","id","ids","length","titleIconVariant","color","warningColor","variant","deleteGroupsById","RepoModal","initialValues","size","ouiaId","isOpen","onClose","FormTemplate","props","disableSubmit","buttonsProps","submit","componentMapper","setTimeout","onCancel","additionalMappers","validatorMapper","RenameGroupModal","updateGroupById","useState","createGroupModalOpen","setCreateGroupModalOpen","icon","PlusCircleIcon","globalPaletteBlack600","headingLevel","onClick","iconPosition","pattern","message","api","hasSuccess","hasInfo","onInfo","fetchData","response","addNotification","Title"],"sourceRoot":""}