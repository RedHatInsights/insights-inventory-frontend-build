{"version":3,"file":"js/334.8be91743ab2c92a9502c.js","mappings":"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","sources":["webpack:///./src/components/InventoryTable/NoEntitiesFound.js","webpack:///./src/components/InventoryTable/helpers.js","webpack:///./src/Utilities/hooks/usePromiseQueue.js","webpack:///./src/Utilities/hooks/useFetchBatched.js","webpack:///./src/components/GroupsTable/GroupsTable.js","webpack:///./src/components/InventoryGroups/helpers/validate.js","webpack:///./src/components/InventoryGroups/Modals/Modal.js","webpack:///./src/components/InventoryGroups/utils/apiWithToast.js","webpack:///./src/components/InventoryGroups/Modals/CreateGroupModal.js","webpack:///./src/components/InventoryGroups/Modals/ModalSchemas/schemes.js","webpack:///./src/components/InventoryGroups/NoGroupsEmptyState.js","webpack:///./src/components/InventoryGroups/InventoryGroups.js","webpack:///./src/components/InventoryGroups/index.js","webpack:///./src/routes/InventoryGroups.js"],"sourcesContent":["import React from 'react';\nimport {\n    EmptyStateBody,\n    EmptyState,\n    EmptyStateVariant,\n    Title,\n    EmptyStateIcon,\n    Button,\n    EmptyStatePrimary\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport SearchIcon from '@patternfly/react-icons/dist/esm/icons/search-icon';\n\n/**\n * Empty state stable when no systems (or other entities) are found.\n */\nconst NoEntitiesFound = ({ entities, onClearAll, showIcon }) => (\n    <EmptyState\n        variant={EmptyStateVariant.full}\n        data-ouia-component-id=\"empty-state\"\n        data-ouia-component-type=\"PF4/EmptyState\"\n        data-ouia-safe={true}\n    >\n        {showIcon && <EmptyStateIcon icon={SearchIcon} />}\n        <Title headingLevel=\"h5\" size=\"lg\">\n            {`No matching ${entities} found`}\n        </Title>\n        <EmptyStateBody>\n            To continue, edit your filter settings and try again\n        </EmptyStateBody>\n        {onClearAll !== undefined && (\n            <EmptyStatePrimary>\n                <Button variant=\"link\" onClick={onClearAll}>\n                    Clear all filters\n                </Button>\n            </EmptyStatePrimary>\n        )}\n    </EmptyState>\n);\n\nNoEntitiesFound.propTypes = {\n    entities: PropTypes.string,\n    onClearAll: PropTypes.func,\n    showIcon: PropTypes.bool\n};\n\nNoEntitiesFound.defaultProps = {\n    entities: 'systems',\n    showIcon: true\n};\n\nexport default NoEntitiesFound;\n","import React from 'react';\nimport { cellWidth, sortable, expandable } from '@patternfly/react-table';\nimport get from 'lodash/get';\nimport flatten from 'lodash/flatten';\nimport TitleColumn from './TitleColumn';\nimport { Fragment } from 'react';\nimport { Skeleton } from '@patternfly/react-core';\n\nexport const buildCells = (item, columns, extra) => {\n    return columns.map(({ key, composed, renderFunc }) => {\n        // eslint-disable-next-line new-cap\n        const data = composed ? <Fragment>{TitleColumn(\n            composed.map(key => get(item, key, ' ')),\n            item.id,\n            item,\n            extra\n        )}</Fragment> : get(item, key, ' ');\n        return renderFunc ? <Fragment>{ renderFunc(data, item.id, item, extra) }</Fragment> : data;\n    });\n};\n\nexport const createRows = (rows = [], columns = [], { actions, expandable, noSystemsTable, ...extra } = {}) => {\n    if (rows.length === 0) {\n        return [{\n            cells: [{\n                title: noSystemsTable,\n                props: {\n                    colSpan: columns.length + Boolean(actions),\n                    dataLabel: null\n                }\n            }]\n        }];\n    }\n\n    return flatten(rows.map((oneItem, key) => ([{\n        ...oneItem,\n        ...oneItem.children && expandable && { isOpen: !!oneItem.isOpen },\n        cells: buildCells(oneItem, columns, extra),\n        actionProps: {\n            'data-ouia-component-id': `${oneItem.id}-actions-kebab`\n        }\n    }, oneItem.children && expandable && {\n        cells: [\n            {\n                title: typeof oneItem.children === 'function' ? oneItem.children() : oneItem.children\n            }\n        ],\n        parent: key * 2,\n        fullWidth: true\n    }]))).filter(Boolean);\n};\n\nexport const onDeleteFilter = (deleted, currFilter = []) => {\n    const { value: deletedItem } = deleted?.chips?.[0] || {};\n    return  currFilter.filter((item) => item !== deletedItem);\n};\n\nexport const onDeleteTag = (deleted, selectedTags, onApplyTags) => {\n    const deletedItem = deleted?.chips?.[0];\n    if (selectedTags?.[deleted?.key]?.[deletedItem?.key] !== undefined) {\n        selectedTags[deleted?.key][deletedItem?.key] = false;\n    }\n\n    onApplyTags && onApplyTags(selectedTags, false);\n    return selectedTags;\n};\n\nconst includesSortable = (transforms) => transforms?.reduce((acc, fn) => acc || fn.toString().includes('onSort:'), false);\n\nexport const createColumns = (columns, hasItems, rows, isExpandable) => (\n    columns?.map(({ props, transforms, cellFormatters, ...oneCell }) => ({\n        ...oneCell,\n        transforms: [\n            ...transforms || [],\n            ...props?.width ? [cellWidth(props.width)] : [],\n            ...hasItems ||\n            rows.length <= 0 ||\n            (props && props.isStatic) ||\n            transforms?.includes(sortable) ||\n            includesSortable(transforms) ? [] : [sortable]\n        ],\n        cellFormatters: [\n            ...cellFormatters || [],\n            ...isExpandable ? [expandable] : []\n        ]\n    }))\n);\n\nexport const generateLoadingRows = (colsNumber, rowsNumber) =>\n    Array(rowsNumber).fill({\n        fullWidth: true,\n        cells: Array(colsNumber).fill({ title: <Skeleton /> })\n    });\n","import { useCallback, useState } from 'react';\nimport pAll from 'p-all';\n\nconst DEFAULT_CONCURRENT_PROMISES = 2;\n\nconst usePromiseQueue = (limit = DEFAULT_CONCURRENT_PROMISES) => {\n    const [results, setResults] = useState({\n        isResolving: false,\n        promiseResults: undefined\n    });\n\n    const resolve = useCallback(\n        async (fns) => {\n            await setResults((state) => ({\n                ...state,\n                isResolving: true\n            }));\n            const results = await pAll(fns, {\n                concurrency: limit\n            });\n            await setResults({\n                isResolving: false,\n                promiseResults: results\n            });\n\n            return results;\n        },\n        [limit]\n    );\n\n    return {\n        isResolving: results.isResolving,\n        results: results.promiseResults,\n        resolve\n    };\n};\n\nexport default usePromiseQueue;\n","import usePromiseQueue from './usePromiseQueue';\n\nconst useFetchBatched = () => {\n    const { isResolving: isLoading, resolve } = usePromiseQueue();\n\n    return {\n        isLoading,\n        fetchBatched: (fetchFunction, total, filter, batchSize = 50) => {\n            const pages = Math.ceil(total / batchSize) || 1;\n\n            const results = resolve(\n                [...new Array(pages)].map(\n                    (_, pageIdx) => () => fetchFunction(filter, { page: pageIdx + 1, perPage: batchSize })\n                )\n            );\n\n            return results;\n        }\n    };\n};\n\nexport default useFetchBatched;\n","/* eslint-disable camelcase */\nimport {\n    Pagination,\n    PaginationVariant,\n    SearchInput\n} from '@patternfly/react-core';\nimport {\n    cellWidth,\n    sortable,\n    Table,\n    TableBody,\n    TableHeader,\n    TableVariant\n} from '@patternfly/react-table';\nimport {\n    DateFormat,\n    ErrorState,\n    PrimaryToolbar\n} from '@redhat-cloud-services/frontend-components';\nimport debounce from 'lodash/debounce';\nimport difference from 'lodash/difference';\nimport flatten from 'lodash/flatten';\nimport map from 'lodash/map';\nimport union from 'lodash/union';\nimport upperCase from 'lodash/upperCase';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { TABLE_DEFAULT_PAGINATION } from '../../constants';\nimport { fetchGroups } from '../../store/inventory-actions';\nimport useFetchBatched from '../../Utilities/hooks/useFetchBatched';\nimport { getGroups } from '../InventoryGroups/utils/api';\nimport { generateLoadingRows } from '../InventoryTable/helpers';\nimport NoEntitiesFound from '../InventoryTable/NoEntitiesFound';\n\nconst GROUPS_TABLE_INITIAL_STATE = {\n    perPage: TABLE_DEFAULT_PAGINATION,\n    page: 1\n};\n\nconst GROUPS_TABLE_COLUMNS = [\n    {\n        title: 'Name',\n        transforms: [sortable, cellWidth(40)]\n    },\n    {\n        title: 'Total systems',\n        transforms: [sortable, cellWidth(20)]\n    },\n    {\n        title: 'Last modified',\n        transforms: [sortable, cellWidth(20)]\n    }\n];\n\nconst GROUPS_TABLE_COLUMNS_TO_URL = {\n    0: '', // reserved for selection boxes\n    1: 'name',\n    2: 'host_ids',\n    3: 'updated_at'\n};\n\nconst REQUEST_DEBOUNCE_TIMEOUT = 500;\n\nconst GroupsTable = () => {\n    const dispatch = useDispatch();\n    const { rejected, uninitialized, loading, data } = useSelector(\n        (state) => state.groups\n    );\n    const [filters, setFilters] = useState(GROUPS_TABLE_INITIAL_STATE);\n    const [rows, setRows] = useState([]);\n    const [selectedIds, setSelectedIds] = useState([]);\n    const groups = useMemo(() => data?.results || [], [data]);\n    const { fetchBatched } = useFetchBatched();\n\n    const fetchData = useCallback(\n        debounce((filters) => {\n            const { perPage, page, sortIndex, sortDirection, ...search } = filters;\n\n            if (sortIndex !== undefined && sortDirection !== undefined) {\n                const order_by = GROUPS_TABLE_COLUMNS_TO_URL[sortIndex];\n                const order_how = upperCase(sortDirection);\n                return dispatch(\n                    fetchGroups({ ...search, order_by, order_how }, { page, perPage })\n                );\n            } else {\n                return dispatch(fetchGroups(search, { page, perPage }));\n            }\n        }, REQUEST_DEBOUNCE_TIMEOUT), // wait the timeout before making the final fetch\n        []\n    );\n\n    useEffect(() => {\n        fetchData(filters);\n    }, [filters]);\n\n    useEffect(() => {\n        // update visible rows once new data obtained\n        const newRows = groups.map((group, index) => ({\n            cells: [\n                <span key={index}>\n                    <Link to={`groups/${group.id}`}>{group.name || group.id}</Link>\n                </span>,\n                <span key={index}>{(group.host_ids || []).length.toString()}</span>,\n                <span key={index}>{<DateFormat date={group.updated_at} />}</span>\n            ],\n            groupId: group.id,\n            selected: selectedIds.includes(group.id)\n        }));\n        setRows(newRows);\n    }, [groups, selectedIds]);\n\n    // TODO: convert initial URL params to filters\n\n    const onSort = (event, index, direction) => {\n        setFilters({ ...filters, sortIndex: index, sortDirection: direction });\n    };\n\n    const filterConfigItems = useMemo(\n        () => [\n            {\n                type: 'custom',\n                label: 'Name',\n                filterValues: {\n                    children: (\n                        <SearchInput\n                            data-ouia-component-type=\"PF4/TextInput\"\n                            data-ouia-component-id=\"name-filter\"\n                            placeholder=\"Filter by name\"\n                            value={filters.hostname_or_id || ''}\n                            onChange={(value) => {\n                                const { hostname_or_id, ...fs } = filters;\n                                return setFilters({\n                                    ...fs,\n                                    ...(value.length > 0 ? { hostname_or_id: value } : {})\n                                });\n                            }}\n                            onClear={() => {\n                                const { hostname_or_id, ...fs } = filters;\n                                return setFilters(fs);\n                            }}\n                            isDisabled={rejected}\n                        />\n                    )\n                }\n            }\n        ],\n        [filters.hostname_or_id, rejected]\n    );\n\n    const onResetFilters = () => setFilters(GROUPS_TABLE_INITIAL_STATE);\n\n    const activeFiltersConfig = {\n        showDeleteButton: !!filters.hostname_or_id,\n        deleteTitle: 'Reset filters',\n        filters: filters.hostname_or_id\n            ? [\n                {\n                    category: 'Name',\n                    chips: [\n                        { name: filters.hostname_or_id, value: filters.hostname_or_id }\n                    ]\n                }\n            ]\n            : [],\n        // always reset to initial filters since there is only one filter currently\n        onDelete: onResetFilters\n    };\n\n    const onSetPage = (event, page) => setFilters({ ...filters, page });\n\n    const onPerPageSelect = (event, perPage) =>\n        setFilters({ ...filters, perPage, page: 1 }); // will also reset the page to first\n\n    const tableRows = useMemo(\n        () =>\n            uninitialized || loading\n                ? generateLoadingRows(GROUPS_TABLE_COLUMNS.length, filters.perPage)\n                : rejected || rows.length === 0\n                    ? [\n                        {\n                            fullWidth: true,\n                            cells: [\n                                {\n                                    title: rejected ? (\n                                    // TODO: don't render the primary button (requires change in FF)\n                                        <ErrorState />\n                                    ) : (\n                                        <NoEntitiesFound\n                                            entities=\"groups\"\n                                            onClearAll={onResetFilters}\n                                        />\n                                    ),\n                                    props: {\n                                        colSpan: GROUPS_TABLE_COLUMNS.length + 1\n                                    }\n                                }\n                            ]\n                        }\n                    ]\n                    : rows,\n        [uninitialized, loading, rejected, rows, filters.perPage]\n    );\n\n    // TODO: use ouiaSafe to indicate the loading state for e2e tests\n\n    const onSelect = (event, isSelected, rowId, rowData) => {\n        const { groupId } = rowData;\n        if (isSelected) {\n            setSelectedIds(union(selectedIds, [groupId]));\n        } else {\n            setSelectedIds(difference(selectedIds, [groupId]));\n        }\n    };\n\n    const fetchAllGroupIds = useCallback((filters, total) => {\n        const { sortIndex, sortDirection, perPage, page, ...search } = filters;\n        // exclude sort parameters\n\n        return fetchBatched(getGroups, total, search);\n    }, []);\n\n    const selectAllIds = async () => {\n        const results = await fetchAllGroupIds(filters, data?.total);\n        const ids = map(flatten(map(results, 'results')), 'id');\n        setSelectedIds(ids);\n    };\n\n    const allSelected = selectedIds.length === data?.total;\n    const noneSelected = selectedIds.length === 0;\n    const displayedIds = map(rows, 'groupId');\n    const pageSelected = difference(displayedIds, selectedIds).length === 0;\n\n    return (\n        <div id=\"groups-table\">\n            <PrimaryToolbar\n                pagination={{\n                    itemCount: data?.total || 0,\n                    page: filters.page,\n                    perPage: filters.perPage,\n                    onSetPage,\n                    onPerPageSelect,\n                    isCompact: true,\n                    ouiaId: 'pager',\n                    isDisabled: rejected\n                }}\n                filterConfig={{ items: filterConfigItems }}\n                activeFiltersConfig={activeFiltersConfig}\n                bulkSelect={{\n                    items: [\n                        {\n                            title: 'Select none',\n                            onClick: () => setSelectedIds([]),\n                            props: { isDisabled: noneSelected }\n                        },\n                        {\n                            title: `${pageSelected ? 'Deselect' : 'Select'} page (${data?.count || 0} items)`,\n                            onClick: () => {\n                                if (pageSelected) {\n                                    // exclude groups on the page from the selected ids\n                                    const newRows = difference(selectedIds, displayedIds);\n                                    setSelectedIds(newRows);\n                                } else {\n                                    setSelectedIds(union(selectedIds, displayedIds));\n                                }\n                            }\n                        },\n                        {\n                            title: `${allSelected ? 'Deselect' : 'Select'} all (${data?.total || 0} items)`,\n                            onClick: async () => {\n                                if (allSelected) {\n                                    setSelectedIds([]);\n                                } else {\n                                    await selectAllIds();\n                                }\n                            }\n                        }\n                    ],\n                    checked: selectedIds.length > 0, // TODO: support partial selection (dash sign) in FEC BulkSelect\n                    onSelect: async (checked) => {\n                        if (checked) {\n                            await selectAllIds();\n                        } else {\n                            setSelectedIds([]);\n                        }\n                    },\n                    ouiaId: 'groups-selector',\n                    count: selectedIds.length\n                }}\n            />\n            <Table\n                aria-label=\"Groups table\"\n                ouiaId=\"groups-table\"\n                /* ouiaSafe={!loadingState}> */\n                variant={TableVariant.compact}\n                cells={GROUPS_TABLE_COLUMNS}\n                rows={tableRows}\n                sortBy={{\n                    index: filters.sortIndex,\n                    direction: filters.sortDirection\n                }}\n                onSort={onSort}\n                isStickyHeader\n                onSelect={onSelect}\n                canSelectAll={false}\n            >\n                <TableHeader />\n                <TableBody />\n            </Table>\n            <Pagination\n                itemCount={data?.total || 0}\n                page={filters.page}\n                perPage={filters.perPage}\n                onSetPage={onSetPage}\n                onPerPageSelect={onPerPageSelect}\n                variant={PaginationVariant.bottom}\n                widgetId={`pagination-options-menu-bottom`}\n                ouiaId=\"pager\"\n                isDisabled={rejected}\n            />\n        </div>\n    );\n};\n\nexport default GroupsTable;\n","import validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\n\nexport const nameValidator = {\n    type: validatorTypes.PATTERN,\n    pattern: /^[A-Za-z0-9]+[A-Za-z0-9_\\-\\s]*$/,\n    message:\n      'Name must start with alphanumeric characters and can contain underscore and hyphen characters.'\n};\n","import React from 'react';\nimport { Modal } from '@patternfly/react-core';\nimport FormRenderer from '@data-driven-forms/react-form-renderer/form-renderer';\nimport FormTemplate from '@data-driven-forms/pf4-component-mapper/form-template';\nimport componentMapper from '@data-driven-forms/pf4-component-mapper/component-mapper';\nimport PropTypes from 'prop-types';\n\nconst RepoModal = ({\n    isModalOpen,\n    title,\n    titleIconVariant,\n    closeModal,\n    submitLabel,\n    schema,\n    initialValues,\n    variant,\n    reloadData,\n    size,\n    onSubmit\n}) => {\n    return (\n        <Modal\n            ouiaId=\"group-modal\"\n            variant={size ?? 'small'}\n            title={title}\n            titleIconVariant={titleIconVariant ?? null}\n            isOpen={isModalOpen}\n            onClose={closeModal}\n        >\n            <FormRenderer\n                schema={schema}\n                FormTemplate={(props) => (\n                    <FormTemplate\n                        {...props}\n                        submitLabel={submitLabel}\n                        disableSubmit={['invalid']}\n                        buttonsProps={{\n                            submit: { variant }\n                        }}\n                    />\n                )}\n                initialValues={initialValues}\n                componentMapper={componentMapper}\n                //reload comes from the table and fetches fresh data\n                onSubmit={async (values) => {\n                    await onSubmit(values);\n                    setTimeout(async () => await reloadData(), 500);\n                    closeModal();\n                }}\n                onCancel={() => closeModal()}\n            />\n        </Modal>\n    );\n};\n\nRepoModal.propTypes = {\n    isModalOpen: PropTypes.bool,\n    title: PropTypes.string,\n    closeModal: PropTypes.func,\n    reloadData: PropTypes.func,\n    submitLabel: PropTypes.string,\n    schema: PropTypes.object,\n    initialValues: PropTypes.object,\n    variant: PropTypes.string,\n    onSubmit: PropTypes.func,\n    size: PropTypes.string,\n    additionalMappers: PropTypes.object,\n    titleIconVariant: PropTypes.any,\n    validatorMapper: PropTypes.object\n};\n\nexport default RepoModal;\n","import { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nconst apiWithToast = (dispatch, api, statusMessages) => {\n    const hasSuccess = statusMessages?.onSuccess;\n    const hasInfo = statusMessages?.onInfo;\n\n    if (!statusMessages) {\n        statusMessages = {\n            onSuccess: {\n                title: 'Success',\n                description: 'The request has been made successfully'\n            },\n            onError: {\n                title: 'Error',\n                description: 'An error occurred making the request'\n            }\n        };\n    }\n\n    const fetchData = async () => {\n        try {\n            const response = await api();\n            hasInfo &&\n          dispatch({\n              ...addNotification({\n                  variant: 'info',\n                  ...statusMessages.onInfo\n              })\n          });\n            hasSuccess &&\n          dispatch({\n              ...addNotification({\n                  variant: 'success',\n                  ...statusMessages.onSuccess\n              })\n          });\n            return response;\n        } catch (err) {\n            dispatch({\n                ...addNotification({\n                    variant: 'danger',\n                    ...statusMessages.onError,\n                    // Add error message from API, if present\n                    description: err?.Title\n                        ? `${statusMessages.onError.description}: ${err.Title}`\n                        : statusMessages.onError.description\n                })\n            });\n            return err;\n        }\n    };\n\n    return fetchData();\n};\n\nexport default apiWithToast;\n","import React, { useCallback, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { createGroupSchema } from './ModalSchemas/schemes';\nimport Modal from './Modal';\nimport apiWithToast from '../utils/apiWithToast';\nimport {\n    createGroup,\n    validateGroupName\n} from '../utils/api';\nimport { useDispatch } from 'react-redux';\nimport awesomeDebouncePromise from 'awesome-debounce-promise';\n\nconst CreateGroupModal = ({\n    isModalOpen,\n    setIsModalOpen,\n    reloadData\n}) => {\n    const dispatch = useDispatch();\n\n    const handleCreateGroup = useCallback(\n        (values) => {\n            const statusMessages = {\n                onSuccess: {\n                    title: 'Success',\n                    description: `${values.name} has been created successfully`\n                },\n                onError: { title: 'Error', description: 'Failed to create group' }\n            };\n            return apiWithToast(dispatch, () => createGroup(values), statusMessages);\n        },\n        [isModalOpen]\n    );\n\n    const schema = useMemo(() => {\n        const check = async (value) => {\n            const results = await validateGroupName(value);\n            if (results === true) {\n                throw 'Group name already exists';\n            }\n\n            return undefined;\n        };\n\n        // eslint-disable-next-line new-cap\n        const d = awesomeDebouncePromise(check, 500, { onlyResolvesLast: false });\n        return createGroupSchema(d);\n    }, []);\n\n    return (\n        <Modal\n            data-testid=\"create-group-modal\"\n            isModalOpen={isModalOpen}\n            closeModal={() => setIsModalOpen(false)}\n            title=\"Create group\"\n            submitLabel=\"Create\"\n            schema={schema}\n            reloadData={reloadData}\n            onSubmit={handleCreateGroup}\n        />\n    );\n};\n\nexport default CreateGroupModal;\n\nCreateGroupModal.propTypes = {\n    isModalOpen: PropTypes.bool,\n    setIsModalOpen: PropTypes.func,\n    reloadData: PropTypes.func,\n    deviceIds: PropTypes.array,\n    isOpen: PropTypes.bool\n};\n","import validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport { nameValidator } from '../../helpers/validate';\n\nexport const createGroupSchema = (namePresenceValidator) => ({\n    fields: [\n        {\n            component: componentTypes.TEXT_FIELD,\n            name: 'name',\n            label: 'Group name',\n            helperText:\n        'Can only contain letters, numbers, spaces, hyphens ( - ), and underscores( _ ).',\n            isRequired: true,\n            autoFocus: true,\n            validate: [\n                // async validator has to be first in the list\n                namePresenceValidator,\n                { type: validatorTypes.REQUIRED },\n                { type: validatorTypes.MAX_LENGTH, threshold: 50 },\n                nameValidator\n            ]\n        }\n    ]\n});\n","import React, { useState } from 'react';\nimport {\n    Button,\n    EmptyState,\n    EmptyStateBody,\n    EmptyStateIcon,\n    EmptyStateSecondaryActions,\n    Title\n} from '@patternfly/react-core';\nimport { ExternalLinkAltIcon, PlusCircleIcon } from '@patternfly/react-icons';\n\nimport { global_palette_black_600 as globalPaletteBlack600 } from '@patternfly/react-tokens/dist/js/global_palette_black_600';\nimport CreateGroupModal from './Modals/CreateGroupModal';\n\nconst NoGroupsEmptyState = () => {\n    const [createGroupModalOpen, setCreateGroupModalOpen] = useState(false);\n\n    return (\n        <EmptyState\n            data-ouia-component-id=\"empty-state\"\n            data-ouia-component-type=\"PF4/EmptyState\"\n            data-ouia-safe={true}\n        >\n            <CreateGroupModal\n                isModalOpen={createGroupModalOpen}\n                setIsModalOpen={setCreateGroupModalOpen}\n            //Todo: reloadData={reloadData}  add refetch data so the list of groups will update\n            />\n            <EmptyStateIcon icon={PlusCircleIcon} color={globalPaletteBlack600.value} />\n            <Title headingLevel=\"h4\" size=\"lg\">\n      Create a system group\n            </Title>\n            <EmptyStateBody>\n      Manage device operations efficiently by creating system groups.\n            </EmptyStateBody>\n            <Button variant=\"primary\" onClick={() => setCreateGroupModalOpen(true)}>Create group</Button>\n            <EmptyStateSecondaryActions>\n                <Button\n                    variant=\"link\"\n                    icon={<ExternalLinkAltIcon />}\n                    iconPosition=\"right\"\n                // TODO: component={(props) => <a href='' {...props} />}\n                >\n        Learn more about system groups\n                </Button>\n            </EmptyStateSecondaryActions>\n        </EmptyState>\n    );};\n\nexport default NoGroupsEmptyState;\n","import {\n    ErrorState,\n    PageHeader,\n    PageHeaderTitle\n} from '@redhat-cloud-services/frontend-components';\nimport React, { useEffect, useState } from 'react';\n\nimport { Bullseye, Spinner } from '@patternfly/react-core';\nimport GroupsTable from '../GroupsTable/GroupsTable';\nimport { getGroups } from '../InventoryGroups/utils/api';\nimport NoGroupsEmptyState from './NoGroupsEmptyState';\n\nconst InventoryGroups = () => {\n    const [isLoading, setIsLoading] = useState(true);\n    const [hasGroups, setHasGroups] = useState(false);\n    const [hasError, setHasError] = useState(false);\n\n    useEffect(async () => {\n    // make initial request to check if there is at least one group available\n        try {\n            const { total } = await getGroups();\n\n            if (total > 0) {\n                setHasGroups(true);\n            }\n        } catch (error) {\n            setHasError(true);\n        }\n\n        setIsLoading(false);\n    }, []);\n\n    return (\n        <React.Fragment>\n            <PageHeader>\n                <PageHeaderTitle title=\"Groups\" />\n            </PageHeader>\n            <section className=\"pf-l-page__main-section pf-c-page__main-section\">\n                {hasError ? (\n                    <ErrorState />\n                ) : isLoading ? (\n                    <Bullseye>\n                        <Spinner />\n                    </Bullseye>\n                ) : hasGroups ? (\n                    <GroupsTable />\n                ) : (\n                    <NoGroupsEmptyState />\n                )}\n            </section>\n        </React.Fragment>\n    );\n};\n\nexport default InventoryGroups;\n","import InventoryGroups from './InventoryGroups';\n\nexport default InventoryGroups;\n","import React, { useEffect } from 'react';\nimport InventoryGroups from '../components/InventoryGroups';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\n\nconst Groups = () => {\n    const chrome = useChrome();\n\n    useEffect(() => {\n        chrome?.updateDocumentTitle?.('Inventory Groups | Red Hat Insights');\n    }, [chrome]);\n\n    return <InventoryGroups />;\n};\n\nexport default Groups;\n"],"names":["NoEntitiesFound","entities","onClearAll","showIcon","variant","EmptyStateVariant","icon","SearchIcon","headingLevel","size","undefined","onClick","propTypes","PropTypes","defaultProps","buildCells","item","columns","extra","map","key","composed","renderFunc","data","Fragment","TitleColumn","get","id","createRows","rows","actions","expandable","noSystemsTable","length","cells","title","props","colSpan","Boolean","dataLabel","flatten","oneItem","children","isOpen","actionProps","parent","fullWidth","filter","onDeleteFilter","deleted","currFilter","chips","deletedItem","value","onDeleteTag","selectedTags","onApplyTags","includesSortable","transforms","reduce","acc","fn","toString","includes","createColumns","hasItems","isExpandable","cellFormatters","width","cellWidth","isStatic","sortable","generateLoadingRows","colsNumber","rowsNumber","Array","fill","i","limit","useState","isResolving","promiseResults","results","setResults","resolve","useCallback","fns","state","pAll","concurrency","usePromiseQueue","isLoading","fetchBatched","fetchFunction","total","batchSize","pages","Math","ceil","_","pageIdx","page","perPage","GROUPS_TABLE_INITIAL_STATE","TABLE_DEFAULT_PAGINATION","GROUPS_TABLE_COLUMNS","GROUPS_TABLE_COLUMNS_TO_URL","dispatch","useDispatch","useSelector","groups","rejected","uninitialized","loading","filters","setFilters","setRows","selectedIds","setSelectedIds","useMemo","useFetchBatched","fetchData","debounce","sortIndex","sortDirection","search","order_by","order_how","upperCase","fetchGroups","useEffect","newRows","group","index","Link","to","name","host_ids","DateFormat","date","updated_at","groupId","selected","filterConfigItems","type","label","filterValues","SearchInput","placeholder","hostname_or_id","onChange","fs","onClear","isDisabled","onResetFilters","activeFiltersConfig","showDeleteButton","deleteTitle","category","onDelete","onSetPage","event","onPerPageSelect","tableRows","ErrorState","fetchAllGroupIds","getGroups","selectAllIds","ids","allSelected","noneSelected","displayedIds","pageSelected","difference","PrimaryToolbar","pagination","itemCount","isCompact","ouiaId","filterConfig","items","bulkSelect","count","union","checked","onSelect","Table","TableVariant","sortBy","direction","onSort","isStickyHeader","isSelected","rowId","rowData","canSelectAll","TableHeader","TableBody","Pagination","PaginationVariant","widgetId","nameValidator","validatorTypes","pattern","message","RepoModal","isModalOpen","titleIconVariant","closeModal","submitLabel","schema","initialValues","reloadData","onSubmit","Modal","onClose","FormTemplate","disableSubmit","buttonsProps","submit","componentMapper","values","setTimeout","onCancel","additionalMappers","validatorMapper","CreateGroupModal","setIsModalOpen","handleCreateGroup","statusMessages","onSuccess","description","onError","api","hasSuccess","hasInfo","onInfo","response","addNotification","Title","apiWithToast","createGroup","namePresenceValidator","check","validateGroupName","awesomeDebouncePromise","onlyResolvesLast","fields","component","componentTypes","helperText","isRequired","autoFocus","validate","threshold","deviceIds","createGroupModalOpen","setCreateGroupModalOpen","EmptyState","EmptyStateIcon","PlusCircleIcon","color","globalPaletteBlack600","EmptyStateBody","Button","EmptyStateSecondaryActions","iconPosition","setIsLoading","hasGroups","setHasGroups","hasError","setHasError","PageHeader","PageHeaderTitle","className","Bullseye","Spinner","chrome","useChrome","updateDocumentTitle"],"sourceRoot":""}