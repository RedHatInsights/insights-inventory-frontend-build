{"version":3,"file":"js/669.2d76a6b4775a85129815.js","mappings":"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","sources":["webpack:///./src/components/GeneralInfo/dataMapper/dataMapper.js"],"sourcesContent":["/* eslint-disable camelcase */\n\nimport React from 'react';\nimport {\n    CheckCircleIcon,\n    TimesIcon,\n    OutlinedQuestionCircleIcon,\n    OutlinedArrowAltCircleUpIcon,\n    OutlinedArrowAltCircleDownIcon\n} from '@patternfly/react-icons';\nimport { sortable } from '@patternfly/react-table';\nimport { Tooltip } from '@patternfly/react-core';\n\nexport const statusHelper = {\n    UP: <Tooltip content=\"Service is running\">\n        <OutlinedArrowAltCircleUpIcon className=\"ins-c-inventory__detail--up\" />\n    </Tooltip>,\n    DOWN: <Tooltip content=\"Service has stopped\">\n        <OutlinedArrowAltCircleDownIcon className=\"ins-c-inventory__detail--down\" />\n    </Tooltip>\n};\n\nexport const enabledHelper = {\n    true: <Tooltip content=\"Source enabled\">\n        <CheckCircleIcon className=\"ins-c-inventory__detail--enabled\" />\n    </Tooltip>,\n    false: <Tooltip content=\"Source disabled\">\n        <TimesIcon className=\"ins-c-inventory__detail--disabled\" />\n    </Tooltip>\n};\n\nexport const diskMapper = (devices = []) => ({\n    cells: [\n        {\n            title: 'Device',\n            transforms: [sortable]\n        },\n        {\n            title: 'Label',\n            transforms: [sortable]\n        },\n        {\n            title: 'Mount point',\n            transforms: [sortable]\n        },\n        {\n            title: 'Type',\n            transforms: [sortable]\n        }\n    ],\n    rows: devices.map(({\n        device,\n        label,\n        mountpoint,\n        options,\n        mounttype\n    }) => {\n        const calculatedOptions = (options && options.options) || options;\n        return ({\n            isOpen: false,\n            child: <div>\n                {\n                    calculatedOptions &&\n                    Object.entries(calculatedOptions.value || calculatedOptions)\n                    .map(([oneKey, option]) => `${oneKey}=${option.value || option}`).join(',  ')\n                }\n            </div>,\n            cells: [\n                (device && device.value) || device,\n                label,\n                (mountpoint && mountpoint.value) || mountpoint,\n                (mounttype && mounttype.value) || mounttype\n            ]\n        });\n    }),\n    expandable: true\n});\n\nexport const productsMapper = (products = []) => ({\n    cells: [\n        {\n            title: 'Name',\n            transforms: [sortable]\n        },\n        'Status'\n    ],\n    rows: products.map(product => ([\n        product.name,\n        {\n            title: statusHelper[product.status] ||\n            <Tooltip content=\"Unknown service status\">\n                <OutlinedQuestionCircleIcon className=\"ins-c-inventory__detail--unknown\" />\n            </Tooltip>\n        }\n    ]))\n});\n\nexport const interfaceMapper = (data = []) => ({\n    cells: [\n        {\n            title: 'MAC address',\n            transforms: [sortable]\n        },\n        {\n            title: 'MTU',\n            transforms: [sortable]\n        },\n        {\n            title: 'Name',\n            transforms: [sortable]\n        },\n        'State',\n        {\n            title: 'Type',\n            transforms: [sortable]\n        }\n    ],\n    rows: data.map(item => ([\n        item.mac_address,\n        item.mtu,\n        item.name,\n        {\n            title: statusHelper[item.state] ||\n            <Tooltip content=\"Unknown service status\">\n                <OutlinedQuestionCircleIcon className=\"ins-c-inventory__detail--unknown\" />\n            </Tooltip>\n        },\n        item.type\n    ]))\n});\n\nexport const repositoriesMapper = ({ enabled, disabled } = { enabled: [], disabled: [] }) => ({\n    cells: [\n        {\n            title: 'Name',\n            transforms: [sortable]\n        },\n        {\n            title: 'Enabled',\n            transforms: [sortable]\n        },\n        {\n            title: 'GPG check',\n            transforms: [sortable]\n        }\n    ],\n    rows: [...enabled, ...disabled].map(repository => ([\n        {\n            title: repository.name,\n            sortValue: repository.name\n        },\n        {\n            title: enabledHelper[Boolean(repository.enabled)],\n            sortValue: `${repository.enabled}`\n        },\n        {\n            title: enabledHelper[Boolean(repository.gpgcheck)],\n            sortValue: `${repository.gpgcheck}`\n        }\n    ])),\n    filters: [\n        { type: 'textual' },\n        {\n            type: 'checkbox',\n            options: [\n                { label: 'Is enabled', value: 'true' },\n                { label: 'Not enabled', value: 'false' }\n            ]\n        },\n        {\n            type: 'checkbox',\n            options: [\n                { label: 'Is enabled', value: 'true' },\n                { label: 'Not enabled', value: 'false' }\n            ]\n        }\n    ]\n});\n\nexport const generalMapper = (data = [], title = '') => ({\n    cells: [{\n        title,\n        transforms: [sortable]\n    }],\n    rows: data.map(item => ([item])),\n    filters: [{ type: 'textual' }]\n});\n"],"names":["statusHelper","UP","content","className","DOWN","enabledHelper","true","false","diskMapper","devices","cells","title","transforms","sortable","rows","map","device","label","mountpoint","options","mounttype","calculatedOptions","isOpen","child","Object","entries","value","oneKey","option","join","expandable","productsMapper","products","product","name","status","interfaceMapper","data","item","mac_address","mtu","state","type","repositoriesMapper","enabled","disabled","repository","sortValue","Boolean","gpgcheck","filters","generalMapper"],"sourceRoot":""}