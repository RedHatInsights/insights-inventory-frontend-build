{"version":3,"sources":["webpack:///./src/routes/InventoryDetail.js"],"names":["Inventory","entity","currentApp","clearNotifications","loadEntity","getRegistry","useContext","RegistryContext","useSelector","permissionsReducer","loading","writePermissions","shallowEqual","useEffect","insights","chrome","hideGlobalFilter","appAction","splitUrl","window","location","href","split","length","additionalClasses","document","title","display_name","appObjectId","id","hideInvLink","showTags","onLoad","mergeWithDetail","INVENTORY_ACTION_TYPES","register","entitesDetailReducer","className","classnames","ouiaId","Link","to","routes","isActive","size","SkeletonSize","fallback","hideBack","showDelete","hideInvDrawer","gutter","span","contextTypes","store","PropTypes","propTypes","history","routerParams","connect","entityDetails","activeApp","appName","firstApp","activeApps","name","dispatch","actions"],"mappings":"yaAiBMA,EAAY,SAAC,GAA2D,IAAzDC,EAAyD,EAAzDA,OAAQC,EAAiD,EAAjDA,WAAYC,EAAqC,EAArCA,mBAAoBC,EAAiB,EAAjBA,WACjDC,GAAgBC,gBAAWC,MAA3BF,YACR,GAAsCG,kBAClC,gBAAGC,EAAH,EAAGA,mBAAH,MACK,CAAEC,QAASD,aAAF,EAAEA,EAAoBC,QAASC,iBAAkBF,aAAF,EAAEA,EAAoBE,oBACnFC,gBAHIF,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,kBAMjBE,gBAAU,WAAM,QACZ,UAAAC,SAASC,cAAT,mBAAiBC,wBAAjB,iBAAoC,GACpCF,SAASC,OAAOE,UAAU,iBAC1Bd,IAKA,IAAMe,EAAWC,OAAOC,SAASC,KAAKC,MAAM,aACpB,IAApBJ,EAASK,SACTJ,OAAOC,SAAP,UAAqBF,EAAS,GAA9B,oBAA4CA,EAAS,OAE1D,IAEH,IAAMM,EAAoB,CACtB,wCAAyCtB,GAA6B,wBAAfA,GAc3D,OAXID,IACAwB,SAASC,MAAT,UAAoBzB,EAAO0B,aAA3B,qCAGJd,gBAAU,WAAM,UACJ,QAAR,EAAAC,gBAAA,mBAAUC,cAAV,mBAAkBa,mBAAlB,gBAAgC3B,aAAhC,EAAgCA,EAAQ4B,IACpC5B,WAAQ4B,IACRzB,MAEL,CAACH,aAAD,EAACA,EAAQ4B,KAGR,kBAAC,IAAD,CACIC,aAAW,EACXC,UAAQ,EACRC,OAAQ,YAAiD,IAA9CC,EAA8C,EAA9CA,gBAAiBC,EAA6B,EAA7BA,uBACxB7B,IAAc8B,SAASF,GAAgBG,QAAqBF,OAGhE,kBAAC,IAAD,CAAYG,UAAWC,IAAW,kCAAmCd,IACjE,kBAAC,IAAD,CAAYe,OAAO,gBACf,kBAAC,IAAD,KACI,kBAAC,EAAAC,KAAD,CAAMC,GAAIC,WAAV,cAEJ,kBAAC,IAAD,CAAgBC,UAAQ,GACpB,yBAAKN,UAAU,4CAEPpC,EACIA,EAAO0B,aACP,kBAAC,IAAD,CAAUiB,KAAMC,aAM/BnC,GAAW,kBAAC,IAAD,CACRoC,SAAS,GACTC,UAAQ,EACRhB,UAAQ,EACRD,aAAW,EACXkB,WAAYrC,EACZsC,eAAa,KAIzB,kBAAC,IAAD,CAAMZ,UAAWC,IAAWd,IACxB,kBAAC,IAAD,CAAM0B,OAAO,MACT,kBAAC,IAAD,CAAUC,KAAM,IACZ,kBAAC,IAAD,CAASpB,UAAQ,EAACe,SAAS,UAQnD9C,EAAUoD,aAAe,CACrBC,MAAOC,YAGXtD,EAAUuD,UAAY,CAClBC,QAASF,WACTrD,OAAQqD,WACRlD,WAAYkD,SACZnD,mBAAoBmD,SACpBpD,WAAYoD,YAmBhB,SAAeG,QAAaC,cAhB5B,YAA4C,IAAjBC,EAAiB,EAAjBA,cACjBC,EAAYD,GAAiBA,EAAcC,WAAaD,EAAcC,UAAUC,QAChFC,EAAWH,GAAiBA,EAAcI,YAAcJ,EAAcI,WAAW,GACvF,MAAO,CACH9D,OAAQ0D,GAAiBA,EAAc1D,OACvCC,WAAY0D,GAAcE,GAAYA,EAASE,SAIvD,SAA4BC,GACxB,MAAO,CACH7D,WAAY,kBAAM6D,EAASC,SAC3B/D,mBAAoB,kBAAM8D,EAASC,YAIfR,CAA6C1D","file":"js/28.683db03b2ef2464e575e.js","sourcesContent":["import React, { useContext, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect, useSelector, shallowEqual } from 'react-redux';\nimport './inventory.scss';\nimport '@redhat-cloud-services/frontend-components-inventory-patchman/dist/esm/index.css';\nimport { Link } from 'react-router-dom';\nimport { entitesDetailReducer, RegistryContext } from '../store';\nimport * as actions from '../actions';\nimport { Grid, GridItem } from '@patternfly/react-core';\nimport { Breadcrumb, BreadcrumbItem } from '@patternfly/react-core';\nimport routerParams from '@redhat-cloud-services/frontend-components-utilities/RouterParams';\nimport { Skeleton, SkeletonSize, PageHeader, Main } from '@redhat-cloud-services/frontend-components';\nimport classnames from 'classnames';\nimport { routes } from '../Routes';\n\nimport { InventoryDetailHead, AppInfo, DetailWrapper } from '@redhat-cloud-services/frontend-components/Inventory';\n\nconst Inventory = ({ entity, currentApp, clearNotifications, loadEntity }) => {\n    const { getRegistry } = useContext(RegistryContext);\n    const { loading, writePermissions } = useSelector(\n        ({ permissionsReducer }) =>\n            ({ loading: permissionsReducer?.loading, writePermissions: permissionsReducer?.writePermissions }),\n        shallowEqual\n    );\n\n    useEffect(() => {\n        insights.chrome?.hideGlobalFilter?.(true);\n        insights.chrome.appAction('system-detail');\n        clearNotifications();\n\n        // BZ: RHEL cockpit is linking to crc/insights/inventory/{}/insights\n        // which results in a page error, catch that and redirect\n        // TODO Remove me when BZ is fixed\n        const splitUrl = window.location.href.split('/insights');\n        if (splitUrl.length === 3) {\n            window.location = `${splitUrl[0]}/insights${splitUrl[1]}`;\n        }\n    }, []);\n\n    const additionalClasses = {\n        'ins-c-inventory__detail--general-info': currentApp && currentApp === 'general_information'\n    };\n\n    if (entity) {\n        document.title = `${entity.display_name} | Inventory | Red Hat Insights`;\n    }\n\n    useEffect(() => {\n        insights?.chrome?.appObjectId?.(entity?.id);\n        if (entity?.id) {\n            loadEntity();\n        }\n    }, [entity?.id]);\n\n    return (\n        <DetailWrapper\n            hideInvLink\n            showTags\n            onLoad={({ mergeWithDetail, INVENTORY_ACTION_TYPES }) => {\n                getRegistry().register(mergeWithDetail(entitesDetailReducer(INVENTORY_ACTION_TYPES)));\n            }}\n        >\n            <PageHeader className={classnames('pf-m-light ins-inventory-detail', additionalClasses)} >\n                <Breadcrumb ouiaId=\"systems-list\">\n                    <BreadcrumbItem>\n                        <Link to={routes.table}>Inventory</Link>\n                    </BreadcrumbItem>\n                    <BreadcrumbItem isActive>\n                        <div className=\"ins-c-inventory__detail--breadcrumb-name\">\n                            {\n                                entity ?\n                                    entity.display_name :\n                                    <Skeleton size={SkeletonSize.xs} />\n                            }\n                        </div>\n                    </BreadcrumbItem>\n                </Breadcrumb>\n                {\n                    !loading && <InventoryDetailHead\n                        fallback=\"\"\n                        hideBack\n                        showTags\n                        hideInvLink\n                        showDelete={writePermissions}\n                        hideInvDrawer\n                    />\n                }\n            </PageHeader>\n            <Main className={classnames(additionalClasses)}>\n                <Grid gutter=\"md\">\n                    <GridItem span={12}>\n                        <AppInfo showTags fallback=\"\" />\n                    </GridItem>\n                </Grid>\n            </Main>\n        </DetailWrapper>\n    );\n};\n\nInventory.contextTypes = {\n    store: PropTypes.object\n};\n\nInventory.propTypes = {\n    history: PropTypes.object,\n    entity: PropTypes.object,\n    loadEntity: PropTypes.func,\n    clearNotifications: PropTypes.func,\n    currentApp: PropTypes.string\n};\n\nfunction mapStateToProps({ entityDetails }) {\n    const activeApp = entityDetails && entityDetails.activeApp && entityDetails.activeApp.appName;\n    const firstApp = entityDetails && entityDetails.activeApps && entityDetails.activeApps[0];\n    return {\n        entity: entityDetails && entityDetails.entity,\n        currentApp: activeApp || (firstApp && firstApp.name)\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        loadEntity: () => dispatch(actions.loadEntity()),\n        clearNotifications: () => dispatch(actions.clearNotifications())\n    };\n}\n\nexport default routerParams(connect(mapStateToProps, mapDispatchToProps)(Inventory));\n"],"sourceRoot":""}