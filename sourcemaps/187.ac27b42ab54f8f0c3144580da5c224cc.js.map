{"version":3,"file":"js/187.2cf9391cf4f8c21a0ca0.js","mappings":"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","sources":["webpack:///./src/App.js","webpack:///./src/Routes.js","webpack:///./src/components/PermissionsLoader.js","webpack:///./src/config.js","webpack:///./src/hooks/useInventoryWritePermissions.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Routes } from './Routes';\nimport './App.scss';\nimport { INVENTORY_ROOT } from './config';\nimport { NotificationsPortal } from '@redhat-cloud-services/frontend-components-notifications/';\nimport PermissionLoader from './components/PermissionsLoader';\n\nconst App = () => {\n    const history = useHistory();\n    useEffect(() => {\n        insights.chrome.init();\n        insights.chrome.identifyApp(INVENTORY_ROOT);\n        return insights.chrome.on(\n            'APP_NAVIGATION',\n            event => {\n                if (event.navId === 'inventory') {\n                    history.push(`/${location.search}${location.hash}`);\n                } else {\n                    history.push(`/${event.navId}${location.search}${location.hash}`);\n                }\n            }\n        );\n    }, []);\n\n    return (\n        <div className=\"inventory\">\n            <NotificationsPortal />\n            <PermissionLoader />\n            <Routes />\n        </div>\n    );\n};\n\nexport default App;\n","import { Route, Switch, matchPath, useHistory } from 'react-router-dom';\nimport React, { lazy, Suspense, useContext, useEffect } from 'react';\nimport { tagsMapper } from './constants';\nimport { reducers, RegistryContext, tableReducer } from './store';\nimport { mergeWithEntities } from './store/reducers';\n\nconst InventoryTable = lazy(() => import('./routes/InventoryTable'));\nconst InventoryDetail = lazy(() => import('./routes/InventoryDetail'));\n\nexport const routes = {\n    table: '/',\n    detail: '/:inventoryId'\n};\n\nfunction checkPaths(technology, app) {\n    return Object\n    .values(routes)\n    .some(\n        route => {\n            return matchPath(location.href, { path: `${document.baseURI}${technology}/${app}${route}` });\n        }\n    );\n}\n\nexport const Routes = () => {\n    const { getRegistry } = useContext(RegistryContext);\n    useEffect(() => {\n        getRegistry().register({\n            ...reducers,\n            ...mergeWithEntities(tableReducer)\n        });\n    }, [getRegistry]);\n    const history = useHistory();\n    const pathName = window.location.pathname.split('/');\n    const searchParams = new URLSearchParams(location.search);\n    pathName.shift();\n\n    if (pathName[0] === 'beta') {\n        pathName.shift();\n    }\n\n    if (!checkPaths(pathName[0], pathName[1])) {\n        history.push(`${routes.table}${location.search}${location.hash}`);\n    }\n\n    return (\n        <Suspense fallback=\"\">\n            <Switch>\n                <Route\n                    exact\n                    path={routes.table}\n                    render={() => <InventoryTable\n                        status={searchParams.getAll('status')}\n                        source={searchParams.getAll('source')}\n                        filterbyName={searchParams.getAll('hostname_or_id')}\n                        tagsFilter={searchParams.getAll('tags')?.[0]?.split?.(',').reduce?.(tagsMapper, [])}\n                        page={searchParams.getAll('page')}\n                        perPage={searchParams.getAll('per_page')}\n                    />}\n                    rootClass='inventory'\n                />\n                <Route path={routes.detail} component={InventoryDetail} rootClass='inventory' />\n            </Switch>\n        </Suspense>\n    );\n};\n","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport useInventoryWritePermissions from '../hooks/useInventoryWritePermissions';\nimport { ACTION_TYPES } from '../store/action-types';\n\nconst PermissionLoader = () => {\n    const { isLoading, hasAccess } = useInventoryWritePermissions();\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch({ type: `${ACTION_TYPES.LOAD_WRITE_PERMISSIONS}_PENDING` });\n    }, []);\n\n    useEffect(() => {\n        if (!isLoading) {\n            dispatch({ type: `${ACTION_TYPES.LOAD_WRITE_PERMISSIONS}_FULFILLED`, payload: { writePermissions: hasAccess } });\n        }\n    }, [isLoading]);\n\n    return null;\n};\n\nexport default PermissionLoader;\n","\nexport const INVENTORY_API_BASE = '/api/inventory/v1';\nexport const INVENTORY_ROOT = 'inventory';\n","import { usePermissions } from '@redhat-cloud-services/frontend-components-utilities/RBACHook';\n\nconst useInventoryWritePermissions = () => {\n    const { hasAccess, ...rest } = usePermissions('inventory', [\n        'inventory:*:*',\n        'inventory:hosts:write',\n        'inventory:*:write'\n    ]);\n\n    return { ...rest, hasAccess };\n};\n\nexport default useInventoryWritePermissions;\n"],"names":["history","useHistory","useEffect","insights","chrome","init","identifyApp","INVENTORY_ROOT","on","event","navId","push","location","search","hash","className","InventoryTable","lazy","InventoryDetail","routes","table","detail","Routes","getRegistry","useContext","RegistryContext","register","reducers","mergeWithEntities","tableReducer","technology","app","pathName","window","pathname","split","searchParams","URLSearchParams","shift","Object","values","some","route","matchPath","href","path","document","baseURI","Suspense","fallback","Switch","Route","exact","render","status","getAll","source","filterbyName","tagsFilter","reduce","tagsMapper","page","perPage","rootClass","component","useInventoryWritePermissions","isLoading","hasAccess","dispatch","useDispatch","type","ACTION_TYPES","payload","writePermissions","usePermissions"],"sourceRoot":""}