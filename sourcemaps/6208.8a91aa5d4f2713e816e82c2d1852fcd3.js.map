{"version":3,"file":"js/6208.1665576905857.9ed1acd3e58dbb2ec8ca.js","mappings":"+zBAKO,IAAMA,EAAwB,eAACC,EAAD,uDAAc,GAAd,OAAqBA,EAAWC,QAAO,SAACC,EAAKC,GAC9E,MAAqCA,EAAQC,MAAM,KAAnD,eAAOC,EAAP,KAAqBC,EAArB,KAKA,OAJAJ,EAAI,GAAD,OAAIG,EAAJ,OAAH,OACQH,EAAI,GAAD,OAAIG,EAAJ,QAAyB,IADpC,wBAEQA,EAFR,YAEwBC,IAAiB,IAElCJ,IACR,KAEGK,EAAkB,SAACC,EAAGC,GAAJ,IAAOC,IAAP,gEACpBA,GAAMC,EAAAA,EAAAA,UAAQC,EAAAA,EAAAA,QAAOJ,IAAII,EAAAA,EAAAA,QAAOH,KAAMI,EAAAA,EAAAA,WAASD,EAAAA,EAAAA,QAAOJ,IAAII,EAAAA,EAAAA,QAAOH,KAE/DK,EAAkB,SAACC,GACrB,IAAMC,EAASC,OAAOC,QAClBH,EAASd,QAAO,SAACkB,EAAD,GAA4B,IAAnBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,MACtBC,EAAQD,EAAMjB,MAAM,KAAK,GAkB/B,YAhBoBmB,IAAhBJ,EAAKG,KACLH,EAAKG,GAAS,CACVE,iBAAiB,EACjBC,UAAU,EACVL,MAAO,QAAUE,EACjBD,MAAOC,EAAQ,KACfI,MAAO,KAIfP,EAAKG,GAAOI,MAAMC,KAAK,CACnBP,MAAAA,EACAC,MAAAA,EACAO,KAAM,aAGHT,IACR,KAYP,OARAH,EAAOa,MAAK,SAACrB,EAAGC,GAAJ,OAAUF,EAAgBC,EAAE,GAAIC,EAAE,IAAI,MAEnCO,EAAOc,KAAI,SAACC,GAGvB,OADAA,EAAM,GAAGL,MAAMG,MAAK,SAACrB,EAAGC,GAAJ,OAAUF,EAAgBC,EAAEa,MAAOZ,EAAEY,OAAO,MACzDU,EAAM,OAMRC,EAAsB,eAACC,EAAD,uDAAU,GAAIC,EAAd,uDAAiC,GAAjC,cAC5BD,GAD4B,IAE/Bb,MAAO,mBACPC,MAAO,YACPO,KAAM,QACNO,aAAc,CACVC,SAAUH,EAAOZ,MACjBgB,SAAU,SAACC,EAAOjB,GAAR,OACNY,EAAOI,SAASC,EAAOrB,OAAOC,QAAQG,GAAOpB,QAAO,SAACkB,EAAMoB,GACvD,cAAwBA,EAAxB,GAAOjB,EAAP,KAAckB,EAAd,KAEA,cAAYrB,GAAZ,cAAmBG,EAAQL,OAAOwB,YAAYxB,OAAOC,QAAQsB,GAAQE,QAAO,SAACvC,GAAD,OAA4B,IAAfA,EAAQ,WAClG,MACPa,OAAQF,EAAgBoB,OAInBS,EAAc,WAAiD,IAAhDC,EAAgD,uDAAzB,GAAIV,EAAqB,uCAClEM,EAASvB,OAAO4B,OAAOD,GAAsBE,SAAQ,SAACf,GAAD,OACvDd,OAAOC,QAAQa,GACdW,QAAO,mBAA+B,KAA/B,kBACPZ,KAAI,wCAEHiB,EAAQb,EACbQ,QAAO,gBAAGrB,EAAH,EAAGA,MAAH,OAAemB,EAAOQ,SAAS3B,MACtCS,KAAI,sBAA4BmB,KAA5B,EAAG7B,QAAH,gBAEL,OAAOoB,MAAAA,OAAA,EAAAA,EAAQU,QAAS,EAClB,CACE,CACIC,SAAU,mBACVvB,KAAMwB,EAAAA,QACNL,MAAAA,IAGN,K","sources":["webpack:///./src/Utilities/OperatingSystemFilterHelpers.js"],"sourcesContent":["import { coerce, compare, rcompare } from 'semver';\nimport { OS_CHIP } from './index';\n\n/* Takes an array of string versions and returns an object in the format\n   required by ConditionalFilter component (group filter) */\nexport const toGroupSelectionValue = (osVersions = []) => osVersions.reduce((acc, version) => {\n    const [majorVersion, minorVersion] = version.split('.');\n    acc[`${majorVersion}.0`] = {\n        ...(acc[`${majorVersion}.0`] || {}),\n        [`${majorVersion}.${minorVersion}`]: true\n    };\n    return acc;\n}, {});\n\nconst compareVersions = (a, b, asc = true) =>\n    asc ? compare(coerce(a), coerce(b)) : rcompare(coerce(a), coerce(b));\n\nconst groupOSVersions = (versions) => {\n    const groups = Object.entries(\n        versions.reduce((prev, { label, value }) => {\n            const major = value.split('.')[0];\n\n            if (prev[major] === undefined) {\n                prev[major] = {\n                    groupSelectable: true, // without this flag, the group won't be rendered - behavior of ConditionalFilter\n                    noFilter: true,\n                    label: 'RHEL ' + major,\n                    value: major + '.0',\n                    items: []\n                };\n            }\n\n            prev[major].items.push({\n                label,\n                value,\n                type: 'checkbox'\n            });\n\n            return prev;\n        }, {})\n    );\n\n    // sort by major versions in descending order\n    groups.sort((a, b) => compareVersions(a[0], b[0], false));\n\n    const sorted = groups.map((group) => {\n        // sort minor versions under each group\n        group[1].items.sort((a, b) => compareVersions(a.value, b.value, false));\n        return group[1];\n    });\n\n    return sorted;\n};\n\nexport const buildOSFilterConfig = (config = {}, operatingSystems = []) => ({\n    ...config,\n    label: 'Operating System',\n    value: 'os-filter',\n    type: 'group',\n    filterValues: {\n        selected: config.value,\n        onChange: (event, value) =>\n            config.onChange(event, Object.entries(value).reduce((prev, cur) => {\n                const [major, minors] = cur;\n                // eliminate versions that are set to false\n                return { ...prev, [major]: Object.fromEntries(Object.entries(minors).filter((version) => version[1] === true)) };\n            }, {})),\n        groups: groupOSVersions(operatingSystems)\n    }\n});\n\nexport const buildOSChip = (operatingSystemValue = {}, operatingSystems) => {\n    const minors = Object.values(operatingSystemValue).flatMap((group) =>\n        Object.entries(group)\n        .filter(([, isActive]) => isActive === true)\n        .map(([version]) => version)\n    );\n    const chips = operatingSystems\n    .filter(({ value }) => minors.includes(value))\n    .map(({ label, ...props }) => ({ name: label, ...props }));\n\n    return minors?.length > 0\n        ? [\n            {\n                category: 'Operating System',\n                type: OS_CHIP,\n                chips\n            }\n        ]\n        : [];\n};\n"],"names":["toGroupSelectionValue","osVersions","reduce","acc","version","split","majorVersion","minorVersion","compareVersions","a","b","asc","compare","coerce","rcompare","groupOSVersions","versions","groups","Object","entries","prev","label","value","major","undefined","groupSelectable","noFilter","items","push","type","sort","map","group","buildOSFilterConfig","config","operatingSystems","filterValues","selected","onChange","event","cur","minors","fromEntries","filter","buildOSChip","operatingSystemValue","values","flatMap","chips","includes","name","length","category","OS_CHIP"],"sourceRoot":""}