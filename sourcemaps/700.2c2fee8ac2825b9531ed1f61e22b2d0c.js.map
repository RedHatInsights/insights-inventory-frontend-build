{"version":3,"file":"js/700.394131817e6b314a9db1.js","mappings":"gSAYMA,EAAU,SAAH,GAA4C,IAArBC,EAAG,EAApBC,gBAAsBC,EAAS,EAATA,UAC/BC,GAAQC,EAAAA,EAAAA,YACRC,GAASC,EAAAA,EAAAA,cAAY,gBAAGC,EAAa,EAAbA,cAAa,OAAOA,aAAa,EAAbA,EAAeF,MAAM,IACjEG,GAASF,EAAAA,EAAAA,cAAY,gBAAGC,EAAa,EAAbA,cAAa,OAAOA,aAAa,EAAbA,EAAeC,MAAM,IAEvE,OAAe,IAAXH,GAAoBG,EAKpB,kBAAC,EAAAC,SAAQ,KAEDJ,EAASH,GACL,yBAAKQ,UAAS,yBAAqBR,aAAS,EAATA,EAAWS,OACxCX,EACE,kBAACA,EAAG,CACAG,MAAOA,EACPS,YAAaJ,aAAM,EAANA,EAAQK,GACrBC,QAASZ,aAAS,EAATA,EAAWS,OAExB,qBAER,kBAAC,IAAQ,CAACI,KAAOC,EAAAA,EAAAA,MAhBtB,IAoBf,EAEAjB,EAAQkB,UAAY,CAChBhB,gBAAiBiB,IAAAA,UAAoB,CAACA,IAAAA,QAAmBA,IAAAA,OACzDhB,UAAWgB,IAAAA,MAAgB,CACvBC,MAAOD,IAAAA,KACPP,KAAMO,IAAAA,OACNE,OAAQF,IAAAA,UAShB,IAAMG,EAAiB,SAAH,GAAiD,MAA3CpB,EAAe,EAAfA,gBAAiBC,EAAS,EAATA,UAAcoB,GAAK,YAClDC,GAAWC,EAAAA,EAAAA,eAAXD,OACFE,EAAe,IAAIC,gBAAgBH,GACpCtB,GAAoBC,GACrByB,QAAQC,KAAK,4FAGjB,IAAMC,GAAUvB,EAAAA,EAAAA,cAAY,YAAuB,YAApBC,EAAa,EAAbA,cACrBuB,EAAaL,EAAaM,IAAI,aAAcxB,SAAwB,QAAX,EAAbA,EAAeL,iBAAS,WAAX,EAAb,EAA0BY,SAC5E,OAAOP,SAAyB,QAAZ,EAAbA,EAAeyB,kBAAU,OAAM,QAAN,EAAzB,EAA2BC,YAAI,WAAlB,EAAb,UAAkC,SAAAC,GAAI,OAAIA,aAAI,EAAJA,EAAMvB,QAASmB,CAAU,OAAKvB,SAAyB,QAAZ,EAAbA,EAAeyB,kBAAU,WAAZ,EAAb,EAA4B,GAC/G,IAEMG,EAAgBlC,IAAwC,QAAzB,EAAKC,GAAa2B,SAAO,aAArB,EAAwBO,WAEjE,OAAO,kBAACrC,GAAO,QAACE,gBAAiBkC,EAAejC,UAAWA,GAAa2B,GAAaP,GACzF,EAEAD,EAAeJ,UAAYlB,EAAQkB,UAGnC,IAAMoB,EAAa,SAACf,GAAK,OAAMA,EAAMrB,iBAAmBqB,EAAMpB,UAAa,kBAACH,EAAYuB,GAAY,kBAACD,EAAmBC,EAAS,EAEjIe,EAAWpB,UAAYlB,EAAQkB,UAE/B,S,8FC9DA,QAP0B,SAACK,GAAK,OAC5B,kBAAC,EAAAb,SAAQ,KACL,kBAAC,IAAqBa,GACtB,kBAAC,IAAaA,GACP,C,gICTTgB,G,kBAAc,SAAChB,GAAK,OAAK,kBAACiB,EAAA,GAAc,UAAKjB,EAAK,CAAEc,UAAWC,EAAAA,IAAe,GAIpF,QAFgBG,IAAAA,YAAiB,SAAClB,EAAOmB,GAAG,OAAK,kBAACH,GAAW,UAAKhB,EAAK,CAAEoB,SAAUD,IAAO,G","sources":["webpack:///./src/components/InventoryDetail/AppInfo.js","webpack:///./src/components/InventoryDetail/FullDetail.js","webpack:///./src/modules/AppInfo.js"],"sourcesContent":["/* eslint-disable camelcase */\nimport React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { useLocation } from 'react-router-dom';\nimport { useStore, useSelector } from 'react-redux';\nimport { Skeleton, SkeletonSize } from '@redhat-cloud-services/frontend-components/Skeleton';\n\n/**\n * Small component that just renders active detail with some specific class.\n * This component detail is accessed from redux if no component found `missing component` is displayed.\n * @param {*} props `componentsMapper` if you want to pass different components list.\n */\nconst AppInfo = ({ componentMapper: Cmp, activeApp }) => {\n    const store = useStore();\n    const loaded = useSelector(({ entityDetails }) => entityDetails?.loaded);\n    const entity = useSelector(({ entityDetails }) => entityDetails?.entity);\n\n    if (loaded === true && !entity) {\n        return null;\n    }\n\n    return (\n        <Fragment>\n            {\n                loaded ? activeApp && (\n                    <div className={ `ins-active-app-${activeApp?.name}` }>\n                        { Cmp ?\n                            <Cmp\n                                store={store}\n                                inventoryId={entity?.id}\n                                appName={activeApp?.name}\n                            /> :\n                            'missing component'}\n                    </div>\n                ) : <Skeleton size={ SkeletonSize.md } />\n            }\n        </Fragment>\n    );\n};\n\nAppInfo.propTypes = {\n    componentMapper: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\n    activeApp: PropTypes.shape({\n        title: PropTypes.node,\n        name: PropTypes.string,\n        pageId: PropTypes.string\n    })\n};\n\n/**\n * This component can be removed once all apps migrate to componentMapper and activeApp.\n * @param { componentMapper, activeApp } props.\n * @returns AppInfo component\n */\nconst AppInfoWrapper = ({ componentMapper, activeApp, ...props }) => {\n    const { search } = useLocation();\n    const searchParams = new URLSearchParams(search);\n    if (!componentMapper || !activeApp) {\n        console.warn('Please pass componentMapper and activeApp. We will be deprecating the old store controls');\n    }\n\n    const currApp = useSelector(({ entityDetails }) => {\n        const activeItem = searchParams.get('appName') || entityDetails?.activeApp?.appName;\n        return entityDetails?.activeApps?.find?.(item => item?.name === activeItem) || entityDetails?.activeApps?.[0];\n    });\n\n    const currComponent = componentMapper || (activeApp || currApp)?.component;\n\n    return <AppInfo componentMapper={currComponent} activeApp={activeApp || currApp} {...props} />;\n};\n\nAppInfoWrapper.propTypes = AppInfo.propTypes;\n\n// TODO: Remove once all apps send `componentMapper` and `activeApp` and use directly AppInfo\nconst AppInfoCmp = (props) => (props.componentMapper && props.activeApp) ? <AppInfo {...props} /> : <AppInfoWrapper {...props} />;\n\nAppInfoCmp.propTypes = AppInfo.propTypes;\n\nexport default AppInfoCmp;\n","import React, { Fragment } from 'react';\nimport InventoryDetail from './InventoryDetail';\nimport AppInfo from './AppInfo';\n\n/**\n * Fallback component that binds together App info and inventory Detail.\n * You should not use this component unless you know what you are doing.\n * @param {*} props any parent props, just passed to InventoryDetail and AppInfo.\n */\nexport const FullDetail = (props) => (\n    <Fragment>\n        <InventoryDetail { ...props } />\n        <AppInfo { ...props } />\n    </Fragment>\n);\n\nexport default FullDetail;\n","import React from 'react';\nimport AsyncInventory from './AsyncInventory';\nimport { AppInfo as AppInfoCmp } from '../components/InventoryDetail';\n\nconst BaseAppInfo = (props) => <AsyncInventory {...props} component={AppInfoCmp}  />;\n\nconst AppInfo = React.forwardRef((props, ref) => <BaseAppInfo {...props} innerRef={ref} />);\n\nexport default AppInfo;\n"],"names":["AppInfo","Cmp","componentMapper","activeApp","store","useStore","loaded","useSelector","entityDetails","entity","Fragment","className","name","inventoryId","id","appName","size","SkeletonSize","propTypes","PropTypes","title","pageId","AppInfoWrapper","props","search","useLocation","searchParams","URLSearchParams","console","warn","currApp","activeItem","get","activeApps","find","item","currComponent","component","AppInfoCmp","BaseAppInfo","AsyncInventory","React","ref","innerRef"],"sourceRoot":""}