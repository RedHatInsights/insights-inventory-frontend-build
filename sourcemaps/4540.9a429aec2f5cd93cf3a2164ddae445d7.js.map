{"version":3,"file":"js/4540.1f5c14a8f9a058be85db.js","mappings":"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","sources":["webpack:///./src/Utilities/hooks/useBulkSelectConfig.js","webpack:///./src/components/InventoryGroups/Modals/RemoveHostsFromGroupModal.js"],"sourcesContent":["/* eslint-disable camelcase */\nimport { Spinner } from '@patternfly/react-core';\nimport { flatten, map } from 'lodash';\nimport React, { Fragment, useCallback, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as actions from '../../store/actions';\nimport { loadSystems } from '../sharedFunctions';\nimport useFetchBatched from './useFetchBatched';\n\nexport const useBulkSelectConfig = (\n  selected,\n  globalFilter,\n  total,\n  rows,\n  loaded,\n  pageSelected,\n  groupName\n) => {\n  const [isBulkLoading, setBulkLoading] = useState(false);\n  const { fetchBatched } = useFetchBatched();\n  const dispatch = useDispatch();\n  const onSelectRows = (id, isSelected) =>\n    dispatch(actions.selectEntity(id, isSelected));\n  const calculateSelected = () => (selected ? selected.size : 0);\n  const { activeFilters } = useSelector(({ entities }) => entities);\n  const noneSelected = selected ? selected.size === 0 : true;\n\n  const getEntitiesWrapper = async (filters, { page, per_page }) => {\n    const resp = loadSystems({ page, per_page, ...filters });\n\n    const data = await resp.payload;\n    return data;\n  };\n\n  const calculateChecked = (rows = [], selected) =>\n    rows.every(({ id }) => selected && selected.has(id))\n      ? rows.length > 0\n      : rows.some(({ id }) => selected && selected.has(id)) && null;\n\n  const fetchAllSystemIds = useCallback((filters, total) => {\n    return fetchBatched(getEntitiesWrapper, total, filters);\n  }, []);\n\n  const selectAllIds = async (selected = true) => {\n    setBulkLoading(true);\n    const data = await fetchAllSystemIds(\n      {\n        filters: groupName\n          ? [...activeFilters, { hostGroupFilter: groupName }]\n          : activeFilters,\n        globalFilter: globalFilter ?? {},\n      },\n      total\n    );\n    const results = flatten(map(data, 'results'));\n    dispatch(actions.selectEntity(results, selected));\n    setBulkLoading(false);\n  };\n\n  return {\n    id: 'bulk-select-systems',\n    items: [\n      {\n        title: 'Select none (0 items)',\n        onClick: () => onSelectRows(-1, false),\n        props: { isDisabled: noneSelected },\n      },\n      {\n        ...(loaded && rows && rows.length > 0\n          ? {\n              title: `${pageSelected ? 'Deselect' : 'Select'} page (${\n                rows.length\n              } ${rows.length === 1 ? 'item' : 'items'})`,\n              onClick: () => onSelectRows(0, !pageSelected),\n            }\n          : {}),\n      },\n      {\n        ...(loaded && rows && rows.length > 0\n          ? {\n              title: `Select all (${total} ${total === 1 ? 'item' : 'items'})`,\n              onClick: async () => {\n                await selectAllIds();\n              },\n            }\n          : {}),\n      },\n    ],\n    checked: calculateChecked(rows, selected),\n    onSelect: (value) => {\n      onSelectRows(0, value);\n    },\n    toggleProps: {\n      'data-ouia-component-type': 'bulk-select-toggle-button',\n      children: isBulkLoading ? (\n        [\n          <Fragment key=\"sd\">\n            <Spinner size=\"sm\" />\n            <span id=\"bulk-select-systems-toggle-checkbox-text\">{`${calculateSelected()} selected`}</span>\n          </Fragment>,\n        ]\n      ) : calculateSelected() > 0 ? (\n        <span id=\"bulk-select-systems-toggle-checkbox-text\">{`${calculateSelected()} selected`}</span>\n      ) : null,\n    },\n  };\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Modal from './Modal';\nimport apiWithToast from '../utils/apiWithToast';\nimport { useDispatch } from 'react-redux';\nimport { removeHostsFromGroup } from '../utils/api';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport { Text } from '@patternfly/react-core';\n\nconst schema = (hosts) => {\n  const hostsInGroup = hosts.filter(({ groups }) => groups.length > 0); // selection can contain ungroupped hosts\n  const groupName = hostsInGroup[0].groups[0].name;\n\n  return {\n    fields: [\n      {\n        component: componentTypes.PLAIN_TEXT,\n        name: 'warning-message',\n        label:\n          hostsInGroup.length === 1 ? (\n            <Text>\n              <strong>{hostsInGroup[0].display_name}</strong> will no longer be\n              part of <strong>{groupName}</strong> and its configuration will be\n              impacted.\n            </Text>\n          ) : (\n            <Text>\n              <strong>{hostsInGroup.length}</strong> systems will no longer be\n              part of <strong>{groupName}</strong> and their configuration will\n              be impacted.\n            </Text>\n          ),\n      },\n    ],\n  };\n};\n\nconst statusMessages = (hosts) => {\n  const hostsInGroup = hosts.filter(({ groups }) => groups.length > 0);\n  const groupName = hostsInGroup[0].groups[0].name;\n\n  return hostsInGroup.length === 1\n    ? {\n        onSuccess: {\n          title: `1 system removed from ${groupName}`,\n        },\n        onError: {\n          title: `Failed to remove 1 system from ${groupName}`,\n        },\n      }\n    : {\n        onSuccess: {\n          title: `${hostsInGroup.length} systems removed from ${groupName}`,\n        },\n        onError: {\n          title: `Failed to remove ${hostsInGroup.length} systems from ${groupName}`,\n        },\n      };\n};\n\nconst RemoveHostsFromGroupModal = ({\n  isModalOpen,\n  setIsModalOpen,\n  modalState: hosts,\n  reloadData,\n  reloadTimeout,\n}) => {\n  const dispatch = useDispatch();\n  const groupId = hosts.find(({ groups }) => groups.length > 0).groups[0].id;\n\n  const handleRemoveHosts = () =>\n    apiWithToast(\n      dispatch,\n      async () =>\n        await removeHostsFromGroup(\n          groupId,\n          hosts.map(({ id }) => id)\n        ),\n      statusMessages(hosts)\n    );\n\n  return (\n    <Modal\n      isModalOpen={isModalOpen}\n      closeModal={() => setIsModalOpen(false)}\n      title=\"Remove from group\"\n      variant=\"danger\"\n      submitLabel=\"Remove\"\n      schema={schema(hosts)}\n      onSubmit={handleRemoveHosts}\n      reloadData={reloadData}\n      reloadTimeout={reloadTimeout}\n    />\n  );\n};\n\nRemoveHostsFromGroupModal.propTypes = {\n  modalState: PropTypes.arrayOf(\n    PropTypes.shape({\n      // eslint-disable-next-line camelcase\n      display_name: PropTypes.string,\n      id: PropTypes.string,\n      groups: PropTypes.arrayOf(\n        PropTypes.shape({\n          id: PropTypes.string,\n          name: PropTypes.string,\n        })\n      ),\n    })\n  ).isRequired,\n  isModalOpen: PropTypes.bool.isRequired,\n  setIsModalOpen: PropTypes.func.isRequired,\n  reloadData: PropTypes.func,\n  reloadTimeout: PropTypes.number,\n};\n\nexport default RemoveHostsFromGroupModal;\n"],"names":["i","useBulkSelectConfig","selected","globalFilter","total","rows","loaded","pageSelected","groupName","useState","isBulkLoading","setBulkLoading","fetchBatched","useFetchBatched","dispatch","useDispatch","onSelectRows","id","isSelected","actions","calculateSelected","size","activeFilters","useSelector","entities","noneSelected","getEntitiesWrapper","filters","page","per_page","resp","loadSystems","payload","data","fetchAllSystemIds","useCallback","selectAllIds","hostGroupFilter","results","flatten","map","items","title","onClick","props","isDisabled","length","checked","every","has","some","calculateChecked","onSelect","value","toggleProps","children","Fragment","key","schema","hosts","hostsInGroup","filter","groups","name","fields","component","componentTypes","PLAIN_TEXT","label","display_name","RemoveHostsFromGroupModal","isModalOpen","setIsModalOpen","modalState","reloadData","reloadTimeout","groupId","find","closeModal","variant","submitLabel","onSubmit","apiWithToast","removeHostsFromGroup","onSuccess","onError","statusMessages","propTypes","PropTypes","isRequired"],"sourceRoot":""}