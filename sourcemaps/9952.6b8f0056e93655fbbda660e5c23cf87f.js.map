{"version":3,"file":"js/9952.cf7784129f1dd3391d9b.js","mappings":"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","sources":["webpack:///./src/components/GeneralInfo/selectors/selectors.js"],"sourcesContent":["/* eslint-disable camelcase */\nimport { registered } from '../../../Utilities/index';\nimport { verifyCollectorStaleness } from '../../../Utilities/sharedFunctions';\nfunction safeParser(toParse, key) {\n    try {\n        return JSON.parse(toParse);\n    } catch {\n        return { [key]: toParse };\n    }\n}\n\nexport const propertiesSelector = ({\n    number_of_cpus,\n    number_of_sockets,\n    cores_per_socket,\n    ramSize,\n    disk_devices,\n    sap_sids,\n    system_purpose,\n    cpu_flags\n} = {}, { facts } = { }) => ({\n    cpuNumber: number_of_cpus || facts?.rhsm?.CPU_CORES,\n    sockets: number_of_sockets || facts?.rhsm?.CPU_SOCKETS,\n    coresPerSocket: cores_per_socket || (\n        facts?.rhsm?.CPU_CORES\n            && facts?.rhsm?.CPU_CORES\n            && Number(facts?.rhsm?.CPU_CORES, 10) / Number(facts?.rhsm?.CPU_SOCKETS, 10)\n    ),\n    ramSize: ramSize || (facts?.rhsm?.MEMORY && `${facts?.rhsm?.MEMORY} GB`),\n    storage: disk_devices && disk_devices.map(({ device, label, mount_point, options, type }) => ({\n        ...device && safeParser(device, 'device'),\n        label,\n        ...mount_point && safeParser(mount_point, 'mountpoint'),\n        ...options && safeParser(options, 'options'),\n        ...type && safeParser(type, 'mounttype')\n    })\n    ),\n    sapIds: sap_sids,\n    systemPurpose: system_purpose?.usage,\n    cpuFlags: cpu_flags\n});\n\nexport const operatingSystem = ({\n    arch,\n    operating_system,\n    os_kernel_version,\n    last_boot_time,\n    kernel_modules\n} = {}, { facts } = {}) => ({\n    release: operating_system,\n    kernelRelease: os_kernel_version,\n    architecture: arch || facts?.rhsm?.ARCHITECTURE,\n    bootTime: last_boot_time,\n    kernelModules: kernel_modules\n});\n\nexport const biosSelector = ({\n    bios_vendor,\n    bios_version,\n    bios_release_date\n} = {}) => ({\n    vendor: bios_vendor,\n    version: bios_version,\n    releaseDate: bios_release_date\n});\n\nexport const infrastructureSelector = ({\n    infrastructure_type,\n    infrastructure_vendor,\n    network = {}\n} = {}, { facts } = {}) => ({\n    type: infrastructure_type || (\n        facts?.rhsm?.IS_VIRTUAL !== undefined && (facts?.rhsm?.IS_VIRTUAL ? 'virtual' : 'physical')\n    ) || undefined,\n    vendor: infrastructure_vendor,\n    ipv4: network.ipv4,\n    ipv6: network.ipv6,\n    nics: network.interfaces\n});\n\nexport const configurationSelector = ({\n    installed_packages,\n    enabled_services,\n    running_processes,\n    repositories\n} = {}) => ({\n    packages: installed_packages,\n    services: enabled_services,\n    processes: running_processes,\n    repositories\n});\n\nexport const collectionInformationSelector = ({\n    insights_client_version,\n    insights_egg_version\n} = {}) => ({\n    client: insights_client_version,\n    egg: insights_egg_version\n});\n\nexport const getCollectorStatus = (collectorStaleness) =>{\n    return collectorStaleness ?\n        (verifyCollectorStaleness(collectorStaleness) !== 'Fresh' ? 'Stale' : 'Active')\n        : 'N/A';\n};\n\nexport const getDefaultCollectors = (entity) =>\n    registered?.filter(reporter => reporter.label !== 'insights-client not connected')\n    .map(reporter => ({\n        name: reporter.label,\n        status: getCollectorStatus(entity?.per_reporter_staleness[reporter.value]),\n        updated: entity?.per_reporter_staleness[reporter.value]?.last_check_in,\n        details: {\n            name: reporter.idName,\n            id: entity?.[reporter.idValue]\n        }\n    }));\n\nexport const systemStatus = ({\n    stale_timestamp\n} = {}) => ({\n    stale: new Date() > new Date(stale_timestamp)\n});\n"],"names":["safeParser","toParse","key","JSON","parse","propertiesSelector","number_of_cpus","number_of_sockets","cores_per_socket","ramSize","disk_devices","sap_sids","system_purpose","cpu_flags","facts","cpuNumber","rhsm","CPU_CORES","sockets","CPU_SOCKETS","coresPerSocket","Number","MEMORY","storage","map","device","label","mount_point","options","type","sapIds","systemPurpose","usage","cpuFlags","operatingSystem","arch","operating_system","os_kernel_version","last_boot_time","kernel_modules","release","kernelRelease","architecture","ARCHITECTURE","bootTime","kernelModules","biosSelector","bios_vendor","bios_version","bios_release_date","vendor","version","releaseDate","infrastructureSelector","infrastructure_type","infrastructure_vendor","network","undefined","IS_VIRTUAL","ipv4","ipv6","nics","interfaces","configurationSelector","installed_packages","enabled_services","running_processes","repositories","packages","services","processes","collectionInformationSelector","insights_client_version","insights_egg_version","client","egg","getCollectorStatus","collectorStaleness","verifyCollectorStaleness","getDefaultCollectors","entity","registered","reporter","name","status","per_reporter_staleness","value","updated","last_check_in","details","idName","id","idValue","systemStatus","stale_timestamp","stale","Date"],"sourceRoot":""}