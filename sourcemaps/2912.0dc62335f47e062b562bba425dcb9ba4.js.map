{"version":3,"file":"js/2912.f8f392c0b0d0dead413b.js","mappings":"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","sources":["webpack:///./src/App.js","webpack:///./src/AppEntry.js","webpack:///./src/Routes.js","webpack:///./src/components/GeneralInfo/BiosCard/BiosCard.js","webpack:///./src/components/GeneralInfo/CollectionCard/CollectionCard.js","webpack:///./src/components/GeneralInfo/ConfigurationCard/ConfigurationCard.js","webpack:///./src/components/GeneralInfo/InfrastructureCard/InfrastructureCard.js","webpack:///./src/components/GeneralInfo/OperatingSystemCard/OperatingSystemCard.js","webpack:///./src/components/PermissionsLoader.js","webpack:///./src/components/SystemDetails/Advisor.js","webpack:///./src/components/SystemDetails/Compliance.js","webpack:///./src/components/SystemDetails/GeneralInfo.js","webpack:///./src/components/SystemDetails/Patch.js","webpack:///./src/components/SystemDetails/Ros.js","webpack:///./src/components/SystemDetails/Vulnerability.js","webpack:///./src/config.js","webpack:///./src/hooks/useInventoryWritePermissions.js","webpack:///./src/store/actions.js","webpack:///./src/store/entityDetails.js","webpack:///./src/store/index.js","webpack:///./src/store/permissions/reducer.js","webpack:///./src/store/reducers.js","webpack:///./src/store/systemIssues.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Routes } from './Routes';\nimport './App.scss';\nimport { INVENTORY_ROOT } from './config';\nimport { NotificationsPortal } from '@redhat-cloud-services/frontend-components-notifications/';\nimport PermissionLoader from './components/PermissionsLoader';\n\nconst App = () => {\n    const history = useHistory();\n    useEffect(() => {\n        insights.chrome.init();\n        insights.chrome.identifyApp(INVENTORY_ROOT);\n        return insights.chrome.on(\n            'APP_NAVIGATION',\n            event => {\n                if (event.navId === 'inventory') {\n                    history.push(`/${location.search}${location.hash}`);\n                } else {\n                    history.push(`/${event.navId}${location.search}${location.hash}`);\n                }\n            }\n        );\n    }, []);\n\n    return (\n        <div className=\"inventory\">\n            <NotificationsPortal />\n            <PermissionLoader />\n            <Routes />\n        </div>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { init, RegistryContext } from './store';\nimport App from './App';\nimport { getBaseName } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport logger from 'redux-logger';\n\nconst InventoryApp = () => {\n    const registry = IS_DEV ? init(logger) : init();\n    return <RegistryContext.Provider value={{\n        getRegistry: () => registry\n    }}>\n        <Provider store={registry.getStore()}>\n            <Router basename={getBaseName(window.location.pathname)}>\n                <App />\n            </Router>\n        </Provider>\n    </RegistryContext.Provider>;\n};\n\nInventoryApp.propTypes = {\n    useLogger: PropTypes.bool\n};\n\nInventoryApp.defaultProps = {\n    useLogger: false\n};\n\nexport default InventoryApp;\n","import { Route, Switch, matchPath, useHistory } from 'react-router-dom';\nimport React, { lazy, Suspense, useContext, useEffect } from 'react';\nimport { tagsMapper } from './constants';\nimport { reducers, RegistryContext, tableReducer } from './store';\nimport { mergeWithEntities } from './store/reducers';\n\nconst InventoryTable = lazy(() => import('./routes/InventoryTable'));\nconst InventoryDetail = lazy(() => import('./routes/InventoryDetail'));\n\nexport const routes = {\n    table: '/',\n    detail: '/:inventoryId'\n};\n\nfunction checkPaths(technology, app) {\n    return Object\n    .values(routes)\n    .some(\n        route => {\n            return matchPath(location.href, { path: `${document.baseURI}${technology}/${app}${route}` });\n        }\n    );\n}\n\nexport const Routes = () => {\n    const { getRegistry } = useContext(RegistryContext);\n    useEffect(() => {\n        getRegistry().register({\n            ...reducers,\n            ...mergeWithEntities(tableReducer)\n        });\n    }, [getRegistry]);\n    const history = useHistory();\n    const pathName = window.location.pathname.split('/');\n    const searchParams = new URLSearchParams(location.search);\n    pathName.shift();\n\n    if (pathName[0] === 'beta') {\n        pathName.shift();\n    }\n\n    if (!checkPaths(pathName[0], pathName[1])) {\n        history.push(`${routes.table}${location.search}${location.hash}`);\n    }\n\n    return (\n        <Suspense fallback=\"\">\n            <Switch>\n                <Route\n                    exact\n                    path={routes.table}\n                    render={() => <InventoryTable\n                        status={searchParams.getAll('status')}\n                        source={searchParams.getAll('source')}\n                        filterbyName={searchParams.getAll('hostname_or_id')}\n                        tagsFilter={searchParams.getAll('tags')?.[0]?.split?.(',').reduce?.(tagsMapper, [])}\n                        page={searchParams.getAll('page')}\n                        perPage={searchParams.getAll('per_page')}\n                    />}\n                    rootClass='inventory'\n                />\n                <Route path={routes.detail} component={InventoryDetail} rootClass='inventory' />\n            </Switch>\n        </Suspense>\n    );\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport LoadingCard from '../LoadingCard';\nimport { biosSelector } from '../selectors';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { extraShape, isDate } from '../../../constants';\n\nconst BiosCard = ({ bios, detailLoaded, hasVendor, hasVersion, handleClick, hasReleaseDate, extra }) => (<LoadingCard\n    title=\"BIOS\"\n    isLoading={ !detailLoaded }\n    items={ [\n        ...hasVendor ? [{ title: 'Vendor', value: bios.vendor }] : [],\n        ...hasVersion ? [{ title: 'Version', value: bios.version }] : [],\n        ...hasReleaseDate ? [{ title: 'Release date', value: (isDate(bios.releaseDate) ?\n            <DateFormat date={ new Date(bios.releaseDate) } type=\"onlyDate\" /> :\n            'Not available'\n        ) }] : [],\n        ...extra.map(({ onClick, ...item }) => ({\n            ...item,\n            ...onClick && { onClick: (e) => onClick(e, handleClick) }\n        }))\n    ] }\n/>);\n\nBiosCard.propTypes = {\n    detailLoaded: PropTypes.bool,\n    handleClick: PropTypes.func,\n    bios: PropTypes.shape({\n        vendor: PropTypes.string,\n        version: PropTypes.string,\n        releaseDate: PropTypes.string,\n        csm: PropTypes.arrayOf(PropTypes.string)\n    }),\n    hasVendor: PropTypes.bool,\n    hasVersion: PropTypes.bool,\n    hasReleaseDate: PropTypes.bool,\n    extra: PropTypes.arrayOf(extraShape)\n};\nBiosCard.defaultProps = {\n    detailLoaded: false,\n    handleClick: () => undefined,\n    extra: [],\n    hasVendor: true,\n    hasVersion: true,\n    hasReleaseDate: true\n};\n\nexport default connect(({\n    systemProfileStore: {\n        systemProfile\n    }\n}) => ({\n    detailLoaded: systemProfile && systemProfile.loaded,\n    bios: biosSelector(systemProfile)\n}))(BiosCard);\n","/* eslint-disable camelcase */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { Tooltip } from '@patternfly/react-core';\n\nimport LoadingCard from '../LoadingCard';\nimport { collectionInformationSelector } from '../selectors';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { extraShape } from '../../../constants';\n\nconst VersionTooltip = ({ egg, client }) => (\n    <Tooltip\n        content={\n            <React.Fragment>\n                <p>RPM version: { client || 'Not available' }</p>\n                <p>Dynamic update version: { egg || 'Not available' }</p>\n            </React.Fragment>\n        }\n    >\n        <span>{ client || egg || 'Not available' }</span>\n    </Tooltip>\n);\n\nVersionTooltip.propTypes = {\n    egg: PropTypes.string,\n    client: PropTypes.string\n};\n\nconst CollectionCard = ({\n    detailLoaded,\n    collectionInformation,\n    entity,\n    handleClick,\n    hasClient,\n    hasLastCheckIn,\n    hasRegistered,\n    hasInsightsId,\n    hasReporter,\n    hasMachineId,\n    extra\n}) => (<LoadingCard\n    title=\"Collection information\"\n    isLoading={ !detailLoaded }\n    items={ [\n        ...hasClient ? [{\n            title: 'Insights client',\n            value: <VersionTooltip egg={collectionInformation.egg} client={collectionInformation.client}/>\n        }] : [],\n        ...hasLastCheckIn ? [{ title: 'Last check-in', value: entity && (\n            DateFormat ?\n                <DateFormat date={ entity.updated } type=\"onlyDate\" /> :\n                new Date(entity.updated).toLocaleString()\n        ) }] : [],\n        ...hasRegistered ? [{ title: 'Registered', value: entity && (\n            DateFormat ?\n                <DateFormat date={entity.created} type=\"onlyDate\" /> :\n                new Date(entity.created).toLocaleString()\n        ) }] : [],\n        ...hasInsightsId ? [{ title: 'Insights id', value: entity && entity.insights_id }] : [],\n        ...hasReporter ? [{ title: 'Reporter', value: entity && entity.reporter }] : [],\n        ...hasMachineId ? [{ title: 'RHEL machine id', value: entity && entity.rhel_machine_id }] : [],\n        ...extra.map(({ onClick, ...item }) => ({\n            ...item,\n            ...onClick && { onClick: (e) => onClick(e, handleClick) }\n        }))\n    ] }\n/>);\n\nCollectionCard.propTypes = {\n    detailLoaded: PropTypes.bool,\n    entity: PropTypes.shape({\n        updated: PropTypes.string,\n        created: PropTypes.string,\n        insights_id: PropTypes.string,\n        reporter: PropTypes.string,\n        rhel_machine_id: PropTypes.string\n    }),\n    handleClick: PropTypes.func,\n    collectionInformation: PropTypes.shape({\n        client: PropTypes.string,\n        egg: PropTypes.string\n    }),\n    hasClient: PropTypes.bool,\n    hasLastCheckIn: PropTypes.bool,\n    hasRegistered: PropTypes.bool,\n    hasInsightsId: PropTypes.bool,\n    hasReporter: PropTypes.bool,\n    hasMachineId: PropTypes.bool,\n    extra: PropTypes.arrayOf(extraShape)\n};\nCollectionCard.defaultProps = {\n    detailLoaded: false,\n    handleClick: () => undefined,\n    hasClient: true,\n    hasEgg: true,\n    hasLastCheckIn: true,\n    hasRegistered: true,\n    hasInsightsId: true,\n    hasReporter: true,\n    hasMachineId: true,\n    extra: []\n};\n\nexport default connect(({\n    entityDetails: {\n        entity\n    },\n    systemProfileStore: {\n        systemProfile\n    }\n}) => ({\n    entity,\n    detailLoaded: systemProfile && systemProfile.loaded,\n    collectionInformation: collectionInformationSelector(systemProfile)\n}))(CollectionCard);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport LoadingCard from '../LoadingCard';\nimport { generalMapper, repositoriesMapper } from '../dataMapper';\nimport { configurationSelector } from '../selectors';\nimport { extraShape } from '../../../constants';\n\nexport function enabledRepos(repositories) {\n    if (repositories) {\n        return [\n            repositories.enabled && repositories.enabled.length > 0 && `${repositories.enabled.length} enabled`,\n            repositories.disabled && repositories.disabled.length > 0 && `${repositories.disabled.length} disabled`\n        ].filter(Boolean).join(' / ');\n    }\n}\n\nconst ConfigurationCard = ({\n    detailLoaded,\n    configuration,\n    handleClick,\n    hasPackages,\n    hasServices,\n    hasProcesses,\n    hasRepositories,\n    extra\n}) => (<LoadingCard\n    title=\"Configuration\"\n    isLoading={ !detailLoaded }\n    items={ [\n        ...hasPackages ? [{\n            title: 'Installed packages',\n            value: configuration.packages?.length,\n            singular: 'package',\n            target: 'installed_packages',\n            onClick: () => {\n                handleClick(\n                    'Installed packages',\n                    generalMapper(configuration.packages, 'Package name')\n                );\n            }\n        }] : [],\n        ...hasServices ? [{\n            title: 'Services',\n            value: configuration.services?.length,\n            singular: 'service',\n            target: 'services',\n            onClick: () => {\n                handleClick(\n                    'Services',\n                    generalMapper(configuration.services, 'Service name')\n                );\n            }\n        }] : [],\n        ...hasProcesses ? [{\n            title: 'Running processes',\n            value: configuration.processes?.length,\n            singular: 'process',\n            plural: 'processes',\n            target: 'running_processes',\n            onClick: () => {\n                handleClick(\n                    'Running processes',\n                    generalMapper(configuration.processes, 'Process name')\n                );\n            }\n        }] : [],\n        ...hasRepositories ? [{\n            title: 'Repositories',\n            value: enabledRepos(configuration.repositories),\n            target: 'repositories',\n            onClick: () => {\n                handleClick(\n                    'Repositories',\n                    repositoriesMapper(configuration.repositories),\n                    'medium'\n                );\n            }\n        }] : [],\n        ...extra.map(({ onClick, ...item }) => ({\n            ...item,\n            ...onClick && { onClick: (e) => onClick(e, handleClick) }\n        }))\n    ] }\n/>);\n\nConfigurationCard.propTypes = {\n    detailLoaded: PropTypes.bool,\n    handleClick: PropTypes.func,\n    configuration: PropTypes.shape({\n        packages: PropTypes.arrayOf(PropTypes.string),\n        services: PropTypes.arrayOf(PropTypes.string),\n        processes: PropTypes.arrayOf(PropTypes.string),\n        repositories: PropTypes.shape({\n            enabled: PropTypes.arrayOf(PropTypes.shape({\n                // eslint-disable-next-line camelcase\n                base_url: PropTypes.string,\n                name: PropTypes.string,\n                enabled: PropTypes.bool,\n                gpgcheck: PropTypes.bool\n            })),\n            disabled: PropTypes.arrayOf(PropTypes.shape({\n                // eslint-disable-next-line camelcase\n                base_url: PropTypes.string,\n                name: PropTypes.string,\n                enabled: PropTypes.bool,\n                gpgcheck: PropTypes.bool\n            }))\n        })\n    }),\n    hasPackages: PropTypes.bool,\n    hasServices: PropTypes.bool,\n    hasProcesses: PropTypes.bool,\n    hasRepositories: PropTypes.bool,\n    extra: PropTypes.arrayOf(extraShape)\n};\nConfigurationCard.defaultProps = {\n    detailLoaded: false,\n    handleClick: () => undefined,\n    hasPackages: true,\n    hasServices: true,\n    hasProcesses: true,\n    hasRepositories: true,\n    extra: []\n};\n\nexport default connect(({\n    systemProfileStore: {\n        systemProfile\n    }\n}) => ({\n    detailLoaded: systemProfile && systemProfile.loaded,\n    configuration: configurationSelector(systemProfile)\n}))(ConfigurationCard);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport LoadingCard from '../LoadingCard';\nimport { generalMapper, interfaceMapper } from '../dataMapper';\nimport { infrastructureSelector } from '../selectors';\nimport { extraShape } from '../../../constants';\n\nconst InfrastructureCard = ({\n    infrastructure,\n    handleClick,\n    detailLoaded,\n    hasType,\n    hasVendor,\n    hasIPv4,\n    hasIPv6,\n    hasInterfaces,\n    extra\n}) => (<LoadingCard\n    title=\"Infrastructure\"\n    isLoading={ !detailLoaded }\n    items={ [\n        ...hasType ? [{ title: 'Type', value: infrastructure.type }] : [],\n        ...hasVendor ? [{ title: 'Vendor', value: infrastructure.vendor }] : [],\n        ...hasIPv4 ? [{\n            title: 'IPv4 addresses',\n            value: infrastructure.ipv4?.length,\n            plural: 'addresses',\n            singular: 'address',\n            target: 'ipv4',\n            onClick: () => {\n                handleClick(\n                    'IPv4',\n                    generalMapper(infrastructure.ipv4, 'IP address')\n                );\n            }\n        }] : [],\n        ...hasIPv6 ? [{\n            title: 'IPv6 addresses',\n            value: infrastructure.ipv6?.length,\n            plural: 'addresses',\n            singular: 'address',\n            onClick: () => {\n                handleClick(\n                    'IPv6',\n                    generalMapper(infrastructure.ipv6, 'IP address')\n                );\n            }\n        }] : [],\n        ...hasInterfaces ? [{\n            title: 'Interfaces/NICs',\n            value: infrastructure.nics?.length,\n            singular: 'NIC',\n            target: 'interfaces',\n            onClick: () => {\n                handleClick(\n                    'Interfaces/NICs',\n                    interfaceMapper(infrastructure.nics),\n                    'medium'\n                );\n            }\n        }] : [],\n        ...extra.map(({ onClick, ...item }) => ({\n            ...item,\n            ...onClick && { onClick: (e) => onClick(e, handleClick) }\n        }))\n    ] }\n/>);\n\nInfrastructureCard.propTypes = {\n    detailLoaded: PropTypes.bool,\n    handleClick: PropTypes.func,\n    infrastructure: PropTypes.shape({\n        type: PropTypes.string,\n        vendor: PropTypes.string,\n        ipv4: PropTypes.array,\n        ipv6: PropTypes.array,\n        nics: PropTypes.array\n    }),\n    hasType: PropTypes.bool,\n    hasVendor: PropTypes.bool,\n    hasIPv4: PropTypes.bool,\n    hasIPv6: PropTypes.bool,\n    hasInterfaces: PropTypes.bool,\n    extra: PropTypes.arrayOf(extraShape)\n};\nInfrastructureCard.defaultProps = {\n    detailLoaded: false,\n    handleClick: () => undefined,\n    hasType: true,\n    hasVendor: true,\n    hasIPv4: true,\n    hasIPv6: true,\n    hasInterfaces: true,\n    extra: []\n};\n\nexport default connect(({\n    entityDetails: {\n        entity\n    },\n    systemProfileStore: {\n        systemProfile\n    }\n}) => ({\n    detailLoaded: systemProfile && systemProfile.loaded,\n    infrastructure: infrastructureSelector(systemProfile, entity)\n}))(InfrastructureCard);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport LoadingCard from '../LoadingCard';\nimport { generalMapper } from '../dataMapper';\nimport { operatingSystem } from '../selectors';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { extraShape, isDate } from '../../../constants';\n\nconst OperatingSystemCard = ({\n    systemInfo,\n    detailLoaded,\n    handleClick,\n    hasRelease,\n    hasKernelRelease,\n    hasArchitecture,\n    hasLastBoot,\n    hasKernelModules,\n    extra\n}) => (\n    <LoadingCard\n        title=\"Operating system\"\n        isLoading={ !detailLoaded }\n        items={ [\n            ...hasRelease ? [{ title: 'Release', value: systemInfo.release }] : [],\n            ...hasKernelRelease ? [{ title: 'Kernel release', value: systemInfo.kernelRelease }] : [],\n            ...hasArchitecture ? [{ title: 'Architecture', value: systemInfo.architecture }] : [],\n            ...hasLastBoot ? [{ title: 'Last boot time', value: (isDate(systemInfo.bootTime) ?\n                <DateFormat date={ systemInfo.bootTime } type=\"onlyDate\" /> :\n                'Not available'\n            )\n            }] : [],\n            ...hasKernelModules ? [{\n                title: 'Kernel modules',\n                value: systemInfo.kernelModules?.length,\n                singular: 'module',\n                target: 'kernel_modules',\n                onClick: () => {\n                    handleClick(\n                        'Kernel modules',\n                        generalMapper(systemInfo.kernelModules, 'Module')\n                    );\n                }\n            }] : [],\n            ...extra.map(({ onClick, ...item }) => ({\n                ...item,\n                ...onClick && { onClick: (e) => onClick(e, handleClick) }\n            }))\n        ] }\n    />\n);\n\nOperatingSystemCard.propTypes = {\n    detailLoaded: PropTypes.bool,\n    handleClick: PropTypes.func,\n    systemInfo: PropTypes.shape({\n        release: PropTypes.string,\n        architecture: PropTypes.string,\n        kernelRelease: PropTypes.string,\n        bootTime: PropTypes.string,\n        kernelModules: PropTypes.arrayOf(PropTypes.string)\n    }),\n    hasRelease: PropTypes.bool,\n    hasKernelRelease: PropTypes.bool,\n    hasArchitecture: PropTypes.bool,\n    hasLastBoot: PropTypes.bool,\n    hasKernelModules: PropTypes.bool,\n    extra: PropTypes.arrayOf(extraShape)\n};\nOperatingSystemCard.defaultProps = {\n    detailLoaded: false,\n    handleClick: () => undefined,\n    hasRelease: true,\n    hasKernelRelease: true,\n    hasArchitecture: true,\n    hasLastBoot: true,\n    hasKernelModules: true,\n    extra: []\n};\n\nexport default connect(({\n    entityDetails: {\n        entity\n    },\n    systemProfileStore: {\n        systemProfile\n    }\n}) => ({\n    detailLoaded: systemProfile && systemProfile.loaded,\n    systemInfo: operatingSystem(systemProfile, entity)\n}))(OperatingSystemCard);\n","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport useInventoryWritePermissions from '../hooks/useInventoryWritePermissions';\nimport { ACTION_TYPES } from '../store/action-types';\n\nconst PermissionLoader = () => {\n    const { isLoading, hasAccess } = useInventoryWritePermissions();\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch({ type: `${ACTION_TYPES.LOAD_WRITE_PERMISSIONS}_PENDING` });\n    }, []);\n\n    useEffect(() => {\n        if (!isLoading) {\n            dispatch({ type: `${ACTION_TYPES.LOAD_WRITE_PERMISSIONS}_FULFILLED`, payload: { writePermissions: hasAccess } });\n        }\n    }, [isLoading]);\n\n    return null;\n};\n\nexport default PermissionLoader;\n","import React from 'react';\nimport { useStore } from 'react-redux';\nimport AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';\n\nconst AdvisorTab = () => {\n    return <AsyncComponent\n        appName=\"advisor\"\n        module=\"./SystemDetail\"\n        store={useStore()}\n        customItnl\n        intlProps={{\n            locale: navigator.language\n        }}\n    />;\n};\n\nexport default AdvisorTab;\n","import React from 'react';\nimport { useStore } from 'react-redux';\nimport { useRouteMatch } from 'react-router-dom';\nimport AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';\n\nconst ComplianceTab = () => {\n    const { params } = useRouteMatch('/:inventoryId');\n    return <AsyncComponent\n        appName=\"compliance\"\n        module=\"./SystemDetail\"\n        store={useStore()}\n        customItnl\n        intlProps={{\n            locale: navigator.language\n        }}\n        inventoryId={ params.inventoryId }\n        remediationsEnabled\n    />;\n};\n\nexport default ComplianceTab;\n","import React, { useEffect, useState, Fragment } from 'react';\nimport { Provider } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport GeneralInformation from '../GeneralInfo/GeneralInformation';\nexport { default as TextInputModal } from '../GeneralInfo/TextInputModal';\nimport fallback from '../SpinnerFallback';\nimport systemProfileStore from '../../store/systemProfileStore';\n\nconst GeneralInfoTab = ({ getRegistry, ...props }) => {\n    const [Wrapper, setWrapper] = useState();\n    useEffect(() => {\n        if (getRegistry) {\n            getRegistry()?.register?.({ systemProfileStore });\n        }\n\n        setWrapper(() => getRegistry ? Provider : Fragment);\n    }, []);\n    return Wrapper ? <Wrapper\n        {...getRegistry && {\n            store: getRegistry().getStore()\n        }}\n    >\n        <GeneralInformation {...props} />\n    </Wrapper> : fallback;\n};\n\nGeneralInfoTab.propTypes = {\n    getRegistry: PropTypes.func\n};\n\nexport default GeneralInfoTab;\n","import React, { useContext } from 'react';\nimport { RegistryContext } from '../../store';\nimport AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';\n\nconst PatchTab = () => {\n    const { getRegistry } = useContext(RegistryContext);\n\n    return <AsyncComponent\n        appName=\"patch\"\n        module=\"./SystemDetail\"\n        getRegistry={getRegistry}\n    />;\n};\n\nexport default PatchTab;\n","import React, { useContext } from 'react';\nimport { useRouteMatch } from 'react-router-dom';\nimport { RegistryContext } from '../../store';\nimport AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';\n\nconst RosTab = () => {\n    const { params } = useRouteMatch('/:inventoryId');\n    const { getRegistry } = useContext(RegistryContext);\n\n    return <AsyncComponent\n        appName=\"ros\"\n        module=\"./SystemDetail\"\n        getRegistry={ getRegistry }\n        inventoryId={ params.inventoryId }\n    />;\n};\n\nexport default RosTab;\n","import React, { useContext } from 'react';\nimport { useRouteMatch } from 'react-router-dom';\nimport { RegistryContext } from '../../store';\nimport AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';\n\nconst VulnerabilityTab = () => {\n    const { params } = useRouteMatch('/:inventoryId');\n    const { getRegistry } = useContext(RegistryContext);\n\n    return <AsyncComponent\n        appName=\"vulnerability\"\n        module=\"./SystemDetail\"\n        getRegistry={getRegistry}\n        customItnlProvider\n        entity={ { id: params.inventoryId } }\n    />;\n};\n\nexport default VulnerabilityTab;\n","\nexport const INVENTORY_API_BASE = '/api/inventory/v1';\nexport const INVENTORY_ROOT = 'inventory';\n","import { usePermissions } from '@redhat-cloud-services/frontend-components-utilities/RBACHook';\n\nconst useInventoryWritePermissions = () => {\n    const { hasAccess, ...rest } = usePermissions('inventory', [\n        'inventory:*:*',\n        'inventory:hosts:write',\n        'inventory:*:write'\n    ]);\n\n    return { ...rest, hasAccess };\n};\n\nexport default useInventoryWritePermissions;\n","import { ACTION_TYPES, CLEAR_NOTIFICATIONS, SET_INVENTORY_FILTER, SET_PAGINATION } from './action-types';\nimport { hosts, getEntitySystemProfile } from '../api';\nexport * from './system-issues-actions';\nexport * from './inventory-actions';\n\nexport const deleteEntity = (systems, displayName) => ({\n    type: ACTION_TYPES.REMOVE_ENTITY,\n    payload: hosts.apiHostDeleteById(systems),\n    meta: {\n        notifications: {\n            fulfilled: {\n                variant: 'success',\n                title: 'Delete operation finished',\n                description: `${displayName} has been successfully removed.`,\n                dismissable: true\n            }\n        },\n        systems\n    }\n});\n\nexport const setFilter = (filtersList) => ({\n    type: SET_INVENTORY_FILTER,\n    payload: {\n        filtersList\n    }\n});\n\nexport const clearNotifications = () => {\n    return ({\n        type: CLEAR_NOTIFICATIONS\n    });\n};\n\nexport const editDisplayName = (id, value) => ({\n    type: ACTION_TYPES.UPDATE_DISPLAY_NAME,\n    payload: hosts.apiHostPatchById([id], { display_name: value }), // eslint-disable-line camelcase\n    meta: {\n        id,\n        value,\n        notifications: {\n            fulfilled: {\n                variant: 'success',\n                title: `Display name for entity with ID ${id} has been changed to ${value}`,\n                dismissable: true\n            }\n        }\n    }\n});\n\nexport const setPagination = (page, perPage) => ({\n    type: SET_PAGINATION,\n    payload: {\n        page, perPage\n    }\n});\n\nexport const systemProfile = (itemId) => ({\n    type: ACTION_TYPES.LOAD_SYSTEM_PROFILE,\n    payload: getEntitySystemProfile(itemId, {})\n});\n\nexport const editAnsibleHost = (id, value) => ({\n    type: ACTION_TYPES.SET_ANSIBLE_HOST,\n    payload: hosts.apiHostPatchById([id], { ansible_host: value }), // eslint-disable-line camelcase\n    meta: {\n        notifications: {\n            fulfilled: {\n                variant: 'success',\n                title: 'Ansible hostname has been updated',\n                dismissable: true\n            }\n        }\n    }\n});\n","import { ACTION_TYPES, APPLICATION_SELECTED, TOGGLE_TAG_MODAL, TOGGLE_DRAWER } from './action-types';\nimport { showTags, toggleTagModalReducer } from './entities';\nimport systemIssuesReducer from './systemIssues';\nexport const entityDefaultState = { loaded: false };\n\nfunction entityDetailPending(state) {\n    return {\n        ...state,\n        loaded: false\n    };\n}\n\nfunction entityDetailLoaded(state, { payload }) {\n    return {\n        ...state,\n        loaded: true,\n        entity: payload.results[0]\n    };\n}\n\nfunction onApplicationSelected(state, { payload }) {\n    return {\n        ...state,\n        activeApp: payload\n    };\n}\n\nfunction toggleDrawer(state, { payload }) {\n    return  {\n        ...state,\n        isToggleOpened: payload?.isOpened\n    };\n}\n\nfunction showTagsPending(state) {\n    return {\n        ...state,\n        tagModalLoaded: false\n    };\n}\n\nexport default {\n    [ACTION_TYPES.LOAD_ENTITIES_PENDING]: () => entityDefaultState,\n    [ACTION_TYPES.LOAD_ENTITY_PENDING]: entityDetailPending,\n    [ACTION_TYPES.LOAD_ENTITY_FULFILLED]: entityDetailLoaded,\n    [APPLICATION_SELECTED]: onApplicationSelected,\n    [ACTION_TYPES.LOAD_TAGS]: showTags,\n    [ACTION_TYPES.LOAD_TAGS_PENDING]: showTagsPending,\n    [ACTION_TYPES.LOAD_TAGS_FULFILLED]: showTags,\n    [TOGGLE_TAG_MODAL]: toggleTagModalReducer,\n    [TOGGLE_DRAWER]: toggleDrawer,\n    ...systemIssuesReducer\n};\n","\nimport { createContext } from 'react';\nimport MiddlewareListener from '@redhat-cloud-services/frontend-components-utilities/MiddlewareListener';\nimport { ReducerRegistry } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport notificationsMiddleware from '@redhat-cloud-services/frontend-components-notifications/notificationsMiddleware';\nimport promise  from 'redux-promise-middleware';\nexport { default as reducers, tableReducer, entitesDetailReducer } from './reducers';\n\nexport const RegistryContext = createContext({\n    getRegistry: () => {}\n});\n\nlet middlewareListener;\n\nexport function init (...middleware) {\n    middlewareListener = new MiddlewareListener();\n    return new ReducerRegistry(\n        {},\n        [\n            middlewareListener.getMiddleware(),\n            promise,\n            notificationsMiddleware({\n                errorDescriptionKey: ['detail', 'stack']\n            }),\n            ...middleware\n        ]\n    );\n}\n\nexport function addNewListener ({ actionType, callback }) {\n    return middlewareListener.addNew({\n        on: actionType,\n        callback\n    });\n}\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { ACTION_TYPES } from '../action-types';\n\nconst loadWritePermissionsPending = (state) => ({\n    ...state,\n    loadingFailed: false,\n    loading: true,\n    writePermissions: undefined\n});\n\nconst loadWritePermissionsFulfilled = (state, { payload }) => ({\n    ...state,\n    loading: false,\n    loadingFailed: false,\n    writePermissions: payload.writePermissions\n});\n\nconst loadWritePermissionsFailed = (state) => ({\n    ...state,\n    loading: false,\n    loadingFailed: true\n});\n\nconst defaultPermissionState = {\n    loading: true,\n    writePermissions: false,\n    loadingFailed: false\n};\n\nconst permissionsReducer = applyReducerHash(\n    {\n        [`${ACTION_TYPES.LOAD_WRITE_PERMISSIONS}_PENDING`]: loadWritePermissionsPending,\n        [`${ACTION_TYPES.LOAD_WRITE_PERMISSIONS}_FULFILLED`]: loadWritePermissionsFulfilled,\n        [`${ACTION_TYPES.LOAD_WRITE_PERMISSIONS}_FAILED`]: loadWritePermissionsFailed\n    },\n    defaultPermissionState\n);\n\nexport default permissionsReducer;\n","import { INVENTORY_ACTION_TYPES, ACTION_TYPES, SELECT_ENTITY, SET_INVENTORY_FILTER, SET_PAGINATION } from './action-types';\nimport systemProfileStore from './systemProfileStore';\nimport {\n    ComplianceTab,\n    VulnerabilityTab,\n    AdvisorTab,\n    GeneralInformationTab,\n    PatchTab,\n    RosTab\n} from '../components/SystemDetails';\nimport { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { mergeArraysByKey } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport { notificationsReducer } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport entitiesReducer, { defaultState as entitiesDefault } from './entities';\nimport entityDetailsReducer, { entityDefaultState as entityDefault } from './entityDetails';\n\nexport { entitiesReducer, entityDetailsReducer };\n\nimport permissionsReducer from './permissions/reducer';\n\nconst defaultState = { loaded: false, selected: new Map() };\n\nfunction entitiesLoaded(state, { payload }) {\n    return {\n        ...state,\n        rows: mergeArraysByKey([state.rows, payload.results]),\n        entities: mergeArraysByKey([state.entities, payload.results])\n    };\n}\n\nfunction updateEntity(state, { meta }) {\n    return {\n        ...state,\n        rows: state.rows.map((row) => row.id === meta?.id ? ({\n            ...row,\n            // eslint-disable-next-line camelcase\n            display_name: meta?.value\n        }) : row)\n    };\n}\n\nfunction entityLoaded(state) {\n    return {\n        ...state,\n        loaded: true,\n        activeApps: [\n            { title: 'General information', name: 'general_information', component: GeneralInformationTab },\n            { title: 'Advisor', name: 'advisor', component: AdvisorTab },\n            {\n                title: 'Vulnerability',\n                name: 'vulnerabilities',\n                component: VulnerabilityTab\n            },\n            {\n                title: 'Compliance',\n                name: 'compliance',\n                component: ComplianceTab\n            },\n            {\n                title: 'Patch',\n                name: 'patch',\n                component: PatchTab\n            },\n            (!insights.chrome.isProd || (insights.chrome.isProd && insights?.chrome?.isBeta())) && {\n                title: 'Resource Optimization',\n                name: 'ros',\n                component: RosTab\n            }\n        ].filter(Boolean)\n    };\n}\n\nfunction entitySelected(state, { payload }) {\n    const selected = state.selected || (new Map());\n    if (payload.selected) {\n        if (payload.id === 0) {\n            state.rows.forEach(row => selected.set(row.id, row));\n        } else {\n            const selectedRow = state.rows && state.rows.find(({ id }) => id === payload.id);\n            selected.set(payload.id, { ...selectedRow || {}, id: payload.id });\n        }\n    } else {\n        if (payload.id === 0) {\n            state.rows.forEach(row => selected.delete(row.id));\n        } else if (payload.id === -1) {\n            selected.clear();\n        } else {\n            selected.delete(payload.id);\n        }\n    }\n\n    return {\n        ...state,\n        selected: new Map(selected)\n    };\n}\n\nfunction entityDeleted(state, { meta }) {\n    const selected = state.selected || (new Map());\n    meta.systems.forEach(id => selected.delete(id));\n\n    return {\n        ...state,\n        selected: new Map(selected)\n    };\n}\n\nfunction onEntitiesLoaded(state, { payload, meta }) {\n    if (meta?.lastDateRequest < state?.lastDateRequest) {\n        return state;\n    }\n\n    return {\n        ...state,\n        rows: mergeArraysByKey([state.rows, payload.results.map(result => {\n            return {\n                ...result,\n                selected: state.selected && state.selected.has(result.id)\n            };\n        })])\n    };\n}\n\nfunction onSetFilter(state, { payload }) {\n    return {\n        ...state,\n        activeFilters: payload.filtersList\n    };\n}\n\nfunction onSetPagination(state, { payload }) {\n    const perPage = parseInt(payload.perPage, 10);\n    const page = parseInt(payload.page, 10);\n    return {\n        ...state,\n        perPage: isNaN(perPage) ? 50 : perPage,\n        page: isNaN(page) ? 1 : page\n    };\n}\n\nlet reducers = {\n    notifications: notificationsReducer,\n    systemProfileStore,\n    permissionsReducer\n};\n\nexport const tableReducer = applyReducerHash(\n    {\n        [ACTION_TYPES.GET_ENTITIES_FULFILLED]: entitiesLoaded,\n        [INVENTORY_ACTION_TYPES.LOAD_ENTITIES_FULFILLED]: onEntitiesLoaded,\n        [`${ACTION_TYPES.REMOVE_ENTITY}_FULFILLED`]: entityDeleted,\n        [SELECT_ENTITY]: entitySelected,\n        FILTER_SELECT: (state) => ({ ...state, selected: {} }),\n        [SET_INVENTORY_FILTER]: onSetFilter,\n        [SET_PAGINATION]: onSetPagination,\n        [ACTION_TYPES.UPDATE_DISPLAY_NAME_FULFILLED]: updateEntity\n    },\n    defaultState\n);\n\nexport const entitesDetailReducer = () => applyReducerHash(\n    {\n        [INVENTORY_ACTION_TYPES.LOAD_ENTITY_FULFILLED]: entityLoaded\n    },\n    defaultState\n);\n\nexport function mergeWithEntities(additionalReducers = (state) => state, defaultState = {}) {\n    return ({\n        entities: (state, payload) => ({\n            ...additionalReducers({\n                ...applyReducerHash({\n                    ...entitiesReducer\n                }, { ...entitiesDefault, ...defaultState })(state, payload)\n            }, payload)\n        })\n    });\n}\n\nexport function mergeWithDetail(additionalReducers = (state) => state, defaultState = {}) {\n    return ({\n        entityDetails: (state, payload) => ({\n            ...additionalReducers({\n                ...applyReducerHash({\n                    ...entityDetailsReducer\n                }, { ...entityDefault, ...defaultState })(state, payload)\n            }, payload)\n        })\n    });\n}\n\nexport default reducers;\n","/* eslint-disable camelcase */\nimport { SYSTEM_ISSUE_TYPES } from './action-types';\n\nexport function advisor(state, { payload }) {\n    return {\n        ...state,\n        systemIssues: {\n            ...state?.systemIssues,\n            advisor: {\n                isLoaded: true,\n                criticalCount: payload?.filter(item => item?.total_risk >= 4)\n            }\n        }\n    };\n}\n\nexport function cve(state, { payload }) {\n    return {\n        ...state,\n        systemIssues: {\n            ...state?.systemIssues,\n            cve: {\n                isLoaded: true,\n                critical: {\n                    count: payload?.critical?.meta?.total_items || 0\n                },\n                moderate: {\n                    count: payload?.moderate?.meta?.total_items || 0\n                },\n                important: {\n                    count: payload?.important?.meta?.total_items || 0\n                },\n                low: {\n                    count: payload?.low?.meta?.total_items || 0\n                }\n            }\n        }\n    };\n}\n\nexport function patch(state, { payload }) {\n    return {\n        ...state,\n        systemIssues: {\n            ...state?.systemIssues,\n            patch: {\n                isLoaded: true,\n                bug: {\n                    count: payload?.data?.attributes?.rhba_count || 0\n                },\n                enhancement: {\n                    count: payload?.data?.attributes?.rhea_count || 0\n                },\n                security: {\n                    count: payload?.data?.attributes?.rhsa_count || 0\n                }\n            }\n        }\n    };\n}\n\nexport function compliance(state, { payload }) {\n    return {\n        ...state,\n        systemIssues: {\n            ...state?.systemIssues,\n            compliance: {\n                isLoaded: true,\n                profiles: payload?.data?.system?.profiles\n            }\n        }\n    };\n}\n\nexport function isPending(state, type) {\n    return {\n        ...state,\n        systemIssues: {\n            ...state?.systemIssues,\n            ...type && { [type]: { isLoaded: false } }\n        }\n    };\n}\n\nexport default {\n    [SYSTEM_ISSUE_TYPES.LOAD_ADVISOR_RECOMMENDATIONS_PENDING]: (state) => isPending(state, 'advisor'),\n    [SYSTEM_ISSUE_TYPES.LOAD_APPLICABLE_CVES_PENDING]: (state) => isPending(state, 'cve'),\n    [SYSTEM_ISSUE_TYPES.LOAD_APPLICABLE_ADVISORIES_PENDING]: (state) => isPending(state, 'patch'),\n    [SYSTEM_ISSUE_TYPES.LOAD_COMPLIANCE_POLICIES_PENDING]: (state) => isPending(state, 'compliance'),\n    [SYSTEM_ISSUE_TYPES.LOAD_ADVISOR_RECOMMENDATIONS_FULFILLED]: advisor,\n    [SYSTEM_ISSUE_TYPES.LOAD_APPLICABLE_CVES_FULFILLED]: cve,\n    [SYSTEM_ISSUE_TYPES.LOAD_APPLICABLE_ADVISORIES_FULFILLED]: patch,\n    [SYSTEM_ISSUE_TYPES.LOAD_COMPLIANCE_POLICIES_FULFILLED]: compliance\n};\n"],"names":["history","useHistory","useEffect","insights","chrome","init","identifyApp","INVENTORY_ROOT","on","event","navId","push","location","search","hash","className","InventoryApp","registry","value","getRegistry","Provider","store","getStore","basename","getBaseName","window","pathname","propTypes","useLogger","PropTypes","defaultProps","InventoryTable","lazy","InventoryDetail","routes","table","detail","Routes","useContext","RegistryContext","register","reducers","mergeWithEntities","tableReducer","technology","app","pathName","split","searchParams","URLSearchParams","shift","Object","values","some","route","matchPath","href","path","document","baseURI","Suspense","fallback","Switch","Route","exact","render","status","getAll","source","filterbyName","tagsFilter","reduce","tagsMapper","page","perPage","rootClass","component","BiosCard","bios","detailLoaded","hasVendor","hasVersion","handleClick","hasReleaseDate","extra","title","isLoading","items","vendor","version","isDate","releaseDate","date","Date","type","map","onClick","e","csm","extraShape","connect","systemProfile","systemProfileStore","loaded","biosSelector","VersionTooltip","egg","client","content","CollectionCard","collectionInformation","entity","hasClient","hasLastCheckIn","hasRegistered","hasInsightsId","hasReporter","hasMachineId","DateFormat","updated","toLocaleString","created","insights_id","reporter","rhel_machine_id","hasEgg","entityDetails","collectionInformationSelector","enabledRepos","repositories","enabled","length","disabled","filter","Boolean","join","ConfigurationCard","configuration","hasPackages","hasServices","hasProcesses","hasRepositories","packages","singular","target","generalMapper","services","processes","plural","repositoriesMapper","base_url","name","gpgcheck","configurationSelector","InfrastructureCard","infrastructure","hasType","hasIPv4","hasIPv6","hasInterfaces","ipv4","ipv6","nics","interfaceMapper","infrastructureSelector","OperatingSystemCard","systemInfo","hasRelease","hasKernelRelease","hasArchitecture","hasLastBoot","hasKernelModules","release","kernelRelease","architecture","bootTime","kernelModules","operatingSystem","useInventoryWritePermissions","hasAccess","dispatch","useDispatch","ACTION_TYPES","payload","writePermissions","appName","module","useStore","customItnl","intlProps","locale","navigator","language","params","useRouteMatch","inventoryId","remediationsEnabled","GeneralInfoTab","props","useState","Wrapper","setWrapper","Fragment","customItnlProvider","id","usePermissions","deleteEntity","systems","displayName","hosts","meta","notifications","fulfilled","variant","description","dismissable","setFilter","filtersList","SET_INVENTORY_FILTER","clearNotifications","CLEAR_NOTIFICATIONS","editDisplayName","display_name","setPagination","SET_PAGINATION","itemId","getEntitySystemProfile","editAnsibleHost","ansible_host","entityDefaultState","state","results","APPLICATION_SELECTED","activeApp","showTags","tagModalLoaded","TOGGLE_TAG_MODAL","toggleTagModalReducer","TOGGLE_DRAWER","isToggleOpened","isOpened","systemIssuesReducer","middlewareListener","createContext","MiddlewareListener","middleware","ReducerRegistry","getMiddleware","promise","notificationsMiddleware","errorDescriptionKey","applyReducerHash","loadingFailed","loading","undefined","defaultState","selected","Map","entityLoaded","activeApps","GeneralInformationTab","AdvisorTab","VulnerabilityTab","ComplianceTab","PatchTab","isProd","isBeta","RosTab","notificationsReducer","permissionsReducer","rows","mergeArraysByKey","entities","INVENTORY_ACTION_TYPES","lastDateRequest","result","has","forEach","delete","SELECT_ENTITY","row","set","selectedRow","find","clear","activeFilters","parseInt","isNaN","entitesDetailReducer","additionalReducers","entitiesReducer","entitiesDefault","mergeWithDetail","entityDetailsReducer","entityDefault","isPending","systemIssues","isLoaded","SYSTEM_ISSUE_TYPES","advisor","criticalCount","item","total_risk","cve","critical","count","total_items","moderate","important","low","patch","bug","data","attributes","rhba_count","enhancement","rhea_count","security","rhsa_count","compliance","profiles","system"],"sourceRoot":""}