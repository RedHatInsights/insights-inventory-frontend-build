{"version":3,"file":"js/5223.1491a5d00be3189e1f4b.js","mappings":"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","sources":["webpack:///./src/components/GeneralInfo/BiosCard/BiosCard.js","webpack:///./src/components/GeneralInfo/ConfigurationCard/ConfigurationCard.js","webpack:///./src/components/GeneralInfo/DataCollectorsCard/DataCollectorsCard.js","webpack:///./src/components/GeneralInfo/InfoTable/InfoTable.js","webpack:///./src/components/GeneralInfo/SystemStatusCard/SystemStatusCard.js","webpack:///./src/components/GeneralInfo/GeneralInformation/GeneralInformation.js","webpack:///./src/components/GeneralInfo/InfrastructureCard/InfrastructureCard.js","webpack:///./src/components/GeneralInfo/OperatingSystemCard/OperatingSystemCard.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport LoadingCard from '../LoadingCard';\nimport { biosSelector } from '../selectors';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { extraShape, isDate } from '../../../constants';\n\nconst BiosCardCore = ({\n  bios,\n  detailLoaded,\n  hasVendor,\n  hasVersion,\n  handleClick,\n  hasReleaseDate,\n  extra,\n}) => (\n  <LoadingCard\n    title=\"BIOS\"\n    isLoading={!detailLoaded}\n    items={[\n      ...(hasVendor ? [{ title: 'Vendor', value: bios.vendor }] : []),\n      ...(hasVersion ? [{ title: 'Version', value: bios.version }] : []),\n      ...(hasReleaseDate\n        ? [\n            {\n              title: 'Release date',\n              value: isDate(bios.releaseDate) ? (\n                <DateFormat date={new Date(bios.releaseDate)} type=\"onlyDate\" />\n              ) : (\n                'Not available'\n              ),\n            },\n          ]\n        : []),\n      ...extra.map(({ onClick, ...item }) => ({\n        ...item,\n        ...(onClick && { onClick: (e) => onClick(e, handleClick) }),\n      })),\n    ]}\n  />\n);\n\nBiosCardCore.propTypes = {\n  detailLoaded: PropTypes.bool,\n  handleClick: PropTypes.func,\n  bios: PropTypes.shape({\n    vendor: PropTypes.string,\n    version: PropTypes.string,\n    releaseDate: PropTypes.string,\n    csm: PropTypes.arrayOf(PropTypes.string),\n  }),\n  hasVendor: PropTypes.bool,\n  hasVersion: PropTypes.bool,\n  hasReleaseDate: PropTypes.bool,\n  extra: PropTypes.arrayOf(extraShape),\n};\nBiosCardCore.defaultProps = {\n  detailLoaded: false,\n  handleClick: () => undefined,\n  extra: [],\n  hasVendor: true,\n  hasVersion: true,\n  hasReleaseDate: true,\n};\n\nexport const BiosCard = connect(\n  ({ systemProfileStore: { systemProfile } }) => ({\n    detailLoaded: systemProfile && systemProfile.loaded,\n    bios: biosSelector(systemProfile),\n  })\n)(BiosCardCore);\n\nBiosCard.propTypes = BiosCardCore.propTypes;\nBiosCard.defaultProps = BiosCardCore.defaultProps;\n\nexport default BiosCard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport LoadingCard from '../LoadingCard';\nimport { generalMapper, repositoriesMapper } from '../dataMapper';\nimport { configurationSelector } from '../selectors';\nimport { extraShape } from '../../../constants';\n\nexport function enabledRepos(repositories) {\n  if (repositories) {\n    return [\n      repositories.enabled &&\n        repositories.enabled.length > 0 &&\n        `${repositories.enabled.length} enabled`,\n      repositories.disabled &&\n        repositories.disabled.length > 0 &&\n        `${repositories.disabled.length} disabled`,\n    ]\n      .filter(Boolean)\n      .join(' / ');\n  }\n}\n\nconst ConfigurationCardCore = ({\n  detailLoaded,\n  configuration,\n  handleClick,\n  hasPackages,\n  hasServices,\n  hasProcesses,\n  hasRepositories,\n  extra,\n}) => (\n  <LoadingCard\n    title=\"Configuration\"\n    isLoading={!detailLoaded}\n    items={[\n      ...(hasPackages\n        ? [\n            {\n              title: 'Installed packages',\n              value: configuration.packages?.length,\n              singular: 'package',\n              target: 'installed_packages',\n              onClick: () => {\n                handleClick(\n                  'Installed packages',\n                  generalMapper(configuration.packages, 'Package name')\n                );\n              },\n            },\n          ]\n        : []),\n      ...(hasServices\n        ? [\n            {\n              title: 'Services',\n              value: configuration.services?.length,\n              singular: 'service',\n              target: 'services',\n              onClick: () => {\n                handleClick(\n                  'Services',\n                  generalMapper(configuration.services, 'Service name')\n                );\n              },\n            },\n          ]\n        : []),\n      ...(hasProcesses\n        ? [\n            {\n              title: 'Running processes',\n              value: configuration.processes?.length,\n              singular: 'process',\n              plural: 'processes',\n              target: 'running_processes',\n              onClick: () => {\n                handleClick(\n                  'Running processes',\n                  generalMapper(configuration.processes, 'Process name')\n                );\n              },\n            },\n          ]\n        : []),\n      ...(hasRepositories\n        ? [\n            {\n              title: 'Repositories',\n              value: enabledRepos(configuration.repositories),\n              target: 'repositories',\n              onClick: () => {\n                handleClick(\n                  'Repositories',\n                  repositoriesMapper(configuration.repositories),\n                  'medium'\n                );\n              },\n            },\n          ]\n        : []),\n      ...extra.map(({ onClick, ...item }) => ({\n        ...item,\n        ...(onClick && { onClick: (e) => onClick(e, handleClick) }),\n      })),\n    ]}\n  />\n);\n\nConfigurationCardCore.propTypes = {\n  detailLoaded: PropTypes.bool,\n  handleClick: PropTypes.func,\n  configuration: PropTypes.shape({\n    packages: PropTypes.arrayOf(PropTypes.string),\n    services: PropTypes.arrayOf(PropTypes.string),\n    processes: PropTypes.arrayOf(PropTypes.string),\n    repositories: PropTypes.shape({\n      enabled: PropTypes.arrayOf(\n        PropTypes.shape({\n          // eslint-disable-next-line camelcase\n          base_url: PropTypes.string,\n          name: PropTypes.string,\n          enabled: PropTypes.bool,\n          gpgcheck: PropTypes.bool,\n        })\n      ),\n      disabled: PropTypes.arrayOf(\n        PropTypes.shape({\n          // eslint-disable-next-line camelcase\n          base_url: PropTypes.string,\n          name: PropTypes.string,\n          enabled: PropTypes.bool,\n          gpgcheck: PropTypes.bool,\n        })\n      ),\n    }),\n  }),\n  hasPackages: PropTypes.bool,\n  hasServices: PropTypes.bool,\n  hasProcesses: PropTypes.bool,\n  hasRepositories: PropTypes.bool,\n  extra: PropTypes.arrayOf(extraShape),\n};\nConfigurationCardCore.defaultProps = {\n  detailLoaded: false,\n  handleClick: () => undefined,\n  hasPackages: true,\n  hasServices: true,\n  hasProcesses: true,\n  hasRepositories: true,\n  extra: [],\n};\n\nexport const ConfigurationCard = connect(\n  ({ systemProfileStore: { systemProfile } }) => ({\n    detailLoaded: systemProfile && systemProfile.loaded,\n    configuration: configurationSelector(systemProfile),\n  })\n)(ConfigurationCardCore);\n\nConfigurationCard.propTypes = ConfigurationCardCore.propTypes;\nConfigurationCard.defaultProps = ConfigurationCardCore.defaultProps;\n\nexport default ConfigurationCard;\n","/* eslint-disable camelcase */\nimport React, { useCallback, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport LoadingCard from '../LoadingCard';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport {\n  ExpandableRowContent,\n  TableComposable,\n  TableVariant,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from '@patternfly/react-table';\nimport { Flex, FlexItem } from '@patternfly/react-core';\nimport { getDefaultCollectors } from '../selectors/selectors';\n\nconst DataCollectorsCardCore = ({\n  detailLoaded,\n  collectors,\n  entity,\n  dataMapper,\n}) => {\n  const [expandedNames, setExpandedNames] = useState([]);\n  const setExpanded = useCallback(\n    (collector, isExpanding = true) =>\n      setExpandedNames((prevExpanded) => {\n        const otherExpandedNames = prevExpanded.filter(\n          (r) => r !== collector.name\n        );\n        return isExpanding\n          ? [...otherExpandedNames, collector.name]\n          : otherExpandedNames;\n      }),\n    []\n  );\n  const isExpanded = (collector) => expandedNames.includes(collector.name);\n  const data = collectors ?? getDefaultCollectors(entity);\n  return (\n    <LoadingCard title=\"Data collectors\" isLoading={!detailLoaded}>\n      <TableComposable\n        aria-label=\"Data collectors\"\n        variant={TableVariant.compact}\n        borders={false}\n      >\n        <Thead>\n          <Tr className=\"ins-c__no-border\">\n            <Th />\n            <Th>Name</Th>\n            <Th>Status</Th>\n            <Th>Last upload</Th>\n          </Tr>\n        </Thead>\n        {dataMapper\n          ? dataMapper(data, isExpanded, setExpanded)\n          : data.map((collector, rowIndex) => (\n              <Tbody key={collector.name} isExpanded={isExpanded(collector)}>\n                <Tr>\n                  {collector.details.name ? (\n                    <Td\n                      expand={\n                        collector.details\n                          ? {\n                              rowIndex,\n                              isExpanded: isExpanded(collector),\n                              onToggle: () =>\n                                setExpanded(collector, !isExpanded(collector)),\n                            }\n                          : undefined\n                      }\n                      style={{ paddingLeft: 0 }}\n                    />\n                  ) : (\n                    <Td />\n                  )}\n                  <Td dataLabel=\"Name\">{collector.name}</Td>\n                  <Td dataLabel=\"Status\">{collector.status}</Td>\n                  <Td dataLabel=\"Last upload\">\n                    {collector.updated ? (\n                      <DateFormat date={collector.updated} type=\"exact\" />\n                    ) : (\n                      'N/A'\n                    )}\n                  </Td>\n                </Tr>\n                {collector.details && collector.details.name && (\n                  <Tr isExpanded={isExpanded(collector)}>\n                    <Td />\n                    <Td colSpan={3}>\n                      <ExpandableRowContent>\n                        <Flex>\n                          <FlexItem className=\"ins-c__flex-row-margin\">\n                            {`${collector.details.name}:`}\n                          </FlexItem>\n                          <FlexItem grow={{ default: 'grow' }}>\n                            {collector.details.id ?? 'N/A'}\n                          </FlexItem>\n                        </Flex>\n                      </ExpandableRowContent>\n                    </Td>\n                  </Tr>\n                )}\n              </Tbody>\n            ))}\n      </TableComposable>\n    </LoadingCard>\n  );\n};\n\nDataCollectorsCardCore.propTypes = {\n  detailLoaded: PropTypes.bool,\n  collectors: PropTypes.array,\n  dataMapper: PropTypes.func,\n  entity: PropTypes.shape({\n    per_reporter_staleness: PropTypes.object,\n  }),\n};\nDataCollectorsCardCore.defaultProps = {\n  detailLoaded: false,\n};\n\nexport const DataCollectorsCard = connect(\n  ({ entityDetails: { entity }, systemProfileStore: { systemProfile } }) => ({\n    entity,\n    systemProfile,\n    detailLoaded: systemProfile?.loaded,\n    defaultCollectors: getDefaultCollectors(entity),\n  })\n)(DataCollectorsCardCore);\n\nDataCollectorsCard.propTypes = DataCollectorsCardCore.propTypes;\nDataCollectorsCard.defaultProps = DataCollectorsCardCore.defaultProps;\n\nexport default DataCollectorsCard;\n","import React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Pagination,\n  Text,\n  TextContent,\n  TextVariants,\n} from '@patternfly/react-core';\nimport PrimaryToolbar from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport TableToolbar from '@redhat-cloud-services/frontend-components/TableToolbar';\nimport {\n  SortByDirection,\n  Table,\n  TableBody,\n  TableHeader,\n  TableVariant,\n} from '@patternfly/react-table';\nimport flatMap from 'lodash/flatMap';\nimport {\n  filterRows,\n  generateFilters,\n  onDeleteFilter,\n  prepareRows,\n} from '../../../constants';\nclass InfoTable extends Component {\n  state = {\n    sortBy: { index: 0, direction: SortByDirection.asc },\n    opened: [],\n    pagination: {\n      page: 1,\n      perPage: 10,\n    },\n    activeFilters: {},\n  };\n\n  onSort = (event, index, direction) => {\n    const { expandable } = this.props;\n    this.props.onSort(event, expandable ? index - 1 : index, direction);\n    this.setState({\n      sortBy: {\n        index,\n        direction,\n      },\n    });\n  };\n\n  onCollapse = (_event, index, isOpen) => {\n    const { opened } = this.state;\n    opened[index] = isOpen;\n    this.setState({\n      opened,\n    });\n  };\n\n  onUpdatePagination = ({ page, perPage }) => {\n    this.setState({ pagination: { ...this.state.pagination, page, perPage } });\n  };\n\n  setFilter = (key, value, label) => {\n    const { activeFilters } = this.state;\n    // eslint-disable-next-line no-unused-vars\n    const { [key]: currFilter, ...restFilter } = activeFilters;\n    this.setState({\n      activeFilters: {\n        ...restFilter,\n        ...(value.length !== 0 && {\n          [key]: { key, value, label },\n        }),\n      },\n      pagination: { ...this.state.pagination, page: 1 },\n    });\n  };\n\n  onDeleteFilter = (_e, [deleted], deleteAll) => {\n    this.setState({\n      activeFilters: onDeleteFilter(\n        deleted,\n        deleteAll,\n        this.state.activeFilters\n      ),\n      pagination: { ...this.state.pagination, page: 1 },\n    });\n  };\n\n  render() {\n    const { cells, rows, expandable, filters } = this.props;\n    const { sortBy, opened, pagination, activeFilters } = this.state;\n    const collapsibleProps = expandable ? { onCollapse: this.onCollapse } : {};\n    const activeRows = filterRows(rows, activeFilters);\n    const mappedRows = expandable\n      ? flatMap(\n          prepareRows(activeRows, pagination),\n          ({ child, ...row }, key) => [\n            {\n              ...row,\n              isOpen: opened[key * 2] || false,\n            },\n            {\n              cells: [{ title: child }],\n              parent: key * 2,\n            },\n          ]\n        )\n      : prepareRows(activeRows, pagination);\n    return (\n      <Fragment>\n        <PrimaryToolbar\n          pagination={{\n            ...pagination,\n            itemCount: activeRows.length,\n            onSetPage: (_e, page) =>\n              this.onUpdatePagination({ ...pagination, page }),\n            onPerPageSelect: (_e, perPage) =>\n              this.onUpdatePagination({ ...pagination, page: 1, perPage }),\n          }}\n          {...(filters && {\n            filterConfig: {\n              items: generateFilters(\n                cells,\n                filters,\n                activeFilters,\n                this.setFilter\n              ),\n            },\n          })}\n          activeFiltersConfig={{\n            filters: Object.values(activeFilters).map((filter) => ({\n              ...filter,\n              category: filter.label,\n              chips: Array.isArray(filter.value)\n                ? filter.value.map((item) => ({ name: item }))\n                : [{ name: filter.value }],\n            })),\n            onDelete: this.onDeleteFilter,\n          }}\n        />\n        {cells.length !== 1 ? (\n          <Table\n            aria-label=\"General information dialog table\"\n            variant={TableVariant.compact}\n            cells={cells}\n            rows={mappedRows}\n            sortBy={{\n              ...sortBy,\n              index: expandable && sortBy.index === 0 ? 1 : sortBy.index,\n            }}\n            onSort={this.onSort}\n            {...collapsibleProps}\n          >\n            <TableHeader />\n            <TableBody />\n          </Table>\n        ) : (\n          <TextContent>\n            {prepareRows(activeRows, pagination).map((row, key) => (\n              <Text component={TextVariants.small} key={key}>\n                {row.title || row}\n              </Text>\n            ))}\n          </TextContent>\n        )}\n        <TableToolbar isFooter className=\"ins-c-inventory__table--toolbar\">\n          <Pagination\n            {...pagination}\n            itemCount={activeRows.length}\n            variant=\"bottom\"\n            onSetPage={(_e, page) =>\n              this.onUpdatePagination({ ...pagination, page })\n            }\n            onPerPageSelect={(_e, perPage) =>\n              this.onUpdatePagination({ ...pagination, page: 1, perPage })\n            }\n          />\n        </TableToolbar>\n      </Fragment>\n    );\n  }\n}\n\nInfoTable.propTypes = {\n  rows: PropTypes.array,\n  cells: PropTypes.array,\n  onSort: PropTypes.func,\n  expandable: PropTypes.bool,\n  filters: PropTypes.arrayOf(\n    PropTypes.shape({\n      index: PropTypes.number,\n      title: PropTypes.string,\n      type: PropTypes.oneOf(['text', 'checkbox', 'radio', 'group']),\n      options: PropTypes.arrayOf(\n        PropTypes.shape({\n          value: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n          label: PropTypes.node,\n        })\n      ),\n    })\n  ),\n};\nInfoTable.defaultProps = {\n  cells: [],\n  rows: [],\n  onSort: () => undefined,\n  sortBy: {},\n  expandable: false,\n};\n\nexport default InfoTable;\n","/* eslint-disable camelcase */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport LoadingCard from '../LoadingCard';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { systemStatus } from '../selectors';\n\nconst SystemStatusCardCore = ({\n  detailLoaded,\n  hasState,\n  hasRegistered,\n  hasLastCheckIn,\n  hasRHC,\n  entity,\n  systemProfile,\n  systemStatus,\n}) => (\n  <LoadingCard\n    title=\"System status\"\n    isLoading={!detailLoaded}\n    items={[\n      ...(hasState\n        ? [\n            {\n              title: 'Current state',\n              value: systemStatus.stale ? 'Stale' : 'Active',\n            },\n          ]\n        : []),\n      ...(hasRegistered\n        ? [\n            {\n              title: 'Registered',\n              value: entity && (\n                <DateFormat date={entity.created} type=\"exact\" />\n              ),\n            },\n          ]\n        : []),\n      ...(hasLastCheckIn\n        ? [\n            {\n              title: 'Last upload',\n              value: entity && (\n                <DateFormat date={entity.updated} type=\"exact\" />\n              ),\n            },\n          ]\n        : []),\n      ...(hasRHC\n        ? [\n            {\n              title: 'RHC',\n              value: systemProfile?.rhc_client_id\n                ? 'Connected'\n                : 'Not available',\n            },\n          ]\n        : []),\n    ]}\n  />\n);\n\nSystemStatusCardCore.propTypes = {\n  detailLoaded: PropTypes.bool,\n  entity: PropTypes.shape({\n    updated: PropTypes.string,\n    created: PropTypes.string,\n  }),\n  systemProfile: PropTypes.shape({\n    rhc_client_id: PropTypes.string,\n  }),\n  systemStatus: PropTypes.object,\n  handleClick: PropTypes.func,\n  hasState: PropTypes.bool,\n  hasLastCheckIn: PropTypes.bool,\n  hasRegistered: PropTypes.bool,\n  hasRHC: PropTypes.bool,\n};\nSystemStatusCardCore.defaultProps = {\n  detailLoaded: false,\n  systemStatus: {},\n  handleClick: () => undefined,\n  hasState: true,\n  hasLastCheckIn: true,\n  hasRegistered: true,\n  hasRHC: true,\n};\n\nexport const SystemStatusCard = connect(\n  ({ entityDetails: { entity }, systemProfileStore: { systemProfile } }) => ({\n    entity,\n    systemProfile,\n    detailLoaded: systemProfile?.loaded,\n    systemStatus: systemStatus(entity),\n  })\n)(SystemStatusCardCore);\n\nSystemStatusCard.propTypes = SystemStatusCardCore.propTypes;\nSystemStatusCard.defaultProps = SystemStatusCardCore.defaultProps;\n\nexport default SystemStatusCard;\n","import React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Grid, GridItem, Modal } from '@patternfly/react-core';\nimport { SortByDirection } from '@patternfly/react-table';\n\nimport { systemProfile } from '../../../store/actions';\nimport InfoTable from '../InfoTable';\n// Since there's a problem with cards loading asynchronously we have to import the cards here as named\nimport { OperatingSystemCard } from '../OperatingSystemCard';\nimport { SystemCard } from '../SystemCard';\nimport { BiosCard } from '../BiosCard';\nimport { InfrastructureCard } from '../InfrastructureCard';\nimport { ConfigurationCard } from '../ConfigurationCard';\nimport { SystemStatusCard } from '../SystemStatusCard';\nimport { DataCollectorsCard } from '../DataCollectorsCard/DataCollectorsCard';\nimport { Provider } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport './general-information.scss';\n\nclass GeneralInformation extends Component {\n  state = {\n    isModalOpen: false,\n    modalTitle: '',\n    modalVariant: 'small',\n  };\n\n  onSort = (_event, index, direction, customRows) => {\n    const { rows } = this.state;\n    const sorted = (customRows || rows).sort((a, b) => {\n      const firstRow = a.cells || a;\n      const secondRow = b.cells || b;\n      const aSortBy = (\n        '' + (firstRow[index].sortValue || firstRow[index])\n      ).toLocaleLowerCase();\n      const bSortBy = (\n        '' + (secondRow[index].sortValue || secondRow[index])\n      ).toLocaleLowerCase();\n      return aSortBy > bSortBy ? -1 : 1;\n    });\n    this.setState({\n      rows: direction === SortByDirection.asc ? sorted : sorted.reverse(),\n    });\n  };\n\n  handleModalToggle = (\n    modalTitle = '',\n    { cells, rows, expandable, filters } = {},\n    modalVariant = 'small'\n  ) => {\n    rows &&\n      this.onSort(undefined, expandable ? 1 : 0, SortByDirection.asc, rows);\n    if (this.state.isModalOpen) {\n      this.props.history.push(\n        this.props.location.pathname.split('/').slice(0, -1).join('/')\n      );\n    }\n\n    this.setState(({ isModalOpen }) => ({\n      isModalOpen: !isModalOpen,\n      modalTitle,\n      cells,\n      expandable,\n      filters,\n      modalVariant,\n    }));\n  };\n\n  componentDidMount() {\n    //Avoids duplicate profile fetch if consumer app already fetched, while staying backwards compatible\n    if (!this.props.systemProfilePrefetched) {\n      this.props.loadSystemDetail?.(\n        this.props.inventoryId || this.props.entity.id\n      );\n    }\n  }\n\n  render() {\n    const {\n      isModalOpen,\n      modalTitle,\n      cells,\n      rows,\n      expandable,\n      filters,\n      modalVariant,\n    } = this.state;\n    const {\n      store,\n      writePermissions,\n      SystemCardWrapper,\n      OperatingSystemCardWrapper,\n      BiosCardWrapper,\n      InfrastructureCardWrapper,\n      ConfigurationCardWrapper,\n      SystemStatusCardWrapper,\n      DataCollectorsCardWrapper,\n      CollectionCardWrapper,\n      children,\n    } = this.props;\n    const Wrapper = store ? Provider : Fragment;\n    return (\n      <Wrapper {...(store && { store })}>\n        <div className=\"ins-c-general-information\">\n          <Grid hasGutter>\n            <GridItem md={6} sm={12}>\n              <Grid hasGutter>\n                {SystemCardWrapper && (\n                  <GridItem>\n                    <SystemCardWrapper\n                      handleClick={this.handleModalToggle}\n                      writePermissions={writePermissions}\n                    />\n                  </GridItem>\n                )}\n                {InfrastructureCardWrapper && (\n                  <GridItem>\n                    <InfrastructureCardWrapper\n                      handleClick={this.handleModalToggle}\n                    />\n                  </GridItem>\n                )}\n                {SystemStatusCardWrapper && (\n                  <GridItem>\n                    <SystemStatusCardWrapper\n                      handleClick={this.handleModalToggle}\n                    />\n                  </GridItem>\n                )}\n                {DataCollectorsCardWrapper && (\n                  <GridItem>\n                    <DataCollectorsCardWrapper\n                      handleClick={this.handleModalToggle}\n                    />\n                  </GridItem>\n                )}\n              </Grid>\n            </GridItem>\n            <GridItem md={6} sm={12}>\n              <Grid hasGutter>\n                {OperatingSystemCardWrapper && (\n                  <GridItem>\n                    <OperatingSystemCardWrapper\n                      handleClick={this.handleModalToggle}\n                    />\n                  </GridItem>\n                )}\n\n                {BiosCardWrapper && (\n                  <GridItem>\n                    <BiosCardWrapper handleClick={this.handleModalToggle} />\n                  </GridItem>\n                )}\n\n                {ConfigurationCardWrapper && (\n                  <GridItem>\n                    <ConfigurationCardWrapper\n                      handleClick={this.handleModalToggle}\n                    />\n                  </GridItem>\n                )}\n\n                {CollectionCardWrapper && (\n                  <GridItem>\n                    <CollectionCardWrapper\n                      handleClick={this.handleModalToggle}\n                    />\n                  </GridItem>\n                )}\n              </Grid>\n            </GridItem>\n            {children}\n            <Modal\n              title={modalTitle || ''}\n              aria-label={`${modalTitle || ''} modal`}\n              isOpen={isModalOpen}\n              onClose={() => this.handleModalToggle()}\n              className=\"ins-c-inventory__detail--dialog\"\n              variant={modalVariant}\n            >\n              <InfoTable\n                cells={cells}\n                rows={rows}\n                expandable={expandable}\n                onSort={this.onSort}\n                filters={filters}\n              />\n            </Modal>\n          </Grid>\n        </div>\n      </Wrapper>\n    );\n  }\n}\n\nGeneralInformation.propTypes = {\n  entity: PropTypes.shape({\n    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  }),\n  openedModal: PropTypes.string,\n  loadSystemDetail: PropTypes.func,\n  store: PropTypes.any,\n  writePermissions: PropTypes.bool,\n  SystemCardWrapper: PropTypes.oneOfType([\n    PropTypes.elementType,\n    PropTypes.bool,\n  ]),\n  OperatingSystemCardWrapper: PropTypes.oneOfType([\n    PropTypes.elementType,\n    PropTypes.bool,\n  ]),\n  BiosCardWrapper: PropTypes.oneOfType([PropTypes.elementType, PropTypes.bool]),\n  InfrastructureCardWrapper: PropTypes.oneOfType([\n    PropTypes.elementType,\n    PropTypes.bool,\n  ]),\n  ConfigurationCardWrapper: PropTypes.oneOfType([\n    PropTypes.elementType,\n    PropTypes.bool,\n  ]),\n  SystemStatusCardWrapper: PropTypes.oneOfType([\n    PropTypes.elementType,\n    PropTypes.bool,\n  ]),\n  DataCollectorsCardWrapper: PropTypes.oneOfType([\n    PropTypes.elementType,\n    PropTypes.bool,\n  ]),\n  CollectionCardWrapper: PropTypes.oneOfType([\n    PropTypes.elementType,\n    PropTypes.bool,\n  ]),\n  children: PropTypes.node,\n  history: PropTypes.any,\n  location: PropTypes.any,\n  inventoryId: PropTypes.string.isRequired,\n  systemProfilePrefetched: PropTypes.bool,\n};\nGeneralInformation.defaultProps = {\n  entity: {},\n  SystemCardWrapper: SystemCard,\n  OperatingSystemCardWrapper: OperatingSystemCard,\n  BiosCardWrapper: BiosCard,\n  InfrastructureCardWrapper: InfrastructureCard,\n  ConfigurationCardWrapper: ConfigurationCard,\n  SystemStatusCardWrapper: SystemStatusCard,\n  DataCollectorsCardWrapper: DataCollectorsCard,\n  CollectionCardWrapper: false,\n  systemProfilePrefetched: false,\n};\n\nconst mapStateToProps = ({ entityDetails: { entity } }) => ({\n  entity,\n});\nconst mapDispatchToProps = (dispatch) => ({\n  loadSystemDetail: (itemId) => dispatch(systemProfile(itemId)),\n});\n\nexport default withRouter(\n  connect(mapStateToProps, mapDispatchToProps)(GeneralInformation)\n);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport LoadingCard from '../LoadingCard';\nimport { generalMapper, interfaceMapper } from '../dataMapper';\nimport { infrastructureSelector } from '../selectors';\nimport { extraShape } from '../../../constants';\n\nconst InfrastructureCardCore = ({\n  infrastructure,\n  handleClick,\n  detailLoaded,\n  hasType,\n  hasVendor,\n  hasIPv4,\n  hasIPv6,\n  hasInterfaces,\n  extra,\n}) => (\n  <LoadingCard\n    title=\"Infrastructure\"\n    isLoading={!detailLoaded}\n    items={[\n      ...(hasType ? [{ title: 'Type', value: infrastructure.type }] : []),\n      ...(hasVendor ? [{ title: 'Vendor', value: infrastructure.vendor }] : []),\n      ...(hasIPv4\n        ? [\n            {\n              title: 'IPv4 addresses',\n              value: infrastructure.ipv4?.length,\n              plural: 'addresses',\n              singular: 'address',\n              target: 'ipv4',\n              onClick: () => {\n                handleClick(\n                  'IPv4',\n                  generalMapper(infrastructure.ipv4, 'IP address')\n                );\n              },\n            },\n          ]\n        : []),\n      ...(hasIPv6\n        ? [\n            {\n              title: 'IPv6 addresses',\n              value: infrastructure.ipv6?.length,\n              plural: 'addresses',\n              singular: 'address',\n              target: 'ipv6',\n              onClick: () => {\n                handleClick(\n                  'IPv6',\n                  generalMapper(infrastructure.ipv6, 'IP address')\n                );\n              },\n            },\n          ]\n        : []),\n      ...(hasInterfaces\n        ? [\n            {\n              title: 'Interfaces/NICs',\n              value: infrastructure.nics?.length,\n              singular: 'NIC',\n              target: 'interfaces',\n              onClick: () => {\n                handleClick(\n                  'Interfaces/NICs',\n                  interfaceMapper(infrastructure.nics),\n                  'medium'\n                );\n              },\n            },\n          ]\n        : []),\n      ...extra.map(({ onClick, ...item }) => ({\n        ...item,\n        ...(onClick && { onClick: (e) => onClick(e, handleClick) }),\n      })),\n    ]}\n  />\n);\n\nInfrastructureCardCore.propTypes = {\n  detailLoaded: PropTypes.bool,\n  handleClick: PropTypes.func,\n  infrastructure: PropTypes.shape({\n    type: PropTypes.string,\n    vendor: PropTypes.string,\n    ipv4: PropTypes.array,\n    ipv6: PropTypes.array,\n    nics: PropTypes.array,\n  }),\n  hasType: PropTypes.bool,\n  hasVendor: PropTypes.bool,\n  hasIPv4: PropTypes.bool,\n  hasIPv6: PropTypes.bool,\n  hasInterfaces: PropTypes.bool,\n  extra: PropTypes.arrayOf(extraShape),\n};\nInfrastructureCardCore.defaultProps = {\n  detailLoaded: false,\n  handleClick: () => undefined,\n  hasType: true,\n  hasVendor: true,\n  hasIPv4: true,\n  hasIPv6: true,\n  hasInterfaces: true,\n  extra: [],\n};\n\nexport const InfrastructureCard = connect(\n  ({ entityDetails: { entity }, systemProfileStore: { systemProfile } }) => ({\n    detailLoaded: systemProfile && systemProfile.loaded,\n    infrastructure: infrastructureSelector(systemProfile, entity),\n  })\n)(InfrastructureCardCore);\n\nInfrastructureCard.propTypes = InfrastructureCardCore.propTypes;\nInfrastructureCard.defaultProps = InfrastructureCardCore.defaultProps;\n\nexport default InfrastructureCard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport LoadingCard from '../LoadingCard';\nimport { generalMapper } from '../dataMapper';\nimport { operatingSystem } from '../selectors';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { extraShape, isDate } from '../../../constants';\nimport OperatingSystemFormatter from '../../../Utilities/OperatingSystemFormatter';\n\nconst OperatingSystemCardCore = ({\n  systemInfo,\n  detailLoaded,\n  handleClick,\n  hasRelease,\n  hasKernelRelease,\n  hasArchitecture,\n  hasLastBoot,\n  hasKernelModules,\n  extra,\n}) => (\n  <LoadingCard\n    title=\"Operating system\"\n    isLoading={!detailLoaded}\n    items={[\n      ...(hasRelease\n        ? [\n            {\n              title: 'Release',\n              value: (\n                <OperatingSystemFormatter\n                  operatingSystem={systemInfo.release}\n                />\n              ),\n            },\n          ]\n        : []),\n      ...(hasKernelRelease\n        ? [{ title: 'Kernel release', value: systemInfo.kernelRelease }]\n        : []),\n      ...(hasArchitecture\n        ? [{ title: 'Architecture', value: systemInfo.architecture }]\n        : []),\n      ...(hasLastBoot\n        ? [\n            {\n              title: 'Last boot time',\n              value: isDate(systemInfo.bootTime) ? (\n                <DateFormat date={systemInfo.bootTime} type=\"onlyDate\" />\n              ) : (\n                'Not available'\n              ),\n            },\n          ]\n        : []),\n      ...(hasKernelModules\n        ? [\n            {\n              title: 'Kernel modules',\n              value: systemInfo.kernelModules?.length,\n              singular: 'module',\n              target: 'kernel_modules',\n              onClick: () => {\n                handleClick(\n                  'Kernel modules',\n                  generalMapper(systemInfo.kernelModules, 'Module')\n                );\n              },\n            },\n          ]\n        : []),\n      ...(systemInfo.systemUpdateMethod\n        ? [{ title: 'Update method', value: systemInfo.systemUpdateMethod }]\n        : []),\n      ...extra.map(({ onClick, ...item }) => ({\n        ...item,\n        ...(onClick && { onClick: (e) => onClick(e, handleClick) }),\n      })),\n    ]}\n  />\n);\n\nOperatingSystemCardCore.propTypes = {\n  detailLoaded: PropTypes.bool,\n  handleClick: PropTypes.func,\n  systemInfo: PropTypes.shape({\n    release: PropTypes.shape({\n      name: PropTypes.string,\n      major: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n      minor: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    }),\n    architecture: PropTypes.string,\n    kernelRelease: PropTypes.string,\n    bootTime: PropTypes.string,\n    kernelModules: PropTypes.arrayOf(PropTypes.string),\n  }),\n  hasRelease: PropTypes.bool,\n  hasKernelRelease: PropTypes.bool,\n  hasArchitecture: PropTypes.bool,\n  hasLastBoot: PropTypes.bool,\n  hasKernelModules: PropTypes.bool,\n  extra: PropTypes.arrayOf(extraShape),\n};\nOperatingSystemCardCore.defaultProps = {\n  detailLoaded: false,\n  handleClick: () => undefined,\n  hasRelease: true,\n  hasKernelRelease: true,\n  hasArchitecture: true,\n  hasLastBoot: true,\n  hasKernelModules: true,\n  extra: [],\n};\n\nexport const OperatingSystemCard = connect(\n  ({ entityDetails: { entity }, systemProfileStore: { systemProfile } }) => ({\n    detailLoaded: systemProfile && systemProfile.loaded,\n    systemInfo: operatingSystem(systemProfile, entity),\n  })\n)(OperatingSystemCardCore);\n\nOperatingSystemCard.propTypes = OperatingSystemCardCore.propTypes;\nOperatingSystemCard.defaultProps = OperatingSystemCardCore.defaultProps;\n\nexport default OperatingSystemCard;\n"],"names":["BiosCardCore","bios","detailLoaded","hasVendor","hasVersion","handleClick","hasReleaseDate","extra","title","isLoading","items","value","vendor","version","isDate","releaseDate","date","Date","type","map","onClick","e","propTypes","PropTypes","csm","extraShape","defaultProps","BiosCard","connect","systemProfile","systemProfileStore","loaded","biosSelector","enabledRepos","repositories","enabled","length","disabled","filter","Boolean","join","ConfigurationCardCore","configuration","hasPackages","hasServices","hasProcesses","hasRepositories","packages","singular","target","generalMapper","services","processes","plural","repositoriesMapper","base_url","name","gpgcheck","ConfigurationCard","configurationSelector","DataCollectorsCardCore","collectors","entity","dataMapper","useState","expandedNames","setExpandedNames","setExpanded","useCallback","collector","isExpanding","prevExpanded","otherExpandedNames","r","isExpanded","includes","data","getDefaultCollectors","TableComposable","variant","TableVariant","borders","Thead","Tr","className","Th","rowIndex","Tbody","key","details","Td","expand","onToggle","undefined","style","paddingLeft","dataLabel","status","updated","colSpan","ExpandableRowContent","grow","default","id","per_reporter_staleness","DataCollectorsCard","entityDetails","defaultCollectors","InfoTable","sortBy","index","direction","SortByDirection","opened","pagination","page","perPage","activeFilters","event","expandable","props","onSort","setState","_event","isOpen","state","label","restFilter","_e","deleteAll","deleted","onDeleteFilter","this","cells","rows","filters","collapsibleProps","onCollapse","activeRows","filterRows","mappedRows","flatMap","prepareRows","child","parent","Fragment","PrimaryToolbar","itemCount","onSetPage","onUpdatePagination","onPerPageSelect","filterConfig","generateFilters","setFilter","activeFiltersConfig","Object","values","category","chips","Array","isArray","item","onDelete","Table","TableHeader","TableBody","TextContent","row","Text","component","TextVariants","TableToolbar","isFooter","Pagination","Component","options","SystemStatusCardCore","hasState","hasRegistered","hasLastCheckIn","hasRHC","systemStatus","LoadingCard","stale","DateFormat","created","rhc_client_id","SystemStatusCard","GeneralInformation","isModalOpen","modalTitle","modalVariant","customRows","sorted","sort","a","b","firstRow","secondRow","sortValue","toLocaleLowerCase","reverse","history","push","location","pathname","split","slice","systemProfilePrefetched","loadSystemDetail","inventoryId","store","writePermissions","SystemCardWrapper","OperatingSystemCardWrapper","BiosCardWrapper","InfrastructureCardWrapper","ConfigurationCardWrapper","SystemStatusCardWrapper","DataCollectorsCardWrapper","CollectionCardWrapper","children","Wrapper","Provider","Grid","hasGutter","GridItem","md","sm","handleModalToggle","Modal","onClose","openedModal","SystemCard","OperatingSystemCard","InfrastructureCard","withRouter","dispatch","itemId","InfrastructureCardCore","infrastructure","hasType","hasIPv4","hasIPv6","hasInterfaces","ipv4","ipv6","nics","interfaceMapper","infrastructureSelector","OperatingSystemCardCore","systemInfo","hasRelease","hasKernelRelease","hasArchitecture","hasLastBoot","hasKernelModules","operatingSystem","release","kernelRelease","architecture","bootTime","kernelModules","systemUpdateMethod","major","minor"],"sourceRoot":""}