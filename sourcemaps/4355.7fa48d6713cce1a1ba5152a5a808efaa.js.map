{"version":3,"file":"js/4355.22d41f8e10f1e2352695.js","mappings":"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","sources":["webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/DateFormat/helper.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/DateFormat/DateFormat.js","webpack:///./src/components/GeneralInfo/DataCollectorsCard/DataCollectorsCard.js","webpack:///./src/components/GeneralInfo/LoadingCard/LoadingCard.js"],"sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { jsxs as _jsxs, jsx as _jsx } from \"react/jsx-runtime\";\nimport { Tooltip } from '@patternfly/react-core';\nvar second = 1000;\nvar minute = second * 60;\nvar hour = minute * 60;\nvar day = hour * 24;\nvar month = day * 30;\nvar year = day * 365;\nvar formatTime = function (number, unit) { return \"\".concat(number, \" \").concat(number > 1 ? \"\".concat(unit, \"s\") : unit, \" ago\"); };\nvar relativeTimeTable = [\n    { rightBound: Infinity, description: function (date) { return formatTime(Math.round(date / year), 'year'); } },\n    { rightBound: year, description: function (date) { return formatTime(Math.round(date / month), 'month'); } },\n    { rightBound: month, description: function (date) { return formatTime(Math.round(date / day), 'day'); } },\n    { rightBound: day, description: function (date) { return formatTime(Math.round(date / hour), 'hour'); } },\n    { rightBound: hour, description: function (date) { return formatTime(Math.round(date / minute), 'minute'); } },\n    { rightBound: minute, description: function () { return 'Just now'; } },\n];\nvar exact = function (value) { return value.toUTCString().split(',')[1].slice(0, -7).trim(); };\nexport var addTooltip = function (date, element, tooltipProps, extraTitle) {\n    if (extraTitle === void 0) { extraTitle = ''; }\n    return (_jsx(Tooltip, __assign({}, tooltipProps, { content: _jsxs(\"div\", { children: [extraTitle, date] }) }, { children: element })));\n};\nexport var dateStringByType = function (type) {\n    return ({\n        exact: function (date) { return exact(date) + ' UTC'; },\n        onlyDate: function (date) { return exact(date).slice(0, -6); },\n        relative: function (date) {\n            return relativeTimeTable.reduce(function (acc, i) { return (i.rightBound > Date.now() - date.getTime() ? i.description(Date.now() - date.getTime()) : acc); }, exact(date));\n        },\n        invalid: function () { return 'Invalid date'; },\n    }[type]);\n};\nexport var dateByType = function (type, tooltipProps, extraTitle) {\n    return ({\n        exact: function (date) { return dateStringByType(type)(date); },\n        onlyDate: function (date) { return dateStringByType(type)(date); },\n        relative: function (date) { return addTooltip(dateStringByType('exact')(date), _jsx(\"span\", { children: dateStringByType(type)(date) }), tooltipProps, extraTitle); },\n        invalid: function () { return 'Invalid date'; },\n    }[type]);\n};\n//# sourceMappingURL=helper.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport React from 'react';\nimport { dateByType } from './helper';\nvar DateFormat = function (_a) {\n    var date = _a.date, _b = _a.type, type = _b === void 0 ? 'relative' : _b, extraTitle = _a.extraTitle, tooltipProps = _a.tooltipProps;\n    var dateObj = date instanceof Date ? date : new Date(date);\n    var invalid = date === undefined || date === null || dateObj.toString() === 'Invalid Date';\n    var dateType = invalid ? 'invalid' : type;\n    return _jsx(React.Fragment, { children: dateByType(dateType, tooltipProps, extraTitle)(dateObj) });\n};\nexport default DateFormat;\n//# sourceMappingURL=DateFormat.js.map","/* eslint-disable camelcase */\nimport React, { useState, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport LoadingCard from '../LoadingCard';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { TableComposable, Thead, Tr, Th, Tbody, Td, TableVariant, ExpandableRowContent } from '@patternfly/react-table';\nimport { Flex, FlexItem } from '@patternfly/react-core';\nimport { getDefaultCollectors } from '../selectors/selectors';\n\nconst DataCollectorsCardCore = ({\n    detailLoaded,\n    collectors,\n    entity,\n    dataMapper\n}) => {\n    const [expandedNames, setExpandedNames] = useState([]);\n    const setExpanded = useCallback((collector, isExpanding = true) => setExpandedNames(prevExpanded => {\n        const otherExpandedNames = prevExpanded.filter(r => r !== collector.name);\n        return isExpanding ? [...otherExpandedNames, collector.name] : otherExpandedNames;\n    }), []);\n    const isExpanded = (collector) => expandedNames.includes(collector.name);\n    const data = collectors ?? getDefaultCollectors(entity);\n    return (<LoadingCard\n        title=\"Data collectors\"\n        isLoading={ !detailLoaded }\n    >\n        <TableComposable\n            aria-label=\"Data collectors\"\n            variant={TableVariant.compact}\n            borders={false}\n        >\n            <Thead>\n                <Tr className=\"ins-c__no-border\">\n                    <Th />\n                    <Th>Name</Th>\n                    <Th>Status</Th>\n                    <Th>Last upload</Th>\n                </Tr>\n            </Thead>\n            {dataMapper ? dataMapper(data, isExpanded, setExpanded) : data.map((collector, rowIndex) => (\n                <Tbody key={collector.name} isExpanded={isExpanded(collector)}>\n                    <Tr>\n                        {collector.details.name ?\n                            <Td\n                                expand={\n                                    collector.details\n                                        ? {\n                                            rowIndex,\n                                            isExpanded: isExpanded(collector),\n                                            onToggle: () => setExpanded(collector, !isExpanded(collector))\n                                        }\n                                        : undefined\n                                }\n                                style={{ paddingLeft: 0 }}\n                            /> : <Td />}\n                        <Td dataLabel=\"Name\">{collector.name}</Td>\n                        <Td dataLabel=\"Status\">{collector.status}</Td>\n                        <Td dataLabel=\"Last upload\">\n                            {collector.updated ?\n                                <DateFormat date={ collector.updated } type=\"exact\" /> :\n                                'N/A'\n                            }</Td>\n                    </Tr>\n                    {collector.details && collector.details.name && (\n                        <Tr isExpanded={isExpanded(collector)}>\n                            <Td />\n                            <Td colSpan={3}>\n                                <ExpandableRowContent>\n                                    <Flex>\n                                        <FlexItem className=\"ins-c__flex-row-margin\">\n                                            {`${collector.details.name}:`}\n                                        </FlexItem>\n                                        <FlexItem grow={{ default: 'grow' }}>\n                                            {collector.details.id ?? 'N/A'}\n                                        </FlexItem>\n                                    </Flex>\n                                </ExpandableRowContent>\n                            </Td>\n                        </Tr>\n                    )}\n                </Tbody>))}\n        </TableComposable>\n    </LoadingCard>);\n};\n\nDataCollectorsCardCore.propTypes = {\n    detailLoaded: PropTypes.bool,\n    collectors: PropTypes.array,\n    dataMapper: PropTypes.func,\n    entity: PropTypes.shape({\n        per_reporter_staleness: PropTypes.object\n    })\n};\nDataCollectorsCardCore.defaultProps = {\n    detailLoaded: false\n};\n\nexport const DataCollectorsCard = connect(({\n    entityDetails: {\n        entity\n    },\n    systemProfileStore: {\n        systemProfile\n    }\n}) => ({\n    entity,\n    systemProfile,\n    detailLoaded: systemProfile?.loaded,\n    defaultCollectors: getDefaultCollectors(entity)\n}))(DataCollectorsCardCore);\n\nDataCollectorsCard.propTypes = DataCollectorsCardCore.propTypes;\nDataCollectorsCard.defaultProps = DataCollectorsCardCore.defaultProps;\n\nexport default DataCollectorsCard;\n","import React, { Fragment, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    Stack,\n    StackItem,\n    TextContent,\n    Text,\n    TextList,\n    TextVariants,\n    TextListItemVariants,\n    TextListVariants,\n    TextListItem\n} from '@patternfly/react-core';\nimport { Skeleton, SkeletonSize } from '@redhat-cloud-services/frontend-components/Skeleton';\nimport { useLocation, useHistory } from 'react-router-dom';\n\nconst valueToText = (value, singular, plural) => {\n    if ((value || value === 0) && singular) {\n        return value === 1 ? `1 ${singular}` : `${value} ${plural || `${singular}s`}`;\n    }\n\n    if (value === 0) {\n        return 'None';\n    }\n\n    return value || 'Not available';\n};\n\nexport const Clickable = ({ value, target, plural, singular, onClick }) => {\n    const history = useHistory();\n    const { pathname } = useLocation();\n    const modalId = pathname.split('/').pop();\n    useEffect(() => {\n        if (target === modalId) {\n            onClick({ value, target });\n        }\n    }, [modalId, target]);\n    return (\n        <a\n            onClick={ event => {\n                event.preventDefault();\n                history.push(`${pathname}/${target}`);\n            } }\n            href={ `${window.location.origin}${window.location.pathname}/${target}` }\n        >\n            { valueToText(value, singular, plural) }\n        </a>\n    );\n};\n\nClickable.propTypes = {\n    value: PropTypes.node,\n    target: PropTypes.string,\n    onClick: PropTypes.func,\n    plural: PropTypes.string,\n    singular: PropTypes.string\n};\n\nconst LoadingCard = ({ title, isLoading, items, children }) => (\n    <Stack hasGutter>\n        <StackItem>\n            <TextContent>\n                <Text component={ TextVariants.h1 }>\n                    { title }\n                </Text>\n            </TextContent>\n        </StackItem>\n        <StackItem isFilled>\n            {items.length ?\n                (<TextContent>\n                    <TextList component={ TextListVariants.dl }>\n                        { items.map(({ onClick, value, target, plural, singular, size, title: itemTitle }, key) => (\n                            <Fragment key={key}>\n                                <TextListItem component={ TextListItemVariants.dt }>\n                                    { itemTitle }\n                                </TextListItem>\n                                <TextListItem component={ TextListItemVariants.dd }>\n                                    { isLoading && <Skeleton size={ size || SkeletonSize.sm } /> }\n                                    { !isLoading && (\n                                        onClick && value ?\n                                            <Clickable\n                                                onClick={onClick}\n                                                value={value}\n                                                target={target}\n                                                plural={plural}\n                                                singular={singular}\n                                            /> :\n                                            valueToText(value, singular, plural)\n                                    ) }\n                                </TextListItem>\n                            </Fragment>\n                        ))}\n                    </TextList>\n                </TextContent>) : null}\n            {children}\n        </StackItem>\n    </Stack>\n);\n\nLoadingCard.propTypes = {\n    title: PropTypes.node.isRequired,\n    isLoading: PropTypes.bool,\n    items: PropTypes.arrayOf(PropTypes.shape({\n        title: PropTypes.node,\n        value: PropTypes.node,\n        onClick: PropTypes.func,\n        size: PropTypes.oneOf(Object.values(SkeletonSize)),\n        plural: PropTypes.string,\n        singular: PropTypes.string\n    })),\n    children: PropTypes.node\n};\n\nLoadingCard.defaultProps = {\n    isLoading: true,\n    items: []\n};\n\nexport default LoadingCard;\n"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","hour","minute","day","month","year","formatTime","number","unit","concat","relativeTimeTable","rightBound","Infinity","description","date","Math","round","second","exact","value","toUTCString","split","slice","trim","dateStringByType","type","onlyDate","relative","reduce","acc","Date","now","getTime","invalid","dateByType","tooltipProps","extraTitle","element","Tooltip","content","children","addTooltip","_a","_b","dateObj","dateType","toString","DataCollectorsCardCore","detailLoaded","collectors","entity","dataMapper","useState","expandedNames","setExpandedNames","setExpanded","useCallback","collector","isExpanding","prevExpanded","otherExpandedNames","filter","r","name","isExpanded","includes","data","getDefaultCollectors","title","isLoading","TableComposable","variant","TableVariant","borders","Thead","Tr","className","Th","map","rowIndex","Tbody","key","details","Td","expand","onToggle","undefined","style","paddingLeft","dataLabel","status","updated","colSpan","ExpandableRowContent","grow","default","id","propTypes","PropTypes","per_reporter_staleness","defaultProps","DataCollectorsCard","connect","entityDetails","systemProfile","systemProfileStore","loaded","defaultCollectors","valueToText","singular","plural","Clickable","target","onClick","history","useHistory","pathname","useLocation","modalId","pop","useEffect","event","preventDefault","push","href","window","location","origin","LoadingCard","items","hasGutter","component","TextVariants","isFilled","TextListVariants","size","itemTitle","Fragment","T","TextListItemVariants","SkeletonSize","values"],"sourceRoot":""}