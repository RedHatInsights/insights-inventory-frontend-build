{"version":3,"file":"js/1898.1657201829710.4ccc538ae016254c17fa.js","mappings":"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","sources":["webpack:///./src/App.js","webpack:///./src/AppEntry.js","webpack:///./src/Routes.js","webpack:///./src/components/PermissionsLoader.js","webpack:///./src/components/SpinnerFallback.js","webpack:///./src/components/SystemDetails/GeneralInfo.js","webpack:///./src/config.js","webpack:///./src/hooks/useInventoryWritePermissions.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Routes } from './Routes';\nimport './App.scss';\nimport { INVENTORY_ROOT } from './config';\nimport { NotificationsPortal } from '@redhat-cloud-services/frontend-components-notifications/';\nimport PermissionLoader from './components/PermissionsLoader';\n\nconst App = () => {\n    const history = useHistory();\n    useEffect(() => {\n        insights.chrome.init();\n        insights.chrome.identifyApp(INVENTORY_ROOT);\n        return insights.chrome.on(\n            'APP_NAVIGATION',\n            event => {\n                if (event.navId === 'inventory') {\n                    history.push(`/${location.search}${location.hash}`);\n                } else {\n                    history.push(`/${event.navId}${location.search}${location.hash}`);\n                }\n            }\n        );\n    }, []);\n\n    return (\n        <div className=\"inventory\">\n            <NotificationsPortal />\n            <PermissionLoader />\n            <Routes />\n        </div>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { init, RegistryContext } from './store';\nimport App from './App';\nimport { getBaseName } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport logger from 'redux-logger';\n\nconst InventoryApp = () => {\n    const registry = IS_DEV ? init(logger) : init();\n    return <RegistryContext.Provider value={{\n        getRegistry: () => registry\n    }}>\n        <Provider store={registry.getStore()}>\n            <Router basename={getBaseName(window.location.pathname)}>\n                <App />\n            </Router>\n        </Provider>\n    </RegistryContext.Provider>;\n};\n\nInventoryApp.propTypes = {\n    useLogger: PropTypes.bool\n};\n\nInventoryApp.defaultProps = {\n    useLogger: false\n};\n\nexport default InventoryApp;\n","import { Route, Switch, matchPath, useHistory } from 'react-router-dom';\nimport React, { lazy, Suspense, useContext, useEffect } from 'react';\nimport { tagsMapper } from './constants';\nimport { reducers, RegistryContext, tableReducer } from './store';\nimport { mergeWithEntities } from './store/reducers';\n\nconst InventoryTable = lazy(() => import('./routes/InventoryTable'));\nconst InventoryDetail = lazy(() => import('./routes/InventoryDetail'));\n\nexport const routes = {\n    table: '/',\n    detail: '/:inventoryId'\n};\n\nfunction checkPaths(technology, app) {\n    return Object\n    .values(routes)\n    .some(\n        route => {\n            return matchPath(location.href, { path: `${document.baseURI}${technology}/${app}${route}` });\n        }\n    );\n}\n\nexport const Routes = () => {\n    const { getRegistry } = useContext(RegistryContext);\n    useEffect(() => {\n        getRegistry().register({\n            ...reducers,\n            ...mergeWithEntities(tableReducer)\n        });\n    }, [getRegistry]);\n    const history = useHistory();\n    const pathName = window.location.pathname.split('/');\n    const searchParams = new URLSearchParams(location.search);\n    pathName.shift();\n\n    if (pathName[0] === 'beta') {\n        pathName.shift();\n    }\n\n    if (!checkPaths(pathName[0], pathName[1])) {\n        history.push(`${routes.table}${location.search}${location.hash}`);\n    }\n\n    return (\n        <Suspense fallback=\"\">\n            <Switch>\n                <Route\n                    exact\n                    path={routes.table}\n                    render={() => <InventoryTable\n                        status={searchParams.getAll('status')}\n                        source={searchParams.getAll('source')}\n                        filterbyName={searchParams.getAll('hostname_or_id')}\n                        tagsFilter={searchParams.getAll('tags')?.[0]?.split?.(',').reduce?.(tagsMapper, [])}\n                        operatingSystem={searchParams.getAll('operating_system')}\n                        page={searchParams.getAll('page')}\n                        perPage={searchParams.getAll('per_page')}\n                    />}\n                    rootClass='inventory'\n                />\n                <Route path={routes.detail} component={InventoryDetail} rootClass='inventory' />\n            </Switch>\n        </Suspense>\n    );\n};\n","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport useInventoryWritePermissions from '../hooks/useInventoryWritePermissions';\nimport { ACTION_TYPES } from '../store/action-types';\n\nconst PermissionLoader = () => {\n    const { isLoading, hasAccess } = useInventoryWritePermissions();\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch({ type: `${ACTION_TYPES.LOAD_WRITE_PERMISSIONS}_PENDING` });\n    }, []);\n\n    useEffect(() => {\n        if (!isLoading) {\n            dispatch({ type: `${ACTION_TYPES.LOAD_WRITE_PERMISSIONS}_FULFILLED`, payload: { writePermissions: hasAccess } });\n        }\n    }, [isLoading]);\n\n    return null;\n};\n\nexport default PermissionLoader;\n","import React from 'react';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\n\nconst fallback = (\n    <Bullseye>\n        <Spinner size=\"xl\" />\n    </Bullseye>\n);\n\nexport default fallback;\n","import React, { useEffect, useState, Fragment } from 'react';\nimport { Provider } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport GeneralInformation from '../GeneralInfo/GeneralInformation';\nexport { default as TextInputModal } from '../GeneralInfo/TextInputModal';\nimport fallback from '../SpinnerFallback';\nimport systemProfileStore from '../../store/systemProfileStore';\n\nconst GeneralInfoTab = ({ getRegistry, ...props }) => {\n    const [Wrapper, setWrapper] = useState();\n    useEffect(() => {\n        if (getRegistry) {\n            getRegistry()?.register?.({ systemProfileStore });\n        }\n\n        setWrapper(() => getRegistry ? Provider : Fragment);\n    }, []);\n    return Wrapper ? <Wrapper\n        {...getRegistry && {\n            store: getRegistry().getStore()\n        }}\n    >\n        <GeneralInformation {...props} />\n    </Wrapper> : fallback;\n};\n\nGeneralInfoTab.propTypes = {\n    getRegistry: PropTypes.func\n};\n\nexport default GeneralInfoTab;\n","\nexport const INVENTORY_API_BASE = '/api/inventory/v1';\nexport const INVENTORY_ROOT = 'inventory';\n","import { usePermissions } from '@redhat-cloud-services/frontend-components-utilities/RBACHook';\n\nconst useInventoryWritePermissions = () => {\n    const { hasAccess, ...rest } = usePermissions('inventory', [\n        'inventory:*:*',\n        'inventory:hosts:write',\n        'inventory:*:write'\n    ]);\n\n    return { ...rest, hasAccess };\n};\n\nexport default useInventoryWritePermissions;\n"],"names":["history","useHistory","useEffect","insights","chrome","init","identifyApp","INVENTORY_ROOT","on","event","navId","push","location","search","hash","className","NotificationsPortal","InventoryApp","registry","value","getRegistry","Provider","store","getStore","basename","getBaseName","window","pathname","propTypes","useLogger","PropTypes","defaultProps","InventoryTable","lazy","InventoryDetail","routes","table","detail","Routes","useContext","RegistryContext","register","reducers","mergeWithEntities","tableReducer","technology","app","pathName","split","searchParams","URLSearchParams","shift","Object","values","some","route","matchPath","href","path","document","baseURI","Suspense","fallback","Switch","Route","exact","render","status","getAll","source","filterbyName","tagsFilter","reduce","tagsMapper","operatingSystem","page","perPage","rootClass","component","useInventoryWritePermissions","isLoading","hasAccess","dispatch","useDispatch","type","ACTION_TYPES","payload","writePermissions","size","GeneralInfoTab","props","useState","Wrapper","setWrapper","systemProfileStore","Fragment","usePermissions"],"sourceRoot":""}