{"version":3,"file":"js/6000.6c199a0b03e213759d5f.js","mappings":"k5BAUA,IAAMA,EAAsB,SAAC,GAAD,MACxBC,EADwB,EACxBA,WACAC,EAFwB,EAExBA,aACAC,EAHwB,EAGxBA,YACAC,EAJwB,EAIxBA,WACAC,EALwB,EAKxBA,iBACAC,EANwB,EAMxBA,gBACAC,EAPwB,EAOxBA,YACAC,EARwB,EAQxBA,iBACAC,EATwB,EASxBA,MATwB,OAWxB,kBAAC,IAAD,CACIC,MAAM,mBACNC,WAAaT,EACbU,MAAK,kBACER,EAAa,CAAC,CAAEM,MAAO,UAAWG,MAAO,kBAAC,IAAD,CAA0BC,gBAAiBb,EAAWc,YAAiB,KADlH,OAEEV,EAAmB,CAAC,CAAEK,MAAO,iBAAkBG,MAAOZ,EAAWe,gBAAmB,KAFtF,OAGEV,EAAkB,CAAC,CAAEI,MAAO,eAAgBG,MAAOZ,EAAWgB,eAAkB,KAHlF,OAIEV,EAAc,CAAC,CAAEG,MAAO,iBAAkBG,OAAQK,EAAAA,EAAAA,IAAOjB,EAAWkB,UACnE,kBAAC,IAAD,CAAYC,KAAOnB,EAAWkB,SAAWE,KAAK,aAC9C,kBAEC,KARJ,OASEb,EAAmB,CAAC,CACnBE,MAAO,iBACPG,MAAK,UAAEZ,EAAWqB,qBAAb,aAAE,EAA0BC,OACjCC,SAAU,SACVC,OAAQ,iBACRC,QAAS,WACLvB,EACI,kBACAwB,EAAAA,EAAAA,eAAc1B,EAAWqB,cAAe,cAG/C,KApBJ,OAqBEb,EAAMmB,KAAI,gBAAGF,EAAH,EAAGA,QAAH,4BAENA,GAAW,CAAEA,QAAS,SAACG,GAAD,OAAOH,EAAQG,EAAG1B,cAM3DH,EAAoB8B,UAAY,CAC5B5B,aAAc6B,IAAAA,KACd5B,YAAa4B,IAAAA,KACb9B,WAAY8B,IAAAA,MAAgB,CACxBhB,QAASgB,IAAAA,OACTd,aAAcc,IAAAA,OACdf,cAAee,IAAAA,OACfZ,SAAUY,IAAAA,OACVT,cAAeS,IAAAA,QAAkBA,IAAAA,UAErC3B,WAAY2B,IAAAA,KACZ1B,iBAAkB0B,IAAAA,KAClBzB,gBAAiByB,IAAAA,KACjBxB,YAAawB,IAAAA,KACbvB,iBAAkBuB,IAAAA,KAClBtB,MAAOsB,IAAAA,QAAkBC,EAAAA,KAE7BhC,EAAoBiC,aAAe,CAC/B/B,cAAc,EACdC,YAAa,aACbC,YAAY,EACZC,kBAAkB,EAClBC,iBAAiB,EACjBC,aAAa,EACbC,kBAAkB,EAClBC,MAAO,IAGX,SAAeyB,EAAAA,EAAAA,UAAQ,gBAEfC,EAFe,EACnBC,cACID,OAGAE,EALe,EAInBC,mBACID,cALe,MAOhB,CACHnC,aAAcmC,GAAiBA,EAAcE,OAC7CtC,YAAYa,EAAAA,EAAAA,IAAgBuB,EAAeF,MAT/C,CAUInC","sources":["webpack:///./src/components/GeneralInfo/OperatingSystemCard/OperatingSystemCard.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport LoadingCard from '../LoadingCard';\nimport { generalMapper } from '../dataMapper';\nimport { operatingSystem } from '../selectors';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { extraShape, isDate } from '../../../constants';\nimport OperatingSystemFormatter from '../../../Utilities/OperatingSystemFormatter';\n\nconst OperatingSystemCard = ({\n    systemInfo,\n    detailLoaded,\n    handleClick,\n    hasRelease,\n    hasKernelRelease,\n    hasArchitecture,\n    hasLastBoot,\n    hasKernelModules,\n    extra\n}) => (\n    <LoadingCard\n        title=\"Operating system\"\n        isLoading={ !detailLoaded }\n        items={ [\n            ...hasRelease ? [{ title: 'Release', value: <OperatingSystemFormatter operatingSystem={systemInfo.release} /> }] : [],\n            ...hasKernelRelease ? [{ title: 'Kernel release', value: systemInfo.kernelRelease }] : [],\n            ...hasArchitecture ? [{ title: 'Architecture', value: systemInfo.architecture }] : [],\n            ...hasLastBoot ? [{ title: 'Last boot time', value: (isDate(systemInfo.bootTime) ?\n                <DateFormat date={ systemInfo.bootTime } type=\"onlyDate\" /> :\n                'Not available'\n            )\n            }] : [],\n            ...hasKernelModules ? [{\n                title: 'Kernel modules',\n                value: systemInfo.kernelModules?.length,\n                singular: 'module',\n                target: 'kernel_modules',\n                onClick: () => {\n                    handleClick(\n                        'Kernel modules',\n                        generalMapper(systemInfo.kernelModules, 'Module')\n                    );\n                }\n            }] : [],\n            ...extra.map(({ onClick, ...item }) => ({\n                ...item,\n                ...onClick && { onClick: (e) => onClick(e, handleClick) }\n            }))\n        ] }\n    />\n);\n\nOperatingSystemCard.propTypes = {\n    detailLoaded: PropTypes.bool,\n    handleClick: PropTypes.func,\n    systemInfo: PropTypes.shape({\n        release: PropTypes.string,\n        architecture: PropTypes.string,\n        kernelRelease: PropTypes.string,\n        bootTime: PropTypes.string,\n        kernelModules: PropTypes.arrayOf(PropTypes.string)\n    }),\n    hasRelease: PropTypes.bool,\n    hasKernelRelease: PropTypes.bool,\n    hasArchitecture: PropTypes.bool,\n    hasLastBoot: PropTypes.bool,\n    hasKernelModules: PropTypes.bool,\n    extra: PropTypes.arrayOf(extraShape)\n};\nOperatingSystemCard.defaultProps = {\n    detailLoaded: false,\n    handleClick: () => undefined,\n    hasRelease: true,\n    hasKernelRelease: true,\n    hasArchitecture: true,\n    hasLastBoot: true,\n    hasKernelModules: true,\n    extra: []\n};\n\nexport default connect(({\n    entityDetails: {\n        entity\n    },\n    systemProfileStore: {\n        systemProfile\n    }\n}) => ({\n    detailLoaded: systemProfile && systemProfile.loaded,\n    systemInfo: operatingSystem(systemProfile, entity)\n}))(OperatingSystemCard);\n"],"names":["OperatingSystemCard","systemInfo","detailLoaded","handleClick","hasRelease","hasKernelRelease","hasArchitecture","hasLastBoot","hasKernelModules","extra","title","isLoading","items","value","operatingSystem","release","kernelRelease","architecture","isDate","bootTime","date","type","kernelModules","length","singular","target","onClick","generalMapper","map","e","propTypes","PropTypes","extraShape","defaultProps","connect","entity","entityDetails","systemProfile","systemProfileStore","loaded"],"sourceRoot":""}