{"version":3,"file":"js/34.e76bf4b6c0e739efe528.js","mappings":"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","sources":["webpack:///./src/routes/InventoryTable.js"],"sourcesContent":["/* eslint-disable camelcase */\nimport React, { useEffect, useState, useRef, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { shallowEqual, useDispatch, useSelector, useStore } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport './inventory.scss';\nimport { PageHeader, PageHeaderTitle, Main } from '@redhat-cloud-services/frontend-components';\nimport { tableReducer, RegistryContext } from '../store';\nimport { mergeWithEntities } from '../store/reducers';\nimport * as actions from '../store/actions';\nimport { Grid, GridItem } from '@patternfly/react-core';\nimport { addNotification as addNotificationAction } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport DeleteModal from '../Utilities/DeleteModal';\nimport { TextInputModal } from '../components/SystemDetails/GeneralInfo';\nimport flatMap from 'lodash/flatMap';\nimport { defaultFilters, generateFilter } from '../Utilities/constants';\nimport { inventoryConnector } from '../Utilities/inventoryConnector';\n\nconst reloadWrapper = (event, callback) => {\n    event.payload.then(callback);\n    return event;\n};\n\nconst calculateChecked = (rows = [], selected) => (\n    rows.every(({ id }) => selected && selected.has(id))\n        ? rows.length > 0\n        : rows.some(({ id }) => selected && selected.has(id)) && null\n);\n\nconst mapTags = ({ category, values }) => values.map(({ tagKey, value }) => `${\n    category ? `${category}/` : ''\n}${\n    tagKey\n}${\n    value ? `=${value}` : ''\n}`);\n\nconst filterMapper = {\n    staleFilter: ({ staleFilter }, searchParams) => staleFilter.forEach(item => searchParams.append('status', item)),\n    registeredWithFilter: ({ registeredWithFilter }, searchParams) => registeredWithFilter\n    ?.forEach(item => searchParams.append('source', item)),\n    value: ({ value, filter }, searchParams) => value === 'hostname_or_id' &&\n    Boolean(filter) &&\n    searchParams.append('hostname_or_id', filter),\n    tagFilters: ({ tagFilters }, searchParams) => tagFilters?.length > 0 && searchParams.append(\n        'tags',\n        flatMap(tagFilters, mapTags)\n    )\n};\n\nconst calculateFilters = (searchParams, filters = []) => {\n    filters.forEach((filter) => {\n        Object.keys(filter).forEach(key => {\n            filterMapper?.[key]?.(filter, searchParams);\n        });\n    });\n\n    return searchParams;\n};\n\nexport const calculatePagination = (searchParams, page, perPage) => {\n    const currSearch = new URLSearchParams(location.search);\n    const newPage = page !== undefined ? page : currSearch.get('page');\n    const newPerPage = perPage !== undefined ? perPage : currSearch.get('per_page');\n    !isNaN(parseInt(newPage)) && searchParams.append('page', newPage);\n    !isNaN(parseInt(newPerPage)) && searchParams.append('per_page', newPerPage);\n};\n\nconst Inventory = ({\n    status,\n    source,\n    filterbyName,\n    tagsFilter,\n    page,\n    perPage,\n    initialLoading\n}) => {\n    const [InvCmp, setInvCmp] = useState();\n    document.title = 'Inventory | Red Hat Insights';\n    const history = useHistory();\n    const store = useStore();\n    const { getRegistry } = useContext(RegistryContext);\n    const inventory = useRef(null);\n    const [isModalOpen, handleModalToggle] = useState(false);\n    const [currentSytem, activateSystem] = useState({});\n    const [filters, onSetfilters] = useState([]);\n    const [ediOpen, onEditOpen] = useState(false);\n    const [globalFilter, setGlobalFilter] = useState();\n    const { loading, writePermissions } = useSelector(\n        ({ permissionsReducer }) =>\n            ({ loading: permissionsReducer?.loading, writePermissions: permissionsReducer?.writePermissions }),\n        shallowEqual\n    );\n\n    const rows = useSelector(({ entities }) => entities?.rows, shallowEqual);\n    const loaded = useSelector(({ entities }) => entities?.loaded);\n    const selected = useSelector(({ entities }) => entities?.selected);\n    const dispatch = useDispatch();\n\n    const onSelectRows = (id, isSelected) => dispatch(actions.selectEntity(id, isSelected));\n\n    const onRefresh = (options, callback) => {\n        if (!options?.filters) {\n            options.filters = Object.entries(defaultFilters).map(([key, val]) => ({ [key]: val }));\n        }\n\n        const { status, source, tagsFilter, filterbyName } = (options?.filters || []).reduce((acc, curr) => ({\n            ...acc,\n            ...curr?.staleFilter && { status: curr.staleFilter },\n            ...curr?.registeredWithFilter && { source: curr.registeredWithFilter },\n            ...curr?.tagFilters && { tagsFilter: curr.tagFilters },\n            ...curr?.value === 'hostname_or_id' && { filterbyName: curr.filter }\n        }), { status: undefined, source: undefined, tagsFilter: undefined, filterbyName: undefined });\n        options.filters = generateFilter(status, source, tagsFilter, filterbyName);\n\n        onSetfilters(options?.filters);\n        const searchParams = new URLSearchParams();\n        calculateFilters(searchParams, options?.filters);\n        // eslint-disable-next-line camelcase\n        calculatePagination(searchParams, options?.page, options?.per_page);\n        const search = searchParams.toString();\n        history.push({\n            search,\n            hash: location.hash\n        });\n\n        if (!callback && inventory?.current) {\n            inventory.current.onRefreshData(options);\n        } else if (callback) {\n            callback(options);\n        }\n    };\n\n    useEffect(() => {\n        insights.chrome?.hideGlobalFilter?.(false);\n        insights.chrome.appAction('system-list');\n        insights.chrome.appObjectId();\n        insights.chrome.on('GLOBAL_FILTER_UPDATE', ({ data }) => {\n            const [workloads, SID, tags] = insights.chrome?.mapGlobalFilter?.(data, false, true);\n            setGlobalFilter({\n                tags,\n                filter: {\n                    ...globalFilter?.filter,\n                    system_profile: {\n                        ...globalFilter?.filter?.system_profile,\n                        ...workloads?.SAP?.isSelected && { sap_system: true },\n                        ...SID?.length > 0 && { sap_sids: SID }\n                    }\n                }\n            });\n        });\n        dispatch(actions.clearNotifications());\n        const { InventoryTable } = inventoryConnector(store, undefined, undefined, true);\n        setInvCmp(() => InventoryTable);\n        getRegistry().register({\n            ...mergeWithEntities(tableReducer)\n        });\n\n        const filtersList = generateFilter(status, source, tagsFilter, filterbyName);\n        filtersList?.length > 0 && dispatch(actions.setFilter(filtersList));\n\n        if (perPage || page) {\n            dispatch(actions.setPagination(\n                Array.isArray(page) ? page[0] : page,\n                Array.isArray(perPage) ? perPage[0] : perPage\n            ));\n        }\n    }, []);\n\n    const calculateSelected = () => selected ? selected.size : 0;\n\n    return (\n        <React.Fragment>\n            <PageHeader className=\"pf-m-light\">\n                <PageHeaderTitle title='Inventory'/>\n            </PageHeader>\n            <Main>\n                <Grid gutter=\"md\">\n                    <GridItem span={12}>\n                        {\n                            !loading && InvCmp && <InvCmp\n                                history={history}\n                                store={store}\n                                customFilters={globalFilter}\n                                isFullView\n                                ref={inventory}\n                                showTags\n                                onRefresh={onRefresh}\n                                hasCheckbox={writePermissions}\n                                autoRefresh\n                                initialLoading={initialLoading}\n                                {...(writePermissions && {\n                                    actions: [\n                                        {\n                                            title: 'Delete',\n                                            onClick: (_event, _index, { id: systemId, display_name: displayName }) => {\n                                                activateSystem(() => ({\n                                                    id: systemId,\n                                                    displayName\n                                                }));\n                                                handleModalToggle(() => true);\n                                            }\n                                        }, {\n                                            title: 'Edit',\n                                            onClick: (_event, _index, data) => {\n                                                activateSystem(() => data);\n                                                onEditOpen(() => true);\n                                            }\n                                        }\n                                    ],\n                                    actionsConfig: {\n                                        actions: [{\n                                            label: 'Delete',\n                                            props: {\n                                                isDisabled: calculateSelected() === 0,\n                                                variant: 'secondary',\n                                                onClick: () => {\n                                                    activateSystem(Array.from(selected.values()));\n                                                    handleModalToggle(true);\n                                                }\n                                            }\n                                        }]\n                                    },\n                                    bulkSelect: {\n                                        count: calculateSelected(),\n                                        id: 'bulk-select-systems',\n                                        items: [{\n                                            title: 'Select none (0)',\n                                            onClick: () => {\n                                                onSelectRows(-1, false);\n                                            }\n                                        },\n                                        {\n                                            ...loaded && rows && rows.length > 0 ? {\n                                                title: `Select page (${ rows.length })`,\n                                                onClick: () => {\n                                                    onSelectRows(0, true);\n                                                }\n                                            } : {}\n                                        }],\n                                        checked: calculateChecked(rows, selected),\n                                        onSelect: (value) => {\n                                            onSelectRows(0, value);\n                                        }\n                                    }\n                                })}\n                                tableProps={{\n                                    canSelectAll: false\n                                }}\n                                onRowClick={(_e, id, app) => history.push(`/${id}${app ? `/${app}` : ''}`)}\n                            />\n                        }\n                    </GridItem>\n                </Grid>\n            </Main>\n            <DeleteModal\n                handleModalToggle={handleModalToggle}\n                isModalOpen={isModalOpen}\n                currentSytems={currentSytem}\n                onConfirm={() => {\n                    let displayName;\n                    let removeSystems;\n                    if (Array.isArray(currentSytem)) {\n                        removeSystems = currentSytem.map(({ id }) => id);\n                        displayName = currentSytem.length > 1 ?\n                            `${currentSytem.length} systems` :\n                            currentSytem[0].display_name;\n                    } else {\n                        displayName = currentSytem.displayName;\n                        removeSystems = [currentSytem.id];\n                    }\n\n                    dispatch(addNotificationAction({\n                        id: 'remove-initiated',\n                        variant: 'warning',\n                        title: 'Delete operation initiated',\n                        description: `Removal of ${displayName} started.`,\n                        dismissable: false\n                    }));\n                    dispatch(reloadWrapper(actions.deleteEntity(removeSystems, displayName), () => onRefresh({ filters })));\n                    handleModalToggle(false);\n                }}\n            />\n\n            <TextInputModal\n                title=\"Edit display name\"\n                isOpen={ediOpen}\n                value={currentSytem.display_name}\n                onCancel={() => onEditOpen(false)}\n                onSubmit={(value) => {\n                    dispatch(reloadWrapper(\n                        actions.editDisplayName(currentSytem.id, value),\n                        inventory.current.onRefreshData\n                    ));\n                    onEditOpen(false);\n                }}\n            />\n        </React.Fragment>\n    );\n};\n\nInventory.propTypes = {\n    status: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string), PropTypes.string]),\n    source: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string), PropTypes.string]),\n    filterbyName: PropTypes.string,\n    tagsFilter: PropTypes.any,\n    page: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    perPage: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    initialLoading: PropTypes.bool\n};\n\nInventory.defaultProps = {\n    initialLoading: true\n};\n\nexport default Inventory;\n"],"names":["reloadWrapper","event","callback","payload","then","calculateChecked","rows","selected","every","id","has","length","some","mapTags","category","values","map","tagKey","value","filterMapper","staleFilter","searchParams","forEach","item","append","registeredWithFilter","filter","Boolean","tagFilters","flatMap","calculatePagination","page","perPage","currSearch","URLSearchParams","location","search","newPage","undefined","get","newPerPage","isNaN","parseInt","Inventory","status","source","filterbyName","tagsFilter","initialLoading","useState","InvCmp","setInvCmp","document","title","history","useHistory","store","useStore","getRegistry","useContext","RegistryContext","inventory","useRef","isModalOpen","handleModalToggle","currentSytem","activateSystem","filters","onSetfilters","ediOpen","onEditOpen","globalFilter","setGlobalFilter","useSelector","permissionsReducer","loading","writePermissions","shallowEqual","entities","loaded","dispatch","useDispatch","onSelectRows","isSelected","actions","onRefresh","options","Object","entries","defaultFilters","key","val","reduce","acc","curr","generateFilter","keys","calculateFilters","per_page","toString","push","hash","current","onRefreshData","useEffect","insights","chrome","hideGlobalFilter","appAction","appObjectId","on","data","mapGlobalFilter","workloads","SID","tags","system_profile","SAP","sap_system","sap_sids","InventoryTable","inventoryConnector","register","mergeWithEntities","tableReducer","filtersList","Array","isArray","calculateSelected","size","className","gutter","span","customFilters","isFullView","ref","showTags","hasCheckbox","autoRefresh","onClick","_event","_index","systemId","displayName","display_name","actionsConfig","label","props","isDisabled","variant","from","bulkSelect","count","items","checked","onSelect","tableProps","canSelectAll","onRowClick","_e","app","currentSytems","onConfirm","removeSystems","addNotificationAction","description","dismissable","TextInputModal","isOpen","onCancel","onSubmit","propTypes","PropTypes","defaultProps"],"sourceRoot":""}