{"version":3,"sources":["webpack://insights-inventory-frontend/./src/components/DeleteModal.js","webpack://insights-inventory-frontend/./src/Utilities/constants.js","webpack://insights-inventory-frontend/./src/routes/InventoryTable.js"],"names":["DeleteModal","systemToRemove","handleModalToggle","isModalOpen","currentSytem","onConfirm","systemLabel","Array","isArray","length","display_name","displayName","Modal","variant","title","className","isOpen","onClose","Split","hasGutter","SplitItem","size","isFilled","Stack","StackItem","location","host","ClipboardCopy","Level","LevelItem","Button","onClick","ActiveSystemProp","PropTypes","id","propTypes","defaultProps","defaultFilters","staleFilter","registeredWithFilter","isEmpty","check","generateFilter","status","source","tagsFilter","filterbyName","tagFilters","value","filter","Boolean","calculateChecked","rows","selected","every","has","some","mapTags","category","values","map","tagKey","filterMapper","searchParams","forEach","item","append","flatMap","calculatePagination","page","perPage","currSearch","URLSearchParams","search","newPage","undefined","get","newPerPage","isNaN","parseInt","Inventory","clearNotifications","deleteEntity","addNotification","loaded","updateDisplayName","onSelectRows","setFilter","history","setPagination","document","inventory","useRef","useState","activateSystem","filters","onSetfilters","ediOpen","onEditOpen","globalFilter","setGlobalFilter","useSelector","permissionsReducer","loading","writePermissions","shallowEqual","onRefresh","options","callback","reduce","acc","curr","Object","keys","key","calculateFilters","per_page","toString","push","hash","current","onRefreshData","useEffect","insights","chrome","hideGlobalFilter","appAction","appObjectId","on","data","mapGlobalFilter","workloads","SID","tags","system_profile","SAP","isSelected","sap_system","sap_sids","calculateSelected","PageHeader","Main","Grid","gutter","GridItem","span","customFilters","isFullView","ref","showTags","hasCheckbox","actions","_event","_index","systemId","actionsConfig","label","props","isDisabled","from","bulkSelect","count","items","checked","onSelect","tableProps","canSelectAll","onRowClick","_e","app","onLoad","mergeWithEntities","INVENTORY_ACTION_TYPES","getRegistry","register","entitiesReducer","removeSystems","description","dismissable","TextInputModal","onCancel","onSubmit","contextTypes","store","loadEntity","routerParams","connect","entities","dispatch","reloadWrapper","event","payload","then","hostName","filtersList"],"mappings":"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","file":"js/149.90cd86617e9bdec1bc20.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    Modal,\n    Split,\n    SplitItem,\n    Stack,\n    StackItem,\n    Level,\n    LevelItem,\n    Button,\n    ClipboardCopy\n} from '@patternfly/react-core';\nimport { ExclamationTriangleIcon } from  '@patternfly/react-icons';\n\nconst DeleteModal = ({ handleModalToggle, isModalOpen, currentSytem, onConfirm }) => {\n    let systemToRemove;\n    let systemLabel = 'system';\n    if (Array.isArray(currentSytem)) {\n        systemToRemove = currentSytem.length === 1 ? currentSytem[0].display_name : `${currentSytem.length} systems`;\n        systemLabel = currentSytem.length === 1 ? systemLabel : 'systems';\n    } else {\n        systemToRemove = currentSytem.displayName;\n    }\n\n    return <Modal\n        variant=\"small\"\n        title=\"Remove from inventory\"\n        className=\"ins-c-inventory__table--remove\"\n        isOpen={isModalOpen}\n        onClose={() => handleModalToggle(false)}\n    >\n        <Split hasGutter>\n            <SplitItem><ExclamationTriangleIcon size=\"xl\" className=\"ins-m-alert\" /></SplitItem>\n            <SplitItem isFilled>\n                <Stack hasGutter>\n                    <StackItem>\n                        {systemToRemove} will be removed from\n                                    all {location.host} applications and services. You need to re-register\n                        the {systemLabel} to add it back to your inventory.\n                    </StackItem>\n                    <StackItem>\n                        To disable the daily upload for this {systemLabel}, use the following command:\n                    </StackItem>\n                    <StackItem>\n                        <ClipboardCopy>insights-client --unregister</ClipboardCopy>\n                    </StackItem>\n                </Stack>\n            </SplitItem>\n        </Split>\n        <Level hasGutter>\n            <LevelItem>\n                <Button variant=\"danger\" onClick={onConfirm}>\n                    Remove\n                </Button>\n                <Button variant=\"link\" onClick={() => handleModalToggle(false)}>Cancel</Button>\n            </LevelItem>\n        </Level>\n    </Modal>;\n};\n\nconst ActiveSystemProp = PropTypes.shape({\n    id: PropTypes.string,\n    displayName: PropTypes.string\n});\n\nDeleteModal.propTypes = {\n    isModalOpen: PropTypes.bool,\n    currentSytem: PropTypes.oneOfType([ActiveSystemProp, PropTypes.arrayOf(ActiveSystemProp)]),\n    handleModalToggle: PropTypes.func,\n    onConfirm: PropTypes.func\n};\n\nDeleteModal.defaultProps = {\n    isModalOpen: false,\n    currentSytem: {},\n    handleModalToggle: () => undefined,\n    onConfirm: () => undefined\n};\n\nexport default DeleteModal;\n","export const defaultFilters = [\n    {\n        staleFilter: ['fresh', 'stale']\n    }, {\n        registeredWithFilter: ['insights']\n    }\n];\n\nexport const isEmpty = (check) => !check || check?.length === 0;\n\nexport const generateFilter = (status, source, tagsFilter, filterbyName) => ([\n    !isEmpty(status) && {\n        staleFilter: Array.isArray(status) ? status : [status]\n    },\n    !isEmpty(tagsFilter) && {\n        tagFilters: Array.isArray(tagsFilter) ? tagsFilter : [tagsFilter]\n    },\n    !isEmpty(source) && {\n        registeredWithFilter: Array.isArray(source) ? source : [source]\n    },\n    !isEmpty(filterbyName) && {\n        value: 'hostname_or_id',\n        filter: Array.isArray(filterbyName) ? filterbyName[0] : filterbyName\n    },\n    (!isEmpty(status) || !isEmpty(tagsFilter) || !isEmpty(filterbyName)) && isEmpty(source) && {\n        registeredWithFilter: []\n    },\n    (!isEmpty(source) || !isEmpty(tagsFilter) || !isEmpty(filterbyName)) && isEmpty(status) && {\n        staleFilter: []\n    }\n].filter(Boolean));\n","/* eslint-disable camelcase */\nimport React, { useEffect, useState, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect, shallowEqual, useSelector } from 'react-redux';\nimport './inventory.scss';\nimport routerParams from '@redhat-cloud-services/frontend-components-utilities/files/esm/RouterParams';\nimport { PageHeader, PageHeaderTitle, Main } from '@redhat-cloud-services/frontend-components';\nimport { entitiesReducer } from '../store';\nimport * as actions from '../actions';\nimport { Grid, GridItem } from '@patternfly/react-core';\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/files/esm/Registry';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/esm/actions';\nimport DeleteModal from '../components/DeleteModal';\nimport TextInputModal from '@redhat-cloud-services/frontend-components-inventory-general-info/esm/TextInputModal';\nimport flatMap from 'lodash/flatMap';\nimport { defaultFilters, generateFilter } from '../Utilities/constants';\n\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/components/esm/Inventory';\n\nconst calculateChecked = (rows = [], selected) => (\n    rows.every(({ id }) => selected && selected.has(id))\n        ? rows.length > 0\n        : rows.some(({ id }) => selected && selected.has(id)) && null\n);\n\nconst mapTags = ({ category, values }) => values.map(({ tagKey, value }) => `${\n    category ? `${category}/` : ''\n}${\n    tagKey\n}${\n    value ? `=${value}` : ''\n}`);\n\nconst filterMapper = {\n    staleFilter: ({ staleFilter }, searchParams) => staleFilter.forEach(item => searchParams.append('status', item)),\n    registeredWithFilter: ({ registeredWithFilter }, searchParams) => registeredWithFilter\n    ?.forEach(item => searchParams.append('source', item)),\n    value: ({ value, filter }, searchParams) => value === 'hostname_or_id' &&\n    Boolean(filter) &&\n    searchParams.append('hostname_or_id', filter),\n    tagFilters: ({ tagFilters }, searchParams) => tagFilters?.length > 0 && searchParams.append(\n        'tags',\n        flatMap(tagFilters, mapTags)\n    )\n};\n\nconst calculateFilters = (searchParams, filters = []) => {\n    filters.forEach((filter) => {\n        Object.keys(filter).forEach(key => {\n            filterMapper?.[key]?.(filter, searchParams);\n        });\n    });\n\n    return searchParams;\n};\n\nexport const calculatePagination = (searchParams, page, perPage) => {\n    const currSearch = new URLSearchParams(location.search);\n    const newPage = page !== undefined ? page : currSearch.get('page');\n    const newPerPage = perPage !== undefined ? perPage : currSearch.get('per_page');\n    !isNaN(parseInt(newPage)) && searchParams.append('page', newPage);\n    !isNaN(parseInt(newPerPage)) && searchParams.append('per_page', newPerPage);\n};\n\nconst Inventory = ({\n    clearNotifications,\n    deleteEntity,\n    addNotification,\n    loaded,\n    rows,\n    updateDisplayName,\n    onSelectRows,\n    selected,\n    status,\n    setFilter,\n    history,\n    source,\n    filterbyName,\n    tagsFilter,\n    page,\n    perPage,\n    setPagination\n}) => {\n    document.title = 'Inventory | Red Hat Insights';\n    const inventory = useRef(null);\n    const [isModalOpen, handleModalToggle] = useState(false);\n    const [currentSytem, activateSystem] = useState({});\n    const [filters, onSetfilters] = useState([]);\n    const [ediOpen, onEditOpen] = useState(false);\n    const [globalFilter, setGlobalFilter] = useState();\n    const { loading, writePermissions } = useSelector(\n        ({ permissionsReducer }) =>\n            ({ loading: permissionsReducer?.loading, writePermissions: permissionsReducer?.writePermissions }),\n        shallowEqual\n    );\n\n    const onRefresh = (options, callback) => {\n        if (!options?.filters) {\n            options.filters = defaultFilters;\n        }\n\n        const { status, source, tagsFilter, filterbyName } = options?.filters.reduce((acc, curr) => ({\n            ...acc,\n            ...curr?.staleFilter && { status: curr.staleFilter },\n            ...curr?.registeredWithFilter && { source: curr.registeredWithFilter },\n            ...curr?.tagFilters && { tagsFilter: curr.tagFilters },\n            ...curr?.value === 'hostname_or_id' && { filterbyName: curr.filter }\n        }), { status: undefined, source: undefined, tagsFilter: undefined, filterbyName: undefined });\n        options.filters = generateFilter(status, source, tagsFilter, filterbyName);\n\n        onSetfilters(options?.filters);\n        const searchParams = new URLSearchParams();\n        calculateFilters(searchParams, options?.filters);\n        // eslint-disable-next-line camelcase\n        calculatePagination(searchParams, options?.page, options?.per_page);\n        const search = searchParams.toString();\n        history.push({\n            search,\n            hash: location.hash\n        });\n\n        if (!callback && inventory && inventory.current) {\n            inventory.current.onRefreshData(options);\n        } else if (callback) {\n            callback(options);\n        }\n    };\n\n    useEffect(() => {\n        insights.chrome?.hideGlobalFilter?.(false);\n        insights.chrome.appAction('system-list');\n        insights.chrome.appObjectId();\n        insights.chrome.on('GLOBAL_FILTER_UPDATE', ({ data }) => {\n            const [workloads, SID, tags] = insights.chrome?.mapGlobalFilter?.(data, false, true);\n            setGlobalFilter({\n                tags,\n                filter: {\n                    ...globalFilter?.filter,\n                    system_profile: {\n                        ...globalFilter?.filter?.system_profile,\n                        ...workloads?.SAP?.isSelected && { sap_system: true },\n                        ...SID?.length > 0 && { sap_sids: SID }\n                    }\n                }\n            });\n            if (inventory.current) {\n                inventory.current.onRefreshData({});\n            }\n        });\n        clearNotifications();\n    }, []);\n\n    const calculateSelected = () => selected ? selected.size : 0;\n\n    return (\n        <React.Fragment>\n            <PageHeader className=\"pf-m-light\">\n                <PageHeaderTitle title='Inventory'/>\n            </PageHeader>\n            <Main>\n                <Grid gutter=\"md\">\n                    <GridItem span={12}>\n                        {\n                            !loading && <InventoryTable\n                                customFilters={globalFilter}\n                                isFullView\n                                ref={inventory}\n                                showTags\n                                onRefresh={onRefresh}\n                                hasCheckbox={writePermissions}\n                                {...(writePermissions && {\n                                    actions: [\n                                        {\n                                            title: 'Delete',\n                                            onClick: (_event, _index, { id: systemId, display_name: displayName }) => {\n                                                activateSystem(() => ({\n                                                    id: systemId,\n                                                    displayName\n                                                }));\n                                                handleModalToggle(() => true);\n                                            }\n                                        }, {\n                                            title: 'Edit',\n                                            onClick: (_event, _index, data) => {\n                                                activateSystem(() => data);\n                                                onEditOpen(() => true);\n                                            }\n                                        }\n                                    ],\n                                    actionsConfig: {\n                                        actions: [{\n                                            label: 'Delete',\n                                            props: {\n                                                isDisabled: calculateSelected() === 0,\n                                                variant: 'secondary',\n                                                onClick: () => {\n                                                    activateSystem(Array.from(selected.values()));\n                                                    handleModalToggle(true);\n                                                }\n                                            }\n                                        }]\n                                    },\n                                    bulkSelect: {\n                                        count: calculateSelected(),\n                                        items: [{\n                                            title: 'Select none (0)',\n                                            onClick: () => {\n                                                onSelectRows(-1, false);\n                                            }\n                                        },\n                                        {\n                                            ...loaded && rows && rows.length > 0 ? {\n                                                title: `Select page (${ rows.length })`,\n                                                onClick: () => {\n                                                    onSelectRows(0, true);\n                                                }\n                                            } : {}\n                                        }],\n                                        checked: calculateChecked(rows, selected),\n                                        onSelect: (value) => {\n                                            onSelectRows(0, value);\n                                        }\n                                    }\n                                })}\n                                tableProps={{\n                                    canSelectAll: false\n                                }}\n                                onRowClick={(_e, id, app) => history.push(`/${id}${app ? `/${app}` : ''}`)}\n                                onLoad={({ mergeWithEntities, INVENTORY_ACTION_TYPES }) => {\n                                    getRegistry().register({\n                                        ...mergeWithEntities(entitiesReducer(INVENTORY_ACTION_TYPES))\n                                    });\n\n                                    setFilter(generateFilter(status, source, tagsFilter, filterbyName));\n\n                                    if (perPage || page) {\n                                        setPagination(\n                                            Array.isArray(page) ? page[0] : page,\n                                            Array.isArray(perPage) ? perPage[0] : perPage\n                                        );\n                                    }\n                                }}\n                            />\n                        }\n                    </GridItem>\n                </Grid>\n            </Main>\n            <DeleteModal\n                handleModalToggle={handleModalToggle}\n                isModalOpen={isModalOpen}\n                currentSytem={currentSytem}\n                onConfirm={() => {\n                    let displayName;\n                    let removeSystems;\n                    if (Array.isArray(currentSytem)) {\n                        removeSystems = currentSytem.map(({ id }) => id);\n                        displayName = currentSytem.length > 1 ?\n                            `${currentSytem.length} systems` :\n                            currentSytem[0].display_name;\n                    } else {\n                        displayName = currentSytem.displayName;\n                        removeSystems = [currentSytem.id];\n                    }\n\n                    addNotification({\n                        id: 'remove-initiated',\n                        variant: 'warning',\n                        title: 'Delete operation initiated',\n                        description: `Removal of ${displayName} started.`,\n                        dismissable: false\n                    });\n                    deleteEntity(removeSystems, displayName, () => onRefresh({ filters }));\n                    handleModalToggle(false);\n                }}\n            />\n\n            <TextInputModal\n                title=\"Edit display name\"\n                isOpen={ediOpen}\n                value={currentSytem.display_name}\n                onCancel={() => onEditOpen(false)}\n                onSubmit={(value) => {\n                    updateDisplayName(currentSytem.id, value, inventory.current.onRefreshData);\n                    onEditOpen(false);\n                }}\n            />\n        </React.Fragment>\n    );\n};\n\nInventory.contextTypes = {\n    store: PropTypes.object\n};\n\nInventory.propTypes = {\n    rows: PropTypes.arrayOf(PropTypes.shape({\n        id: PropTypes.string,\n        selected: PropTypes.bool\n    })),\n    loaded: PropTypes.bool,\n    loadEntity: PropTypes.func,\n    clearNotifications: PropTypes.func,\n    deleteEntity: PropTypes.func,\n    addNotification: PropTypes.func,\n    updateDisplayName: PropTypes.func,\n    onSelectRows: PropTypes.func,\n    setFilter: PropTypes.func,\n    selected: PropTypes.object,\n    status: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string), PropTypes.string]),\n    source: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string), PropTypes.string]),\n    filterbyName: PropTypes.string,\n    tagsFilter: PropTypes.any,\n    history: PropTypes.shape({\n        push: PropTypes.func\n    }),\n    page: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    perPage: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    setPagination: PropTypes.func\n};\n\nfunction mapDispatchToProps(dispatch) {\n    const reloadWrapper = (event, callback) => {\n        event.payload.then(callback);\n        return event;\n    };\n\n    return {\n        loadEntity: (id) => dispatch(actions.loadEntity(id)),\n        clearNotifications: () => dispatch(actions.clearNotifications()),\n        deleteEntity: (id, hostName, callback) => dispatch(reloadWrapper(actions.deleteEntity(id, hostName), callback)),\n        addNotification: (payload) => dispatch(addNotification(payload)),\n        updateDisplayName: (id, displayName, callback) => dispatch(\n            reloadWrapper(actions.editDisplayName(id, displayName), callback)\n        ),\n        onSelectRows: (id, isSelected) => dispatch(actions.selectEntity(id, isSelected)),\n        setFilter: (filtersList) => filtersList?.length > 0 && dispatch(actions.setFilter(filtersList)),\n        setPagination: (page, perPage) => dispatch(actions.setPagination(page, perPage))\n    };\n}\n\nexport default routerParams(connect(({ entities }) => ({\n    rows: entities && entities.rows,\n    loaded: entities && entities.loaded,\n    selected: entities && entities.selected\n}), mapDispatchToProps)(Inventory));\n"],"sourceRoot":""}