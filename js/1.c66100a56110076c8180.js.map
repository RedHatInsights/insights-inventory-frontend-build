{"version":3,"sources":["webpack://insights-inventory-frontend/./src/routes/inventory.scss","webpack://insights-inventory-frontend/./src/api.js","webpack://insights-inventory-frontend/./src/actions.js","webpack://insights-inventory-frontend/./src/routes/inventory.scss?c4fb"],"names":["exports","module","i","push","id","hosts","HostsApi","undefined","INVENTORY_API_BASE","instance","deleteEntity","systems","displayName","type","ACTION_TYPES","payload","apiHostDeleteById","meta","notifications","fulfilled","variant","title","description","dismissable","setFilter","filtersList","SET_INVENTORY_FILTER","loadEntity","insights","chrome","auth","getUser","clearNotifications","CLEAR_NOTIFICATIONS","editDisplayName","value","apiHostPatchById","display_name","selectEntity","selected","SELECT_ENTITY","setPagination","page","perPage","SET_PAGINATION","update","hot","invalidate","oldLocals","accept","a","b","isNamedExport","p","isEqualLocals","dispose"],"mappings":"4HAAAA,EAAUC,EAAOD,QAAU,EAAQ,MAAR,EAA6D,IAEhFE,EAAE,EAAQ,OAAqG,IAGvHF,EAAQG,KAAK,CAACF,EAAOG,GAAI,opBAAupB,M,sLCAnqBC,EAAQ,I,SAAIC,eAASC,EAAWC,IAAoBC,MCFpDC,EAAe,SAACC,EAASC,GAAV,MAA2B,CACnDC,KAAMC,mBACNC,QAASV,EAAMW,kBAAkBL,GACjCM,KAAM,CACFC,cAAe,CACXC,UAAW,CACPC,QAAS,UACTC,MAAO,4BACPC,YAAa,GAAF,OAAKV,EAAL,mCACXW,aAAa,IAGrBZ,aAIKa,EAAY,SAACC,GAAD,MAAkB,CACvCZ,KAAMa,KACNX,QAAS,CACLU,iBAIKE,EAAa,iBAAO,CAC7Bd,KAAMC,gBACNC,QD4BOa,SAASC,OAAOC,KAAKC,YCzBnBC,EAAqB,WAC9B,MAAQ,CACJnB,KAAMoB,OAIDC,EAAkB,SAAC9B,EAAI+B,GAAL,MAAgB,CAC3CtB,KAAMC,yBACNC,QAASV,EAAM+B,iBAAiB,CAAChC,GAAK,CAAEiC,aAAcF,IACtDlB,KAAM,CACFC,cAAe,CACXC,UAAW,CACPC,QAAS,UACTC,MAAO,mCAAF,OAAqCjB,EAArC,gCAA+D+B,GACpEZ,aAAa,OAMhBe,EAAe,SAAClC,EAAImC,GAAL,MAAmB,CAC3C1B,KAAM2B,KACNzB,QAAS,CAAEX,KAAImC,cAGNE,EAAgB,SAACC,EAAMC,GAAP,MAAoB,CAC7C9B,KAAM+B,KACN7B,QAAS,CACL2B,OAAMC,c,yECnDVE,EAAS,IAAI,IALH,CAEd,OAAiB,OACjB,WAAoB,IAMlB,IAAK,YAAkB5C,EAAO6C,IAAIC,WAAY,CAC5C,IA+BIC,EAAY,WAEhB/C,EAAO6C,IAAIG,OACT,OACA,eAnCkB,SAAuBC,EAAGC,EAAGC,GACnD,IAAKF,GAAKC,GAAKD,IAAMC,EACnB,OAAO,EAGT,IAAIE,EAEJ,IAAKA,KAAKH,EACR,GAKIA,EAAEG,KAAOF,EAAEE,GACb,OAAO,EAIX,IAAKA,KAAKF,EACR,IAKKD,EAAEG,GACL,OAAO,EAIX,OAAO,EAOIC,CAAcN,GADrB,YACgC,SAMxBA,EAAY,WAEZH,EAAO,MAPL5C,EAAO6C,IAAIC,gBAYzB9C,EAAO6C,IAAIS,SAAQ,WACjBV,OAIW","file":"js/1.c66100a56110076c8180.js","sourcesContent":["exports = module.exports = require(\"../../node_modules/css-loader/dist/runtime/api.js\")(false);\n// Imports\nexports.i(require(\"-!../../node_modules/css-loader/dist/cjs.js!@redhat-cloud-services/frontend-components/index.css\"), \"\");\n\n// Module\nexports.push([module.id, \"button:focus{outline:none}.buttons button+button{margin-left:15px}.ins-inventory-filters .pf-l-grid__item:not([class*=\\\"ins-\\\"]){margin-top:-4px}.pf-c-breadcrumb .pf-c-breadcrumb__item .ins-c-skeleton{width:75px;width:5.35714rem}.ins-c-inventory__detail--general-info:not(.ins-inventory-detail){background:var(--pf-global--BackgroundColor--100)}svg.ins-m-alert{fill:var(--pf-global--warning-color--100)}.ins-c-inventory__table--remove .pf-c-clipboard-copy{margin:0 3rem}.ins-c-inventory__table--remove .pf-l-split:first-child{margin-bottom:2rem}.ins-c-inventory__detail--breadcrumb-name{width:250px;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}\\n\", \"\"]);\n\n","import { INVENTORY_API_BASE } from './config';\n\nimport instance from '@redhat-cloud-services/frontend-components-utilities/files/esm/interceptors';\nimport { HostsApi } from '@redhat-cloud-services/host-inventory-client';\n\nexport const hosts = new HostsApi(undefined, INVENTORY_API_BASE, instance);\n\nexport async function getAllEntities({ filters = [] }) {\n    const config = {\n        // eslint-disable-next-line camelcase\n        per_page: 100,\n        filters\n    };\n    const data = await getEntities({ page: 1, ...config });\n    let numberOfpages = Math.ceil(Number(data.total) / 100);\n    let results = data.results;\n    if (numberOfpages > 1) {\n        results = [\n            ...results,\n            ...await Promise.all([...Array(numberOfpages)].map((_item, key) => {\n                if (key + 1 !== 1) {\n                    return getEntities({ page: key + 1, ...config }).then(entities => entities.results);\n                }\n            }))\n        ].filter(Boolean);\n    }\n\n    return results\n    .flatMap(item => item)\n    // eslint-disable-next-line no-unused-vars\n    .flatMap(({ facts, ...item }) => item);\n}\n\n// eslint-disable-next-line camelcase\nexport function getEntities({ page, per_page, filters = [] }) {\n    let query = '';\n    const displayName = filters.find(item => item.value === 'display_name');\n    // eslint-disable-next-line camelcase\n    if (per_page || page || displayName) {\n        // eslint-disable-next-line camelcase\n        const params = { per_page, page, display_name: displayName && displayName.filter };\n        query = '?' + Object.keys(params).reduce(\n            (acc, curr) => [...acc, `${curr}=${params[curr]}`], []\n        ).filter(item => item.indexOf('undefined') === -1).join('&');\n    }\n\n    return fetch(`${INVENTORY_API_BASE}/hosts${query}`).then(r => {\n        if (r.ok) {\n            return r.json();\n        }\n\n        throw new Error(`Unexpected response code ${r.status}`);\n    });\n}\n\nexport function getEntity () {\n    return insights.chrome.auth.getUser();\n}\n","import { ACTION_TYPES, CLEAR_NOTIFICATIONS, SELECT_ENTITY, SET_INVENTORY_FILTER, SET_PAGINATION } from './constants';\nimport { getEntity, hosts } from './api';\n\nexport const deleteEntity = (systems, displayName) => ({\n    type: ACTION_TYPES.REMOVE_ENTITY,\n    payload: hosts.apiHostDeleteById(systems),\n    meta: {\n        notifications: {\n            fulfilled: {\n                variant: 'success',\n                title: 'Delete operation finished',\n                description: `${displayName} has been successfully removed.`,\n                dismissable: true\n            }\n        },\n        systems\n    }\n});\n\nexport const setFilter = (filtersList) => ({\n    type: SET_INVENTORY_FILTER,\n    payload: {\n        filtersList\n    }\n});\n\nexport const loadEntity = () => ({\n    type: ACTION_TYPES.GET_ENTITY,\n    payload: getEntity()\n});\n\nexport const clearNotifications = () => {\n    return ({\n        type: CLEAR_NOTIFICATIONS\n    });\n};\n\nexport const editDisplayName = (id, value) => ({\n    type: ACTION_TYPES.UPDATE_DISPLAY_NAME,\n    payload: hosts.apiHostPatchById([id], { display_name: value }), // eslint-disable-line camelcase\n    meta: {\n        notifications: {\n            fulfilled: {\n                variant: 'success',\n                title: `Display name for entity with ID ${id} has been changed to ${value}`,\n                dismissable: true\n            }\n        }\n    }\n});\n\nexport const selectEntity = (id, selected) => ({\n    type: SELECT_ENTITY,\n    payload: { id, selected }\n});\n\nexport const setPagination = (page, perPage) => ({\n    type: SET_PAGINATION,\n    payload: {\n        page, perPage\n    }\n});\n","import api from \"!../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../node_modules/css-loader/dist/cjs.js!../../node_modules/sass-loader/dist/cjs.js!./inventory.scss\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\nif (module.hot) {\n  if (!content.locals || module.hot.invalidate) {\n    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {\n  if (!a && b || a && !b) {\n    return false;\n  }\n\n  var p;\n\n  for (p in a) {\n    if (isNamedExport && p === 'default') {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (a[p] !== b[p]) {\n      return false;\n    }\n  }\n\n  for (p in b) {\n    if (isNamedExport && p === 'default') {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (!a[p]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n    var oldLocals = content.locals;\n\n    module.hot.accept(\n      \"!!../../node_modules/css-loader/dist/cjs.js!../../node_modules/sass-loader/dist/cjs.js!./inventory.scss\",\n      function () {\n        if (!isEqualLocals(oldLocals, content.locals, undefined)) {\n                module.hot.invalidate();\n\n                return;\n              }\n\n              oldLocals = content.locals;\n\n              update(content);\n      }\n    )\n  }\n\n  module.hot.dispose(function() {\n    update();\n  });\n}\n\nexport default content.locals || {};"],"sourceRoot":""}